/**
 * THIS FILE IS AUTOGENERATED BY 'generateServiceClient.ts'.
 * DO NOT EDIT BY HAND.
 */

import { Request } from 'aws-sdk/lib/request'
import { Response } from 'aws-sdk/lib/response'
import { AWSError } from 'aws-sdk/lib/error'
import { Service } from 'aws-sdk/lib/service'
import { ServiceConfigurationOptions } from 'aws-sdk/lib/service'
import { ConfigBase as Config } from 'aws-sdk/lib/config-base'
interface Blob {}
declare class CodeWhispererBearerTokenClient extends Service {
    /**
     * Constructs a service object. This object has one method for each API operation.
     */
    constructor(options?: CodeWhispererBearerTokenClient.Types.ClientConfiguration)
    config: Config & CodeWhispererBearerTokenClient.Types.ClientConfiguration
    /**
     * Creates a pre-signed, S3 write URL for uploading a repository zip archive.
     */
    createArtifactUploadUrl(
        params: CodeWhispererBearerTokenClient.Types.CreateUploadUrlRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse, AWSError>
    /**
     * Creates a pre-signed, S3 write URL for uploading a repository zip archive.
     */
    createArtifactUploadUrl(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse, AWSError>
    /**
     * API to create task assist conversation.
     */
    createTaskAssistConversation(
        params: CodeWhispererBearerTokenClient.Types.CreateTaskAssistConversationRequest,
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.CreateTaskAssistConversationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.CreateTaskAssistConversationResponse, AWSError>
    /**
     * API to create task assist conversation.
     */
    createTaskAssistConversation(
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.CreateTaskAssistConversationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.CreateTaskAssistConversationResponse, AWSError>
    /**
     * Creates a pre-signed, S3 write URL for uploading a repository zip archive.
     */
    createUploadUrl(
        params: CodeWhispererBearerTokenClient.Types.CreateUploadUrlRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse, AWSError>
    /**
     * Creates a pre-signed, S3 write URL for uploading a repository zip archive.
     */
    createUploadUrl(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.CreateUploadUrlResponse, AWSError>
    /**
     * API to delete task assist conversation.
     */
    deleteTaskAssistConversation(
        params: CodeWhispererBearerTokenClient.Types.DeleteTaskAssistConversationRequest,
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.DeleteTaskAssistConversationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.DeleteTaskAssistConversationResponse, AWSError>
    /**
     * API to delete task assist conversation.
     */
    deleteTaskAssistConversation(
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.DeleteTaskAssistConversationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.DeleteTaskAssistConversationResponse, AWSError>
    /**
     * Generate completions based on the provided file context in a paginated response.
     */
    generateCompletions(
        params: CodeWhispererBearerTokenClient.Types.GenerateCompletionsRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GenerateCompletionsResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GenerateCompletionsResponse, AWSError>
    /**
     * Generate completions based on the provided file context in a paginated response.
     */
    generateCompletions(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GenerateCompletionsResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GenerateCompletionsResponse, AWSError>
    /**
     * Gets the metadata of a code analysis job.
     */
    getCodeAnalysis(
        params: CodeWhispererBearerTokenClient.Types.GetCodeAnalysisRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GetCodeAnalysisResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetCodeAnalysisResponse, AWSError>
    /**
     * Gets the metadata of a code analysis job.
     */
    getCodeAnalysis(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GetCodeAnalysisResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetCodeAnalysisResponse, AWSError>
    /**
     * API to get status of task assist code generation.
     */
    getTaskAssistCodeGeneration(
        params: CodeWhispererBearerTokenClient.Types.GetTaskAssistCodeGenerationRequest,
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.GetTaskAssistCodeGenerationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetTaskAssistCodeGenerationResponse, AWSError>
    /**
     * API to get status of task assist code generation.
     */
    getTaskAssistCodeGeneration(
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.GetTaskAssistCodeGenerationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetTaskAssistCodeGenerationResponse, AWSError>
    /**
     * API to get code transformation status.
     */
    getTransformation(
        params: CodeWhispererBearerTokenClient.Types.GetTransformationRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GetTransformationResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetTransformationResponse, AWSError>
    /**
     * API to get code transformation status.
     */
    getTransformation(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GetTransformationResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetTransformationResponse, AWSError>
    /**
     * API to get code transformation status.
     */
    getTransformationPlan(
        params: CodeWhispererBearerTokenClient.Types.GetTransformationPlanRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GetTransformationPlanResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetTransformationPlanResponse, AWSError>
    /**
     * API to get code transformation status.
     */
    getTransformationPlan(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.GetTransformationPlanResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.GetTransformationPlanResponse, AWSError>
    /**
     *
     */
    listAvailableCustomizations(
        params: CodeWhispererBearerTokenClient.Types.ListAvailableCustomizationsRequest,
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.ListAvailableCustomizationsResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.ListAvailableCustomizationsResponse, AWSError>
    /**
     *
     */
    listAvailableCustomizations(
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.ListAvailableCustomizationsResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.ListAvailableCustomizationsResponse, AWSError>
    /**
     * Lists the findings from a particular code analysis job.
     */
    listCodeAnalysisFindings(
        params: CodeWhispererBearerTokenClient.Types.ListCodeAnalysisFindingsRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.ListCodeAnalysisFindingsResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.ListCodeAnalysisFindingsResponse, AWSError>
    /**
     * Lists the findings from a particular code analysis job.
     */
    listCodeAnalysisFindings(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.ListCodeAnalysisFindingsResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.ListCodeAnalysisFindingsResponse, AWSError>
    /**
     * Return configruations for each feature that has been setup for A/B testing.
     */
    listFeatureEvaluations(
        params: CodeWhispererBearerTokenClient.Types.ListFeatureEvaluationsRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.ListFeatureEvaluationsResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.ListFeatureEvaluationsResponse, AWSError>
    /**
     * Return configruations for each feature that has been setup for A/B testing.
     */
    listFeatureEvaluations(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.ListFeatureEvaluationsResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.ListFeatureEvaluationsResponse, AWSError>
    /**
     * API to record telemetry events.
     */
    sendTelemetryEvent(
        params: CodeWhispererBearerTokenClient.Types.SendTelemetryEventRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.SendTelemetryEventResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.SendTelemetryEventResponse, AWSError>
    /**
     * API to record telemetry events.
     */
    sendTelemetryEvent(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.SendTelemetryEventResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.SendTelemetryEventResponse, AWSError>
    /**
     * Starts a code analysis job
     */
    startCodeAnalysis(
        params: CodeWhispererBearerTokenClient.Types.StartCodeAnalysisRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.StartCodeAnalysisResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StartCodeAnalysisResponse, AWSError>
    /**
     * Starts a code analysis job
     */
    startCodeAnalysis(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.StartCodeAnalysisResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StartCodeAnalysisResponse, AWSError>
    /**
     * API to start task assist code generation.
     */
    startTaskAssistCodeGeneration(
        params: CodeWhispererBearerTokenClient.Types.StartTaskAssistCodeGenerationRequest,
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.StartTaskAssistCodeGenerationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StartTaskAssistCodeGenerationResponse, AWSError>
    /**
     * API to start task assist code generation.
     */
    startTaskAssistCodeGeneration(
        callback?: (
            err: AWSError,
            data: CodeWhispererBearerTokenClient.Types.StartTaskAssistCodeGenerationResponse
        ) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StartTaskAssistCodeGenerationResponse, AWSError>
    /**
     * API to start code translation.
     */
    startTransformation(
        params: CodeWhispererBearerTokenClient.Types.StartTransformationRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.StartTransformationResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StartTransformationResponse, AWSError>
    /**
     * API to start code translation.
     */
    startTransformation(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.StartTransformationResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StartTransformationResponse, AWSError>
    /**
     * API to stop code transformation status.
     */
    stopTransformation(
        params: CodeWhispererBearerTokenClient.Types.StopTransformationRequest,
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.StopTransformationResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StopTransformationResponse, AWSError>
    /**
     * API to stop code transformation status.
     */
    stopTransformation(
        callback?: (err: AWSError, data: CodeWhispererBearerTokenClient.Types.StopTransformationResponse) => void
    ): Request<CodeWhispererBearerTokenClient.Types.StopTransformationResponse, AWSError>
}
declare namespace CodeWhispererBearerTokenClient {
    export type ArtifactMap = { [key: string]: UploadId }
    export type ArtifactType = 'SourceCode' | 'BuiltJars' | string
    export interface AssistantResponseMessage {
        messageId?: MessageId
        /**
         * The content of the text message in markdown format.
         */
        content: AssistantResponseMessageContentString
        /**
         * Web References
         */
        supplementaryWebLinks?: SupplementaryWebLinks
        /**
         * Code References
         */
        references?: References
        /**
         * Followup Prompt
         */
        followupPrompt?: FollowupPrompt
    }
    export type AssistantResponseMessageContentString = string
    export type Base64EncodedPaginationToken = string
    export type Boolean = boolean
    export interface ChatAddMessageEvent {
        conversationId: ConversationId
        messageId: MessageId
        userIntent?: UserIntent
        hasCodeSnippet?: Boolean
        programmingLanguage?: ProgrammingLanguage
        activeEditorTotalCharacters?: Integer
        timeToFirstChunkMilliseconds?: Double
        timeBetweenChunks?: timeBetweenChunks
        fullResponselatency?: Double
        requestLength?: Integer
        responseLength?: Integer
    }
    export type ChatHistory = ChatMessage[]
    export interface ChatInteractWithMessageEvent {
        conversationId: ConversationId
        messageId: MessageId
        interactionType?: ChatMessageInteractionType
        interactionTarget?: ChatInteractWithMessageEventInteractionTargetString
        acceptedCharacterCount?: Integer
        acceptedSnippetHasReference?: Boolean
    }
    export type ChatInteractWithMessageEventInteractionTargetString = string
    export interface ChatMessage {
        userInputMessage?: UserInputMessage
        assistantResponseMessage?: AssistantResponseMessage
    }
    export type ChatMessageInteractionType =
        | 'INSERT_AT_CURSOR'
        | 'COPY_SNIPPET'
        | 'COPY'
        | 'CLICK_LINK'
        | 'CLICK_BODY_LINK'
        | 'CLICK_FOLLOW_UP'
        | 'HOVER_REFERENCE'
        | 'UPVOTE'
        | 'DOWNVOTE'
        | string
    export type ChatTriggerType = 'MANUAL' | 'DIAGNOSTIC' | string
    export interface ChatUserModificationEvent {
        conversationId: ConversationId
        messageId: MessageId
        programmingLanguage?: ProgrammingLanguage
        modificationPercentage: Double
    }
    export type CodeAnalysisFindingsSchema = 'codeanalysis/findings/1.0' | string
    export type CodeAnalysisStatus = 'Completed' | 'Pending' | 'Failed' | string
    export interface CodeCoverageEvent {
        customizationArn?: CustomizationArn
        programmingLanguage: ProgrammingLanguage
        acceptedCharacterCount: PrimitiveInteger
        totalCharacterCount: PrimitiveInteger
        timestamp: Timestamp
        unmodifiedAcceptedCharacterCount?: PrimitiveInteger
    }
    export type CodeGenerationId = string
    export interface CodeGenerationStatus {
        status: CodeGenerationWorkflowStatus
        currentStage: CodeGenerationWorkflowStage
    }
    export type CodeGenerationWorkflowStage = 'InitialCodeGeneration' | 'CodeRefinement' | string
    export type CodeGenerationWorkflowStatus = 'InProgress' | 'Complete' | 'Failed' | string
    export interface CodeScanEvent {
        programmingLanguage: ProgrammingLanguage
        codeScanJobId: CodeScanJobId
        timestamp: Timestamp
    }
    export type CodeScanJobId = string
    export interface Completion {
        content: CompletionContentString
        references?: References
        mostRelevantMissingImports?: Imports
    }
    export type CompletionContentString = string
    export type CompletionType = 'BLOCK' | 'LINE' | string
    export type Completions = Completion[]
    export type ContentChecksumType = 'SHA_256' | string
    export type ContextTruncationScheme = 'ANALYSIS' | 'GUMBY' | string
    export type ConversationId = string
    export interface ConversationState {
        /**
         * Unique identifier for the chat conversation stream
         */
        conversationId?: ConversationId
        /**
         * Holds the history of chat messages.
         */
        history?: ChatHistory
        /**
         * Holds the current message being processed or displayed.
         */
        currentMessage: ChatMessage
        /**
         * Trigger Reason for Chat
         */
        chatTriggerType: ChatTriggerType
    }
    export interface CreateTaskAssistConversationRequest {}
    export interface CreateTaskAssistConversationResponse {
        conversationId: ConversationId
    }
    export interface CreateUploadUrlRequest {
        contentMd5?: CreateUploadUrlRequestContentMd5String
        contentChecksum?: CreateUploadUrlRequestContentChecksumString
        contentChecksumType?: ContentChecksumType
        contentLength?: CreateUploadUrlRequestContentLengthLong
        artifactType?: ArtifactType
        uploadIntent?: UploadIntent
        uploadContext?: UploadContext
    }
    export type CreateUploadUrlRequestContentChecksumString = string
    export type CreateUploadUrlRequestContentLengthLong = number
    export type CreateUploadUrlRequestContentMd5String = string
    export interface CreateUploadUrlResponse {
        uploadId: UploadId
        uploadUrl: PreSignedUrl
        kmsKeyArn?: ResourceArn
    }
    export interface CursorState {
        /**
         * Represents a cursor position in a Text Document
         */
        position?: Position
        /**
         * Represents a text selection in a Text Document
         */
        range?: Range
    }
    export interface Customization {
        arn: CustomizationArn
        name?: CustomizationName
        description?: Description
    }
    export type CustomizationArn = string
    export type CustomizationName = string
    export type Customizations = Customization[]
    export interface DeleteTaskAssistConversationRequest {
        conversationId: ConversationId
    }
    export interface DeleteTaskAssistConversationResponse {
        conversationId: ConversationId
    }
    export type Description = string
    export interface Diagnostic {
        /**
         * Diagnostics originating from a TextDocument
         */
        textDocumentDiagnostic?: TextDocumentDiagnostic
        /**
         * Diagnostics originating from a Runtime
         */
        runtimeDiagnostic?: RuntimeDiagnostic
    }
    export type DiagnosticSeverity = 'ERROR' | 'WARNING' | 'INFORMATION' | 'HINT' | string
    export interface Dimension {
        name?: DimensionNameString
        value?: DimensionValueString
    }
    export type DimensionList = Dimension[]
    export type DimensionNameString = string
    export type DimensionValueString = string
    export interface DocumentSymbol {
        /**
         * Name of the Document Symbol
         */
        name: DocumentSymbolNameString
        /**
         * Symbol type - DECLARATION / USAGE
         */
        type: SymbolType
        /**
         * Symbol package / source for FullyQualified names
         */
        source?: DocumentSymbolSourceString
    }
    export type DocumentSymbolNameString = string
    export type DocumentSymbolSourceString = string
    export type DocumentSymbols = DocumentSymbol[]
    export type Double = number
    export interface EditorState {
        /**
         * Represents currently edited file
         */
        document?: TextDocument
        /**
         * Position of the cursor
         */
        cursorState?: CursorState
    }
    export interface EnvState {
        /**
         * The name of the operating system in use
         */
        operatingSystem?: EnvStateOperatingSystemString
        /**
         * The current working directory of the environment
         */
        currentWorkingDirectory?: EnvStateCurrentWorkingDirectoryString
        /**
         * The environment variables set in the current environment
         */
        environmentVariables?: EnvironmentVariables
    }
    export type EnvStateCurrentWorkingDirectoryString = string
    export type EnvStateOperatingSystemString = string
    export interface EnvironmentVariable {
        /**
         * The key of an environment variable
         */
        key?: EnvironmentVariableKeyString
        /**
         * The value of an environment variable
         */
        value?: EnvironmentVariableValueString
    }
    export type EnvironmentVariableKeyString = string
    export type EnvironmentVariableValueString = string
    export type EnvironmentVariables = EnvironmentVariable[]
    export interface FeatureEvaluation {
        feature: FeatureName
        variation: FeatureVariation
        value: FeatureValue
    }
    export type FeatureEvaluationsList = FeatureEvaluation[]
    export type FeatureName = string
    export interface FeatureValue {
        boolValue?: Boolean
        doubleValue?: Double
        longValue?: Long
        stringValue?: FeatureValueStringType
    }
    export type FeatureValueStringType = string
    export type FeatureVariation = string
    export interface FileContext {
        leftFileContent: FileContextLeftFileContentString
        rightFileContent: FileContextRightFileContentString
        filename: FileContextFilenameString
        programmingLanguage: ProgrammingLanguage
    }
    export type FileContextFilenameString = string
    export type FileContextLeftFileContentString = string
    export type FileContextRightFileContentString = string
    export interface FollowupPrompt {
        /**
         * The content of the text message in markdown format.
         */
        content: FollowupPromptContentString
        /**
         * User Intent
         */
        userIntent?: UserIntent
    }
    export type FollowupPromptContentString = string
    export interface GenerateCompletionsRequest {
        fileContext: FileContext
        maxResults?: GenerateCompletionsRequestMaxResultsInteger
        nextToken?: GenerateCompletionsRequestNextTokenString
        referenceTrackerConfiguration?: ReferenceTrackerConfiguration
        supplementalContexts?: SupplementalContextList
        customizationArn?: CustomizationArn
        optOutPreference?: OptOutPreference
        userContext?: UserContext
    }
    export type GenerateCompletionsRequestMaxResultsInteger = number
    export type GenerateCompletionsRequestNextTokenString = string
    export interface GenerateCompletionsResponse {
        completions?: Completions
        nextToken?: SensitiveString
    }
    export interface GetCodeAnalysisRequest {
        jobId: GetCodeAnalysisRequestJobIdString
    }
    export type GetCodeAnalysisRequestJobIdString = string
    export interface GetCodeAnalysisResponse {
        status: CodeAnalysisStatus
        errorMessage?: SensitiveString
    }
    export interface GetTaskAssistCodeGenerationRequest {
        conversationId: ConversationId
        codeGenerationId: CodeGenerationId
    }
    export interface GetTaskAssistCodeGenerationResponse {
        conversationId: ConversationId
        codeGenerationStatus: CodeGenerationStatus
    }
    export interface GetTransformationPlanRequest {
        transformationJobId: TransformationJobId
    }
    export interface GetTransformationPlanResponse {
        transformationPlan: TransformationPlan
    }
    export interface GetTransformationRequest {
        transformationJobId: TransformationJobId
    }
    export interface GetTransformationResponse {
        transformationJob: TransformationJob
    }
    export interface GitState {
        /**
         * The output of the command git status --porcelain=v1 -b
         */
        status?: GitStateStatusString
    }
    export type GitStateStatusString = string
    export type IdeCategory = 'JETBRAINS' | 'VSCODE' | string
    export type IdempotencyToken = string
    export interface Import {
        statement?: ImportStatementString
    }
    export type ImportStatementString = string
    export type Imports = Import[]
    export type Integer = number
    export interface ListAvailableCustomizationsRequest {
        maxResults?: ListAvailableCustomizationsRequestMaxResultsInteger
        nextToken?: Base64EncodedPaginationToken
    }
    export type ListAvailableCustomizationsRequestMaxResultsInteger = number
    export interface ListAvailableCustomizationsResponse {
        customizations: Customizations
        nextToken?: Base64EncodedPaginationToken
    }
    export interface ListCodeAnalysisFindingsRequest {
        jobId: ListCodeAnalysisFindingsRequestJobIdString
        nextToken?: PaginationToken
        codeAnalysisFindingsSchema: CodeAnalysisFindingsSchema
    }
    export type ListCodeAnalysisFindingsRequestJobIdString = string
    export interface ListCodeAnalysisFindingsResponse {
        nextToken?: PaginationToken
        codeAnalysisFindings: SensitiveString
    }
    export interface ListFeatureEvaluationsRequest {
        userContext: UserContext
    }
    export interface ListFeatureEvaluationsResponse {
        featureEvaluations: FeatureEvaluationsList
    }
    export type Long = number
    export type MessageId = string
    export interface MetricData {
        metricName: MetricDataMetricNameString
        metricValue: Double
        timestamp: Timestamp
        product: MetricDataProductString
        dimensions?: DimensionList
    }
    export type MetricDataMetricNameString = string
    export type MetricDataProductString = string
    export type OperatingSystem = 'MAC' | 'WINDOWS' | 'LINUX' | string
    export type OptOutPreference = 'OPTIN' | 'OPTOUT' | string
    export type PaginationToken = string
    export interface Position {
        /**
         * Line position in a document.
         */
        line: Integer
        /**
         * Character offset on a line in a document (zero-based)
         */
        character: Integer
    }
    export type PreSignedUrl = string
    export type PrimitiveInteger = number
    export interface ProgrammingLanguage {
        languageName: ProgrammingLanguageLanguageNameString
    }
    export type ProgrammingLanguageLanguageNameString = string
    export type ProgressUpdates = TransformationProgressUpdate[]
    export interface Range {
        /**
         * The range's start position.
         */
        start: Position
        /**
         * The range's end position.
         */
        end: Position
    }
    export type RecommendationsWithReferencesPreference = 'BLOCK' | 'ALLOW' | string
    export interface Reference {
        /**
         * License name
         */
        licenseName?: ReferenceLicenseNameString
        /**
         * Code Repsitory for the associated reference
         */
        repository?: ReferenceRepositoryString
        /**
         * Respository URL
         */
        url?: ReferenceUrlString
        /**
         * Span / Range for the Reference
         */
        recommendationContentSpan?: Span
    }
    export type ReferenceLicenseNameString = string
    export type ReferenceRepositoryString = string
    export interface ReferenceTrackerConfiguration {
        recommendationsWithReferences: RecommendationsWithReferencesPreference
    }
    export type ReferenceUrlString = string
    export type References = Reference[]
    export type ResourceArn = string
    export interface RuntimeDiagnostic {
        /**
         * A human-readable string describing the source of the diagnostic
         */
        source: RuntimeDiagnosticSourceString
        /**
         * Diagnostic Error type
         */
        severity: DiagnosticSeverity
        /**
         * The diagnostic's message.
         */
        message: RuntimeDiagnosticMessageString
    }
    export type RuntimeDiagnosticMessageString = string
    export type RuntimeDiagnosticSourceString = string
    export interface SendTelemetryEventRequest {
        clientToken?: IdempotencyToken
        telemetryEvent: TelemetryEvent
        optOutPreference?: OptOutPreference
        userContext?: UserContext
    }
    export interface SendTelemetryEventResponse {}
    export type SensitiveString = string
    export type ShellHistory = ShellHistoryEntry[]
    export interface ShellHistoryEntry {
        /**
         * The shell command that was run
         */
        command: ShellHistoryEntryCommandString
        /**
         * The directory the command was ran in
         */
        directory?: ShellHistoryEntryDirectoryString
        /**
         * The exit code of the command after it finished
         */
        exitCode?: Integer
        /**
         * The stdout from the command
         */
        stdout?: ShellHistoryEntryStdoutString
        /**
         * The stderr from the command
         */
        stderr?: ShellHistoryEntryStderrString
    }
    export type ShellHistoryEntryCommandString = string
    export type ShellHistoryEntryDirectoryString = string
    export type ShellHistoryEntryStderrString = string
    export type ShellHistoryEntryStdoutString = string
    export interface ShellState {
        /**
         * The name of the current shell
         */
        shellName: ShellStateShellNameString
        /**
         * The history previous shell commands for the current shell
         */
        shellHistory?: ShellHistory
    }
    export type ShellStateShellNameString = string
    export interface Span {
        start?: SpanStartInteger
        end?: SpanEndInteger
    }
    export type SpanEndInteger = number
    export type SpanStartInteger = number
    export interface StartCodeAnalysisRequest {
        artifacts: ArtifactMap
        programmingLanguage: ProgrammingLanguage
        clientToken?: StartCodeAnalysisRequestClientTokenString
    }
    export type StartCodeAnalysisRequestClientTokenString = string
    export interface StartCodeAnalysisResponse {
        jobId: StartCodeAnalysisResponseJobIdString
        status: CodeAnalysisStatus
        errorMessage?: SensitiveString
    }
    export type StartCodeAnalysisResponseJobIdString = string
    export interface StartTaskAssistCodeGenerationRequest {
        conversationState: ConversationState
        workspaceState: WorkspaceState
    }
    export interface StartTaskAssistCodeGenerationResponse {
        conversationId: ConversationId
        codeGenerationId: CodeGenerationId
    }
    export interface StartTransformationRequest {
        workspaceState: WorkspaceState
        transformationSpec: TransformationSpec
    }
    export interface StartTransformationResponse {
        transformationJobId: TransformationJobId
    }
    export type StepId = string
    export interface StopTransformationRequest {
        transformationJobId: TransformationJobId
    }
    export interface StopTransformationResponse {
        transformationStatus: TransformationStatus
    }
    export type String = string
    export type SuggestionState = 'ACCEPT' | 'REJECT' | 'DISCARD' | 'EMPTY' | string
    export interface SupplementalContext {
        filePath: SupplementalContextFilePathString
        content: SupplementalContextContentString
    }
    export type SupplementalContextContentString = string
    export type SupplementalContextFilePathString = string
    export type SupplementalContextList = SupplementalContext[]
    export interface SupplementaryWebLink {
        /**
         * URL of the web reference link
         */
        url: SupplementaryWebLinkUrlString
        /**
         * Title of the web reference link
         */
        title: SupplementaryWebLinkTitleString
        /**
         * Relevant text snippet from the link
         */
        snippet?: SupplementaryWebLinkSnippetString
    }
    export type SupplementaryWebLinkSnippetString = string
    export type SupplementaryWebLinkTitleString = string
    export type SupplementaryWebLinkUrlString = string
    export type SupplementaryWebLinks = SupplementaryWebLink[]
    export type SymbolType = 'DECLARATION' | 'USAGE' | string
    export interface TaskAssistPlanningUploadContext {
        conversationId: ConversationId
    }
    export interface TelemetryEvent {
        userTriggerDecisionEvent?: UserTriggerDecisionEvent
        codeCoverageEvent?: CodeCoverageEvent
        userModificationEvent?: UserModificationEvent
        codeScanEvent?: CodeScanEvent
        metricData?: MetricData
        chatAddMessageEvent?: ChatAddMessageEvent
        chatInteractWithMessageEvent?: ChatInteractWithMessageEvent
        chatUserModificationEvent?: ChatUserModificationEvent
    }
    export interface TextDocument {
        /**
         * Filepath relative to the root of the workspace
         */
        relativeFilePath: TextDocumentRelativeFilePathString
        /**
         * The text document's language identifier.
         */
        programmingLanguage?: ProgrammingLanguage
        /**
         * Content of the text document
         */
        text?: TextDocumentTextString
        /**
         * DocumentSymbols parsed from a text document
         */
        documentSymbols?: DocumentSymbols
    }
    export interface TextDocumentDiagnostic {
        /**
         * Represents a Text Document associated with Diagnostic
         */
        document: TextDocument
        /**
         * The range at which the message applies.
         */
        range: Range
        /**
         * A human-readable string describing the source of the diagnostic
         */
        source: SensitiveString
        /**
         * Diagnostic Error type
         */
        severity: DiagnosticSeverity
        /**
         * The diagnostic's message.
         */
        message: TextDocumentDiagnosticMessageString
    }
    export type TextDocumentDiagnosticMessageString = string
    export type TextDocumentRelativeFilePathString = string
    export type TextDocumentTextString = string
    export type Timestamp = Date
    export interface TransformationJob {
        jobId?: TransformationJobId
        transformationSpec?: TransformationSpec
        status?: TransformationStatus
        reason?: String
        creationTime?: Timestamp
        startExecutionTime?: Timestamp
        endExecutionTime?: Timestamp
    }
    export type TransformationJobId = string
    export type TransformationLanguage =
        | 'JAVA_8'
        | 'JAVA_11'
        | 'JAVA_17'
        | 'NET_FRAMEWORK_V_3_5'
        | 'NET_FRAMEWORK_V_4_0'
        | 'NET_FRAMEWORK_V_4_5'
        | 'NET_FRAMEWORK_V_4_5_1'
        | 'NET_FRAMEWORK_V_4_5_2'
        | 'NET_FRAMEWORK_V_4_6'
        | 'NET_FRAMEWORK_V_4_6_1'
        | 'NET_FRAMEWORK_V_4_6_2'
        | 'NET_FRAMEWORK_V_4_7'
        | 'NET_FRAMEWORK_V_4_7_1'
        | 'NET_FRAMEWORK_V_4_7_2'
        | 'NET_FRAMEWORK_V_4_8'
        | 'NET_CORE_APP_1_0'
        | 'NET_CORE_APP_1_1'
        | 'NET_CORE_APP_2_0'
        | 'NET_CORE_APP_2_1'
        | 'NET_CORE_APP_2_2'
        | 'NET_CORE_APP_3_0'
        | 'NET_CORE_APP_3_1'
        | 'NET_5_0'
        | 'NET_6_0'
        | 'NET_7_0'
        | 'NET_8_0'
        | string
    export type TransformationOperatingSystemFamily = 'WINDOWS' | 'LINUX' | string
    export interface TransformationPlan {
        transformationSteps: TransformationSteps
    }
    export interface TransformationPlatformConfig {
        operatingSystemFamily?: TransformationOperatingSystemFamily
    }
    export interface TransformationProgressUpdate {
        name: String
        status: TransformationProgressUpdateStatus
        description?: String
        startTime?: Timestamp
        endTime?: Timestamp
    }
    export type TransformationProgressUpdateStatus = 'IN_PROGRESS' | 'COMPLETED' | 'FAILED' | string
    export interface TransformationProjectState {
        language?: TransformationLanguage
        platformConfig?: TransformationPlatformConfig
    }
    export interface TransformationSpec {
        transformationType?: TransformationType
        source?: TransformationProjectState
        target?: TransformationProjectState
    }
    export type TransformationStatus =
        | 'CREATED'
        | 'ACCEPTED'
        | 'REJECTED'
        | 'STARTED'
        | 'PREPARING'
        | 'PREPARED'
        | 'PLANNING'
        | 'PLANNED'
        | 'TRANSFORMING'
        | 'TRANSFORMED'
        | 'FAILED'
        | 'COMPLETED'
        | 'PARTIALLY_COMPLETED'
        | 'STOPPING'
        | 'STOPPED'
        | string
    export interface TransformationStep {
        id: StepId
        name: String
        description: String
        status: TransformationStepStatus
        progressUpdates?: ProgressUpdates
        startTime?: Timestamp
        endTime?: Timestamp
    }
    export type TransformationStepStatus =
        | 'CREATED'
        | 'COMPLETED'
        | 'PARTIALLY_COMPLETED'
        | 'STOPPED'
        | 'FAILED'
        | string
    export type TransformationSteps = TransformationStep[]
    export type TransformationType = 'LANGUAGE_UPGRADE' | string
    export type UUID = string
    export interface UploadContext {
        taskAssistPlanningUploadContext?: TaskAssistPlanningUploadContext
    }
    export type UploadId = string
    export type UploadIntent = 'TRANSFORMATION' | 'TASK_ASSIST_PLANNING' | string
    export interface UserContext {
        ideCategory: IdeCategory
        operatingSystem: OperatingSystem
        product: UserContextProductString
        clientId?: UUID
        ideVersion?: String
    }
    export type UserContextProductString = string
    export interface UserInputMessage {
        /**
         * The content of the chat message.
         */
        content: UserInputMessageContentString
        /**
         * Chat message context associated with the Chat Message
         */
        userInputMessageContext?: UserInputMessageContext
        /**
         * User Intent
         */
        userIntent?: UserIntent
    }
    export type UserInputMessageContentString = string
    export interface UserInputMessageContext {
        /**
         * Editor state chat message context.
         */
        editorState?: EditorState
        /**
         * Shell state chat message context.
         */
        shellState?: ShellState
        /**
         * Git state chat message context.
         */
        gitState?: GitState
        /**
         * Environment state chat messaage context.
         */
        envState?: EnvState
        /**
         * Diagnostic chat message context.
         */
        diagnostic?: Diagnostic
    }
    export type UserIntent =
        | 'SUGGEST_ALTERNATE_IMPLEMENTATION'
        | 'APPLY_COMMON_BEST_PRACTICES'
        | 'IMPROVE_CODE'
        | 'SHOW_EXAMPLES'
        | 'CITE_SOURCES'
        | 'EXPLAIN_LINE_BY_LINE'
        | 'EXPLAIN_CODE_SELECTION'
        | string
    export interface UserModificationEvent {
        sessionId: UUID
        requestId: UUID
        programmingLanguage: ProgrammingLanguage
        modificationPercentage: Double
        customizationArn?: CustomizationArn
        timestamp: Timestamp
    }
    export interface UserTriggerDecisionEvent {
        sessionId: UUID
        requestId: UUID
        customizationArn?: CustomizationArn
        programmingLanguage: ProgrammingLanguage
        completionType: CompletionType
        suggestionState: SuggestionState
        recommendationLatencyMilliseconds: Double
        timestamp: Timestamp
        triggerToResponseLatencyMilliseconds?: Double
        suggestionReferenceCount?: PrimitiveInteger
        generatedLine?: PrimitiveInteger
        numberOfRecommendations?: PrimitiveInteger
    }
    export interface WorkspaceState {
        /**
         * Upload ID representing an Upload using a PreSigned URL
         */
        uploadId: UploadId
        /**
         * Primary programming language of the Workspace
         */
        programmingLanguage: ProgrammingLanguage
        /**
         * Workspace context truncation schemes based on usecase
         */
        contextTruncationScheme?: ContextTruncationScheme
    }
    export type timeBetweenChunks = Double[]
    /**
     * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
     */
    export type apiVersion = '2022-11-11' | 'latest' | string
    export interface ClientApiVersions {
        /**
         * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
         */
        apiVersion?: apiVersion
    }
    export type ClientConfiguration = ServiceConfigurationOptions & ClientApiVersions
    /**
     * Contains interfaces for use with the CodeWhispererBearerTokenClient client.
     */
    export import Types = CodeWhispererBearerTokenClient
}
export = CodeWhispererBearerTokenClient
