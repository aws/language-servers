/**
 * THIS FILE IS AUTOGENERATED BY 'generateServiceClient.ts'.
 * DO NOT EDIT BY HAND.
 */

import { ConfigBase as Config } from 'aws-sdk/lib/config-base'
import { AWSError } from 'aws-sdk/lib/error'
import { Request } from 'aws-sdk/lib/request'
import { Service, ServiceConfigurationOptions } from 'aws-sdk/lib/service'
interface Blob {}
declare class CodeWhispererClient extends Service {
    /**
     * Constructs a service object. This object has one method for each API operation.
     */
    constructor(options?: CodeWhispererClient.Types.ClientConfiguration)
    config: Config & CodeWhispererClient.Types.ClientConfiguration
    /**
     *
     */
    createUploadUrl(
        params: CodeWhispererClient.Types.CreateUploadUrlRequest,
        callback?: (err: AWSError, data: CodeWhispererClient.Types.CreateUploadUrlResponse) => void
    ): Request<CodeWhispererClient.Types.CreateUploadUrlResponse, AWSError>
    /**
     *
     */
    createUploadUrl(
        callback?: (err: AWSError, data: CodeWhispererClient.Types.CreateUploadUrlResponse) => void
    ): Request<CodeWhispererClient.Types.CreateUploadUrlResponse, AWSError>
    /**
     *
     */
    generateCompletions(
        params: CodeWhispererClient.Types.GenerateCompletionsRequest,
        callback?: (err: AWSError, data: CodeWhispererClient.Types.GenerateCompletionsResponse) => void
    ): Request<CodeWhispererClient.Types.GenerateCompletionsResponse, AWSError>
    /**
     *
     */
    generateCompletions(
        callback?: (err: AWSError, data: CodeWhispererClient.Types.GenerateCompletionsResponse) => void
    ): Request<CodeWhispererClient.Types.GenerateCompletionsResponse, AWSError>
    /**
     *
     */
    getCodeAnalysis(
        params: CodeWhispererClient.Types.GetCodeAnalysisRequest,
        callback?: (err: AWSError, data: CodeWhispererClient.Types.GetCodeAnalysisResponse) => void
    ): Request<CodeWhispererClient.Types.GetCodeAnalysisResponse, AWSError>
    /**
     *
     */
    getCodeAnalysis(
        callback?: (err: AWSError, data: CodeWhispererClient.Types.GetCodeAnalysisResponse) => void
    ): Request<CodeWhispererClient.Types.GetCodeAnalysisResponse, AWSError>
    /**
     *
     */
    listCodeAnalysisFindings(
        params: CodeWhispererClient.Types.ListCodeAnalysisFindingsRequest,
        callback?: (err: AWSError, data: CodeWhispererClient.Types.ListCodeAnalysisFindingsResponse) => void
    ): Request<CodeWhispererClient.Types.ListCodeAnalysisFindingsResponse, AWSError>
    /**
     *
     */
    listCodeAnalysisFindings(
        callback?: (err: AWSError, data: CodeWhispererClient.Types.ListCodeAnalysisFindingsResponse) => void
    ): Request<CodeWhispererClient.Types.ListCodeAnalysisFindingsResponse, AWSError>
    /**
     *
     */
    startCodeAnalysis(
        params: CodeWhispererClient.Types.StartCodeAnalysisRequest,
        callback?: (err: AWSError, data: CodeWhispererClient.Types.StartCodeAnalysisResponse) => void
    ): Request<CodeWhispererClient.Types.StartCodeAnalysisResponse, AWSError>
    /**
     *
     */
    startCodeAnalysis(
        callback?: (err: AWSError, data: CodeWhispererClient.Types.StartCodeAnalysisResponse) => void
    ): Request<CodeWhispererClient.Types.StartCodeAnalysisResponse, AWSError>
}
declare namespace CodeWhispererClient {
    export type ArtifactMap = { [key: string]: UploadId }
    export type ArtifactType = 'SourceCode' | 'BuiltJars' | string
    export type CodeAnalysisFindingsSchema = 'codeanalysis/findings/1.0' | string
    export type CodeAnalysisStatus = 'Completed' | 'Pending' | 'Failed' | string
    export interface Completion {
        content: CompletionContentString
        references?: References
        mostRelevantMissingImports?: Imports
    }
    export type CompletionContentString = string
    export type Completions = Completion[]
    export type ContentChecksumType = 'SHA_256' | string
    export interface CreateUploadUrlRequest {
        contentMd5?: CreateUploadUrlRequestContentMd5String
        contentChecksum?: CreateUploadUrlRequestContentChecksumString
        contentChecksumType?: ContentChecksumType
        contentLength?: CreateUploadUrlRequestContentLengthLong
        artifactType?: ArtifactType
        uploadIntent?: UploadIntent
        uploadContext?: UploadContext
    }
    export type CreateUploadUrlRequestContentChecksumString = string
    export type CreateUploadUrlRequestContentLengthLong = number
    export type CreateUploadUrlRequestContentMd5String = string
    export interface CreateUploadUrlResponse {
        uploadId: UploadId
        uploadUrl: PreSignedUrl
        kmsKeyArn?: ResourceArn
    }

    export interface FileContext {
        leftFileContent: FileContextLeftFileContentString
        rightFileContent: FileContextRightFileContentString
        filename: FileContextFilenameString
        programmingLanguage: ProgrammingLanguage
    }
    export type FileContextFilenameString = string
    export type FileContextLeftFileContentString = string
    export type FileContextRightFileContentString = string
    export interface GenerateCompletionsRequest {
        fileContext: FileContext
        maxResults?: GenerateCompletionsRequestMaxResultsInteger
        nextToken?: GenerateCompletionsRequestNextTokenString
        referenceTrackerConfiguration?: ReferenceTrackerConfiguration
    }
    export type GenerateCompletionsRequestMaxResultsInteger = number
    export type GenerateCompletionsRequestNextTokenString = string
    export interface GenerateCompletionsResponse {
        completions?: Completions
        nextToken?: String
    }
    export interface GetCodeAnalysisRequest {
        jobId: GetCodeAnalysisRequestJobIdString
    }
    export type GetCodeAnalysisRequestJobIdString = string
    export interface GetCodeAnalysisResponse {
        status: CodeAnalysisStatus
        errorMessage?: SensitiveString
    }
    export interface Import {
        statement?: ImportStatementString
    }
    export type ImportStatementString = string
    export type Imports = Import[]
    export interface ListCodeAnalysisFindingsRequest {
        jobId: ListCodeAnalysisFindingsRequestJobIdString
        nextToken?: PaginationToken
        codeAnalysisFindingsSchema: CodeAnalysisFindingsSchema
    }
    export type ListCodeAnalysisFindingsRequestJobIdString = string
    export interface ListCodeAnalysisFindingsResponse {
        nextToken?: PaginationToken
        codeAnalysisFindings: SensitiveString
    }
    export type PaginationToken = string
    export type PreSignedUrl = string
    export interface ProgrammingLanguage {
        languageName: ProgrammingLanguageLanguageNameString
    }
    export type ProgrammingLanguageLanguageNameString = string
    export type RecommendationsWithReferencesPreference = 'BLOCK' | 'ALLOW' | string
    export interface Reference {
        licenseName?: ReferenceLicenseNameString
        repository?: ReferenceRepositoryString
        url?: ReferenceUrlString
        recommendationContentSpan?: Span
    }
    export type ReferenceLicenseNameString = string
    export type ReferenceRepositoryString = string
    export interface ReferenceTrackerConfiguration {
        recommendationsWithReferences: RecommendationsWithReferencesPreference
    }
    export type ReferenceUrlString = string
    export type References = Reference[]
    export type ResourceArn = string
    export type SensitiveString = string
    export interface Span {
        start?: SpanStartInteger
        end?: SpanEndInteger
    }
    export type SpanEndInteger = number
    export type SpanStartInteger = number
    export interface StartCodeAnalysisRequest {
        artifacts: ArtifactMap
        programmingLanguage: ProgrammingLanguage
        clientToken?: StartCodeAnalysisRequestClientTokenString
    }
    export type StartCodeAnalysisRequestClientTokenString = string
    export interface StartCodeAnalysisResponse {
        jobId: StartCodeAnalysisResponseJobIdString
        status: CodeAnalysisStatus
        errorMessage?: SensitiveString
    }
    export type StartCodeAnalysisResponseJobIdString = string

    export type String = string
    export interface UploadContext {
        taskAssistPlanningUploadContext?: TaskAssistPlanningUploadContext
    }
    export type UploadId = string
    export type UploadIntent = 'TRANSFORMATION' | 'TASK_ASSIST_PLANNING' | string
    /**
     * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
     */
    export type apiVersion = '2022-06-15' | '2022-11-11' | 'latest' | string
    export interface ClientApiVersions {
        /**
         * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
         */
        apiVersion?: apiVersion
    }
    export type ClientConfiguration = ServiceConfigurationOptions & ClientApiVersions
    /**
     * Contains interfaces for use with the CodeWhispererClient client.
     */
    export import Types = CodeWhispererClient
}
export = CodeWhispererClient
