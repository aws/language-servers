--- a/node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js	2024-05-02 15:43:07
+++ b/node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js	2024-05-02 15:42:46
@@ -12,14 +12,8 @@
 import { parse } from 'yaml';
 import * as path from 'path';
 import { getSchemaFromModeline } from './modelineUtil';
-import Ajv from 'ajv';
 import { getSchemaTitle } from '../utils/schemaUtils';
 const localize = nls.loadMessageBundle();
-const ajv = new Ajv();
-// load JSON Schema 07 def to validate loaded schemas
-// eslint-disable-next-line @typescript-eslint/no-var-requires
-const jsonSchema07 = require('ajv/dist/refs/json-schema-draft-07.json');
-const schema07Validator = ajv.compile(jsonSchema07);
 export var MODIFICATION_ACTIONS;
 (function (MODIFICATION_ACTIONS) {
     MODIFICATION_ACTIONS[MODIFICATION_ACTIONS["delete"] = 0] = "delete";
\ No newline at end of file
@@ -87,13 +81,7 @@
         const resolveErrors = schemaToResolve.errors.slice(0);
         let schema = schemaToResolve.schema;
         const contextService = this.contextService;
-        if (!schema07Validator(schema)) {
-            const errs = [];
-            for (const err of schema07Validator.errors) {
-                errs.push(`${err.instancePath} : ${err.message}`);
-            }
-            resolveErrors.push(`Schema '${getSchemaTitle(schemaToResolve.schema, schemaURL)}' is not valid:\n${errs.join('\n')}`);
-        }
+
         const findSection = (schema, path) => {
             if (!path) {
                 return schema;
\ No newline at end of file
