export interface SignatureInfo {
    label: string
    doc: string
}

export const signatureDictionary: { [key: string]: SignatureInfo } = {
    bit_length: {
        label: 'BIT_LENGTH: String -> Int',
        doc: [
            'Returns the number of bits in the input string.',
            '#### Header',
            '`BIT_LENGTH(str)`',
            '#### Examples',
            '```sql',
            "bit_length('jose');      -- 32",
            '```',
        ].join('\n'),
    },
    char_length: {
        label: 'CHAR_LENGTH: String -> Integer',
        doc: [
            "Counts the number of characters in the specified string, where 'character' is defined as a single unicode code point.",
            '#### Note',
            ' `CHAR_LENGTH` and `CHARACTER_LENGTH` are synonyms.',
            '#### Header',
            '`CHAR_LENGTH(str)`',
            '#### Purpose',
            'Given a `String` value `str`, return the number of characters (code points) in `str`.',
            '#### Examples',
            '```sql',
            "CHAR_LENGTH('');            -- 0",
            "CHAR_LENGTH('abcdefg');     -- 7",
            "CHAR_LENGTH('😁😞😸😸');     -- 4 (non-BMP unicode characters)",
            "CHAR_LENGTH('eࠫ');           -- 2 (because 'eࠫ' is two codepoints: the letter 'e' and combining character U+032B)",
            '```',
        ].join('\n'),
    },
    character_length: {
        label: 'CHARACTER_LENGTH: String -> Integer',
        doc: [
            "Counts the number of characters in the specified string, where 'character' is defined as a single unicode code point.",
            '#### Note',
            ' `CHAR_LENGTH` and `CHARACTER_LENGTH` are synonyms.',
            '#### Header',
            '`CHARACTER_LENGTH(str)`',
            '#### Purpose',
            'Given a `String` value `str`, return the number of characters (code points) in `str`.',
            '#### Examples',
            '```sql',
            "CHARACTER_LENGTH('');            -- 0",
            "CHARACTER_LENGTH('abcdefg');     -- 7",
            "CHARACTER_LENGTH('😁😞😸😸');     -- 4 (non-BMP unicode characters)",
            "CHARACTER_LENGTH('eࠫ');           -- 2 (because 'eࠫ' is two codepoints: the letter 'e' and combining character U+032B)",
            '```',
        ].join('\n'),
    },
    lower: {
        label: 'LOWER: String -> String',
        doc: [
            'Given a string convert all upper case characters to lower case characters.',
            '#### Header',
            '`LOWER(s)`',
            '#### Purpose',
            'Given a string, `s`, alter every upper case character in `s` to lower case. Any non-upper cased characters ',
            'remain unchanged. This operation does rely on the locale specified by the runtime configuration. ',
            "The implementation, currently, relies on Java's ",
            '[String.toLowerCase()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toLowerCase()) documentation.',
            '#### Examples',
            '```sql',
            "LOWER('AbCdEfG!@#$') -- 'abcdefg!@#$'",
            '```',
        ].join('\n'),
    },
    octet_length: {
        label: 'OCTET_LENGTH: String -> Int',
        doc: [
            'Returns the number of bytes in the input string.',
            '#### Header',
            '`OCTET_LENGTH(str)`',
            '#### Examples',
            '```sql',
            "octet_length('jose') -- 4",
            '```',
        ].join('\n'),
    },
    position: {
        label: 'POSITION: (String, String) -> Int',
        doc: [
            'Position determines the first position (counting from 1), if any, at which one string, str1, occurs within another, str2. If str1 is of length zero, then it occurs at position 1 (one) for any value of str2. If str1 does not occur in str2, then zero is returned. The declared type of a <position expression> is exact numeric.',
            '#### Headers',
            '`POSITION(str1 IN str2)`',
            '`POSITION(str1, str2)`',
            '#### Examples',
            '```sql',
            "position('foo' in 'hello')     -- 0",
            "position('' in 'hello')        -- 1",
            "position('h' in 'hello')       -- 1",
            "position('o' in 'hello')       -- 5",
            "position('ll' in 'hello')      -- 3",
            "position('lo' in 'hello')      -- 4",
            "position('hello' in 'hello')   -- 1",
            "position('xx' in 'xxyyxxyy')   -- 1",
            "position('yy' in 'xxyyxxyy')   -- 3",
            '```',
        ].join('\n'),
    },
    substring: {
        label: 'SUBSTRING: (String, Integer, [NNegInteger]) -> String',
        doc: [
            'Given a string, a start index and optionally a length, returns the substring from the start index up to the end of the string, or, up to the length provided.',
            'Where `NNegInteger` is a non-negative integer, i.e., 0 or greater.',
            '#### Header',
            '`SUBSTRING(str, start [, length])`',
            '`SUBSTRING(str FROM start [ FOR length ])`',
            '#### Purpose',
            'Given a string, `str`, a start position, `start` and optionally a length, `length`, extract the characters (code points) starting at index `start` and ending at (`start` + `length`) - 1. If `length` is omitted, then proceed till the end of `str`. The first character of `str` has index 1.',
            '#### Examples',
            '```sql',
            'SUBSTRING("123456789", 0)      -- "123456789"',
            'SUBSTRING("123456789", 1)      -- "123456789"',
            'SUBSTRING("123456789", 2)      -- "23456789"',
            'SUBSTRING("123456789", -4)     -- "123456789"',
            'SUBSTRING("123456789", 0, 999) -- "123456789"',
            'SUBSTRING("123456789", 0, 2)   -- "1"',
            'SUBSTRING("123456789", 1, 999) -- "123456789"',
            'SUBSTRING("123456789", 1, 2)   -- "12"',
            'SUBSTRING("1", 1, 0)           -- ""',
            'SUBSTRING("1", -4, 0)          -- ""',
            'SUBSTRING("1234", 10, 10)      -- ""',
            '```',
        ].join('\n'),
    },
    upper: {
        label: 'UPPER: String -> String',
        doc: [
            'Given a string, convert all lower case characters to upper case characters.',
            '#### Header',
            '`UPPER(str)`',
            '#### Purpose',
            "Given a string, `str`, alter every lower case character in `str` to upper case. Any non-lower case characters remain unchanged. This operation relies on the locale specified by the runtime configuration. The implementation currently relies on Java's [String.toUpperCase()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#toUpperCase()) method.",
            '#### Examples',
            '```sql',
            "UPPER('AbCdEfG!@#$') -- 'ABCDEFG!@#$'",
            '```',
        ].join('\n'),
    },
    abs: {
        label: 'ABS: Numeric -> Numeric',
        doc: [
            'Returns the absolute value of the given number.',
            'Note that `abs(n)` will throw an `EVALUATOR_INTEGER_OVERFLOW` when `n` is both of type `INT` and `n = INT.MIN_VALUE`.',
            '#### Number Types and Results',
            '| Number Type     | Result Type |',
            '|-----------------|-------------|',
            '| INT             | INT         |',
            '| FLOAT           | FLOAT       |',
            '| DECIMAL         | DECIMAL     |',
            '| +inf, nan, -inf | FLOAT       |',
            '#### Examples',
            '```sql',
            'abs(-4) = 4',
            'abs(-4.0) = 4.0',
            'abs(`-4e0`) = 4e0',
            'abs(`-inf`) = `+inf`',
            'abs(`nan`) = `nan`',
            '```',
        ].join('\n'),
    },
    mod: {
        label: 'MOD: (Int, Int) -> Int',
        doc: [
            'MOD operates on two exact numeric arguments with scale 0 (zero) and returns the modulus (remainder) of the first argument divided by the second argument as an exact numeric with scale 0 (zero).',
            'If the second argument is zero, an `EVALUATOR_ARITHMETIC_EXCEPTION` will be thrown.',
            '#### Examples',
            '```sql',
            'mod(1, 1)      -- 0',
            'mod(10, 1)     -- 0',
            'mod(17, 1)     -- 0',
            'mod(-17, 4)    -- -1',
            'mod(17, -4)    -- 1',
            'mod(10, 3)     -- 1',
            'mod(17, 1)     -- 0',
            'mod(17, 3)     -- 2',
            '```',
        ].join('\n'),
    },
}
