// Generated from ./PostgreSQLParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";
import { PostgreSQLParserBase } from "./PostgreSQLParserBase";


// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class PostgreSQLParser extends PostgreSQLParserBase {
    public static readonly Dollar = 1;
    public static readonly OPEN_PAREN = 2;
    public static readonly CLOSE_PAREN = 3;
    public static readonly OPEN_BRACKET = 4;
    public static readonly CLOSE_BRACKET = 5;
    public static readonly COMMA = 6;
    public static readonly SEMI = 7;
    public static readonly COLON = 8;
    public static readonly STAR = 9;
    public static readonly EQUAL = 10;
    public static readonly DOT = 11;
    public static readonly PLUS = 12;
    public static readonly MINUS = 13;
    public static readonly SLASH = 14;
    public static readonly CARET = 15;
    public static readonly LT = 16;
    public static readonly GT = 17;
    public static readonly LESS_LESS = 18;
    public static readonly GREATER_GREATER = 19;
    public static readonly COLON_EQUALS = 20;
    public static readonly LESS_EQUALS = 21;
    public static readonly EQUALS_GREATER = 22;
    public static readonly GREATER_EQUALS = 23;
    public static readonly DOT_DOT = 24;
    public static readonly NOT_EQUALS = 25;
    public static readonly TYPECAST = 26;
    public static readonly PERCENT = 27;
    public static readonly PARAM = 28;
    public static readonly Operator = 29;
    public static readonly JSON = 30;
    public static readonly JSON_ARRAY = 31;
    public static readonly JSON_ARRAYAGG = 32;
    public static readonly JSON_EXISTS = 33;
    public static readonly JSON_OBJECT = 34;
    public static readonly JSON_OBJECTAGG = 35;
    public static readonly JSON_QUERY = 36;
    public static readonly JSON_SCALAR = 37;
    public static readonly JSON_SERIALIZE = 38;
    public static readonly JSON_TABLE = 39;
    public static readonly JSON_VALUE = 40;
    public static readonly MERGE_ACTION = 41;
    public static readonly SYSTEM_USER = 42;
    public static readonly ABSENT = 43;
    public static readonly ASENSITIVE = 44;
    public static readonly ATOMIC = 45;
    public static readonly BREADTH = 46;
    public static readonly COMPRESSION = 47;
    public static readonly CONDITIONAL = 48;
    public static readonly DEPTH = 49;
    public static readonly EMPTY_P = 50;
    public static readonly FINALIZE = 51;
    public static readonly INDENT = 52;
    public static readonly KEEP = 53;
    public static readonly KEYS = 54;
    public static readonly NESTED = 55;
    public static readonly OMIT = 56;
    public static readonly PARAMETER = 57;
    public static readonly PATH = 58;
    public static readonly PLAN = 59;
    public static readonly QUOTES = 60;
    public static readonly SCALAR = 61;
    public static readonly SOURCE = 62;
    public static readonly STRING_P = 63;
    public static readonly TARGET = 64;
    public static readonly UNCONDITIONAL = 65;
    public static readonly PERIOD = 66;
    public static readonly FORMAT_LA = 67;
    public static readonly ALL = 68;
    public static readonly ANALYSE = 69;
    public static readonly ANALYZE = 70;
    public static readonly AND = 71;
    public static readonly ANY = 72;
    public static readonly ARRAY = 73;
    public static readonly AS = 74;
    public static readonly ASC = 75;
    public static readonly ASYMMETRIC = 76;
    public static readonly BOTH = 77;
    public static readonly CASE = 78;
    public static readonly CAST = 79;
    public static readonly CHECK = 80;
    public static readonly COLLATE = 81;
    public static readonly COLUMN = 82;
    public static readonly CONSTRAINT = 83;
    public static readonly CREATE = 84;
    public static readonly CURRENT_CATALOG = 85;
    public static readonly CURRENT_DATE = 86;
    public static readonly CURRENT_ROLE = 87;
    public static readonly CURRENT_TIME = 88;
    public static readonly CURRENT_TIMESTAMP = 89;
    public static readonly CURRENT_USER = 90;
    public static readonly DEFAULT = 91;
    public static readonly DEFERRABLE = 92;
    public static readonly DESC = 93;
    public static readonly DISTINCT = 94;
    public static readonly DO = 95;
    public static readonly ELSE = 96;
    public static readonly EXCEPT = 97;
    public static readonly FALSE_P = 98;
    public static readonly FETCH = 99;
    public static readonly FOR = 100;
    public static readonly FOREIGN = 101;
    public static readonly FROM = 102;
    public static readonly GRANT = 103;
    public static readonly GROUP_P = 104;
    public static readonly HAVING = 105;
    public static readonly IN_P = 106;
    public static readonly INITIALLY = 107;
    public static readonly INTERSECT = 108;
    public static readonly INTO = 109;
    public static readonly LATERAL_P = 110;
    public static readonly LEADING = 111;
    public static readonly LIMIT = 112;
    public static readonly LOCALTIME = 113;
    public static readonly LOCALTIMESTAMP = 114;
    public static readonly NOT = 115;
    public static readonly NULL_P = 116;
    public static readonly OFFSET = 117;
    public static readonly ON = 118;
    public static readonly ONLY = 119;
    public static readonly OR = 120;
    public static readonly ORDER = 121;
    public static readonly PLACING = 122;
    public static readonly PRIMARY = 123;
    public static readonly REFERENCES = 124;
    public static readonly RETURNING = 125;
    public static readonly SELECT = 126;
    public static readonly SESSION_USER = 127;
    public static readonly SOME = 128;
    public static readonly SYMMETRIC = 129;
    public static readonly TABLE = 130;
    public static readonly THEN = 131;
    public static readonly TO = 132;
    public static readonly TRAILING = 133;
    public static readonly TRUE_P = 134;
    public static readonly UNION = 135;
    public static readonly UNIQUE = 136;
    public static readonly USER = 137;
    public static readonly USING = 138;
    public static readonly VARIADIC = 139;
    public static readonly WHEN = 140;
    public static readonly WHERE = 141;
    public static readonly WINDOW = 142;
    public static readonly WITH = 143;
    public static readonly AUTHORIZATION = 144;
    public static readonly BINARY = 145;
    public static readonly COLLATION = 146;
    public static readonly CONCURRENTLY = 147;
    public static readonly CROSS = 148;
    public static readonly CURRENT_SCHEMA = 149;
    public static readonly FREEZE = 150;
    public static readonly FULL = 151;
    public static readonly ILIKE = 152;
    public static readonly INNER_P = 153;
    public static readonly IS = 154;
    public static readonly ISNULL = 155;
    public static readonly JOIN = 156;
    public static readonly LEFT = 157;
    public static readonly LIKE = 158;
    public static readonly NATURAL = 159;
    public static readonly NOTNULL = 160;
    public static readonly OUTER_P = 161;
    public static readonly OVER = 162;
    public static readonly OVERLAPS = 163;
    public static readonly RIGHT = 164;
    public static readonly SIMILAR = 165;
    public static readonly VERBOSE = 166;
    public static readonly ABORT_P = 167;
    public static readonly ABSOLUTE_P = 168;
    public static readonly ACCESS = 169;
    public static readonly ACTION = 170;
    public static readonly ADD_P = 171;
    public static readonly ADMIN = 172;
    public static readonly AFTER = 173;
    public static readonly AGGREGATE = 174;
    public static readonly ALSO = 175;
    public static readonly ALTER = 176;
    public static readonly ALWAYS = 177;
    public static readonly ASSERTION = 178;
    public static readonly ASSIGNMENT = 179;
    public static readonly AT = 180;
    public static readonly ATTRIBUTE = 181;
    public static readonly BACKWARD = 182;
    public static readonly BEFORE = 183;
    public static readonly BEGIN_P = 184;
    public static readonly BY = 185;
    public static readonly CACHE = 186;
    public static readonly CALLED = 187;
    public static readonly CASCADE = 188;
    public static readonly CASCADED = 189;
    public static readonly CATALOG = 190;
    public static readonly CHAIN = 191;
    public static readonly CHARACTERISTICS = 192;
    public static readonly CHECKPOINT = 193;
    public static readonly CLASS = 194;
    public static readonly CLOSE = 195;
    public static readonly CLUSTER = 196;
    public static readonly COMMENT = 197;
    public static readonly COMMENTS = 198;
    public static readonly COMMIT = 199;
    public static readonly COMMITTED = 200;
    public static readonly CONFIGURATION = 201;
    public static readonly CONNECTION = 202;
    public static readonly CONSTRAINTS = 203;
    public static readonly CONTENT_P = 204;
    public static readonly CONTINUE_P = 205;
    public static readonly CONVERSION_P = 206;
    public static readonly COPY = 207;
    public static readonly COST = 208;
    public static readonly CSV = 209;
    public static readonly CURSOR = 210;
    public static readonly CYCLE = 211;
    public static readonly DATA_P = 212;
    public static readonly DATABASE = 213;
    public static readonly DAY_P = 214;
    public static readonly DEALLOCATE = 215;
    public static readonly DECLARE = 216;
    public static readonly DEFAULTS = 217;
    public static readonly DEFERRED = 218;
    public static readonly DEFINER = 219;
    public static readonly DELETE_P = 220;
    public static readonly DELIMITER = 221;
    public static readonly DELIMITERS = 222;
    public static readonly DICTIONARY = 223;
    public static readonly DISABLE_P = 224;
    public static readonly DISCARD = 225;
    public static readonly DOCUMENT_P = 226;
    public static readonly DOMAIN_P = 227;
    public static readonly DOUBLE_P = 228;
    public static readonly DROP = 229;
    public static readonly EACH = 230;
    public static readonly ENABLE_P = 231;
    public static readonly ENCODING = 232;
    public static readonly ENCRYPTED = 233;
    public static readonly ENUM_P = 234;
    public static readonly ESCAPE = 235;
    public static readonly EVENT = 236;
    public static readonly EXCLUDE = 237;
    public static readonly EXCLUDING = 238;
    public static readonly EXCLUSIVE = 239;
    public static readonly EXECUTE = 240;
    public static readonly EXPLAIN = 241;
    public static readonly EXTENSION = 242;
    public static readonly EXTERNAL = 243;
    public static readonly FAMILY = 244;
    public static readonly FIRST_P = 245;
    public static readonly FOLLOWING = 246;
    public static readonly FORCE = 247;
    public static readonly FORWARD = 248;
    public static readonly FUNCTION = 249;
    public static readonly FUNCTIONS = 250;
    public static readonly GLOBAL = 251;
    public static readonly GRANTED = 252;
    public static readonly HANDLER = 253;
    public static readonly HEADER_P = 254;
    public static readonly HOLD = 255;
    public static readonly HOUR_P = 256;
    public static readonly IDENTITY_P = 257;
    public static readonly IF_P = 258;
    public static readonly IMMEDIATE = 259;
    public static readonly IMMUTABLE = 260;
    public static readonly IMPLICIT_P = 261;
    public static readonly INCLUDING = 262;
    public static readonly INCREMENT = 263;
    public static readonly INDEX = 264;
    public static readonly INDEXES = 265;
    public static readonly INHERIT = 266;
    public static readonly INHERITS = 267;
    public static readonly INLINE_P = 268;
    public static readonly INSENSITIVE = 269;
    public static readonly INSERT = 270;
    public static readonly INSTEAD = 271;
    public static readonly INVOKER = 272;
    public static readonly ISOLATION = 273;
    public static readonly KEY = 274;
    public static readonly LABEL = 275;
    public static readonly LANGUAGE = 276;
    public static readonly LARGE_P = 277;
    public static readonly LAST_P = 278;
    public static readonly LEAKPROOF = 279;
    public static readonly LEVEL = 280;
    public static readonly LISTEN = 281;
    public static readonly LOAD = 282;
    public static readonly LOCAL = 283;
    public static readonly LOCATION = 284;
    public static readonly LOCK_P = 285;
    public static readonly MAPPING = 286;
    public static readonly MATCH = 287;
    public static readonly MATCHED = 288;
    public static readonly MATERIALIZED = 289;
    public static readonly MAXVALUE = 290;
    public static readonly MERGE = 291;
    public static readonly MINUTE_P = 292;
    public static readonly MINVALUE = 293;
    public static readonly MODE = 294;
    public static readonly MONTH_P = 295;
    public static readonly MOVE = 296;
    public static readonly NAME_P = 297;
    public static readonly NAMES = 298;
    public static readonly NEXT = 299;
    public static readonly NO = 300;
    public static readonly NOTHING = 301;
    public static readonly NOTIFY = 302;
    public static readonly NOWAIT = 303;
    public static readonly NULLS_P = 304;
    public static readonly OBJECT_P = 305;
    public static readonly OF = 306;
    public static readonly OFF = 307;
    public static readonly OIDS = 308;
    public static readonly OPERATOR = 309;
    public static readonly OPTION = 310;
    public static readonly OPTIONS = 311;
    public static readonly OWNED = 312;
    public static readonly OWNER = 313;
    public static readonly PARSER = 314;
    public static readonly PARTIAL = 315;
    public static readonly PARTITION = 316;
    public static readonly PASSING = 317;
    public static readonly PASSWORD = 318;
    public static readonly PLANS = 319;
    public static readonly PRECEDING = 320;
    public static readonly PREPARE = 321;
    public static readonly PREPARED = 322;
    public static readonly PRESERVE = 323;
    public static readonly PRIOR = 324;
    public static readonly PRIVILEGES = 325;
    public static readonly PROCEDURAL = 326;
    public static readonly PROCEDURE = 327;
    public static readonly PROGRAM = 328;
    public static readonly QUOTE = 329;
    public static readonly RANGE = 330;
    public static readonly READ = 331;
    public static readonly REASSIGN = 332;
    public static readonly RECHECK = 333;
    public static readonly RECURSIVE = 334;
    public static readonly REF = 335;
    public static readonly REFRESH = 336;
    public static readonly REINDEX = 337;
    public static readonly RELATIVE_P = 338;
    public static readonly RELEASE = 339;
    public static readonly RENAME = 340;
    public static readonly REPEATABLE = 341;
    public static readonly REPLACE = 342;
    public static readonly REPLICA = 343;
    public static readonly RESET = 344;
    public static readonly RESTART = 345;
    public static readonly RESTRICT = 346;
    public static readonly RETURNS = 347;
    public static readonly REVOKE = 348;
    public static readonly ROLE = 349;
    public static readonly ROLLBACK = 350;
    public static readonly ROWS = 351;
    public static readonly RULE = 352;
    public static readonly SAVEPOINT = 353;
    public static readonly SCHEMA = 354;
    public static readonly SCROLL = 355;
    public static readonly SEARCH = 356;
    public static readonly SECOND_P = 357;
    public static readonly SECURITY = 358;
    public static readonly SEQUENCE = 359;
    public static readonly SEQUENCES = 360;
    public static readonly SERIALIZABLE = 361;
    public static readonly SERVER = 362;
    public static readonly SESSION = 363;
    public static readonly SET = 364;
    public static readonly SHARE = 365;
    public static readonly SHOW = 366;
    public static readonly SIMPLE = 367;
    public static readonly SNAPSHOT = 368;
    public static readonly STABLE = 369;
    public static readonly STANDALONE_P = 370;
    public static readonly START = 371;
    public static readonly STATEMENT = 372;
    public static readonly STATISTICS = 373;
    public static readonly STDIN = 374;
    public static readonly STDOUT = 375;
    public static readonly STORAGE = 376;
    public static readonly STRICT_P = 377;
    public static readonly STRIP_P = 378;
    public static readonly SYSID = 379;
    public static readonly SYSTEM_P = 380;
    public static readonly TABLES = 381;
    public static readonly TABLESPACE = 382;
    public static readonly TEMP = 383;
    public static readonly TEMPLATE = 384;
    public static readonly TEMPORARY = 385;
    public static readonly TEXT_P = 386;
    public static readonly TRANSACTION = 387;
    public static readonly TRIGGER = 388;
    public static readonly TRUNCATE = 389;
    public static readonly TRUSTED = 390;
    public static readonly TYPE_P = 391;
    public static readonly TYPES_P = 392;
    public static readonly UNBOUNDED = 393;
    public static readonly UNCOMMITTED = 394;
    public static readonly UNENCRYPTED = 395;
    public static readonly UNKNOWN = 396;
    public static readonly UNLISTEN = 397;
    public static readonly UNLOGGED = 398;
    public static readonly UNTIL = 399;
    public static readonly UPDATE = 400;
    public static readonly VACUUM = 401;
    public static readonly VALID = 402;
    public static readonly VALIDATE = 403;
    public static readonly VALIDATOR = 404;
    public static readonly VARYING = 405;
    public static readonly VERSION_P = 406;
    public static readonly VIEW = 407;
    public static readonly VOLATILE = 408;
    public static readonly WHITESPACE_P = 409;
    public static readonly WITHOUT = 410;
    public static readonly WORK = 411;
    public static readonly WRAPPER = 412;
    public static readonly WRITE = 413;
    public static readonly XML_P = 414;
    public static readonly YEAR_P = 415;
    public static readonly YES_P = 416;
    public static readonly ZONE = 417;
    public static readonly BETWEEN = 418;
    public static readonly BIGINT = 419;
    public static readonly BIT = 420;
    public static readonly BOOLEAN_P = 421;
    public static readonly CHAR_P = 422;
    public static readonly CHARACTER = 423;
    public static readonly COALESCE = 424;
    public static readonly DEC = 425;
    public static readonly DECIMAL_P = 426;
    public static readonly EXISTS = 427;
    public static readonly EXTRACT = 428;
    public static readonly FLOAT_P = 429;
    public static readonly GREATEST = 430;
    public static readonly INOUT = 431;
    public static readonly INT_P = 432;
    public static readonly INTEGER = 433;
    public static readonly INTERVAL = 434;
    public static readonly LEAST = 435;
    public static readonly NATIONAL = 436;
    public static readonly NCHAR = 437;
    public static readonly NONE = 438;
    public static readonly NULLIF = 439;
    public static readonly NUMERIC = 440;
    public static readonly OVERLAY = 441;
    public static readonly POSITION = 442;
    public static readonly PRECISION = 443;
    public static readonly REAL = 444;
    public static readonly ROW = 445;
    public static readonly SETOF = 446;
    public static readonly SMALLINT = 447;
    public static readonly SUBSTRING = 448;
    public static readonly TIME = 449;
    public static readonly TIMESTAMP = 450;
    public static readonly TREAT = 451;
    public static readonly TRIM = 452;
    public static readonly VALUES = 453;
    public static readonly VARCHAR = 454;
    public static readonly XMLATTRIBUTES = 455;
    public static readonly XMLCOMMENT = 456;
    public static readonly XMLAGG = 457;
    public static readonly XML_IS_WELL_FORMED = 458;
    public static readonly XML_IS_WELL_FORMED_DOCUMENT = 459;
    public static readonly XML_IS_WELL_FORMED_CONTENT = 460;
    public static readonly XPATH = 461;
    public static readonly XPATH_EXISTS = 462;
    public static readonly XMLCONCAT = 463;
    public static readonly XMLELEMENT = 464;
    public static readonly XMLEXISTS = 465;
    public static readonly XMLFOREST = 466;
    public static readonly XMLPARSE = 467;
    public static readonly XMLPI = 468;
    public static readonly XMLROOT = 469;
    public static readonly XMLSERIALIZE = 470;
    public static readonly CALL = 471;
    public static readonly CURRENT_P = 472;
    public static readonly ATTACH = 473;
    public static readonly DETACH = 474;
    public static readonly EXPRESSION = 475;
    public static readonly GENERATED = 476;
    public static readonly LOGGED = 477;
    public static readonly STORED = 478;
    public static readonly INCLUDE = 479;
    public static readonly ROUTINE = 480;
    public static readonly TRANSFORM = 481;
    public static readonly IMPORT_P = 482;
    public static readonly POLICY = 483;
    public static readonly METHOD = 484;
    public static readonly REFERENCING = 485;
    public static readonly NEW = 486;
    public static readonly OLD = 487;
    public static readonly VALUE_P = 488;
    public static readonly SUBSCRIPTION = 489;
    public static readonly PUBLICATION = 490;
    public static readonly OUT_P = 491;
    public static readonly END_P = 492;
    public static readonly ROUTINES = 493;
    public static readonly SCHEMAS = 494;
    public static readonly PROCEDURES = 495;
    public static readonly INPUT_P = 496;
    public static readonly SUPPORT = 497;
    public static readonly PARALLEL = 498;
    public static readonly SQL_P = 499;
    public static readonly DEPENDS = 500;
    public static readonly OVERRIDING = 501;
    public static readonly CONFLICT = 502;
    public static readonly SKIP_P = 503;
    public static readonly LOCKED = 504;
    public static readonly TIES = 505;
    public static readonly ROLLUP = 506;
    public static readonly CUBE = 507;
    public static readonly GROUPING = 508;
    public static readonly SETS = 509;
    public static readonly TABLESAMPLE = 510;
    public static readonly ORDINALITY = 511;
    public static readonly XMLTABLE = 512;
    public static readonly COLUMNS = 513;
    public static readonly XMLNAMESPACES = 514;
    public static readonly ROWTYPE = 515;
    public static readonly NORMALIZED = 516;
    public static readonly WITHIN = 517;
    public static readonly FILTER = 518;
    public static readonly GROUPS = 519;
    public static readonly OTHERS = 520;
    public static readonly NFC = 521;
    public static readonly NFD = 522;
    public static readonly NFKC = 523;
    public static readonly NFKD = 524;
    public static readonly UESCAPE = 525;
    public static readonly VIEWS = 526;
    public static readonly NORMALIZE = 527;
    public static readonly DUMP = 528;
    public static readonly ERROR = 529;
    public static readonly USE_VARIABLE = 530;
    public static readonly USE_COLUMN = 531;
    public static readonly CONSTANT = 532;
    public static readonly PERFORM = 533;
    public static readonly GET = 534;
    public static readonly DIAGNOSTICS = 535;
    public static readonly STACKED = 536;
    public static readonly ELSIF = 537;
    public static readonly WHILE = 538;
    public static readonly FOREACH = 539;
    public static readonly SLICE = 540;
    public static readonly EXIT = 541;
    public static readonly RETURN = 542;
    public static readonly RAISE = 543;
    public static readonly SQLSTATE = 544;
    public static readonly DEBUG = 545;
    public static readonly INFO = 546;
    public static readonly NOTICE = 547;
    public static readonly WARNING = 548;
    public static readonly EXCEPTION = 549;
    public static readonly ASSERT = 550;
    public static readonly LOOP = 551;
    public static readonly OPEN = 552;
    public static readonly FORMAT = 553;
    public static readonly Identifier = 554;
    public static readonly QuotedIdentifier = 555;
    public static readonly UnterminatedQuotedIdentifier = 556;
    public static readonly InvalidQuotedIdentifier = 557;
    public static readonly InvalidUnterminatedQuotedIdentifier = 558;
    public static readonly UnicodeQuotedIdentifier = 559;
    public static readonly UnterminatedUnicodeQuotedIdentifier = 560;
    public static readonly InvalidUnicodeQuotedIdentifier = 561;
    public static readonly InvalidUnterminatedUnicodeQuotedIdentifier = 562;
    public static readonly StringConstant = 563;
    public static readonly UnterminatedStringConstant = 564;
    public static readonly UnicodeEscapeStringConstant = 565;
    public static readonly UnterminatedUnicodeEscapeStringConstant = 566;
    public static readonly BeginDollarStringConstant = 567;
    public static readonly BinaryStringConstant = 568;
    public static readonly UnterminatedBinaryStringConstant = 569;
    public static readonly InvalidBinaryStringConstant = 570;
    public static readonly InvalidUnterminatedBinaryStringConstant = 571;
    public static readonly HexadecimalStringConstant = 572;
    public static readonly UnterminatedHexadecimalStringConstant = 573;
    public static readonly InvalidHexadecimalStringConstant = 574;
    public static readonly InvalidUnterminatedHexadecimalStringConstant = 575;
    public static readonly Integral = 576;
    public static readonly NumericFail = 577;
    public static readonly Numeric = 578;
    public static readonly PLSQLVARIABLENAME = 579;
    public static readonly PLSQLIDENTIFIER = 580;
    public static readonly Whitespace = 581;
    public static readonly Newline = 582;
    public static readonly LineComment = 583;
    public static readonly BlockComment = 584;
    public static readonly UnterminatedBlockComment = 585;
    public static readonly ErrorCharacter = 586;
    public static readonly EscapeStringConstant = 587;
    public static readonly UnterminatedEscapeStringConstant = 588;
    public static readonly InvalidEscapeStringConstant = 589;
    public static readonly InvalidUnterminatedEscapeStringConstant = 590;
    public static readonly AfterEscapeStringConstantMode_NotContinued = 591;
    public static readonly AfterEscapeStringConstantWithNewlineMode_NotContinued = 592;
    public static readonly DollarText = 593;
    public static readonly EndDollarStringConstant = 594;
    public static readonly MetaCommand = 595;
    public static readonly AfterEscapeStringConstantWithNewlineMode_Continued = 596;
    public static readonly RULE_root = 0;
    public static readonly RULE_stmtblock = 1;
    public static readonly RULE_stmtmulti = 2;
    public static readonly RULE_stmt = 3;
    public static readonly RULE_callstmt = 4;
    public static readonly RULE_createrolestmt = 5;
    public static readonly RULE_with_ = 6;
    public static readonly RULE_optrolelist = 7;
    public static readonly RULE_alteroptrolelist = 8;
    public static readonly RULE_alteroptroleelem = 9;
    public static readonly RULE_createoptroleelem = 10;
    public static readonly RULE_createuserstmt = 11;
    public static readonly RULE_alterrolestmt = 12;
    public static readonly RULE_in_database_ = 13;
    public static readonly RULE_alterrolesetstmt = 14;
    public static readonly RULE_droprolestmt = 15;
    public static readonly RULE_creategroupstmt = 16;
    public static readonly RULE_altergroupstmt = 17;
    public static readonly RULE_add_drop = 18;
    public static readonly RULE_createschemastmt = 19;
    public static readonly RULE_optschemaname = 20;
    public static readonly RULE_optschemaeltlist = 21;
    public static readonly RULE_schema_stmt = 22;
    public static readonly RULE_variablesetstmt = 23;
    public static readonly RULE_set_rest = 24;
    public static readonly RULE_generic_set = 25;
    public static readonly RULE_set_rest_more = 26;
    public static readonly RULE_var_name = 27;
    public static readonly RULE_var_list = 28;
    public static readonly RULE_var_value = 29;
    public static readonly RULE_iso_level = 30;
    public static readonly RULE_boolean_or_string_ = 31;
    public static readonly RULE_zone_value = 32;
    public static readonly RULE_encoding_ = 33;
    public static readonly RULE_nonreservedword_or_sconst = 34;
    public static readonly RULE_variableresetstmt = 35;
    public static readonly RULE_reset_rest = 36;
    public static readonly RULE_generic_reset = 37;
    public static readonly RULE_setresetclause = 38;
    public static readonly RULE_functionsetresetclause = 39;
    public static readonly RULE_variableshowstmt = 40;
    public static readonly RULE_constraintssetstmt = 41;
    public static readonly RULE_constraints_set_list = 42;
    public static readonly RULE_constraints_set_mode = 43;
    public static readonly RULE_checkpointstmt = 44;
    public static readonly RULE_discardstmt = 45;
    public static readonly RULE_altertablestmt = 46;
    public static readonly RULE_alter_table_cmds = 47;
    public static readonly RULE_partition_cmd = 48;
    public static readonly RULE_index_partition_cmd = 49;
    public static readonly RULE_alter_table_cmd = 50;
    public static readonly RULE_alter_column_default = 51;
    public static readonly RULE_drop_behavior_ = 52;
    public static readonly RULE_collate_clause_ = 53;
    public static readonly RULE_alter_using = 54;
    public static readonly RULE_replica_identity = 55;
    public static readonly RULE_reloptions = 56;
    public static readonly RULE_reloptions_ = 57;
    public static readonly RULE_reloption_list = 58;
    public static readonly RULE_reloption_elem = 59;
    public static readonly RULE_alter_identity_column_option_list = 60;
    public static readonly RULE_alter_identity_column_option = 61;
    public static readonly RULE_partitionboundspec = 62;
    public static readonly RULE_hash_partbound_elem = 63;
    public static readonly RULE_hash_partbound = 64;
    public static readonly RULE_altercompositetypestmt = 65;
    public static readonly RULE_alter_type_cmds = 66;
    public static readonly RULE_alter_type_cmd = 67;
    public static readonly RULE_closeportalstmt = 68;
    public static readonly RULE_copystmt = 69;
    public static readonly RULE_copy_from = 70;
    public static readonly RULE_program_ = 71;
    public static readonly RULE_copy_file_name = 72;
    public static readonly RULE_copy_options = 73;
    public static readonly RULE_copy_opt_list = 74;
    public static readonly RULE_copy_opt_item = 75;
    public static readonly RULE_binary_ = 76;
    public static readonly RULE_copy_delimiter = 77;
    public static readonly RULE_using_ = 78;
    public static readonly RULE_copy_generic_opt_list = 79;
    public static readonly RULE_copy_generic_opt_elem = 80;
    public static readonly RULE_copy_generic_opt_arg = 81;
    public static readonly RULE_copy_generic_opt_arg_list = 82;
    public static readonly RULE_copy_generic_opt_arg_list_item = 83;
    public static readonly RULE_createstmt = 84;
    public static readonly RULE_opttemp = 85;
    public static readonly RULE_opttableelementlist = 86;
    public static readonly RULE_opttypedtableelementlist = 87;
    public static readonly RULE_tableelementlist = 88;
    public static readonly RULE_typedtableelementlist = 89;
    public static readonly RULE_tableelement = 90;
    public static readonly RULE_typedtableelement = 91;
    public static readonly RULE_columnDef = 92;
    public static readonly RULE_columnOptions = 93;
    public static readonly RULE_colquallist = 94;
    public static readonly RULE_colconstraint = 95;
    public static readonly RULE_colconstraintelem = 96;
    public static readonly RULE_generated_when = 97;
    public static readonly RULE_constraintattr = 98;
    public static readonly RULE_tablelikeclause = 99;
    public static readonly RULE_tablelikeoptionlist = 100;
    public static readonly RULE_tablelikeoption = 101;
    public static readonly RULE_tableconstraint = 102;
    public static readonly RULE_constraintelem = 103;
    public static readonly RULE_no_inherit_ = 104;
    public static readonly RULE_column_list_ = 105;
    public static readonly RULE_columnlist = 106;
    public static readonly RULE_columnElem = 107;
    public static readonly RULE_c_include_ = 108;
    public static readonly RULE_key_match = 109;
    public static readonly RULE_exclusionconstraintlist = 110;
    public static readonly RULE_exclusionconstraintelem = 111;
    public static readonly RULE_exclusionwhereclause = 112;
    public static readonly RULE_key_actions = 113;
    public static readonly RULE_key_update = 114;
    public static readonly RULE_key_delete = 115;
    public static readonly RULE_key_action = 116;
    public static readonly RULE_optinherit = 117;
    public static readonly RULE_optpartitionspec = 118;
    public static readonly RULE_partitionspec = 119;
    public static readonly RULE_part_params = 120;
    public static readonly RULE_part_elem = 121;
    public static readonly RULE_table_access_method_clause = 122;
    public static readonly RULE_optwith = 123;
    public static readonly RULE_oncommitoption = 124;
    public static readonly RULE_opttablespace = 125;
    public static readonly RULE_optconstablespace = 126;
    public static readonly RULE_existingindex = 127;
    public static readonly RULE_createstatsstmt = 128;
    public static readonly RULE_alterstatsstmt = 129;
    public static readonly RULE_createasstmt = 130;
    public static readonly RULE_create_as_target = 131;
    public static readonly RULE_with_data_ = 132;
    public static readonly RULE_creatematviewstmt = 133;
    public static readonly RULE_create_mv_target = 134;
    public static readonly RULE_optnolog = 135;
    public static readonly RULE_refreshmatviewstmt = 136;
    public static readonly RULE_createseqstmt = 137;
    public static readonly RULE_alterseqstmt = 138;
    public static readonly RULE_optseqoptlist = 139;
    public static readonly RULE_optparenthesizedseqoptlist = 140;
    public static readonly RULE_seqoptlist = 141;
    public static readonly RULE_seqoptelem = 142;
    public static readonly RULE_by_ = 143;
    public static readonly RULE_numericonly = 144;
    public static readonly RULE_numericonly_list = 145;
    public static readonly RULE_createplangstmt = 146;
    public static readonly RULE_trusted_ = 147;
    public static readonly RULE_handler_name = 148;
    public static readonly RULE_inline_handler_ = 149;
    public static readonly RULE_validator_clause = 150;
    public static readonly RULE_validator_ = 151;
    public static readonly RULE_procedural_ = 152;
    public static readonly RULE_createtablespacestmt = 153;
    public static readonly RULE_opttablespaceowner = 154;
    public static readonly RULE_droptablespacestmt = 155;
    public static readonly RULE_createextensionstmt = 156;
    public static readonly RULE_create_extension_opt_list = 157;
    public static readonly RULE_create_extension_opt_item = 158;
    public static readonly RULE_alterextensionstmt = 159;
    public static readonly RULE_alter_extension_opt_list = 160;
    public static readonly RULE_alter_extension_opt_item = 161;
    public static readonly RULE_alterextensioncontentsstmt = 162;
    public static readonly RULE_createfdwstmt = 163;
    public static readonly RULE_fdw_option = 164;
    public static readonly RULE_fdw_options = 165;
    public static readonly RULE_fdw_options_ = 166;
    public static readonly RULE_alterfdwstmt = 167;
    public static readonly RULE_create_generic_options = 168;
    public static readonly RULE_generic_option_list = 169;
    public static readonly RULE_alter_generic_options = 170;
    public static readonly RULE_alter_generic_option_list = 171;
    public static readonly RULE_alter_generic_option_elem = 172;
    public static readonly RULE_generic_option_elem = 173;
    public static readonly RULE_generic_option_name = 174;
    public static readonly RULE_generic_option_arg = 175;
    public static readonly RULE_createforeignserverstmt = 176;
    public static readonly RULE_type_ = 177;
    public static readonly RULE_foreign_server_version = 178;
    public static readonly RULE_foreign_server_version_ = 179;
    public static readonly RULE_alterforeignserverstmt = 180;
    public static readonly RULE_createforeigntablestmt = 181;
    public static readonly RULE_importforeignschemastmt = 182;
    public static readonly RULE_import_qualification_type = 183;
    public static readonly RULE_import_qualification = 184;
    public static readonly RULE_createusermappingstmt = 185;
    public static readonly RULE_auth_ident = 186;
    public static readonly RULE_dropusermappingstmt = 187;
    public static readonly RULE_alterusermappingstmt = 188;
    public static readonly RULE_createpolicystmt = 189;
    public static readonly RULE_alterpolicystmt = 190;
    public static readonly RULE_rowsecurityoptionalexpr = 191;
    public static readonly RULE_rowsecurityoptionalwithcheck = 192;
    public static readonly RULE_rowsecuritydefaulttorole = 193;
    public static readonly RULE_rowsecurityoptionaltorole = 194;
    public static readonly RULE_rowsecuritydefaultpermissive = 195;
    public static readonly RULE_rowsecuritydefaultforcmd = 196;
    public static readonly RULE_row_security_cmd = 197;
    public static readonly RULE_createamstmt = 198;
    public static readonly RULE_am_type = 199;
    public static readonly RULE_createtrigstmt = 200;
    public static readonly RULE_triggeractiontime = 201;
    public static readonly RULE_triggerevents = 202;
    public static readonly RULE_triggeroneevent = 203;
    public static readonly RULE_triggerreferencing = 204;
    public static readonly RULE_triggertransitions = 205;
    public static readonly RULE_triggertransition = 206;
    public static readonly RULE_transitionoldornew = 207;
    public static readonly RULE_transitionrowortable = 208;
    public static readonly RULE_transitionrelname = 209;
    public static readonly RULE_triggerforspec = 210;
    public static readonly RULE_triggerforopteach = 211;
    public static readonly RULE_triggerfortype = 212;
    public static readonly RULE_triggerwhen = 213;
    public static readonly RULE_function_or_procedure = 214;
    public static readonly RULE_triggerfuncargs = 215;
    public static readonly RULE_triggerfuncarg = 216;
    public static readonly RULE_optconstrfromtable = 217;
    public static readonly RULE_constraintattributespec = 218;
    public static readonly RULE_constraintattributeElem = 219;
    public static readonly RULE_createeventtrigstmt = 220;
    public static readonly RULE_event_trigger_when_list = 221;
    public static readonly RULE_event_trigger_when_item = 222;
    public static readonly RULE_event_trigger_value_list = 223;
    public static readonly RULE_altereventtrigstmt = 224;
    public static readonly RULE_enable_trigger = 225;
    public static readonly RULE_createassertionstmt = 226;
    public static readonly RULE_definestmt = 227;
    public static readonly RULE_definition = 228;
    public static readonly RULE_def_list = 229;
    public static readonly RULE_def_elem = 230;
    public static readonly RULE_def_arg = 231;
    public static readonly RULE_old_aggr_definition = 232;
    public static readonly RULE_old_aggr_list = 233;
    public static readonly RULE_old_aggr_elem = 234;
    public static readonly RULE_enum_val_list_ = 235;
    public static readonly RULE_enum_val_list = 236;
    public static readonly RULE_alterenumstmt = 237;
    public static readonly RULE_if_not_exists_ = 238;
    public static readonly RULE_createopclassstmt = 239;
    public static readonly RULE_opclass_item_list = 240;
    public static readonly RULE_opclass_item = 241;
    public static readonly RULE_default_ = 242;
    public static readonly RULE_opfamily_ = 243;
    public static readonly RULE_opclass_purpose = 244;
    public static readonly RULE_recheck_ = 245;
    public static readonly RULE_createopfamilystmt = 246;
    public static readonly RULE_alteropfamilystmt = 247;
    public static readonly RULE_opclass_drop_list = 248;
    public static readonly RULE_opclass_drop = 249;
    public static readonly RULE_dropopclassstmt = 250;
    public static readonly RULE_dropopfamilystmt = 251;
    public static readonly RULE_dropownedstmt = 252;
    public static readonly RULE_reassignownedstmt = 253;
    public static readonly RULE_dropstmt = 254;
    public static readonly RULE_object_type_any_name = 255;
    public static readonly RULE_object_type_name = 256;
    public static readonly RULE_drop_type_name = 257;
    public static readonly RULE_object_type_name_on_any_name = 258;
    public static readonly RULE_any_name_list_ = 259;
    public static readonly RULE_any_name = 260;
    public static readonly RULE_attrs = 261;
    public static readonly RULE_type_name_list = 262;
    public static readonly RULE_truncatestmt = 263;
    public static readonly RULE_restart_seqs_ = 264;
    public static readonly RULE_commentstmt = 265;
    public static readonly RULE_comment_text = 266;
    public static readonly RULE_seclabelstmt = 267;
    public static readonly RULE_provider_ = 268;
    public static readonly RULE_security_label = 269;
    public static readonly RULE_fetchstmt = 270;
    public static readonly RULE_fetch_args = 271;
    public static readonly RULE_from_in = 272;
    public static readonly RULE_from_in_ = 273;
    public static readonly RULE_grantstmt = 274;
    public static readonly RULE_revokestmt = 275;
    public static readonly RULE_privileges = 276;
    public static readonly RULE_privilege_list = 277;
    public static readonly RULE_privilege = 278;
    public static readonly RULE_privilege_target = 279;
    public static readonly RULE_grantee_list = 280;
    public static readonly RULE_grantee = 281;
    public static readonly RULE_grant_grant_option_ = 282;
    public static readonly RULE_grantrolestmt = 283;
    public static readonly RULE_revokerolestmt = 284;
    public static readonly RULE_grant_admin_option_ = 285;
    public static readonly RULE_granted_by_ = 286;
    public static readonly RULE_alterdefaultprivilegesstmt = 287;
    public static readonly RULE_defacloptionlist = 288;
    public static readonly RULE_defacloption = 289;
    public static readonly RULE_defaclaction = 290;
    public static readonly RULE_defacl_privilege_target = 291;
    public static readonly RULE_indexstmt = 292;
    public static readonly RULE_unique_ = 293;
    public static readonly RULE_single_name_ = 294;
    public static readonly RULE_concurrently_ = 295;
    public static readonly RULE_index_name_ = 296;
    public static readonly RULE_access_method_clause = 297;
    public static readonly RULE_index_params = 298;
    public static readonly RULE_index_elem_options = 299;
    public static readonly RULE_index_elem = 300;
    public static readonly RULE_include_ = 301;
    public static readonly RULE_index_including_params = 302;
    public static readonly RULE_collate_ = 303;
    public static readonly RULE_class_ = 304;
    public static readonly RULE_asc_desc_ = 305;
    public static readonly RULE_nulls_order_ = 306;
    public static readonly RULE_createfunctionstmt = 307;
    public static readonly RULE_or_replace_ = 308;
    public static readonly RULE_func_args = 309;
    public static readonly RULE_func_args_list = 310;
    public static readonly RULE_function_with_argtypes_list = 311;
    public static readonly RULE_function_with_argtypes = 312;
    public static readonly RULE_func_args_with_defaults = 313;
    public static readonly RULE_func_args_with_defaults_list = 314;
    public static readonly RULE_func_arg = 315;
    public static readonly RULE_arg_class = 316;
    public static readonly RULE_param_name = 317;
    public static readonly RULE_func_return = 318;
    public static readonly RULE_func_type = 319;
    public static readonly RULE_func_arg_with_default = 320;
    public static readonly RULE_aggr_arg = 321;
    public static readonly RULE_aggr_args = 322;
    public static readonly RULE_aggr_args_list = 323;
    public static readonly RULE_aggregate_with_argtypes = 324;
    public static readonly RULE_aggregate_with_argtypes_list = 325;
    public static readonly RULE_createfunc_opt_list = 326;
    public static readonly RULE_common_func_opt_item = 327;
    public static readonly RULE_createfunc_opt_item = 328;
    public static readonly RULE_func_as = 329;
    public static readonly RULE_transform_type_list = 330;
    public static readonly RULE_definition_ = 331;
    public static readonly RULE_table_func_column = 332;
    public static readonly RULE_table_func_column_list = 333;
    public static readonly RULE_alterfunctionstmt = 334;
    public static readonly RULE_alterfunc_opt_list = 335;
    public static readonly RULE_restrict_ = 336;
    public static readonly RULE_removefuncstmt = 337;
    public static readonly RULE_removeaggrstmt = 338;
    public static readonly RULE_removeoperstmt = 339;
    public static readonly RULE_oper_argtypes = 340;
    public static readonly RULE_any_operator = 341;
    public static readonly RULE_operator_with_argtypes_list = 342;
    public static readonly RULE_operator_with_argtypes = 343;
    public static readonly RULE_dostmt = 344;
    public static readonly RULE_dostmt_opt_list = 345;
    public static readonly RULE_dostmt_opt_item = 346;
    public static readonly RULE_createcaststmt = 347;
    public static readonly RULE_cast_context = 348;
    public static readonly RULE_dropcaststmt = 349;
    public static readonly RULE_if_exists_ = 350;
    public static readonly RULE_createtransformstmt = 351;
    public static readonly RULE_transform_element_list = 352;
    public static readonly RULE_droptransformstmt = 353;
    public static readonly RULE_reindexstmt = 354;
    public static readonly RULE_reindex_target_relation = 355;
    public static readonly RULE_reindex_target_all = 356;
    public static readonly RULE_reindex_option_list = 357;
    public static readonly RULE_altertblspcstmt = 358;
    public static readonly RULE_renamestmt = 359;
    public static readonly RULE_column_ = 360;
    public static readonly RULE_set_data_ = 361;
    public static readonly RULE_alterobjectdependsstmt = 362;
    public static readonly RULE_no_ = 363;
    public static readonly RULE_alterobjectschemastmt = 364;
    public static readonly RULE_alteroperatorstmt = 365;
    public static readonly RULE_operator_def_list = 366;
    public static readonly RULE_operator_def_elem = 367;
    public static readonly RULE_operator_def_arg = 368;
    public static readonly RULE_altertypestmt = 369;
    public static readonly RULE_alterownerstmt = 370;
    public static readonly RULE_createpublicationstmt = 371;
    public static readonly RULE_publication_for_tables_ = 372;
    public static readonly RULE_publication_for_tables = 373;
    public static readonly RULE_alterpublicationstmt = 374;
    public static readonly RULE_createsubscriptionstmt = 375;
    public static readonly RULE_publication_name_list = 376;
    public static readonly RULE_publication_name_item = 377;
    public static readonly RULE_altersubscriptionstmt = 378;
    public static readonly RULE_dropsubscriptionstmt = 379;
    public static readonly RULE_rulestmt = 380;
    public static readonly RULE_ruleactionlist = 381;
    public static readonly RULE_ruleactionmulti = 382;
    public static readonly RULE_ruleactionstmt = 383;
    public static readonly RULE_ruleactionstmtOrEmpty = 384;
    public static readonly RULE_event = 385;
    public static readonly RULE_instead_ = 386;
    public static readonly RULE_notifystmt = 387;
    public static readonly RULE_notify_payload = 388;
    public static readonly RULE_listenstmt = 389;
    public static readonly RULE_unlistenstmt = 390;
    public static readonly RULE_transactionstmt = 391;
    public static readonly RULE_transaction_ = 392;
    public static readonly RULE_transaction_mode_item = 393;
    public static readonly RULE_transaction_mode_list = 394;
    public static readonly RULE_transaction_mode_list_or_empty = 395;
    public static readonly RULE_transaction_chain_ = 396;
    public static readonly RULE_viewstmt = 397;
    public static readonly RULE_check_option_ = 398;
    public static readonly RULE_loadstmt = 399;
    public static readonly RULE_createdbstmt = 400;
    public static readonly RULE_createdb_opt_list = 401;
    public static readonly RULE_createdb_opt_items = 402;
    public static readonly RULE_createdb_opt_item = 403;
    public static readonly RULE_createdb_opt_name = 404;
    public static readonly RULE_equal_ = 405;
    public static readonly RULE_alterdatabasestmt = 406;
    public static readonly RULE_alterdatabasesetstmt = 407;
    public static readonly RULE_dropdbstmt = 408;
    public static readonly RULE_drop_option_list = 409;
    public static readonly RULE_drop_option = 410;
    public static readonly RULE_altercollationstmt = 411;
    public static readonly RULE_altersystemstmt = 412;
    public static readonly RULE_createdomainstmt = 413;
    public static readonly RULE_alterdomainstmt = 414;
    public static readonly RULE_as_ = 415;
    public static readonly RULE_altertsdictionarystmt = 416;
    public static readonly RULE_altertsconfigurationstmt = 417;
    public static readonly RULE_any_with = 418;
    public static readonly RULE_createconversionstmt = 419;
    public static readonly RULE_clusterstmt = 420;
    public static readonly RULE_cluster_index_specification = 421;
    public static readonly RULE_vacuumstmt = 422;
    public static readonly RULE_analyzestmt = 423;
    public static readonly RULE_utility_option_list = 424;
    public static readonly RULE_vac_analyze_option_list = 425;
    public static readonly RULE_analyze_keyword = 426;
    public static readonly RULE_utility_option_elem = 427;
    public static readonly RULE_utility_option_name = 428;
    public static readonly RULE_utility_option_arg = 429;
    public static readonly RULE_vac_analyze_option_elem = 430;
    public static readonly RULE_vac_analyze_option_name = 431;
    public static readonly RULE_vac_analyze_option_arg = 432;
    public static readonly RULE_analyze_ = 433;
    public static readonly RULE_verbose_ = 434;
    public static readonly RULE_full_ = 435;
    public static readonly RULE_freeze_ = 436;
    public static readonly RULE_name_list_ = 437;
    public static readonly RULE_vacuum_relation = 438;
    public static readonly RULE_vacuum_relation_list = 439;
    public static readonly RULE_vacuum_relation_list_ = 440;
    public static readonly RULE_explainstmt = 441;
    public static readonly RULE_explainablestmt = 442;
    public static readonly RULE_explain_option_list = 443;
    public static readonly RULE_explain_option_elem = 444;
    public static readonly RULE_explain_option_name = 445;
    public static readonly RULE_explain_option_arg = 446;
    public static readonly RULE_preparestmt = 447;
    public static readonly RULE_prep_type_clause = 448;
    public static readonly RULE_preparablestmt = 449;
    public static readonly RULE_executestmt = 450;
    public static readonly RULE_execute_param_clause = 451;
    public static readonly RULE_deallocatestmt = 452;
    public static readonly RULE_insertstmt = 453;
    public static readonly RULE_insert_target = 454;
    public static readonly RULE_insert_rest = 455;
    public static readonly RULE_override_kind = 456;
    public static readonly RULE_insert_column_list = 457;
    public static readonly RULE_insert_column_item = 458;
    public static readonly RULE_on_conflict_ = 459;
    public static readonly RULE_conf_expr_ = 460;
    public static readonly RULE_returning_clause = 461;
    public static readonly RULE_mergestmt = 462;
    public static readonly RULE_merge_insert_clause = 463;
    public static readonly RULE_merge_update_clause = 464;
    public static readonly RULE_merge_delete_clause = 465;
    public static readonly RULE_deletestmt = 466;
    public static readonly RULE_using_clause = 467;
    public static readonly RULE_lockstmt = 468;
    public static readonly RULE_lock_ = 469;
    public static readonly RULE_lock_type = 470;
    public static readonly RULE_nowait_ = 471;
    public static readonly RULE_nowait_or_skip_ = 472;
    public static readonly RULE_updatestmt = 473;
    public static readonly RULE_set_clause_list = 474;
    public static readonly RULE_set_clause = 475;
    public static readonly RULE_set_target = 476;
    public static readonly RULE_set_target_list = 477;
    public static readonly RULE_declarecursorstmt = 478;
    public static readonly RULE_cursor_name = 479;
    public static readonly RULE_cursor_options = 480;
    public static readonly RULE_hold_ = 481;
    public static readonly RULE_selectstmt = 482;
    public static readonly RULE_select_with_parens = 483;
    public static readonly RULE_select_no_parens = 484;
    public static readonly RULE_select_clause = 485;
    public static readonly RULE_simple_select_intersect = 486;
    public static readonly RULE_simple_select_pramary = 487;
    public static readonly RULE_with_clause = 488;
    public static readonly RULE_cte_list = 489;
    public static readonly RULE_common_table_expr = 490;
    public static readonly RULE_materialized_ = 491;
    public static readonly RULE_with_clause_ = 492;
    public static readonly RULE_into_clause = 493;
    public static readonly RULE_strict_ = 494;
    public static readonly RULE_opttempTableName = 495;
    public static readonly RULE_table_ = 496;
    public static readonly RULE_all_or_distinct = 497;
    public static readonly RULE_distinct_clause = 498;
    public static readonly RULE_all_clause_ = 499;
    public static readonly RULE_sort_clause_ = 500;
    public static readonly RULE_sort_clause = 501;
    public static readonly RULE_sortby_list = 502;
    public static readonly RULE_sortby = 503;
    public static readonly RULE_select_limit = 504;
    public static readonly RULE_select_limit_ = 505;
    public static readonly RULE_limit_clause = 506;
    public static readonly RULE_offset_clause = 507;
    public static readonly RULE_select_limit_value = 508;
    public static readonly RULE_select_offset_value = 509;
    public static readonly RULE_select_fetch_first_value = 510;
    public static readonly RULE_i_or_f_const = 511;
    public static readonly RULE_row_or_rows = 512;
    public static readonly RULE_first_or_next = 513;
    public static readonly RULE_group_clause = 514;
    public static readonly RULE_group_by_list = 515;
    public static readonly RULE_group_by_item = 516;
    public static readonly RULE_empty_grouping_set = 517;
    public static readonly RULE_rollup_clause = 518;
    public static readonly RULE_cube_clause = 519;
    public static readonly RULE_grouping_sets_clause = 520;
    public static readonly RULE_having_clause = 521;
    public static readonly RULE_for_locking_clause = 522;
    public static readonly RULE_for_locking_clause_ = 523;
    public static readonly RULE_for_locking_items = 524;
    public static readonly RULE_for_locking_item = 525;
    public static readonly RULE_for_locking_strength = 526;
    public static readonly RULE_locked_rels_list = 527;
    public static readonly RULE_values_clause = 528;
    public static readonly RULE_from_clause = 529;
    public static readonly RULE_from_list = 530;
    public static readonly RULE_table_ref = 531;
    public static readonly RULE_alias_clause = 532;
    public static readonly RULE_func_alias_clause = 533;
    public static readonly RULE_join_type = 534;
    public static readonly RULE_join_qual = 535;
    public static readonly RULE_relation_expr = 536;
    public static readonly RULE_relation_expr_list = 537;
    public static readonly RULE_relation_expr_opt_alias = 538;
    public static readonly RULE_tablesample_clause = 539;
    public static readonly RULE_repeatable_clause_ = 540;
    public static readonly RULE_func_table = 541;
    public static readonly RULE_rowsfrom_item = 542;
    public static readonly RULE_rowsfrom_list = 543;
    public static readonly RULE_col_def_list_ = 544;
    public static readonly RULE_ordinality_ = 545;
    public static readonly RULE_where_clause = 546;
    public static readonly RULE_where_or_current_clause = 547;
    public static readonly RULE_opttablefuncelementlist = 548;
    public static readonly RULE_tablefuncelementlist = 549;
    public static readonly RULE_tablefuncelement = 550;
    public static readonly RULE_xmltable = 551;
    public static readonly RULE_xmltable_column_list = 552;
    public static readonly RULE_xmltable_column_el = 553;
    public static readonly RULE_xmltable_column_option_list = 554;
    public static readonly RULE_xmltable_column_option_el = 555;
    public static readonly RULE_xml_namespace_list = 556;
    public static readonly RULE_xml_namespace_el = 557;
    public static readonly RULE_typename = 558;
    public static readonly RULE_opt_array_bounds = 559;
    public static readonly RULE_simpletypename = 560;
    public static readonly RULE_consttypename = 561;
    public static readonly RULE_generictype = 562;
    public static readonly RULE_type_modifiers_ = 563;
    public static readonly RULE_numeric = 564;
    public static readonly RULE_float_ = 565;
    public static readonly RULE_bit = 566;
    public static readonly RULE_constbit = 567;
    public static readonly RULE_bitwithlength = 568;
    public static readonly RULE_bitwithoutlength = 569;
    public static readonly RULE_character = 570;
    public static readonly RULE_constcharacter = 571;
    public static readonly RULE_character_c = 572;
    public static readonly RULE_varying_ = 573;
    public static readonly RULE_constdatetime = 574;
    public static readonly RULE_constinterval = 575;
    public static readonly RULE_timezone_ = 576;
    public static readonly RULE_interval_ = 577;
    public static readonly RULE_interval_second = 578;
    public static readonly RULE_jsonType = 579;
    public static readonly RULE_escape_ = 580;
    public static readonly RULE_a_expr = 581;
    public static readonly RULE_a_expr_qual = 582;
    public static readonly RULE_a_expr_lessless = 583;
    public static readonly RULE_a_expr_or = 584;
    public static readonly RULE_a_expr_and = 585;
    public static readonly RULE_a_expr_between = 586;
    public static readonly RULE_a_expr_in = 587;
    public static readonly RULE_a_expr_unary_not = 588;
    public static readonly RULE_a_expr_isnull = 589;
    public static readonly RULE_a_expr_is_not = 590;
    public static readonly RULE_a_expr_compare = 591;
    public static readonly RULE_a_expr_like = 592;
    public static readonly RULE_a_expr_qual_op = 593;
    public static readonly RULE_a_expr_unary_qualop = 594;
    public static readonly RULE_a_expr_add = 595;
    public static readonly RULE_a_expr_mul = 596;
    public static readonly RULE_a_expr_caret = 597;
    public static readonly RULE_a_expr_unary_sign = 598;
    public static readonly RULE_a_expr_at_time_zone = 599;
    public static readonly RULE_a_expr_collate = 600;
    public static readonly RULE_a_expr_typecast = 601;
    public static readonly RULE_b_expr = 602;
    public static readonly RULE_c_expr = 603;
    public static readonly RULE_plsqlvariablename = 604;
    public static readonly RULE_func_application = 605;
    public static readonly RULE_func_expr = 606;
    public static readonly RULE_func_expr_windowless = 607;
    public static readonly RULE_func_expr_common_subexpr = 608;
    public static readonly RULE_xml_root_version = 609;
    public static readonly RULE_xml_root_standalone_ = 610;
    public static readonly RULE_xml_attributes = 611;
    public static readonly RULE_xml_attribute_list = 612;
    public static readonly RULE_xml_attribute_el = 613;
    public static readonly RULE_document_or_content = 614;
    public static readonly RULE_xml_whitespace_option = 615;
    public static readonly RULE_xmlexists_argument = 616;
    public static readonly RULE_xml_passing_mech = 617;
    public static readonly RULE_within_group_clause = 618;
    public static readonly RULE_filter_clause = 619;
    public static readonly RULE_window_clause = 620;
    public static readonly RULE_window_definition_list = 621;
    public static readonly RULE_window_definition = 622;
    public static readonly RULE_over_clause = 623;
    public static readonly RULE_window_specification = 624;
    public static readonly RULE_existing_window_name_ = 625;
    public static readonly RULE_partition_clause_ = 626;
    public static readonly RULE_frame_clause_ = 627;
    public static readonly RULE_frame_extent = 628;
    public static readonly RULE_frame_bound = 629;
    public static readonly RULE_window_exclusion_clause_ = 630;
    public static readonly RULE_row = 631;
    public static readonly RULE_explicit_row = 632;
    public static readonly RULE_implicit_row = 633;
    public static readonly RULE_sub_type = 634;
    public static readonly RULE_all_op = 635;
    public static readonly RULE_mathop = 636;
    public static readonly RULE_qual_op = 637;
    public static readonly RULE_qual_all_op = 638;
    public static readonly RULE_subquery_Op = 639;
    public static readonly RULE_expr_list = 640;
    public static readonly RULE_func_arg_list = 641;
    public static readonly RULE_func_arg_expr = 642;
    public static readonly RULE_type_list = 643;
    public static readonly RULE_array_expr = 644;
    public static readonly RULE_array_expr_list = 645;
    public static readonly RULE_extract_list = 646;
    public static readonly RULE_extract_arg = 647;
    public static readonly RULE_unicode_normal_form = 648;
    public static readonly RULE_overlay_list = 649;
    public static readonly RULE_position_list = 650;
    public static readonly RULE_substr_list = 651;
    public static readonly RULE_trim_list = 652;
    public static readonly RULE_in_expr = 653;
    public static readonly RULE_case_expr = 654;
    public static readonly RULE_when_clause_list = 655;
    public static readonly RULE_when_clause = 656;
    public static readonly RULE_case_default = 657;
    public static readonly RULE_case_arg = 658;
    public static readonly RULE_columnref = 659;
    public static readonly RULE_indirection_el = 660;
    public static readonly RULE_slice_bound_ = 661;
    public static readonly RULE_indirection = 662;
    public static readonly RULE_opt_indirection = 663;
    public static readonly RULE_json_passing_clause = 664;
    public static readonly RULE_json_arguments = 665;
    public static readonly RULE_json_argument = 666;
    public static readonly RULE_json_wrapper_behavior = 667;
    public static readonly RULE_json_behavior = 668;
    public static readonly RULE_json_behavior_type = 669;
    public static readonly RULE_json_behavior_clause = 670;
    public static readonly RULE_json_on_error_clause = 671;
    public static readonly RULE_json_value_expr = 672;
    public static readonly RULE_json_format_clause = 673;
    public static readonly RULE_json_quotes_clause = 674;
    public static readonly RULE_json_returning_clause = 675;
    public static readonly RULE_json_predicate_type_constraint = 676;
    public static readonly RULE_json_key_uniqueness_constraint = 677;
    public static readonly RULE_json_name_and_value_list = 678;
    public static readonly RULE_json_name_and_value = 679;
    public static readonly RULE_json_object_constructor_null_clause = 680;
    public static readonly RULE_json_array_constructor_null_clause = 681;
    public static readonly RULE_json_value_expr_list = 682;
    public static readonly RULE_json_aggregate_func = 683;
    public static readonly RULE_json_array_aggregate_order_by_clause = 684;
    public static readonly RULE_target_list_ = 685;
    public static readonly RULE_target_list = 686;
    public static readonly RULE_target_el = 687;
    public static readonly RULE_qualified_name_list = 688;
    public static readonly RULE_qualified_name = 689;
    public static readonly RULE_name_list = 690;
    public static readonly RULE_name = 691;
    public static readonly RULE_attr_name = 692;
    public static readonly RULE_file_name = 693;
    public static readonly RULE_func_name = 694;
    public static readonly RULE_aexprconst = 695;
    public static readonly RULE_xconst = 696;
    public static readonly RULE_bconst = 697;
    public static readonly RULE_fconst = 698;
    public static readonly RULE_iconst = 699;
    public static readonly RULE_sconst = 700;
    public static readonly RULE_anysconst = 701;
    public static readonly RULE_uescape_ = 702;
    public static readonly RULE_signediconst = 703;
    public static readonly RULE_roleid = 704;
    public static readonly RULE_rolespec = 705;
    public static readonly RULE_role_list = 706;
    public static readonly RULE_colid = 707;
    public static readonly RULE_type_function_name = 708;
    public static readonly RULE_nonreservedword = 709;
    public static readonly RULE_colLabel = 710;
    public static readonly RULE_bareColLabel = 711;
    public static readonly RULE_unreserved_keyword = 712;
    public static readonly RULE_col_name_keyword = 713;
    public static readonly RULE_type_func_name_keyword = 714;
    public static readonly RULE_reserved_keyword = 715;
    public static readonly RULE_bare_label_keyword = 716;
    public static readonly RULE_any_identifier = 717;
    public static readonly RULE_identifier = 718;

    public static readonly literalNames = [
        null, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
        "'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", 
        "'>>'", "':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", 
        "'%'", null, null, "'JSON'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", 
        "'JSON_EXISTS'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", "'JSON_QUERY'", 
        "'JSON_SCALAR'", "'JSON_SERIALIZE'", "'JSON_TABLE'", "'JSON_VALUE'", 
        "'MERGE_ACTION'", "'SYSTEM_USER'", "'ABSENT'", "'ASENSITIVE'", "'ATOMIC'", 
        "'BREATH'", "'COMPRESSION'", "'CONDITIONAL'", "'DEPTH'", "'EMPTY'", 
        "'FINALIZE'", "'INDENT'", "'KEEP'", "'KEYS'", "'NESTED'", "'OMIT'", 
        "'PARAMETER'", "'PATH'", "'PLAN'", "'QUOTES'", "'SCALAR'", "'SOURCE'", 
        "'STRING'", "'TARGET'", "'UNCONDITIONAL'", "'PERIOD'", "'FORMAT_LA'", 
        "'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
        "'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", 
        "'COLLATE'", "'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", 
        "'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
        "'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", "'DESC'", "'DISTINCT'", 
        "'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", 
        "'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", "'IN'", "'INITIALLY'", 
        "'INTERSECT'", "'INTO'", "'LATERAL'", "'LEADING'", "'LIMIT'", "'LOCALTIME'", 
        "'LOCALTIMESTAMP'", "'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", 
        "'OR'", "'ORDER'", "'PLACING'", "'PRIMARY'", "'REFERENCES'", "'RETURNING'", 
        "'SELECT'", "'SESSION_USER'", "'SOME'", "'SYMMETRIC'", "'TABLE'", 
        "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", "'UNION'", "'UNIQUE'", 
        "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", "'WINDOW'", 
        "'WITH'", "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
        "'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", 
        "'INNER'", "'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", 
        "'NOTNULL'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", 
        "'VERBOSE'", "'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", 
        "'ADMIN'", "'AFTER'", "'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", 
        "'ASSERTION'", "'ASSIGNMENT'", "'AT'", "'ATTRIBUTE'", "'BACKWARD'", 
        "'BEFORE'", "'BEGIN'", "'BY'", "'CACHE'", "'CALLED'", "'CASCADE'", 
        "'CASCADED'", "'CATALOG'", "'CHAIN'", "'CHARACTERISTICS'", "'CHECKPOINT'", 
        "'CLASS'", "'CLOSE'", "'CLUSTER'", "'COMMENT'", "'COMMENTS'", "'COMMIT'", 
        "'COMMITTED'", "'CONFIGURATION'", "'CONNECTION'", "'CONSTRAINTS'", 
        "'CONTENT'", "'CONTINUE'", "'CONVERSION'", "'COPY'", "'COST'", "'CSV'", 
        "'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", "'DAY'", "'DEALLOCATE'", 
        "'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", "'DELETE'", 
        "'DELIMITER'", "'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", "'DISCARD'", 
        "'DOCUMENT'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", "'ENABLE'", 
        "'ENCODING'", "'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", "'EXCLUDE'", 
        "'EXCLUDING'", "'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", 
        "'EXTERNAL'", "'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", 
        "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", 
        "'HEADER'", "'HOLD'", "'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", 
        "'IMMUTABLE'", "'IMPLICIT'", "'INCLUDING'", "'INCREMENT'", "'INDEX'", 
        "'INDEXES'", "'INHERIT'", "'INHERITS'", "'INLINE'", "'INSENSITIVE'", 
        "'INSERT'", "'INSTEAD'", "'INVOKER'", "'ISOLATION'", "'KEY'", "'LABEL'", 
        "'LANGUAGE'", "'LARGE'", "'LAST'", "'LEAKPROOF'", "'LEVEL'", "'LISTEN'", 
        "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", "'MATCH'", 
        "'MATCHED'", "'MATERIALIZED'", "'MAXVALUE'", "'MERGE'", "'MINUTE'", 
        "'MINVALUE'", "'MODE'", "'MONTH'", "'MOVE'", "'NAME'", "'NAMES'", 
        "'NEXT'", "'NO'", "'NOTHING'", "'NOTIFY'", "'NOWAIT'", "'NULLS'", 
        "'OBJECT'", "'OF'", "'OFF'", "'OIDS'", "'OPERATOR'", "'OPTION'", 
        "'OPTIONS'", "'OWNED'", "'OWNER'", "'PARSER'", "'PARTIAL'", "'PARTITION'", 
        "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", "'PREPARE'", 
        "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", "'PROCEDURAL'", 
        "'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", "'READ'", "'REASSIGN'", 
        "'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", "'RELATIVE'", 
        "'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'REPLICA'", 
        "'RESET'", "'RESTART'", "'RESTRICT'", "'RETURNS'", "'REVOKE'", "'ROLE'", 
        "'ROLLBACK'", "'ROWS'", "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", 
        "'SEARCH'", "'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", 
        "'SERIALIZABLE'", "'SERVER'", "'SESSION'", "'SET'", "'SHARE'", "'SHOW'", 
        "'SIMPLE'", "'SNAPSHOT'", "'STABLE'", "'STANDALONE'", "'START'", 
        "'STATEMENT'", "'STATISTICS'", "'STDIN'", "'STDOUT'", "'STORAGE'", 
        "'STRICT'", "'STRIP'", "'SYSID'", "'SYSTEM'", "'TABLES'", "'TABLESPACE'", 
        "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", "'TEXT'", "'TRANSACTION'", 
        "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", "'TYPES'", "'UNBOUNDED'", 
        "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", "'UNLISTEN'", "'UNLOGGED'", 
        "'UNTIL'", "'UPDATE'", "'VACUUM'", "'VALID'", "'VALIDATE'", "'VALIDATOR'", 
        "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", "'WHITESPACE'", 
        "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", "'YEAR'", 
        "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", 
        "'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", 
        "'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", 
        "'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
        "'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", 
        "'ROW'", "'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", 
        "'TREAT'", "'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", 
        "'XMLCOMMENT'", "'XMLAGG'", "'XML_IS_WELL_FORMED'", "'XML_IS_WELL_FORMED_DOCUMENT'", 
        "'XML_IS_WELL_FORMED_CONTENT'", "'XPATH'", "'XPATH_EXISTS'", "'XMLCONCAT'", 
        "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", 
        "'XMLROOT'", "'XMLSERIALIZE'", "'CALL'", "'CURRENT'", "'ATTACH'", 
        "'DETACH'", "'EXPRESSION'", "'GENERATED'", "'LOGGED'", "'STORED'", 
        "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", "'POLICY'", 
        "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", "'VALUE'", "'SUBSCRIPTION'", 
        "'PUBLICATION'", "'OUT'", "'END'", "'ROUTINES'", "'SCHEMAS'", "'PROCEDURES'", 
        "'INPUT'", "'SUPPORT'", "'PARALLEL'", "'SQL'", "'DEPENDS'", "'OVERRIDING'", 
        "'CONFLICT'", "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", "'CUBE'", 
        "'GROUPING'", "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", 
        "'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", 
        "'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", 
        "'NFKD'", "'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'ERROR'", 
        "'USE_VARIABLE'", "'USE_COLUMN'", "'CONSTANT'", "'PERFORM'", "'GET'", 
        "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", "'WHILE'", "'FOREACH'", 
        "'SLICE'", "'EXIT'", "'RETURN'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", 
        "'INFO'", "'NOTICE'", "'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", 
        "'OPEN'", "'FORMAT'", null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, "'\\'", "'''"
    ];

    public static readonly symbolicNames = [
        null, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
        "COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", 
        "SLASH", "CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", 
        "LESS_EQUALS", "EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", 
        "TYPECAST", "PERCENT", "PARAM", "Operator", "JSON", "JSON_ARRAY", 
        "JSON_ARRAYAGG", "JSON_EXISTS", "JSON_OBJECT", "JSON_OBJECTAGG", 
        "JSON_QUERY", "JSON_SCALAR", "JSON_SERIALIZE", "JSON_TABLE", "JSON_VALUE", 
        "MERGE_ACTION", "SYSTEM_USER", "ABSENT", "ASENSITIVE", "ATOMIC", 
        "BREADTH", "COMPRESSION", "CONDITIONAL", "DEPTH", "EMPTY_P", "FINALIZE", 
        "INDENT", "KEEP", "KEYS", "NESTED", "OMIT", "PARAMETER", "PATH", 
        "PLAN", "QUOTES", "SCALAR", "SOURCE", "STRING_P", "TARGET", "UNCONDITIONAL", 
        "PERIOD", "FORMAT_LA", "ALL", "ANALYSE", "ANALYZE", "AND", "ANY", 
        "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", 
        "COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", 
        "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
        "CURRENT_USER", "DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", 
        "ELSE", "EXCEPT", "FALSE_P", "FETCH", "FOR", "FOREIGN", "FROM", 
        "GRANT", "GROUP_P", "HAVING", "IN_P", "INITIALLY", "INTERSECT", 
        "INTO", "LATERAL_P", "LEADING", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", 
        "NOT", "NULL_P", "OFFSET", "ON", "ONLY", "OR", "ORDER", "PLACING", 
        "PRIMARY", "REFERENCES", "RETURNING", "SELECT", "SESSION_USER", 
        "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", "TRUE_P", 
        "UNION", "UNIQUE", "USER", "USING", "VARIADIC", "WHEN", "WHERE", 
        "WINDOW", "WITH", "AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", 
        "CROSS", "CURRENT_SCHEMA", "FREEZE", "FULL", "ILIKE", "INNER_P", 
        "IS", "ISNULL", "JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", "OUTER_P", 
        "OVER", "OVERLAPS", "RIGHT", "SIMILAR", "VERBOSE", "ABORT_P", "ABSOLUTE_P", 
        "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALSO", 
        "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", "ATTRIBUTE", 
        "BACKWARD", "BEFORE", "BEGIN_P", "BY", "CACHE", "CALLED", "CASCADE", 
        "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", "CHECKPOINT", 
        "CLASS", "CLOSE", "CLUSTER", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", 
        "CONFIGURATION", "CONNECTION", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", 
        "CONVERSION_P", "COPY", "COST", "CSV", "CURSOR", "CYCLE", "DATA_P", 
        "DATABASE", "DAY_P", "DEALLOCATE", "DECLARE", "DEFAULTS", "DEFERRED", 
        "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DICTIONARY", 
        "DISABLE_P", "DISCARD", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", 
        "EACH", "ENABLE_P", "ENCODING", "ENCRYPTED", "ENUM_P", "ESCAPE", 
        "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXPLAIN", 
        "EXTENSION", "EXTERNAL", "FAMILY", "FIRST_P", "FOLLOWING", "FORCE", 
        "FORWARD", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANTED", "HANDLER", 
        "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "IMMEDIATE", 
        "IMMUTABLE", "IMPLICIT_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", 
        "INHERIT", "INHERITS", "INLINE_P", "INSENSITIVE", "INSERT", "INSTEAD", 
        "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", 
        "LEAKPROOF", "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", 
        "MAPPING", "MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", 
        "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P", "NAMES", 
        "NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", "NULLS_P", "OBJECT_P", 
        "OF", "OFF", "OIDS", "OPERATOR", "OPTION", "OPTIONS", "OWNED", "OWNER", 
        "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", 
        "PRECEDING", "PREPARE", "PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", 
        "PROCEDURAL", "PROCEDURE", "PROGRAM", "QUOTE", "RANGE", "READ", 
        "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFRESH", "REINDEX", 
        "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", 
        "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", "ROLE", "ROLLBACK", 
        "ROWS", "RULE", "SAVEPOINT", "SCHEMA", "SCROLL", "SEARCH", "SECOND_P", 
        "SECURITY", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", 
        "SET", "SHARE", "SHOW", "SIMPLE", "SNAPSHOT", "STABLE", "STANDALONE_P", 
        "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", 
        "STRICT_P", "STRIP_P", "SYSID", "SYSTEM_P", "TABLES", "TABLESPACE", 
        "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "TRANSACTION", "TRIGGER", 
        "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", 
        "UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", 
        "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VARYING", "VERSION_P", 
        "VIEW", "VOLATILE", "WHITESPACE_P", "WITHOUT", "WORK", "WRAPPER", 
        "WRITE", "XML_P", "YEAR_P", "YES_P", "ZONE", "BETWEEN", "BIGINT", 
        "BIT", "BOOLEAN_P", "CHAR_P", "CHARACTER", "COALESCE", "DEC", "DECIMAL_P", 
        "EXISTS", "EXTRACT", "FLOAT_P", "GREATEST", "INOUT", "INT_P", "INTEGER", 
        "INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", "NULLIF", "NUMERIC", 
        "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", "SETOF", "SMALLINT", 
        "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", "VALUES", "VARCHAR", 
        "XMLATTRIBUTES", "XMLCOMMENT", "XMLAGG", "XML_IS_WELL_FORMED", "XML_IS_WELL_FORMED_DOCUMENT", 
        "XML_IS_WELL_FORMED_CONTENT", "XPATH", "XPATH_EXISTS", "XMLCONCAT", 
        "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
        "XMLSERIALIZE", "CALL", "CURRENT_P", "ATTACH", "DETACH", "EXPRESSION", 
        "GENERATED", "LOGGED", "STORED", "INCLUDE", "ROUTINE", "TRANSFORM", 
        "IMPORT_P", "POLICY", "METHOD", "REFERENCING", "NEW", "OLD", "VALUE_P", 
        "SUBSCRIPTION", "PUBLICATION", "OUT_P", "END_P", "ROUTINES", "SCHEMAS", 
        "PROCEDURES", "INPUT_P", "SUPPORT", "PARALLEL", "SQL_P", "DEPENDS", 
        "OVERRIDING", "CONFLICT", "SKIP_P", "LOCKED", "TIES", "ROLLUP", 
        "CUBE", "GROUPING", "SETS", "TABLESAMPLE", "ORDINALITY", "XMLTABLE", 
        "COLUMNS", "XMLNAMESPACES", "ROWTYPE", "NORMALIZED", "WITHIN", "FILTER", 
        "GROUPS", "OTHERS", "NFC", "NFD", "NFKC", "NFKD", "UESCAPE", "VIEWS", 
        "NORMALIZE", "DUMP", "ERROR", "USE_VARIABLE", "USE_COLUMN", "CONSTANT", 
        "PERFORM", "GET", "DIAGNOSTICS", "STACKED", "ELSIF", "WHILE", "FOREACH", 
        "SLICE", "EXIT", "RETURN", "RAISE", "SQLSTATE", "DEBUG", "INFO", 
        "NOTICE", "WARNING", "EXCEPTION", "ASSERT", "LOOP", "OPEN", "FORMAT", 
        "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
        "InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", 
        "UnicodeQuotedIdentifier", "UnterminatedUnicodeQuotedIdentifier", 
        "InvalidUnicodeQuotedIdentifier", "InvalidUnterminatedUnicodeQuotedIdentifier", 
        "StringConstant", "UnterminatedStringConstant", "UnicodeEscapeStringConstant", 
        "UnterminatedUnicodeEscapeStringConstant", "BeginDollarStringConstant", 
        "BinaryStringConstant", "UnterminatedBinaryStringConstant", "InvalidBinaryStringConstant", 
        "InvalidUnterminatedBinaryStringConstant", "HexadecimalStringConstant", 
        "UnterminatedHexadecimalStringConstant", "InvalidHexadecimalStringConstant", 
        "InvalidUnterminatedHexadecimalStringConstant", "Integral", "NumericFail", 
        "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", "Whitespace", 
        "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
        "ErrorCharacter", "EscapeStringConstant", "UnterminatedEscapeStringConstant", 
        "InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
        "AfterEscapeStringConstantMode_NotContinued", "AfterEscapeStringConstantWithNewlineMode_NotContinued", 
        "DollarText", "EndDollarStringConstant", "MetaCommand", "AfterEscapeStringConstantWithNewlineMode_Continued"
    ];
    public static readonly ruleNames = [
        "root", "stmtblock", "stmtmulti", "stmt", "callstmt", "createrolestmt", 
        "with_", "optrolelist", "alteroptrolelist", "alteroptroleelem", 
        "createoptroleelem", "createuserstmt", "alterrolestmt", "in_database_", 
        "alterrolesetstmt", "droprolestmt", "creategroupstmt", "altergroupstmt", 
        "add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", 
        "schema_stmt", "variablesetstmt", "set_rest", "generic_set", "set_rest_more", 
        "var_name", "var_list", "var_value", "iso_level", "boolean_or_string_", 
        "zone_value", "encoding_", "nonreservedword_or_sconst", "variableresetstmt", 
        "reset_rest", "generic_reset", "setresetclause", "functionsetresetclause", 
        "variableshowstmt", "constraintssetstmt", "constraints_set_list", 
        "constraints_set_mode", "checkpointstmt", "discardstmt", "altertablestmt", 
        "alter_table_cmds", "partition_cmd", "index_partition_cmd", "alter_table_cmd", 
        "alter_column_default", "drop_behavior_", "collate_clause_", "alter_using", 
        "replica_identity", "reloptions", "reloptions_", "reloption_list", 
        "reloption_elem", "alter_identity_column_option_list", "alter_identity_column_option", 
        "partitionboundspec", "hash_partbound_elem", "hash_partbound", "altercompositetypestmt", 
        "alter_type_cmds", "alter_type_cmd", "closeportalstmt", "copystmt", 
        "copy_from", "program_", "copy_file_name", "copy_options", "copy_opt_list", 
        "copy_opt_item", "binary_", "copy_delimiter", "using_", "copy_generic_opt_list", 
        "copy_generic_opt_elem", "copy_generic_opt_arg", "copy_generic_opt_arg_list", 
        "copy_generic_opt_arg_list_item", "createstmt", "opttemp", "opttableelementlist", 
        "opttypedtableelementlist", "tableelementlist", "typedtableelementlist", 
        "tableelement", "typedtableelement", "columnDef", "columnOptions", 
        "colquallist", "colconstraint", "colconstraintelem", "generated_when", 
        "constraintattr", "tablelikeclause", "tablelikeoptionlist", "tablelikeoption", 
        "tableconstraint", "constraintelem", "no_inherit_", "column_list_", 
        "columnlist", "columnElem", "c_include_", "key_match", "exclusionconstraintlist", 
        "exclusionconstraintelem", "exclusionwhereclause", "key_actions", 
        "key_update", "key_delete", "key_action", "optinherit", "optpartitionspec", 
        "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
        "optwith", "oncommitoption", "opttablespace", "optconstablespace", 
        "existingindex", "createstatsstmt", "alterstatsstmt", "createasstmt", 
        "create_as_target", "with_data_", "creatematviewstmt", "create_mv_target", 
        "optnolog", "refreshmatviewstmt", "createseqstmt", "alterseqstmt", 
        "optseqoptlist", "optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", 
        "by_", "numericonly", "numericonly_list", "createplangstmt", "trusted_", 
        "handler_name", "inline_handler_", "validator_clause", "validator_", 
        "procedural_", "createtablespacestmt", "opttablespaceowner", "droptablespacestmt", 
        "createextensionstmt", "create_extension_opt_list", "create_extension_opt_item", 
        "alterextensionstmt", "alter_extension_opt_list", "alter_extension_opt_item", 
        "alterextensioncontentsstmt", "createfdwstmt", "fdw_option", "fdw_options", 
        "fdw_options_", "alterfdwstmt", "create_generic_options", "generic_option_list", 
        "alter_generic_options", "alter_generic_option_list", "alter_generic_option_elem", 
        "generic_option_elem", "generic_option_name", "generic_option_arg", 
        "createforeignserverstmt", "type_", "foreign_server_version", "foreign_server_version_", 
        "alterforeignserverstmt", "createforeigntablestmt", "importforeignschemastmt", 
        "import_qualification_type", "import_qualification", "createusermappingstmt", 
        "auth_ident", "dropusermappingstmt", "alterusermappingstmt", "createpolicystmt", 
        "alterpolicystmt", "rowsecurityoptionalexpr", "rowsecurityoptionalwithcheck", 
        "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", "rowsecuritydefaultpermissive", 
        "rowsecuritydefaultforcmd", "row_security_cmd", "createamstmt", 
        "am_type", "createtrigstmt", "triggeractiontime", "triggerevents", 
        "triggeroneevent", "triggerreferencing", "triggertransitions", "triggertransition", 
        "transitionoldornew", "transitionrowortable", "transitionrelname", 
        "triggerforspec", "triggerforopteach", "triggerfortype", "triggerwhen", 
        "function_or_procedure", "triggerfuncargs", "triggerfuncarg", "optconstrfromtable", 
        "constraintattributespec", "constraintattributeElem", "createeventtrigstmt", 
        "event_trigger_when_list", "event_trigger_when_item", "event_trigger_value_list", 
        "altereventtrigstmt", "enable_trigger", "createassertionstmt", "definestmt", 
        "definition", "def_list", "def_elem", "def_arg", "old_aggr_definition", 
        "old_aggr_list", "old_aggr_elem", "enum_val_list_", "enum_val_list", 
        "alterenumstmt", "if_not_exists_", "createopclassstmt", "opclass_item_list", 
        "opclass_item", "default_", "opfamily_", "opclass_purpose", "recheck_", 
        "createopfamilystmt", "alteropfamilystmt", "opclass_drop_list", 
        "opclass_drop", "dropopclassstmt", "dropopfamilystmt", "dropownedstmt", 
        "reassignownedstmt", "dropstmt", "object_type_any_name", "object_type_name", 
        "drop_type_name", "object_type_name_on_any_name", "any_name_list_", 
        "any_name", "attrs", "type_name_list", "truncatestmt", "restart_seqs_", 
        "commentstmt", "comment_text", "seclabelstmt", "provider_", "security_label", 
        "fetchstmt", "fetch_args", "from_in", "from_in_", "grantstmt", "revokestmt", 
        "privileges", "privilege_list", "privilege", "privilege_target", 
        "grantee_list", "grantee", "grant_grant_option_", "grantrolestmt", 
        "revokerolestmt", "grant_admin_option_", "granted_by_", "alterdefaultprivilegesstmt", 
        "defacloptionlist", "defacloption", "defaclaction", "defacl_privilege_target", 
        "indexstmt", "unique_", "single_name_", "concurrently_", "index_name_", 
        "access_method_clause", "index_params", "index_elem_options", "index_elem", 
        "include_", "index_including_params", "collate_", "class_", "asc_desc_", 
        "nulls_order_", "createfunctionstmt", "or_replace_", "func_args", 
        "func_args_list", "function_with_argtypes_list", "function_with_argtypes", 
        "func_args_with_defaults", "func_args_with_defaults_list", "func_arg", 
        "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
        "aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
        "aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
        "createfunc_opt_item", "func_as", "transform_type_list", "definition_", 
        "table_func_column", "table_func_column_list", "alterfunctionstmt", 
        "alterfunc_opt_list", "restrict_", "removefuncstmt", "removeaggrstmt", 
        "removeoperstmt", "oper_argtypes", "any_operator", "operator_with_argtypes_list", 
        "operator_with_argtypes", "dostmt", "dostmt_opt_list", "dostmt_opt_item", 
        "createcaststmt", "cast_context", "dropcaststmt", "if_exists_", 
        "createtransformstmt", "transform_element_list", "droptransformstmt", 
        "reindexstmt", "reindex_target_relation", "reindex_target_all", 
        "reindex_option_list", "altertblspcstmt", "renamestmt", "column_", 
        "set_data_", "alterobjectdependsstmt", "no_", "alterobjectschemastmt", 
        "alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
        "altertypestmt", "alterownerstmt", "createpublicationstmt", "publication_for_tables_", 
        "publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
        "publication_name_list", "publication_name_item", "altersubscriptionstmt", 
        "dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
        "ruleactionstmt", "ruleactionstmtOrEmpty", "event", "instead_", 
        "notifystmt", "notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", 
        "transaction_", "transaction_mode_item", "transaction_mode_list", 
        "transaction_mode_list_or_empty", "transaction_chain_", "viewstmt", 
        "check_option_", "loadstmt", "createdbstmt", "createdb_opt_list", 
        "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
        "equal_", "alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", 
        "drop_option_list", "drop_option", "altercollationstmt", "altersystemstmt", 
        "createdomainstmt", "alterdomainstmt", "as_", "altertsdictionarystmt", 
        "altertsconfigurationstmt", "any_with", "createconversionstmt", 
        "clusterstmt", "cluster_index_specification", "vacuumstmt", "analyzestmt", 
        "utility_option_list", "vac_analyze_option_list", "analyze_keyword", 
        "utility_option_elem", "utility_option_name", "utility_option_arg", 
        "vac_analyze_option_elem", "vac_analyze_option_name", "vac_analyze_option_arg", 
        "analyze_", "verbose_", "full_", "freeze_", "name_list_", "vacuum_relation", 
        "vacuum_relation_list", "vacuum_relation_list_", "explainstmt", 
        "explainablestmt", "explain_option_list", "explain_option_elem", 
        "explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
        "preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
        "insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
        "insert_column_item", "on_conflict_", "conf_expr_", "returning_clause", 
        "mergestmt", "merge_insert_clause", "merge_update_clause", "merge_delete_clause", 
        "deletestmt", "using_clause", "lockstmt", "lock_", "lock_type", 
        "nowait_", "nowait_or_skip_", "updatestmt", "set_clause_list", "set_clause", 
        "set_target", "set_target_list", "declarecursorstmt", "cursor_name", 
        "cursor_options", "hold_", "selectstmt", "select_with_parens", "select_no_parens", 
        "select_clause", "simple_select_intersect", "simple_select_pramary", 
        "with_clause", "cte_list", "common_table_expr", "materialized_", 
        "with_clause_", "into_clause", "strict_", "opttempTableName", "table_", 
        "all_or_distinct", "distinct_clause", "all_clause_", "sort_clause_", 
        "sort_clause", "sortby_list", "sortby", "select_limit", "select_limit_", 
        "limit_clause", "offset_clause", "select_limit_value", "select_offset_value", 
        "select_fetch_first_value", "i_or_f_const", "row_or_rows", "first_or_next", 
        "group_clause", "group_by_list", "group_by_item", "empty_grouping_set", 
        "rollup_clause", "cube_clause", "grouping_sets_clause", "having_clause", 
        "for_locking_clause", "for_locking_clause_", "for_locking_items", 
        "for_locking_item", "for_locking_strength", "locked_rels_list", 
        "values_clause", "from_clause", "from_list", "table_ref", "alias_clause", 
        "func_alias_clause", "join_type", "join_qual", "relation_expr", 
        "relation_expr_list", "relation_expr_opt_alias", "tablesample_clause", 
        "repeatable_clause_", "func_table", "rowsfrom_item", "rowsfrom_list", 
        "col_def_list_", "ordinality_", "where_clause", "where_or_current_clause", 
        "opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
        "xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
        "xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
        "typename", "opt_array_bounds", "simpletypename", "consttypename", 
        "generictype", "type_modifiers_", "numeric", "float_", "bit", "constbit", 
        "bitwithlength", "bitwithoutlength", "character", "constcharacter", 
        "character_c", "varying_", "constdatetime", "constinterval", "timezone_", 
        "interval_", "interval_second", "jsonType", "escape_", "a_expr", 
        "a_expr_qual", "a_expr_lessless", "a_expr_or", "a_expr_and", "a_expr_between", 
        "a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", 
        "a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
        "a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", 
        "a_expr_at_time_zone", "a_expr_collate", "a_expr_typecast", "b_expr", 
        "c_expr", "plsqlvariablename", "func_application", "func_expr", 
        "func_expr_windowless", "func_expr_common_subexpr", "xml_root_version", 
        "xml_root_standalone_", "xml_attributes", "xml_attribute_list", 
        "xml_attribute_el", "document_or_content", "xml_whitespace_option", 
        "xmlexists_argument", "xml_passing_mech", "within_group_clause", 
        "filter_clause", "window_clause", "window_definition_list", "window_definition", 
        "over_clause", "window_specification", "existing_window_name_", 
        "partition_clause_", "frame_clause_", "frame_extent", "frame_bound", 
        "window_exclusion_clause_", "row", "explicit_row", "implicit_row", 
        "sub_type", "all_op", "mathop", "qual_op", "qual_all_op", "subquery_Op", 
        "expr_list", "func_arg_list", "func_arg_expr", "type_list", "array_expr", 
        "array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
        "overlay_list", "position_list", "substr_list", "trim_list", "in_expr", 
        "case_expr", "when_clause_list", "when_clause", "case_default", 
        "case_arg", "columnref", "indirection_el", "slice_bound_", "indirection", 
        "opt_indirection", "json_passing_clause", "json_arguments", "json_argument", 
        "json_wrapper_behavior", "json_behavior", "json_behavior_type", 
        "json_behavior_clause", "json_on_error_clause", "json_value_expr", 
        "json_format_clause", "json_quotes_clause", "json_returning_clause", 
        "json_predicate_type_constraint", "json_key_uniqueness_constraint", 
        "json_name_and_value_list", "json_name_and_value", "json_object_constructor_null_clause", 
        "json_array_constructor_null_clause", "json_value_expr_list", "json_aggregate_func", 
        "json_array_aggregate_order_by_clause", "target_list_", "target_list", 
        "target_el", "qualified_name_list", "qualified_name", "name_list", 
        "name", "attr_name", "file_name", "func_name", "aexprconst", "xconst", 
        "bconst", "fconst", "iconst", "sconst", "anysconst", "uescape_", 
        "signediconst", "roleid", "rolespec", "role_list", "colid", "type_function_name", 
        "nonreservedword", "colLabel", "bareColLabel", "unreserved_keyword", 
        "col_name_keyword", "type_func_name_keyword", "reserved_keyword", 
        "bare_label_keyword", "any_identifier", "identifier",
    ];

    public get grammarFileName(): string { return "PostgreSQLParser.g4"; }
    public get literalNames(): (string | null)[] { return PostgreSQLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return PostgreSQLParser.symbolicNames; }
    public get ruleNames(): string[] { return PostgreSQLParser.ruleNames; }
    public get serializedATN(): number[] { return PostgreSQLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, PostgreSQLParser._ATN, PostgreSQLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, PostgreSQLParser.RULE_root);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1438;
            this.stmtblock();
            this.state = 1439;
            this.match(PostgreSQLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtblock(): StmtblockContext {
        let localContext = new StmtblockContext(this.context, this.state);
        this.enterRule(localContext, 2, PostgreSQLParser.RULE_stmtblock);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1441;
            this.stmtmulti();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmtmulti(): StmtmultiContext {
        let localContext = new StmtmultiContext(this.context, this.state);
        this.enterRule(localContext, 4, PostgreSQLParser.RULE_stmtmulti);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1444;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2 || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & 1140883459) !== 0) || ((((_la - 103)) & ~0x1F) === 0 && ((1 << (_la - 103)) & 142606337) !== 0) || _la === 143 || _la === 167 || ((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & 2159673601) !== 0) || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 100680739) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 69244929) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 1074266113) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & 1346523403) !== 0) || ((((_la - 371)) & ~0x1F) === 0 && ((1 << (_la - 371)) & 1677983745) !== 0) || ((((_la - 453)) & ~0x1F) === 0 && ((1 << (_la - 453)) & 537133057) !== 0) || _la === 492) {
                {
                this.state = 1443;
                this.stmt();
                }
            }

            this.state = 1452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 7) {
                {
                {
                this.state = 1446;
                this.match(PostgreSQLParser.SEMI);
                this.state = 1448;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2 || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & 1140883459) !== 0) || ((((_la - 103)) & ~0x1F) === 0 && ((1 << (_la - 103)) & 142606337) !== 0) || _la === 143 || _la === 167 || ((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & 2159673601) !== 0) || ((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 100680739) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & 69244929) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & 1074266113) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & 1346523403) !== 0) || ((((_la - 371)) & ~0x1F) === 0 && ((1 << (_la - 371)) & 1677983745) !== 0) || ((((_la - 453)) & ~0x1F) === 0 && ((1 << (_la - 453)) & 537133057) !== 0) || _la === 492) {
                    {
                    this.state = 1447;
                    this.stmt();
                    }
                }

                }
                }
                this.state = 1454;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stmt(): StmtContext {
        let localContext = new StmtContext(this.context, this.state);
        this.enterRule(localContext, 6, PostgreSQLParser.RULE_stmt);
        try {
            this.state = 1579;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1455;
                this.altereventtrigstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1456;
                this.altercollationstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1457;
                this.alterdatabasestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1458;
                this.alterdatabasesetstmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1459;
                this.alterdefaultprivilegesstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1460;
                this.alterdomainstmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1461;
                this.alterenumstmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1462;
                this.alterextensionstmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1463;
                this.alterextensioncontentsstmt();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1464;
                this.alterfdwstmt();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1465;
                this.alterforeignserverstmt();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1466;
                this.alterfunctionstmt();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1467;
                this.altergroupstmt();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1468;
                this.alterobjectdependsstmt();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1469;
                this.alterobjectschemastmt();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1470;
                this.alterownerstmt();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1471;
                this.alteroperatorstmt();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1472;
                this.altertypestmt();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1473;
                this.alterpolicystmt();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1474;
                this.alterseqstmt();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1475;
                this.altersystemstmt();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1476;
                this.altertablestmt();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1477;
                this.altertblspcstmt();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1478;
                this.altercompositetypestmt();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1479;
                this.alterpublicationstmt();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1480;
                this.alterrolesetstmt();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1481;
                this.alterrolestmt();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1482;
                this.altersubscriptionstmt();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1483;
                this.alterstatsstmt();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1484;
                this.altertsconfigurationstmt();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1485;
                this.altertsdictionarystmt();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1486;
                this.alterusermappingstmt();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 1487;
                this.analyzestmt();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 1488;
                this.callstmt();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 1489;
                this.checkpointstmt();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 1490;
                this.closeportalstmt();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 1491;
                this.clusterstmt();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 1492;
                this.commentstmt();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 1493;
                this.constraintssetstmt();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 1494;
                this.copystmt();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 1495;
                this.createamstmt();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 1496;
                this.createasstmt();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 1497;
                this.createassertionstmt();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 1498;
                this.createcaststmt();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 1499;
                this.createconversionstmt();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 1500;
                this.createdomainstmt();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 1501;
                this.createextensionstmt();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 1502;
                this.createfdwstmt();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 1503;
                this.createforeignserverstmt();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 1504;
                this.createforeigntablestmt();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 1505;
                this.createfunctionstmt();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 1506;
                this.creategroupstmt();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 1507;
                this.creatematviewstmt();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 1508;
                this.createopclassstmt();
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 1509;
                this.createopfamilystmt();
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 1510;
                this.createpublicationstmt();
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 1511;
                this.alteropfamilystmt();
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 1512;
                this.createpolicystmt();
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 1513;
                this.createplangstmt();
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 1514;
                this.createschemastmt();
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 1515;
                this.createseqstmt();
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 1516;
                this.createstmt();
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 1517;
                this.createsubscriptionstmt();
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 1518;
                this.createstatsstmt();
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 1519;
                this.createtablespacestmt();
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 1520;
                this.createtransformstmt();
                }
                break;
            case 67:
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 1521;
                this.createtrigstmt();
                }
                break;
            case 68:
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 1522;
                this.createeventtrigstmt();
                }
                break;
            case 69:
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 1523;
                this.createrolestmt();
                }
                break;
            case 70:
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 1524;
                this.createuserstmt();
                }
                break;
            case 71:
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 1525;
                this.createusermappingstmt();
                }
                break;
            case 72:
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 1526;
                this.createdbstmt();
                }
                break;
            case 73:
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 1527;
                this.deallocatestmt();
                }
                break;
            case 74:
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 1528;
                this.declarecursorstmt();
                }
                break;
            case 75:
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 1529;
                this.definestmt();
                }
                break;
            case 76:
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 1530;
                this.deletestmt();
                }
                break;
            case 77:
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 1531;
                this.discardstmt();
                }
                break;
            case 78:
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 1532;
                this.dostmt();
                }
                break;
            case 79:
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 1533;
                this.dropcaststmt();
                }
                break;
            case 80:
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 1534;
                this.dropopclassstmt();
                }
                break;
            case 81:
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 1535;
                this.dropopfamilystmt();
                }
                break;
            case 82:
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 1536;
                this.dropownedstmt();
                }
                break;
            case 83:
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 1537;
                this.dropstmt();
                }
                break;
            case 84:
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 1538;
                this.dropsubscriptionstmt();
                }
                break;
            case 85:
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 1539;
                this.droptablespacestmt();
                }
                break;
            case 86:
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 1540;
                this.droptransformstmt();
                }
                break;
            case 87:
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 1541;
                this.droprolestmt();
                }
                break;
            case 88:
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 1542;
                this.dropusermappingstmt();
                }
                break;
            case 89:
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 1543;
                this.dropdbstmt();
                }
                break;
            case 90:
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 1544;
                this.executestmt();
                }
                break;
            case 91:
                this.enterOuterAlt(localContext, 91);
                {
                this.state = 1545;
                this.explainstmt();
                }
                break;
            case 92:
                this.enterOuterAlt(localContext, 92);
                {
                this.state = 1546;
                this.fetchstmt();
                }
                break;
            case 93:
                this.enterOuterAlt(localContext, 93);
                {
                this.state = 1547;
                this.grantstmt();
                }
                break;
            case 94:
                this.enterOuterAlt(localContext, 94);
                {
                this.state = 1548;
                this.grantrolestmt();
                }
                break;
            case 95:
                this.enterOuterAlt(localContext, 95);
                {
                this.state = 1549;
                this.importforeignschemastmt();
                }
                break;
            case 96:
                this.enterOuterAlt(localContext, 96);
                {
                this.state = 1550;
                this.indexstmt();
                }
                break;
            case 97:
                this.enterOuterAlt(localContext, 97);
                {
                this.state = 1551;
                this.insertstmt();
                }
                break;
            case 98:
                this.enterOuterAlt(localContext, 98);
                {
                this.state = 1552;
                this.mergestmt();
                }
                break;
            case 99:
                this.enterOuterAlt(localContext, 99);
                {
                this.state = 1553;
                this.listenstmt();
                }
                break;
            case 100:
                this.enterOuterAlt(localContext, 100);
                {
                this.state = 1554;
                this.refreshmatviewstmt();
                }
                break;
            case 101:
                this.enterOuterAlt(localContext, 101);
                {
                this.state = 1555;
                this.loadstmt();
                }
                break;
            case 102:
                this.enterOuterAlt(localContext, 102);
                {
                this.state = 1556;
                this.lockstmt();
                }
                break;
            case 103:
                this.enterOuterAlt(localContext, 103);
                {
                this.state = 1557;
                this.notifystmt();
                }
                break;
            case 104:
                this.enterOuterAlt(localContext, 104);
                {
                this.state = 1558;
                this.preparestmt();
                }
                break;
            case 105:
                this.enterOuterAlt(localContext, 105);
                {
                this.state = 1559;
                this.reassignownedstmt();
                }
                break;
            case 106:
                this.enterOuterAlt(localContext, 106);
                {
                this.state = 1560;
                this.reindexstmt();
                }
                break;
            case 107:
                this.enterOuterAlt(localContext, 107);
                {
                this.state = 1561;
                this.removeaggrstmt();
                }
                break;
            case 108:
                this.enterOuterAlt(localContext, 108);
                {
                this.state = 1562;
                this.removefuncstmt();
                }
                break;
            case 109:
                this.enterOuterAlt(localContext, 109);
                {
                this.state = 1563;
                this.removeoperstmt();
                }
                break;
            case 110:
                this.enterOuterAlt(localContext, 110);
                {
                this.state = 1564;
                this.renamestmt();
                }
                break;
            case 111:
                this.enterOuterAlt(localContext, 111);
                {
                this.state = 1565;
                this.revokestmt();
                }
                break;
            case 112:
                this.enterOuterAlt(localContext, 112);
                {
                this.state = 1566;
                this.revokerolestmt();
                }
                break;
            case 113:
                this.enterOuterAlt(localContext, 113);
                {
                this.state = 1567;
                this.rulestmt();
                }
                break;
            case 114:
                this.enterOuterAlt(localContext, 114);
                {
                this.state = 1568;
                this.seclabelstmt();
                }
                break;
            case 115:
                this.enterOuterAlt(localContext, 115);
                {
                this.state = 1569;
                this.selectstmt();
                }
                break;
            case 116:
                this.enterOuterAlt(localContext, 116);
                {
                this.state = 1570;
                this.transactionstmt();
                }
                break;
            case 117:
                this.enterOuterAlt(localContext, 117);
                {
                this.state = 1571;
                this.truncatestmt();
                }
                break;
            case 118:
                this.enterOuterAlt(localContext, 118);
                {
                this.state = 1572;
                this.unlistenstmt();
                }
                break;
            case 119:
                this.enterOuterAlt(localContext, 119);
                {
                this.state = 1573;
                this.updatestmt();
                }
                break;
            case 120:
                this.enterOuterAlt(localContext, 120);
                {
                this.state = 1574;
                this.vacuumstmt();
                }
                break;
            case 121:
                this.enterOuterAlt(localContext, 121);
                {
                this.state = 1575;
                this.variableresetstmt();
                }
                break;
            case 122:
                this.enterOuterAlt(localContext, 122);
                {
                this.state = 1576;
                this.variablesetstmt();
                }
                break;
            case 123:
                this.enterOuterAlt(localContext, 123);
                {
                this.state = 1577;
                this.variableshowstmt();
                }
                break;
            case 124:
                this.enterOuterAlt(localContext, 124);
                {
                this.state = 1578;
                this.viewstmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public callstmt(): CallstmtContext {
        let localContext = new CallstmtContext(this.context, this.state);
        this.enterRule(localContext, 8, PostgreSQLParser.RULE_callstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1581;
            this.match(PostgreSQLParser.CALL);
            this.state = 1582;
            this.func_application();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createrolestmt(): CreaterolestmtContext {
        let localContext = new CreaterolestmtContext(this.context, this.state);
        this.enterRule(localContext, 10, PostgreSQLParser.RULE_createrolestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1584;
            this.match(PostgreSQLParser.CREATE);
            this.state = 1585;
            this.match(PostgreSQLParser.ROLE);
            this.state = 1586;
            this.roleid();
            this.state = 1588;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 1587;
                this.with_();
                }
            }

            this.state = 1590;
            this.optrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_(): With_Context {
        let localContext = new With_Context(this.context, this.state);
        this.enterRule(localContext, 12, PostgreSQLParser.RULE_with_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1592;
            this.match(PostgreSQLParser.WITH);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optrolelist(): OptrolelistContext {
        let localContext = new OptrolelistContext(this.context, this.state);
        this.enterRule(localContext, 14, PostgreSQLParser.RULE_optrolelist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1597;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 106 || _la === 137 || _la === 172 || _la === 202 || _la === 233 || _la === 266 || _la === 318 || _la === 349 || ((((_la - 379)) & ~0x1F) === 0 && ((1 << (_la - 379)) & 8454145) !== 0) || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0)) {
                {
                {
                this.state = 1594;
                this.createoptroleelem();
                }
                }
                this.state = 1599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroptrolelist(): AlteroptrolelistContext {
        let localContext = new AlteroptrolelistContext(this.context, this.state);
        this.enterRule(localContext, 16, PostgreSQLParser.RULE_alteroptrolelist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 137 || _la === 202 || _la === 233 || _la === 266 || _la === 318 || _la === 395 || _la === 402 || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0)) {
                {
                {
                this.state = 1600;
                this.alteroptroleelem();
                }
                }
                this.state = 1605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroptroleelem(): AlteroptroleelemContext {
        let localContext = new AlteroptroleelemContext(this.context, this.state);
        this.enterRule(localContext, 18, PostgreSQLParser.RULE_alteroptroleelem);
        let _la: number;
        try {
            this.state = 1624;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.PASSWORD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1606;
                this.match(PostgreSQLParser.PASSWORD);
                this.state = 1609;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.StringConstant:
                case PostgreSQLParser.UnicodeEscapeStringConstant:
                case PostgreSQLParser.BeginDollarStringConstant:
                case PostgreSQLParser.EscapeStringConstant:
                    {
                    this.state = 1607;
                    this.sconst();
                    }
                    break;
                case PostgreSQLParser.NULL_P:
                    {
                    this.state = 1608;
                    this.match(PostgreSQLParser.NULL_P);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.UNENCRYPTED:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1611;
                _la = this.tokenStream.LA(1);
                if(!(_la === 233 || _la === 395)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1612;
                this.match(PostgreSQLParser.PASSWORD);
                this.state = 1613;
                this.sconst();
                }
                break;
            case PostgreSQLParser.INHERIT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1614;
                this.match(PostgreSQLParser.INHERIT);
                }
                break;
            case PostgreSQLParser.CONNECTION:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1615;
                this.match(PostgreSQLParser.CONNECTION);
                this.state = 1616;
                this.match(PostgreSQLParser.LIMIT);
                this.state = 1617;
                this.signediconst();
                }
                break;
            case PostgreSQLParser.VALID:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1618;
                this.match(PostgreSQLParser.VALID);
                this.state = 1619;
                this.match(PostgreSQLParser.UNTIL);
                this.state = 1620;
                this.sconst();
                }
                break;
            case PostgreSQLParser.USER:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1621;
                this.match(PostgreSQLParser.USER);
                this.state = 1622;
                this.role_list();
                }
                break;
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1623;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createoptroleelem(): CreateoptroleelemContext {
        let localContext = new CreateoptroleelemContext(this.context, this.state);
        this.enterRule(localContext, 20, PostgreSQLParser.RULE_createoptroleelem);
        let _la: number;
        try {
            this.state = 1636;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.USER:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1626;
                this.alteroptroleelem();
                }
                break;
            case PostgreSQLParser.SYSID:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1627;
                this.match(PostgreSQLParser.SYSID);
                this.state = 1628;
                this.iconst();
                }
                break;
            case PostgreSQLParser.ADMIN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1629;
                this.match(PostgreSQLParser.ADMIN);
                this.state = 1630;
                this.role_list();
                }
                break;
            case PostgreSQLParser.ROLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1631;
                this.match(PostgreSQLParser.ROLE);
                this.state = 1632;
                this.role_list();
                }
                break;
            case PostgreSQLParser.IN_P:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1633;
                this.match(PostgreSQLParser.IN_P);
                this.state = 1634;
                _la = this.tokenStream.LA(1);
                if(!(_la === 104 || _la === 349)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1635;
                this.role_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createuserstmt(): CreateuserstmtContext {
        let localContext = new CreateuserstmtContext(this.context, this.state);
        this.enterRule(localContext, 22, PostgreSQLParser.RULE_createuserstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1638;
            this.match(PostgreSQLParser.CREATE);
            this.state = 1639;
            this.match(PostgreSQLParser.USER);
            this.state = 1640;
            this.roleid();
            this.state = 1642;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 1641;
                this.with_();
                }
            }

            this.state = 1644;
            this.optrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterrolestmt(): AlterrolestmtContext {
        let localContext = new AlterrolestmtContext(this.context, this.state);
        this.enterRule(localContext, 24, PostgreSQLParser.RULE_alterrolestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1646;
            this.match(PostgreSQLParser.ALTER);
            this.state = 1647;
            _la = this.tokenStream.LA(1);
            if(!(_la === 137 || _la === 349)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1648;
            this.rolespec();
            this.state = 1650;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 1649;
                this.with_();
                }
            }

            this.state = 1652;
            this.alteroptrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_database_(): In_database_Context {
        let localContext = new In_database_Context(this.context, this.state);
        this.enterRule(localContext, 26, PostgreSQLParser.RULE_in_database_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1654;
            this.match(PostgreSQLParser.IN_P);
            this.state = 1655;
            this.match(PostgreSQLParser.DATABASE);
            this.state = 1656;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterrolesetstmt(): AlterrolesetstmtContext {
        let localContext = new AlterrolesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 28, PostgreSQLParser.RULE_alterrolesetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1658;
            this.match(PostgreSQLParser.ALTER);
            this.state = 1659;
            _la = this.tokenStream.LA(1);
            if(!(_la === 137 || _la === 349)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1661;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 1660;
                this.match(PostgreSQLParser.ALL);
                }
            }

            this.state = 1663;
            this.rolespec();
            this.state = 1665;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106) {
                {
                this.state = 1664;
                this.in_database_();
                }
            }

            this.state = 1667;
            this.setresetclause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public droprolestmt(): DroprolestmtContext {
        let localContext = new DroprolestmtContext(this.context, this.state);
        this.enterRule(localContext, 30, PostgreSQLParser.RULE_droprolestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1669;
            this.match(PostgreSQLParser.DROP);
            this.state = 1670;
            _la = this.tokenStream.LA(1);
            if(!(_la === 104 || _la === 137 || _la === 349)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1673;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 14, this.context) ) {
            case 1:
                {
                this.state = 1671;
                this.match(PostgreSQLParser.IF_P);
                this.state = 1672;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 1675;
            this.role_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public creategroupstmt(): CreategroupstmtContext {
        let localContext = new CreategroupstmtContext(this.context, this.state);
        this.enterRule(localContext, 32, PostgreSQLParser.RULE_creategroupstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1677;
            this.match(PostgreSQLParser.CREATE);
            this.state = 1678;
            this.match(PostgreSQLParser.GROUP_P);
            this.state = 1679;
            this.roleid();
            this.state = 1681;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 1680;
                this.with_();
                }
            }

            this.state = 1683;
            this.optrolelist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altergroupstmt(): AltergroupstmtContext {
        let localContext = new AltergroupstmtContext(this.context, this.state);
        this.enterRule(localContext, 34, PostgreSQLParser.RULE_altergroupstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1685;
            this.match(PostgreSQLParser.ALTER);
            this.state = 1686;
            this.match(PostgreSQLParser.GROUP_P);
            this.state = 1687;
            this.rolespec();
            this.state = 1688;
            this.add_drop();
            this.state = 1689;
            this.match(PostgreSQLParser.USER);
            this.state = 1690;
            this.role_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public add_drop(): Add_dropContext {
        let localContext = new Add_dropContext(this.context, this.state);
        this.enterRule(localContext, 36, PostgreSQLParser.RULE_add_drop);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1692;
            _la = this.tokenStream.LA(1);
            if(!(_la === 171 || _la === 229)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createschemastmt(): CreateschemastmtContext {
        let localContext = new CreateschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 38, PostgreSQLParser.RULE_createschemastmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1694;
            this.match(PostgreSQLParser.CREATE);
            this.state = 1695;
            this.match(PostgreSQLParser.SCHEMA);
            this.state = 1699;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
            case 1:
                {
                this.state = 1696;
                this.match(PostgreSQLParser.IF_P);
                this.state = 1697;
                this.match(PostgreSQLParser.NOT);
                this.state = 1698;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 1707;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
            case 1:
                {
                this.state = 1702;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 1701;
                    this.optschemaname();
                    }
                }

                this.state = 1704;
                this.match(PostgreSQLParser.AUTHORIZATION);
                this.state = 1705;
                this.rolespec();
                }
                break;
            case 2:
                {
                this.state = 1706;
                this.colid();
                }
                break;
            }
            this.state = 1709;
            this.optschemaeltlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optschemaname(): OptschemanameContext {
        let localContext = new OptschemanameContext(this.context, this.state);
        this.enterRule(localContext, 40, PostgreSQLParser.RULE_optschemaname);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1711;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optschemaeltlist(): OptschemaeltlistContext {
        let localContext = new OptschemaeltlistContext(this.context, this.state);
        this.enterRule(localContext, 42, PostgreSQLParser.RULE_optschemaeltlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1716;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 84 || _la === 103) {
                {
                {
                this.state = 1713;
                this.schema_stmt();
                }
                }
                this.state = 1718;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public schema_stmt(): Schema_stmtContext {
        let localContext = new Schema_stmtContext(this.context, this.state);
        this.enterRule(localContext, 44, PostgreSQLParser.RULE_schema_stmt);
        try {
            this.state = 1725;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1719;
                this.createstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1720;
                this.indexstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1721;
                this.createseqstmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1722;
                this.createtrigstmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1723;
                this.grantstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1724;
                this.viewstmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variablesetstmt(): VariablesetstmtContext {
        let localContext = new VariablesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 46, PostgreSQLParser.RULE_variablesetstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1727;
            this.match(PostgreSQLParser.SET);
            this.state = 1729;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 21, this.context) ) {
            case 1:
                {
                this.state = 1728;
                _la = this.tokenStream.LA(1);
                if(!(_la === 283 || _la === 363)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1731;
            this.set_rest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_rest(): Set_restContext {
        let localContext = new Set_restContext(this.context, this.state);
        this.enterRule(localContext, 48, PostgreSQLParser.RULE_set_rest);
        try {
            this.state = 1741;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 22, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1733;
                this.match(PostgreSQLParser.TRANSACTION);
                this.state = 1734;
                this.transaction_mode_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1735;
                this.match(PostgreSQLParser.SESSION);
                this.state = 1736;
                this.match(PostgreSQLParser.CHARACTERISTICS);
                this.state = 1737;
                this.match(PostgreSQLParser.AS);
                this.state = 1738;
                this.match(PostgreSQLParser.TRANSACTION);
                this.state = 1739;
                this.transaction_mode_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1740;
                this.set_rest_more();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_set(): Generic_setContext {
        let localContext = new Generic_setContext(this.context, this.state);
        this.enterRule(localContext, 50, PostgreSQLParser.RULE_generic_set);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1743;
            this.var_name();
            this.state = 1744;
            _la = this.tokenStream.LA(1);
            if(!(_la === 10 || _la === 132)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1747;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                {
                this.state = 1745;
                this.var_list();
                }
                break;
            case PostgreSQLParser.DEFAULT:
                {
                this.state = 1746;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_rest_more(): Set_rest_moreContext {
        let localContext = new Set_rest_moreContext(this.context, this.state);
        this.enterRule(localContext, 52, PostgreSQLParser.RULE_set_rest_more);
        let _la: number;
        try {
            this.state = 1776;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1749;
                this.generic_set();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1750;
                this.var_name();
                this.state = 1751;
                this.match(PostgreSQLParser.FROM);
                this.state = 1752;
                this.match(PostgreSQLParser.CURRENT_P);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1754;
                this.match(PostgreSQLParser.TIME);
                this.state = 1755;
                this.match(PostgreSQLParser.ZONE);
                this.state = 1756;
                this.zone_value();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1757;
                this.match(PostgreSQLParser.CATALOG);
                this.state = 1758;
                this.sconst();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1759;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 1760;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1761;
                this.match(PostgreSQLParser.NAMES);
                this.state = 1763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 91 || ((((_la - 563)) & ~0x1F) === 0 && ((1 << (_la - 563)) & 16777237) !== 0)) {
                    {
                    this.state = 1762;
                    this.encoding_();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1765;
                this.match(PostgreSQLParser.ROLE);
                this.state = 1766;
                this.nonreservedword_or_sconst();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1767;
                this.match(PostgreSQLParser.SESSION);
                this.state = 1768;
                this.match(PostgreSQLParser.AUTHORIZATION);
                this.state = 1769;
                this.nonreservedword_or_sconst();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1770;
                this.match(PostgreSQLParser.XML_P);
                this.state = 1771;
                this.match(PostgreSQLParser.OPTION);
                this.state = 1772;
                this.document_or_content();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1773;
                this.match(PostgreSQLParser.TRANSACTION);
                this.state = 1774;
                this.match(PostgreSQLParser.SNAPSHOT);
                this.state = 1775;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_name(): Var_nameContext {
        let localContext = new Var_nameContext(this.context, this.state);
        this.enterRule(localContext, 54, PostgreSQLParser.RULE_var_name);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1778;
            this.colid();
            this.state = 1783;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 11) {
                {
                {
                this.state = 1779;
                this.match(PostgreSQLParser.DOT);
                this.state = 1780;
                this.colid();
                }
                }
                this.state = 1785;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_list(): Var_listContext {
        let localContext = new Var_listContext(this.context, this.state);
        this.enterRule(localContext, 56, PostgreSQLParser.RULE_var_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1786;
            this.var_value();
            this.state = 1791;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1787;
                this.match(PostgreSQLParser.COMMA);
                this.state = 1788;
                this.var_value();
                }
                }
                this.state = 1793;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public var_value(): Var_valueContext {
        let localContext = new Var_valueContext(this.context, this.state);
        this.enterRule(localContext, 58, PostgreSQLParser.RULE_var_value);
        try {
            this.state = 1796;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1794;
                this.boolean_or_string_();
                }
                break;
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1795;
                this.numericonly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public iso_level(): Iso_levelContext {
        let localContext = new Iso_levelContext(this.context, this.state);
        this.enterRule(localContext, 60, PostgreSQLParser.RULE_iso_level);
        let _la: number;
        try {
            this.state = 1803;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.READ:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1798;
                this.match(PostgreSQLParser.READ);
                this.state = 1799;
                _la = this.tokenStream.LA(1);
                if(!(_la === 200 || _la === 394)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSQLParser.REPEATABLE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1800;
                this.match(PostgreSQLParser.REPEATABLE);
                this.state = 1801;
                this.match(PostgreSQLParser.READ);
                }
                break;
            case PostgreSQLParser.SERIALIZABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1802;
                this.match(PostgreSQLParser.SERIALIZABLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public boolean_or_string_(): Boolean_or_string_Context {
        let localContext = new Boolean_or_string_Context(this.context, this.state);
        this.enterRule(localContext, 62, PostgreSQLParser.RULE_boolean_or_string_);
        try {
            this.state = 1809;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.TRUE_P:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1805;
                this.match(PostgreSQLParser.TRUE_P);
                }
                break;
            case PostgreSQLParser.FALSE_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1806;
                this.match(PostgreSQLParser.FALSE_P);
                }
                break;
            case PostgreSQLParser.ON:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1807;
                this.match(PostgreSQLParser.ON);
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1808;
                this.nonreservedword_or_sconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public zone_value(): Zone_valueContext {
        let localContext = new Zone_valueContext(this.context, this.state);
        this.enterRule(localContext, 64, PostgreSQLParser.RULE_zone_value);
        let _la: number;
        try {
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1811;
                this.sconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1812;
                this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1813;
                this.constinterval();
                this.state = 1814;
                this.sconst();
                this.state = 1816;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214 || _la === 256 || _la === 292 || _la === 295 || _la === 357 || _la === 415) {
                    {
                    this.state = 1815;
                    this.interval_();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1818;
                this.constinterval();
                this.state = 1819;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 1820;
                this.iconst();
                this.state = 1821;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 1822;
                this.sconst();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1824;
                this.numericonly();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1825;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1826;
                this.match(PostgreSQLParser.LOCAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public encoding_(): Encoding_Context {
        let localContext = new Encoding_Context(this.context, this.state);
        this.enterRule(localContext, 66, PostgreSQLParser.RULE_encoding_);
        try {
            this.state = 1831;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1829;
                this.sconst();
                }
                break;
            case PostgreSQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1830;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
        let localContext = new Nonreservedword_or_sconstContext(this.context, this.state);
        this.enterRule(localContext, 68, PostgreSQLParser.RULE_nonreservedword_or_sconst);
        try {
            this.state = 1835;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1833;
                this.nonreservedword();
                }
                break;
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1834;
                this.sconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableresetstmt(): VariableresetstmtContext {
        let localContext = new VariableresetstmtContext(this.context, this.state);
        this.enterRule(localContext, 70, PostgreSQLParser.RULE_variableresetstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1837;
            this.match(PostgreSQLParser.RESET);
            this.state = 1838;
            this.reset_rest();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reset_rest(): Reset_restContext {
        let localContext = new Reset_restContext(this.context, this.state);
        this.enterRule(localContext, 72, PostgreSQLParser.RULE_reset_rest);
        try {
            this.state = 1848;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1840;
                this.generic_reset();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1841;
                this.match(PostgreSQLParser.TIME);
                this.state = 1842;
                this.match(PostgreSQLParser.ZONE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1843;
                this.match(PostgreSQLParser.TRANSACTION);
                this.state = 1844;
                this.match(PostgreSQLParser.ISOLATION);
                this.state = 1845;
                this.match(PostgreSQLParser.LEVEL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1846;
                this.match(PostgreSQLParser.SESSION);
                this.state = 1847;
                this.match(PostgreSQLParser.AUTHORIZATION);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_reset(): Generic_resetContext {
        let localContext = new Generic_resetContext(this.context, this.state);
        this.enterRule(localContext, 74, PostgreSQLParser.RULE_generic_reset);
        try {
            this.state = 1852;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1850;
                this.var_name();
                }
                break;
            case PostgreSQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1851;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setresetclause(): SetresetclauseContext {
        let localContext = new SetresetclauseContext(this.context, this.state);
        this.enterRule(localContext, 76, PostgreSQLParser.RULE_setresetclause);
        try {
            this.state = 1857;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1854;
                this.match(PostgreSQLParser.SET);
                this.state = 1855;
                this.set_rest();
                }
                break;
            case PostgreSQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1856;
                this.variableresetstmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionsetresetclause(): FunctionsetresetclauseContext {
        let localContext = new FunctionsetresetclauseContext(this.context, this.state);
        this.enterRule(localContext, 78, PostgreSQLParser.RULE_functionsetresetclause);
        try {
            this.state = 1862;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1859;
                this.match(PostgreSQLParser.SET);
                this.state = 1860;
                this.set_rest_more();
                }
                break;
            case PostgreSQLParser.RESET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1861;
                this.variableresetstmt();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public variableshowstmt(): VariableshowstmtContext {
        let localContext = new VariableshowstmtContext(this.context, this.state);
        this.enterRule(localContext, 80, PostgreSQLParser.RULE_variableshowstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1864;
            this.match(PostgreSQLParser.SHOW);
            this.state = 1874;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
            case 1:
                {
                this.state = 1865;
                this.var_name();
                }
                break;
            case 2:
                {
                this.state = 1866;
                this.match(PostgreSQLParser.TIME);
                this.state = 1867;
                this.match(PostgreSQLParser.ZONE);
                }
                break;
            case 3:
                {
                this.state = 1868;
                this.match(PostgreSQLParser.TRANSACTION);
                this.state = 1869;
                this.match(PostgreSQLParser.ISOLATION);
                this.state = 1870;
                this.match(PostgreSQLParser.LEVEL);
                }
                break;
            case 4:
                {
                this.state = 1871;
                this.match(PostgreSQLParser.SESSION);
                this.state = 1872;
                this.match(PostgreSQLParser.AUTHORIZATION);
                }
                break;
            case 5:
                {
                this.state = 1873;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintssetstmt(): ConstraintssetstmtContext {
        let localContext = new ConstraintssetstmtContext(this.context, this.state);
        this.enterRule(localContext, 82, PostgreSQLParser.RULE_constraintssetstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1876;
            this.match(PostgreSQLParser.SET);
            this.state = 1877;
            this.match(PostgreSQLParser.CONSTRAINTS);
            this.state = 1878;
            this.constraints_set_list();
            this.state = 1879;
            this.constraints_set_mode();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraints_set_list(): Constraints_set_listContext {
        let localContext = new Constraints_set_listContext(this.context, this.state);
        this.enterRule(localContext, 84, PostgreSQLParser.RULE_constraints_set_list);
        try {
            this.state = 1883;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.ALL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1881;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1882;
                this.qualified_name_list();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraints_set_mode(): Constraints_set_modeContext {
        let localContext = new Constraints_set_modeContext(this.context, this.state);
        this.enterRule(localContext, 86, PostgreSQLParser.RULE_constraints_set_mode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1885;
            _la = this.tokenStream.LA(1);
            if(!(_la === 218 || _la === 259)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkpointstmt(): CheckpointstmtContext {
        let localContext = new CheckpointstmtContext(this.context, this.state);
        this.enterRule(localContext, 88, PostgreSQLParser.RULE_checkpointstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1887;
            this.match(PostgreSQLParser.CHECKPOINT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public discardstmt(): DiscardstmtContext {
        let localContext = new DiscardstmtContext(this.context, this.state);
        this.enterRule(localContext, 90, PostgreSQLParser.RULE_discardstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1889;
            this.match(PostgreSQLParser.DISCARD);
            this.state = 1890;
            _la = this.tokenStream.LA(1);
            if(!(_la === 68 || _la === 319 || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 41943041) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertablestmt(): AltertablestmtContext {
        let localContext = new AltertablestmtContext(this.context, this.state);
        this.enterRule(localContext, 92, PostgreSQLParser.RULE_altertablestmt);
        let _la: number;
        try {
            this.state = 2004;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1892;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1893;
                this.match(PostgreSQLParser.TABLE);
                this.state = 1896;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
                case 1:
                    {
                    this.state = 1894;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 1895;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 1898;
                this.relation_expr();
                this.state = 1901;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.NOT:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.VALIDATE:
                    {
                    this.state = 1899;
                    this.alter_table_cmds();
                    }
                    break;
                case PostgreSQLParser.ATTACH:
                case PostgreSQLParser.DETACH:
                    {
                    this.state = 1900;
                    this.partition_cmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1903;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1904;
                this.match(PostgreSQLParser.TABLE);
                this.state = 1905;
                this.match(PostgreSQLParser.ALL);
                this.state = 1906;
                this.match(PostgreSQLParser.IN_P);
                this.state = 1907;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 1908;
                this.name();
                this.state = 1912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 1909;
                    this.match(PostgreSQLParser.OWNED);
                    this.state = 1910;
                    this.match(PostgreSQLParser.BY);
                    this.state = 1911;
                    this.role_list();
                    }
                }

                this.state = 1914;
                this.match(PostgreSQLParser.SET);
                this.state = 1915;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 1916;
                this.name();
                this.state = 1918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 1917;
                    this.nowait_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1920;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1921;
                this.match(PostgreSQLParser.INDEX);
                this.state = 1924;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 45, this.context) ) {
                case 1:
                    {
                    this.state = 1922;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 1923;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 1926;
                this.qualified_name();
                this.state = 1929;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.NOT:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.VALIDATE:
                    {
                    this.state = 1927;
                    this.alter_table_cmds();
                    }
                    break;
                case PostgreSQLParser.ATTACH:
                    {
                    this.state = 1928;
                    this.index_partition_cmd();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1931;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1932;
                this.match(PostgreSQLParser.INDEX);
                this.state = 1933;
                this.match(PostgreSQLParser.ALL);
                this.state = 1934;
                this.match(PostgreSQLParser.IN_P);
                this.state = 1935;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 1936;
                this.name();
                this.state = 1940;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 1937;
                    this.match(PostgreSQLParser.OWNED);
                    this.state = 1938;
                    this.match(PostgreSQLParser.BY);
                    this.state = 1939;
                    this.role_list();
                    }
                }

                this.state = 1942;
                this.match(PostgreSQLParser.SET);
                this.state = 1943;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 1944;
                this.name();
                this.state = 1946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 1945;
                    this.nowait_();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1948;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1949;
                this.match(PostgreSQLParser.SEQUENCE);
                this.state = 1952;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 49, this.context) ) {
                case 1:
                    {
                    this.state = 1950;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 1951;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 1954;
                this.qualified_name();
                this.state = 1955;
                this.alter_table_cmds();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1957;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1958;
                this.match(PostgreSQLParser.VIEW);
                this.state = 1961;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 50, this.context) ) {
                case 1:
                    {
                    this.state = 1959;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 1960;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 1963;
                this.qualified_name();
                this.state = 1964;
                this.alter_table_cmds();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1966;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1967;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 1968;
                this.match(PostgreSQLParser.VIEW);
                this.state = 1971;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
                case 1:
                    {
                    this.state = 1969;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 1970;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 1973;
                this.qualified_name();
                this.state = 1974;
                this.alter_table_cmds();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1976;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1977;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 1978;
                this.match(PostgreSQLParser.VIEW);
                this.state = 1979;
                this.match(PostgreSQLParser.ALL);
                this.state = 1980;
                this.match(PostgreSQLParser.IN_P);
                this.state = 1981;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 1982;
                this.name();
                this.state = 1986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 312) {
                    {
                    this.state = 1983;
                    this.match(PostgreSQLParser.OWNED);
                    this.state = 1984;
                    this.match(PostgreSQLParser.BY);
                    this.state = 1985;
                    this.role_list();
                    }
                }

                this.state = 1988;
                this.match(PostgreSQLParser.SET);
                this.state = 1989;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 1990;
                this.name();
                this.state = 1992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 303) {
                    {
                    this.state = 1991;
                    this.nowait_();
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1994;
                this.match(PostgreSQLParser.ALTER);
                this.state = 1995;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 1996;
                this.match(PostgreSQLParser.TABLE);
                this.state = 1999;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
                case 1:
                    {
                    this.state = 1997;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 1998;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 2001;
                this.relation_expr();
                this.state = 2002;
                this.alter_table_cmds();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_cmds(): Alter_table_cmdsContext {
        let localContext = new Alter_table_cmdsContext(this.context, this.state);
        this.enterRule(localContext, 94, PostgreSQLParser.RULE_alter_table_cmds);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2006;
            this.alter_table_cmd();
            this.state = 2011;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2007;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2008;
                this.alter_table_cmd();
                }
                }
                this.state = 2013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_cmd(): Partition_cmdContext {
        let localContext = new Partition_cmdContext(this.context, this.state);
        this.enterRule(localContext, 96, PostgreSQLParser.RULE_partition_cmd);
        try {
            this.state = 2022;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.ATTACH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2014;
                this.match(PostgreSQLParser.ATTACH);
                this.state = 2015;
                this.match(PostgreSQLParser.PARTITION);
                this.state = 2016;
                this.qualified_name();
                this.state = 2017;
                this.partitionboundspec();
                }
                break;
            case PostgreSQLParser.DETACH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2019;
                this.match(PostgreSQLParser.DETACH);
                this.state = 2020;
                this.match(PostgreSQLParser.PARTITION);
                this.state = 2021;
                this.qualified_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_partition_cmd(): Index_partition_cmdContext {
        let localContext = new Index_partition_cmdContext(this.context, this.state);
        this.enterRule(localContext, 98, PostgreSQLParser.RULE_index_partition_cmd);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2024;
            this.match(PostgreSQLParser.ATTACH);
            this.state = 2025;
            this.match(PostgreSQLParser.PARTITION);
            this.state = 2026;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_table_cmd(): Alter_table_cmdContext {
        let localContext = new Alter_table_cmdContext(this.context, this.state);
        this.enterRule(localContext, 100, PostgreSQLParser.RULE_alter_table_cmd);
        let _la: number;
        try {
            this.state = 2326;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2028;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 2029;
                this.columnDef();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2030;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 2031;
                this.match(PostgreSQLParser.IF_P);
                this.state = 2032;
                this.match(PostgreSQLParser.NOT);
                this.state = 2033;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 2034;
                this.columnDef();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2035;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 2036;
                this.match(PostgreSQLParser.COLUMN);
                this.state = 2037;
                this.columnDef();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2038;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 2039;
                this.match(PostgreSQLParser.COLUMN);
                this.state = 2040;
                this.match(PostgreSQLParser.IF_P);
                this.state = 2041;
                this.match(PostgreSQLParser.NOT);
                this.state = 2042;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 2043;
                this.columnDef();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2044;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2045;
                    this.column_();
                    }
                }

                this.state = 2048;
                this.colid();
                this.state = 2049;
                this.alter_column_default();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2051;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2053;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2052;
                    this.column_();
                    }
                }

                this.state = 2055;
                this.colid();
                this.state = 2056;
                this.match(PostgreSQLParser.DROP);
                this.state = 2057;
                this.match(PostgreSQLParser.NOT);
                this.state = 2058;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2060;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2062;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2061;
                    this.column_();
                    }
                }

                this.state = 2064;
                this.colid();
                this.state = 2065;
                this.match(PostgreSQLParser.SET);
                this.state = 2066;
                this.match(PostgreSQLParser.NOT);
                this.state = 2067;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2069;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2071;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2070;
                    this.column_();
                    }
                }

                this.state = 2073;
                this.colid();
                this.state = 2074;
                this.match(PostgreSQLParser.DROP);
                this.state = 2075;
                this.match(PostgreSQLParser.EXPRESSION);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2077;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2079;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2078;
                    this.column_();
                    }
                }

                this.state = 2081;
                this.colid();
                this.state = 2082;
                this.match(PostgreSQLParser.DROP);
                this.state = 2083;
                this.match(PostgreSQLParser.EXPRESSION);
                this.state = 2084;
                this.match(PostgreSQLParser.IF_P);
                this.state = 2085;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2087;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2089;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2088;
                    this.column_();
                    }
                }

                this.state = 2091;
                this.colid();
                this.state = 2092;
                this.match(PostgreSQLParser.SET);
                this.state = 2093;
                this.match(PostgreSQLParser.STATISTICS);
                this.state = 2094;
                this.signediconst();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2096;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2098;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2097;
                    this.column_();
                    }
                }

                this.state = 2100;
                this.iconst();
                this.state = 2101;
                this.match(PostgreSQLParser.SET);
                this.state = 2102;
                this.match(PostgreSQLParser.STATISTICS);
                this.state = 2103;
                this.signediconst();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2105;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2106;
                    this.column_();
                    }
                }

                this.state = 2109;
                this.colid();
                this.state = 2110;
                this.match(PostgreSQLParser.SET);
                this.state = 2111;
                this.reloptions();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2113;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2115;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2114;
                    this.column_();
                    }
                }

                this.state = 2117;
                this.colid();
                this.state = 2118;
                this.match(PostgreSQLParser.RESET);
                this.state = 2119;
                this.reloptions();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2121;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2123;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2122;
                    this.column_();
                    }
                }

                this.state = 2125;
                this.colid();
                this.state = 2126;
                this.match(PostgreSQLParser.SET);
                this.state = 2127;
                this.match(PostgreSQLParser.STORAGE);
                this.state = 2128;
                this.colid();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2130;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2132;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2131;
                    this.column_();
                    }
                }

                this.state = 2134;
                this.colid();
                this.state = 2135;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 2136;
                this.match(PostgreSQLParser.GENERATED);
                this.state = 2137;
                this.generated_when();
                this.state = 2138;
                this.match(PostgreSQLParser.AS);
                this.state = 2139;
                this.match(PostgreSQLParser.IDENTITY_P);
                this.state = 2141;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2140;
                    this.optparenthesizedseqoptlist();
                    }
                }

                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2143;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2145;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2144;
                    this.column_();
                    }
                }

                this.state = 2147;
                this.colid();
                this.state = 2148;
                this.alter_identity_column_option_list();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2150;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2151;
                    this.column_();
                    }
                }

                this.state = 2154;
                this.colid();
                this.state = 2155;
                this.match(PostgreSQLParser.DROP);
                this.state = 2156;
                this.match(PostgreSQLParser.IDENTITY_P);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2158;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2160;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2159;
                    this.column_();
                    }
                }

                this.state = 2162;
                this.colid();
                this.state = 2163;
                this.match(PostgreSQLParser.DROP);
                this.state = 2164;
                this.match(PostgreSQLParser.IDENTITY_P);
                this.state = 2165;
                this.match(PostgreSQLParser.IF_P);
                this.state = 2166;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2168;
                this.match(PostgreSQLParser.DROP);
                this.state = 2170;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2169;
                    this.column_();
                    }
                }

                this.state = 2172;
                this.match(PostgreSQLParser.IF_P);
                this.state = 2173;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 2174;
                this.colid();
                this.state = 2176;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 2175;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2178;
                this.match(PostgreSQLParser.DROP);
                this.state = 2180;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2179;
                    this.column_();
                    }
                }

                this.state = 2182;
                this.colid();
                this.state = 2184;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 2183;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2186;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2188;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2187;
                    this.column_();
                    }
                }

                this.state = 2190;
                this.colid();
                this.state = 2192;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 364) {
                    {
                    this.state = 2191;
                    this.set_data_();
                    }
                }

                this.state = 2194;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 2195;
                this.typename();
                this.state = 2197;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 2196;
                    this.collate_clause_();
                    }
                }

                this.state = 2200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2199;
                    this.alter_using();
                    }
                }

                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2202;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2204;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 2203;
                    this.column_();
                    }
                }

                this.state = 2206;
                this.colid();
                this.state = 2207;
                this.alter_generic_options();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 2209;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 2210;
                this.tableconstraint();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 2211;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2212;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 2213;
                this.name();
                this.state = 2214;
                this.constraintattributespec();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 2216;
                this.match(PostgreSQLParser.VALIDATE);
                this.state = 2217;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 2218;
                this.name();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 2219;
                this.match(PostgreSQLParser.DROP);
                this.state = 2220;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 2221;
                this.match(PostgreSQLParser.IF_P);
                this.state = 2222;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 2223;
                this.name();
                this.state = 2225;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 2224;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 2227;
                this.match(PostgreSQLParser.DROP);
                this.state = 2228;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 2229;
                this.name();
                this.state = 2231;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 2230;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 2233;
                this.match(PostgreSQLParser.SET);
                this.state = 2234;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 2235;
                this.match(PostgreSQLParser.OIDS);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 2236;
                this.match(PostgreSQLParser.CLUSTER);
                this.state = 2237;
                this.match(PostgreSQLParser.ON);
                this.state = 2238;
                this.name();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 2239;
                this.match(PostgreSQLParser.SET);
                this.state = 2240;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 2241;
                this.match(PostgreSQLParser.CLUSTER);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 2242;
                this.match(PostgreSQLParser.SET);
                this.state = 2243;
                this.match(PostgreSQLParser.LOGGED);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 2244;
                this.match(PostgreSQLParser.SET);
                this.state = 2245;
                this.match(PostgreSQLParser.UNLOGGED);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 2246;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2247;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2248;
                this.name();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 2249;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2250;
                this.match(PostgreSQLParser.ALWAYS);
                this.state = 2251;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2252;
                this.name();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 2253;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2254;
                this.match(PostgreSQLParser.REPLICA);
                this.state = 2255;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2256;
                this.name();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 2257;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2258;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2259;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 2260;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2261;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2262;
                this.match(PostgreSQLParser.USER);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 2263;
                this.match(PostgreSQLParser.DISABLE_P);
                this.state = 2264;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2265;
                this.name();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 2266;
                this.match(PostgreSQLParser.DISABLE_P);
                this.state = 2267;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2268;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 2269;
                this.match(PostgreSQLParser.DISABLE_P);
                this.state = 2270;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 2271;
                this.match(PostgreSQLParser.USER);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 2272;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2273;
                this.match(PostgreSQLParser.RULE);
                this.state = 2274;
                this.name();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 2275;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2276;
                this.match(PostgreSQLParser.ALWAYS);
                this.state = 2277;
                this.match(PostgreSQLParser.RULE);
                this.state = 2278;
                this.name();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 2279;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2280;
                this.match(PostgreSQLParser.REPLICA);
                this.state = 2281;
                this.match(PostgreSQLParser.RULE);
                this.state = 2282;
                this.name();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 2283;
                this.match(PostgreSQLParser.DISABLE_P);
                this.state = 2284;
                this.match(PostgreSQLParser.RULE);
                this.state = 2285;
                this.name();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 2286;
                this.match(PostgreSQLParser.INHERIT);
                this.state = 2287;
                this.qualified_name();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 2288;
                this.match(PostgreSQLParser.NO);
                this.state = 2289;
                this.match(PostgreSQLParser.INHERIT);
                this.state = 2290;
                this.qualified_name();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 2291;
                this.match(PostgreSQLParser.OF);
                this.state = 2292;
                this.any_name();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 2293;
                this.match(PostgreSQLParser.NOT);
                this.state = 2294;
                this.match(PostgreSQLParser.OF);
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 2295;
                this.match(PostgreSQLParser.OWNER);
                this.state = 2296;
                this.match(PostgreSQLParser.TO);
                this.state = 2297;
                this.rolespec();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 2298;
                this.match(PostgreSQLParser.SET);
                this.state = 2299;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 2300;
                this.name();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 2301;
                this.match(PostgreSQLParser.SET);
                this.state = 2302;
                this.reloptions();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 2303;
                this.match(PostgreSQLParser.RESET);
                this.state = 2304;
                this.reloptions();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 2305;
                this.match(PostgreSQLParser.REPLICA);
                this.state = 2306;
                this.match(PostgreSQLParser.IDENTITY_P);
                this.state = 2307;
                this.replica_identity();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 2308;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 2309;
                this.match(PostgreSQLParser.ROW);
                this.state = 2310;
                this.match(PostgreSQLParser.LEVEL);
                this.state = 2311;
                this.match(PostgreSQLParser.SECURITY);
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 2312;
                this.match(PostgreSQLParser.DISABLE_P);
                this.state = 2313;
                this.match(PostgreSQLParser.ROW);
                this.state = 2314;
                this.match(PostgreSQLParser.LEVEL);
                this.state = 2315;
                this.match(PostgreSQLParser.SECURITY);
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 2316;
                this.match(PostgreSQLParser.FORCE);
                this.state = 2317;
                this.match(PostgreSQLParser.ROW);
                this.state = 2318;
                this.match(PostgreSQLParser.LEVEL);
                this.state = 2319;
                this.match(PostgreSQLParser.SECURITY);
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 2320;
                this.match(PostgreSQLParser.NO);
                this.state = 2321;
                this.match(PostgreSQLParser.FORCE);
                this.state = 2322;
                this.match(PostgreSQLParser.ROW);
                this.state = 2323;
                this.match(PostgreSQLParser.LEVEL);
                this.state = 2324;
                this.match(PostgreSQLParser.SECURITY);
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 2325;
                this.alter_generic_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_column_default(): Alter_column_defaultContext {
        let localContext = new Alter_column_defaultContext(this.context, this.state);
        this.enterRule(localContext, 102, PostgreSQLParser.RULE_alter_column_default);
        try {
            this.state = 2333;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.SET:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2328;
                this.match(PostgreSQLParser.SET);
                this.state = 2329;
                this.match(PostgreSQLParser.DEFAULT);
                this.state = 2330;
                this.a_expr();
                }
                break;
            case PostgreSQLParser.DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2331;
                this.match(PostgreSQLParser.DROP);
                this.state = 2332;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_behavior_(): Drop_behavior_Context {
        let localContext = new Drop_behavior_Context(this.context, this.state);
        this.enterRule(localContext, 104, PostgreSQLParser.RULE_drop_behavior_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2335;
            _la = this.tokenStream.LA(1);
            if(!(_la === 188 || _la === 346)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collate_clause_(): Collate_clause_Context {
        let localContext = new Collate_clause_Context(this.context, this.state);
        this.enterRule(localContext, 106, PostgreSQLParser.RULE_collate_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2337;
            this.match(PostgreSQLParser.COLLATE);
            this.state = 2338;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_using(): Alter_usingContext {
        let localContext = new Alter_usingContext(this.context, this.state);
        this.enterRule(localContext, 108, PostgreSQLParser.RULE_alter_using);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2340;
            this.match(PostgreSQLParser.USING);
            this.state = 2341;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replica_identity(): Replica_identityContext {
        let localContext = new Replica_identityContext(this.context, this.state);
        this.enterRule(localContext, 110, PostgreSQLParser.RULE_replica_identity);
        try {
            this.state = 2349;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.NOTHING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2343;
                this.match(PostgreSQLParser.NOTHING);
                }
                break;
            case PostgreSQLParser.FULL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2344;
                this.match(PostgreSQLParser.FULL);
                }
                break;
            case PostgreSQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2345;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            case PostgreSQLParser.USING:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2346;
                this.match(PostgreSQLParser.USING);
                this.state = 2347;
                this.match(PostgreSQLParser.INDEX);
                this.state = 2348;
                this.name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloptions(): ReloptionsContext {
        let localContext = new ReloptionsContext(this.context, this.state);
        this.enterRule(localContext, 112, PostgreSQLParser.RULE_reloptions);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2351;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 2352;
            this.reloption_list();
            this.state = 2353;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloptions_(): Reloptions_Context {
        let localContext = new Reloptions_Context(this.context, this.state);
        this.enterRule(localContext, 114, PostgreSQLParser.RULE_reloptions_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2355;
            this.match(PostgreSQLParser.WITH);
            this.state = 2356;
            this.reloptions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloption_list(): Reloption_listContext {
        let localContext = new Reloption_listContext(this.context, this.state);
        this.enterRule(localContext, 116, PostgreSQLParser.RULE_reloption_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2358;
            this.reloption_elem();
            this.state = 2363;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2359;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2360;
                this.reloption_elem();
                }
                }
                this.state = 2365;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reloption_elem(): Reloption_elemContext {
        let localContext = new Reloption_elemContext(this.context, this.state);
        this.enterRule(localContext, 118, PostgreSQLParser.RULE_reloption_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2366;
            this.colLabel();
            this.state = 2375;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.EQUAL:
                {
                this.state = 2367;
                this.match(PostgreSQLParser.EQUAL);
                this.state = 2368;
                this.def_arg();
                }
                break;
            case PostgreSQLParser.DOT:
                {
                this.state = 2369;
                this.match(PostgreSQLParser.DOT);
                this.state = 2370;
                this.colLabel();
                this.state = 2373;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 10) {
                    {
                    this.state = 2371;
                    this.match(PostgreSQLParser.EQUAL);
                    this.state = 2372;
                    this.def_arg();
                    }
                }

                }
                break;
            case PostgreSQLParser.CLOSE_PAREN:
            case PostgreSQLParser.COMMA:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_identity_column_option_list(): Alter_identity_column_option_listContext {
        let localContext = new Alter_identity_column_option_listContext(this.context, this.state);
        this.enterRule(localContext, 120, PostgreSQLParser.RULE_alter_identity_column_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2378;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 2377;
                this.alter_identity_column_option();
                }
                }
                this.state = 2380;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 345 || _la === 364);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_identity_column_option(): Alter_identity_column_optionContext {
        let localContext = new Alter_identity_column_optionContext(this.context, this.state);
        this.enterRule(localContext, 122, PostgreSQLParser.RULE_alter_identity_column_option);
        let _la: number;
        try {
            this.state = 2395;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.RESTART:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2382;
                this.match(PostgreSQLParser.RESTART);
                this.state = 2387;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 143 || _la === 576 || _la === 578) {
                    {
                    this.state = 2384;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 143) {
                        {
                        this.state = 2383;
                        this.with_();
                        }
                    }

                    this.state = 2386;
                    this.numericonly();
                    }
                }

                }
                break;
            case PostgreSQLParser.SET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2389;
                this.match(PostgreSQLParser.SET);
                this.state = 2393;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.AS:
                case PostgreSQLParser.CACHE:
                case PostgreSQLParser.CYCLE:
                case PostgreSQLParser.INCREMENT:
                case PostgreSQLParser.MAXVALUE:
                case PostgreSQLParser.MINVALUE:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.OWNED:
                case PostgreSQLParser.RESTART:
                case PostgreSQLParser.SEQUENCE:
                case PostgreSQLParser.START:
                    {
                    this.state = 2390;
                    this.seqoptelem();
                    }
                    break;
                case PostgreSQLParser.GENERATED:
                    {
                    this.state = 2391;
                    this.match(PostgreSQLParser.GENERATED);
                    this.state = 2392;
                    this.generated_when();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionboundspec(): PartitionboundspecContext {
        let localContext = new PartitionboundspecContext(this.context, this.state);
        this.enterRule(localContext, 124, PostgreSQLParser.RULE_partitionboundspec);
        try {
            this.state = 2423;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 95, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2397;
                this.match(PostgreSQLParser.FOR);
                this.state = 2398;
                this.match(PostgreSQLParser.VALUES);
                this.state = 2399;
                this.match(PostgreSQLParser.WITH);
                this.state = 2400;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2401;
                this.hash_partbound();
                this.state = 2402;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2404;
                this.match(PostgreSQLParser.FOR);
                this.state = 2405;
                this.match(PostgreSQLParser.VALUES);
                this.state = 2406;
                this.match(PostgreSQLParser.IN_P);
                this.state = 2407;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2408;
                this.expr_list();
                this.state = 2409;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2411;
                this.match(PostgreSQLParser.FOR);
                this.state = 2412;
                this.match(PostgreSQLParser.VALUES);
                this.state = 2413;
                this.match(PostgreSQLParser.FROM);
                this.state = 2414;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2415;
                this.expr_list();
                this.state = 2416;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 2417;
                this.match(PostgreSQLParser.TO);
                this.state = 2418;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2419;
                this.expr_list();
                this.state = 2420;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2422;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hash_partbound_elem(): Hash_partbound_elemContext {
        let localContext = new Hash_partbound_elemContext(this.context, this.state);
        this.enterRule(localContext, 126, PostgreSQLParser.RULE_hash_partbound_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2425;
            this.nonreservedword();
            this.state = 2426;
            this.iconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hash_partbound(): Hash_partboundContext {
        let localContext = new Hash_partboundContext(this.context, this.state);
        this.enterRule(localContext, 128, PostgreSQLParser.RULE_hash_partbound);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2428;
            this.hash_partbound_elem();
            this.state = 2433;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2429;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2430;
                this.hash_partbound_elem();
                }
                }
                this.state = 2435;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altercompositetypestmt(): AltercompositetypestmtContext {
        let localContext = new AltercompositetypestmtContext(this.context, this.state);
        this.enterRule(localContext, 130, PostgreSQLParser.RULE_altercompositetypestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2436;
            this.match(PostgreSQLParser.ALTER);
            this.state = 2437;
            this.match(PostgreSQLParser.TYPE_P);
            this.state = 2438;
            this.any_name();
            this.state = 2439;
            this.alter_type_cmds();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_type_cmds(): Alter_type_cmdsContext {
        let localContext = new Alter_type_cmdsContext(this.context, this.state);
        this.enterRule(localContext, 132, PostgreSQLParser.RULE_alter_type_cmds);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2441;
            this.alter_type_cmd();
            this.state = 2446;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2442;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2443;
                this.alter_type_cmd();
                }
                }
                this.state = 2448;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_type_cmd(): Alter_type_cmdContext {
        let localContext = new Alter_type_cmdContext(this.context, this.state);
        this.enterRule(localContext, 134, PostgreSQLParser.RULE_alter_type_cmd);
        let _la: number;
        try {
            this.state = 2479;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.ADD_P:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2449;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 2450;
                this.match(PostgreSQLParser.ATTRIBUTE);
                this.state = 2451;
                this.tablefuncelement();
                this.state = 2453;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 2452;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case PostgreSQLParser.DROP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2455;
                this.match(PostgreSQLParser.DROP);
                this.state = 2456;
                this.match(PostgreSQLParser.ATTRIBUTE);
                this.state = 2459;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                case 1:
                    {
                    this.state = 2457;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 2458;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 2461;
                this.colid();
                this.state = 2463;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 2462;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case PostgreSQLParser.ALTER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2465;
                this.match(PostgreSQLParser.ALTER);
                this.state = 2466;
                this.match(PostgreSQLParser.ATTRIBUTE);
                this.state = 2467;
                this.colid();
                this.state = 2469;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 364) {
                    {
                    this.state = 2468;
                    this.set_data_();
                    }
                }

                this.state = 2471;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 2472;
                this.typename();
                this.state = 2474;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 2473;
                    this.collate_clause_();
                    }
                }

                this.state = 2477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 2476;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public closeportalstmt(): CloseportalstmtContext {
        let localContext = new CloseportalstmtContext(this.context, this.state);
        this.enterRule(localContext, 136, PostgreSQLParser.RULE_closeportalstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2481;
            this.match(PostgreSQLParser.CLOSE);
            this.state = 2484;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                {
                this.state = 2482;
                this.cursor_name();
                }
                break;
            case PostgreSQLParser.ALL:
                {
                this.state = 2483;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copystmt(): CopystmtContext {
        let localContext = new CopystmtContext(this.context, this.state);
        this.enterRule(localContext, 138, PostgreSQLParser.RULE_copystmt);
        let _la: number;
        try {
            this.state = 2523;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2486;
                this.match(PostgreSQLParser.COPY);
                this.state = 2488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 145) {
                    {
                    this.state = 2487;
                    this.binary_();
                    }
                }

                this.state = 2490;
                this.qualified_name();
                this.state = 2492;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2491;
                    this.column_list_();
                    }
                }

                this.state = 2494;
                this.copy_from();
                this.state = 2496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 328) {
                    {
                    this.state = 2495;
                    this.program_();
                    }
                }

                this.state = 2498;
                this.copy_file_name();
                this.state = 2500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138 || _la === 222) {
                    {
                    this.state = 2499;
                    this.copy_delimiter();
                    }
                }

                this.state = 2503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 2502;
                    this.with_();
                    }
                }

                this.state = 2505;
                this.copy_options();
                this.state = 2507;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 2506;
                    this.where_clause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2509;
                this.match(PostgreSQLParser.COPY);
                this.state = 2510;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2511;
                this.preparablestmt();
                this.state = 2512;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 2513;
                this.match(PostgreSQLParser.TO);
                this.state = 2515;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 328) {
                    {
                    this.state = 2514;
                    this.program_();
                    }
                }

                this.state = 2517;
                this.copy_file_name();
                this.state = 2519;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 2518;
                    this.with_();
                    }
                }

                this.state = 2521;
                this.copy_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_from(): Copy_fromContext {
        let localContext = new Copy_fromContext(this.context, this.state);
        this.enterRule(localContext, 140, PostgreSQLParser.RULE_copy_from);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2525;
            _la = this.tokenStream.LA(1);
            if(!(_la === 102 || _la === 132)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public program_(): Program_Context {
        let localContext = new Program_Context(this.context, this.state);
        this.enterRule(localContext, 142, PostgreSQLParser.RULE_program_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2527;
            this.match(PostgreSQLParser.PROGRAM);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_file_name(): Copy_file_nameContext {
        let localContext = new Copy_file_nameContext(this.context, this.state);
        this.enterRule(localContext, 144, PostgreSQLParser.RULE_copy_file_name);
        try {
            this.state = 2532;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2529;
                this.sconst();
                }
                break;
            case PostgreSQLParser.STDIN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2530;
                this.match(PostgreSQLParser.STDIN);
                }
                break;
            case PostgreSQLParser.STDOUT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2531;
                this.match(PostgreSQLParser.STDOUT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_options(): Copy_optionsContext {
        let localContext = new Copy_optionsContext(this.context, this.state);
        this.enterRule(localContext, 146, PostgreSQLParser.RULE_copy_options);
        try {
            this.state = 2539;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.EOF:
            case PostgreSQLParser.SEMI:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.WHERE:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.QUOTE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2534;
                this.copy_opt_list();
                }
                break;
            case PostgreSQLParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2535;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2536;
                this.copy_generic_opt_list();
                this.state = 2537;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_opt_list(): Copy_opt_listContext {
        let localContext = new Copy_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 148, PostgreSQLParser.RULE_copy_opt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 116 || _la === 145 || _la === 150 || ((((_la - 209)) & ~0x1F) === 0 && ((1 << (_la - 209)) & 75501569) !== 0) || _la === 247 || _la === 254 || _la === 329) {
                {
                {
                this.state = 2541;
                this.copy_opt_item();
                }
                }
                this.state = 2546;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_opt_item(): Copy_opt_itemContext {
        let localContext = new Copy_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 150, PostgreSQLParser.RULE_copy_opt_item);
        let _la: number;
        try {
            this.state = 2586;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 122, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2547;
                this.match(PostgreSQLParser.BINARY);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2548;
                this.match(PostgreSQLParser.FREEZE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2549;
                this.match(PostgreSQLParser.DELIMITER);
                this.state = 2551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 2550;
                    this.as_();
                    }
                }

                this.state = 2553;
                this.sconst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2554;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 2556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 2555;
                    this.as_();
                    }
                }

                this.state = 2558;
                this.sconst();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2559;
                this.match(PostgreSQLParser.CSV);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2560;
                this.match(PostgreSQLParser.HEADER_P);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2561;
                this.match(PostgreSQLParser.QUOTE);
                this.state = 2563;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 2562;
                    this.as_();
                    }
                }

                this.state = 2565;
                this.sconst();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2566;
                this.match(PostgreSQLParser.ESCAPE);
                this.state = 2568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 2567;
                    this.as_();
                    }
                }

                this.state = 2570;
                this.sconst();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2571;
                this.match(PostgreSQLParser.FORCE);
                this.state = 2572;
                this.match(PostgreSQLParser.QUOTE);
                this.state = 2573;
                this.columnlist();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2574;
                this.match(PostgreSQLParser.FORCE);
                this.state = 2575;
                this.match(PostgreSQLParser.QUOTE);
                this.state = 2576;
                this.match(PostgreSQLParser.STAR);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2577;
                this.match(PostgreSQLParser.FORCE);
                this.state = 2578;
                this.match(PostgreSQLParser.NOT);
                this.state = 2579;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 2580;
                this.columnlist();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2581;
                this.match(PostgreSQLParser.FORCE);
                this.state = 2582;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 2583;
                this.columnlist();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2584;
                this.match(PostgreSQLParser.ENCODING);
                this.state = 2585;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public binary_(): Binary_Context {
        let localContext = new Binary_Context(this.context, this.state);
        this.enterRule(localContext, 152, PostgreSQLParser.RULE_binary_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2588;
            this.match(PostgreSQLParser.BINARY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_delimiter(): Copy_delimiterContext {
        let localContext = new Copy_delimiterContext(this.context, this.state);
        this.enterRule(localContext, 154, PostgreSQLParser.RULE_copy_delimiter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2591;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138) {
                {
                this.state = 2590;
                this.using_();
                }
            }

            this.state = 2593;
            this.match(PostgreSQLParser.DELIMITERS);
            this.state = 2594;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public using_(): Using_Context {
        let localContext = new Using_Context(this.context, this.state);
        this.enterRule(localContext, 156, PostgreSQLParser.RULE_using_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2596;
            this.match(PostgreSQLParser.USING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_list(): Copy_generic_opt_listContext {
        let localContext = new Copy_generic_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 158, PostgreSQLParser.RULE_copy_generic_opt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2598;
            this.copy_generic_opt_elem();
            this.state = 2603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2599;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2600;
                this.copy_generic_opt_elem();
                }
                }
                this.state = 2605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_elem(): Copy_generic_opt_elemContext {
        let localContext = new Copy_generic_opt_elemContext(this.context, this.state);
        this.enterRule(localContext, 160, PostgreSQLParser.RULE_copy_generic_opt_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2606;
            this.colLabel();
            this.state = 2608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 3221238276) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294966271) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 7) !== 0) || _la === 98 || _la === 118 || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966273) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109073479) !== 0) || _la === 587) {
                {
                this.state = 2607;
                this.copy_generic_opt_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_arg(): Copy_generic_opt_argContext {
        let localContext = new Copy_generic_opt_argContext(this.context, this.state);
        this.enterRule(localContext, 162, PostgreSQLParser.RULE_copy_generic_opt_arg);
        try {
            this.state = 2617;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2610;
                this.boolean_or_string_();
                }
                break;
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2611;
                this.numericonly();
                }
                break;
            case PostgreSQLParser.STAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2612;
                this.match(PostgreSQLParser.STAR);
                }
                break;
            case PostgreSQLParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2613;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2614;
                this.copy_generic_opt_arg_list();
                this.state = 2615;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext {
        let localContext = new Copy_generic_opt_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 164, PostgreSQLParser.RULE_copy_generic_opt_arg_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2619;
            this.copy_generic_opt_arg_list_item();
            this.state = 2624;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2620;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2621;
                this.copy_generic_opt_arg_list_item();
                }
                }
                this.state = 2626;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public copy_generic_opt_arg_list_item(): Copy_generic_opt_arg_list_itemContext {
        let localContext = new Copy_generic_opt_arg_list_itemContext(this.context, this.state);
        this.enterRule(localContext, 166, PostgreSQLParser.RULE_copy_generic_opt_arg_list_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2627;
            this.boolean_or_string_();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createstmt(): CreatestmtContext {
        let localContext = new CreatestmtContext(this.context, this.state);
        this.enterRule(localContext, 168, PostgreSQLParser.RULE_createstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2629;
            this.match(PostgreSQLParser.CREATE);
            this.state = 2631;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251 || _la === 283 || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 32773) !== 0)) {
                {
                this.state = 2630;
                this.opttemp();
                }
            }

            this.state = 2633;
            this.match(PostgreSQLParser.TABLE);
            this.state = 2637;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
            case 1:
                {
                this.state = 2634;
                this.match(PostgreSQLParser.IF_P);
                this.state = 2635;
                this.match(PostgreSQLParser.NOT);
                this.state = 2636;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 2639;
            this.qualified_name();
            this.state = 2705;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
                {
                this.state = 2640;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2642;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 2359327) !== 0) || _la === 101 || _la === 123 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & 2218786817) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 4294967295) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 4294967295) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 4294967295) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4294967295) !== 0) || ((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294967263) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294967295) !== 0) || ((((_la - 463)) & ~0x1F) === 0 && ((1 << (_la - 463)) & 3758096383) !== 0) || ((((_la - 495)) & ~0x1F) === 0 && ((1 << (_la - 495)) & 4293885951) !== 0) || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & 469794821) !== 0) || _la === 559 || _la === 579) {
                    {
                    this.state = 2641;
                    this.opttableelementlist();
                    }
                }

                this.state = 2644;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 2646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267) {
                    {
                    this.state = 2645;
                    this.optinherit();
                    }
                }

                this.state = 2649;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 316) {
                    {
                    this.state = 2648;
                    this.optpartitionspec();
                    }
                }

                this.state = 2652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2651;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143 || _la === 410) {
                    {
                    this.state = 2654;
                    this.optwith();
                    }
                }

                this.state = 2658;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 2657;
                    this.oncommitoption();
                    }
                }

                this.state = 2661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 382) {
                    {
                    this.state = 2660;
                    this.opttablespace();
                    }
                }

                }
                break;
            case PostgreSQLParser.OF:
                {
                this.state = 2663;
                this.match(PostgreSQLParser.OF);
                this.state = 2664;
                this.any_name();
                this.state = 2666;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2665;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 2669;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 316) {
                    {
                    this.state = 2668;
                    this.optpartitionspec();
                    }
                }

                this.state = 2672;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2671;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2675;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143 || _la === 410) {
                    {
                    this.state = 2674;
                    this.optwith();
                    }
                }

                this.state = 2678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 2677;
                    this.oncommitoption();
                    }
                }

                this.state = 2681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 382) {
                    {
                    this.state = 2680;
                    this.opttablespace();
                    }
                }

                }
                break;
            case PostgreSQLParser.PARTITION:
                {
                this.state = 2683;
                this.match(PostgreSQLParser.PARTITION);
                this.state = 2684;
                this.match(PostgreSQLParser.OF);
                this.state = 2685;
                this.qualified_name();
                this.state = 2687;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2686;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 2689;
                this.partitionboundspec();
                this.state = 2691;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 316) {
                    {
                    this.state = 2690;
                    this.optpartitionspec();
                    }
                }

                this.state = 2694;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2693;
                    this.table_access_method_clause();
                    }
                }

                this.state = 2697;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143 || _la === 410) {
                    {
                    this.state = 2696;
                    this.optwith();
                    }
                }

                this.state = 2700;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 2699;
                    this.oncommitoption();
                    }
                }

                this.state = 2703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 382) {
                    {
                    this.state = 2702;
                    this.opttablespace();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttemp(): OpttempContext {
        let localContext = new OpttempContext(this.context, this.state);
        this.enterRule(localContext, 170, PostgreSQLParser.RULE_opttemp);
        let _la: number;
        try {
            this.state = 2714;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.TEMPORARY:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2707;
                this.match(PostgreSQLParser.TEMPORARY);
                }
                break;
            case PostgreSQLParser.TEMP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2708;
                this.match(PostgreSQLParser.TEMP);
                }
                break;
            case PostgreSQLParser.LOCAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2709;
                this.match(PostgreSQLParser.LOCAL);
                this.state = 2710;
                _la = this.tokenStream.LA(1);
                if(!(_la === 383 || _la === 385)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSQLParser.GLOBAL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2711;
                this.match(PostgreSQLParser.GLOBAL);
                this.state = 2712;
                _la = this.tokenStream.LA(1);
                if(!(_la === 383 || _la === 385)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSQLParser.UNLOGGED:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2713;
                this.match(PostgreSQLParser.UNLOGGED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttableelementlist(): OpttableelementlistContext {
        let localContext = new OpttableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 172, PostgreSQLParser.RULE_opttableelementlist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2716;
            this.tableelementlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext {
        let localContext = new OpttypedtableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 174, PostgreSQLParser.RULE_opttypedtableelementlist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2718;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 2719;
            this.typedtableelementlist();
            this.state = 2720;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableelementlist(): TableelementlistContext {
        let localContext = new TableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 176, PostgreSQLParser.RULE_tableelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2722;
            this.tableelement();
            this.state = 2727;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2723;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2724;
                this.tableelement();
                }
                }
                this.state = 2729;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typedtableelementlist(): TypedtableelementlistContext {
        let localContext = new TypedtableelementlistContext(this.context, this.state);
        this.enterRule(localContext, 178, PostgreSQLParser.RULE_typedtableelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2730;
            this.typedtableelement();
            this.state = 2735;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2731;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2732;
                this.typedtableelement();
                }
                }
                this.state = 2737;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableelement(): TableelementContext {
        let localContext = new TableelementContext(this.context, this.state);
        this.enterRule(localContext, 180, PostgreSQLParser.RULE_tableelement);
        try {
            this.state = 2741;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2738;
                this.tableconstraint();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2739;
                this.tablelikeclause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2740;
                this.columnDef();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typedtableelement(): TypedtableelementContext {
        let localContext = new TypedtableelementContext(this.context, this.state);
        this.enterRule(localContext, 182, PostgreSQLParser.RULE_typedtableelement);
        try {
            this.state = 2745;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2743;
                this.columnOptions();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2744;
                this.tableconstraint();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnDef(): ColumnDefContext {
        let localContext = new ColumnDefContext(this.context, this.state);
        this.enterRule(localContext, 184, PostgreSQLParser.RULE_columnDef);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2747;
            this.colid();
            this.state = 2748;
            this.typename();
            this.state = 2750;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 311) {
                {
                this.state = 2749;
                this.create_generic_options();
                }
            }

            this.state = 2752;
            this.colquallist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnOptions(): ColumnOptionsContext {
        let localContext = new ColumnOptionsContext(this.context, this.state);
        this.enterRule(localContext, 186, PostgreSQLParser.RULE_columnOptions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2754;
            this.colid();
            this.state = 2757;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 2755;
                this.match(PostgreSQLParser.WITH);
                this.state = 2756;
                this.match(PostgreSQLParser.OPTIONS);
                }
            }

            this.state = 2759;
            this.colquallist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colquallist(): ColquallistContext {
        let localContext = new ColquallistContext(this.context, this.state);
        this.enterRule(localContext, 188, PostgreSQLParser.RULE_colquallist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2764;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & 134223883) !== 0) || ((((_la - 115)) & ~0x1F) === 0 && ((1 << (_la - 115)) & 2097923) !== 0) || _la === 476) {
                {
                {
                this.state = 2761;
                this.colconstraint();
                }
                }
                this.state = 2766;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colconstraint(): ColconstraintContext {
        let localContext = new ColconstraintContext(this.context, this.state);
        this.enterRule(localContext, 190, PostgreSQLParser.RULE_colconstraint);
        try {
            this.state = 2775;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2767;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 2768;
                this.name();
                this.state = 2769;
                this.colconstraintelem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2771;
                this.colconstraintelem();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2772;
                this.constraintattr();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2773;
                this.match(PostgreSQLParser.COLLATE);
                this.state = 2774;
                this.any_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colconstraintelem(): ColconstraintelemContext {
        let localContext = new ColconstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 192, PostgreSQLParser.RULE_colconstraintelem);
        let _la: number;
        try {
            this.state = 2829;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.NOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2777;
                this.match(PostgreSQLParser.NOT);
                this.state = 2778;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case PostgreSQLParser.NULL_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2779;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case PostgreSQLParser.UNIQUE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2780;
                this.match(PostgreSQLParser.UNIQUE);
                this.state = 2782;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 2781;
                    this.definition_();
                    }
                }

                this.state = 2785;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2784;
                    this.optconstablespace();
                    }
                }

                }
                break;
            case PostgreSQLParser.PRIMARY:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2787;
                this.match(PostgreSQLParser.PRIMARY);
                this.state = 2788;
                this.match(PostgreSQLParser.KEY);
                this.state = 2790;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 2789;
                    this.definition_();
                    }
                }

                this.state = 2793;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2792;
                    this.optconstablespace();
                    }
                }

                }
                break;
            case PostgreSQLParser.CHECK:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2795;
                this.match(PostgreSQLParser.CHECK);
                this.state = 2796;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2797;
                this.a_expr();
                this.state = 2798;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 2800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 2799;
                    this.no_inherit_();
                    }
                }

                }
                break;
            case PostgreSQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2802;
                this.match(PostgreSQLParser.DEFAULT);
                this.state = 2803;
                this.b_expr(0);
                }
                break;
            case PostgreSQLParser.GENERATED:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2804;
                this.match(PostgreSQLParser.GENERATED);
                this.state = 2805;
                this.generated_when();
                this.state = 2806;
                this.match(PostgreSQLParser.AS);
                this.state = 2816;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.IDENTITY_P:
                    {
                    this.state = 2807;
                    this.match(PostgreSQLParser.IDENTITY_P);
                    this.state = 2809;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 2) {
                        {
                        this.state = 2808;
                        this.optparenthesizedseqoptlist();
                        }
                    }

                    }
                    break;
                case PostgreSQLParser.OPEN_PAREN:
                    {
                    this.state = 2811;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 2812;
                    this.a_expr();
                    this.state = 2813;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    this.state = 2814;
                    this.match(PostgreSQLParser.STORED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSQLParser.REFERENCES:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2818;
                this.match(PostgreSQLParser.REFERENCES);
                this.state = 2819;
                this.qualified_name();
                this.state = 2821;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2820;
                    this.column_list_();
                    }
                }

                this.state = 2824;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 287) {
                    {
                    this.state = 2823;
                    this.key_match();
                    }
                }

                this.state = 2827;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 2826;
                    this.key_actions();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generated_when(): Generated_whenContext {
        let localContext = new Generated_whenContext(this.context, this.state);
        this.enterRule(localContext, 194, PostgreSQLParser.RULE_generated_when);
        try {
            this.state = 2834;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.ALWAYS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2831;
                this.match(PostgreSQLParser.ALWAYS);
                }
                break;
            case PostgreSQLParser.BY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2832;
                this.match(PostgreSQLParser.BY);
                this.state = 2833;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintattr(): ConstraintattrContext {
        let localContext = new ConstraintattrContext(this.context, this.state);
        this.enterRule(localContext, 196, PostgreSQLParser.RULE_constraintattr);
        let _la: number;
        try {
            this.state = 2841;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.DEFERRABLE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2836;
                this.match(PostgreSQLParser.DEFERRABLE);
                }
                break;
            case PostgreSQLParser.NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2837;
                this.match(PostgreSQLParser.NOT);
                this.state = 2838;
                this.match(PostgreSQLParser.DEFERRABLE);
                }
                break;
            case PostgreSQLParser.INITIALLY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2839;
                this.match(PostgreSQLParser.INITIALLY);
                this.state = 2840;
                _la = this.tokenStream.LA(1);
                if(!(_la === 218 || _la === 259)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablelikeclause(): TablelikeclauseContext {
        let localContext = new TablelikeclauseContext(this.context, this.state);
        this.enterRule(localContext, 198, PostgreSQLParser.RULE_tablelikeclause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2843;
            this.match(PostgreSQLParser.LIKE);
            this.state = 2844;
            this.qualified_name();
            this.state = 2845;
            this.tablelikeoptionlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablelikeoptionlist(): TablelikeoptionlistContext {
        let localContext = new TablelikeoptionlistContext(this.context, this.state);
        this.enterRule(localContext, 200, PostgreSQLParser.RULE_tablelikeoptionlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2851;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 238 || _la === 262) {
                {
                {
                this.state = 2847;
                _la = this.tokenStream.LA(1);
                if(!(_la === 238 || _la === 262)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2848;
                this.tablelikeoption();
                }
                }
                this.state = 2853;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablelikeoption(): TablelikeoptionContext {
        let localContext = new TablelikeoptionContext(this.context, this.state);
        this.enterRule(localContext, 202, PostgreSQLParser.RULE_tablelikeoption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2854;
            _la = this.tokenStream.LA(1);
            if(!(_la === 68 || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 524321) !== 0) || _la === 257 || _la === 265 || _la === 373 || _la === 376 || _la === 476)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableconstraint(): TableconstraintContext {
        let localContext = new TableconstraintContext(this.context, this.state);
        this.enterRule(localContext, 204, PostgreSQLParser.RULE_tableconstraint);
        try {
            this.state = 2861;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.CONSTRAINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2856;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 2857;
                this.name();
                this.state = 2858;
                this.constraintelem();
                }
                break;
            case PostgreSQLParser.CHECK:
            case PostgreSQLParser.FOREIGN:
            case PostgreSQLParser.PRIMARY:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.EXCLUDE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2860;
                this.constraintelem();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintelem(): ConstraintelemContext {
        let localContext = new ConstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 206, PostgreSQLParser.RULE_constraintelem);
        let _la: number;
        try {
            this.state = 2949;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.CHECK:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2863;
                this.match(PostgreSQLParser.CHECK);
                this.state = 2864;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2865;
                this.a_expr();
                this.state = 2866;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 2867;
                this.constraintattributespec();
                }
                break;
            case PostgreSQLParser.UNIQUE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2869;
                this.match(PostgreSQLParser.UNIQUE);
                this.state = 2887;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.OPEN_PAREN:
                    {
                    this.state = 2870;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 2871;
                    this.columnlist();
                    this.state = 2872;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    this.state = 2874;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 479) {
                        {
                        this.state = 2873;
                        this.c_include_();
                        }
                    }

                    this.state = 2877;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 143) {
                        {
                        this.state = 2876;
                        this.definition_();
                        }
                    }

                    this.state = 2880;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 138) {
                        {
                        this.state = 2879;
                        this.optconstablespace();
                        }
                    }

                    this.state = 2882;
                    this.constraintattributespec();
                    }
                    break;
                case PostgreSQLParser.USING:
                    {
                    this.state = 2884;
                    this.existingindex();
                    this.state = 2885;
                    this.constraintattributespec();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSQLParser.PRIMARY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2889;
                this.match(PostgreSQLParser.PRIMARY);
                this.state = 2890;
                this.match(PostgreSQLParser.KEY);
                this.state = 2908;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.OPEN_PAREN:
                    {
                    this.state = 2891;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 2892;
                    this.columnlist();
                    this.state = 2893;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    this.state = 2895;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 479) {
                        {
                        this.state = 2894;
                        this.c_include_();
                        }
                    }

                    this.state = 2898;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 143) {
                        {
                        this.state = 2897;
                        this.definition_();
                        }
                    }

                    this.state = 2901;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 138) {
                        {
                        this.state = 2900;
                        this.optconstablespace();
                        }
                    }

                    this.state = 2903;
                    this.constraintattributespec();
                    }
                    break;
                case PostgreSQLParser.USING:
                    {
                    this.state = 2905;
                    this.existingindex();
                    this.state = 2906;
                    this.constraintattributespec();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSQLParser.EXCLUDE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2910;
                this.match(PostgreSQLParser.EXCLUDE);
                this.state = 2912;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2911;
                    this.access_method_clause();
                    }
                }

                this.state = 2914;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2915;
                this.exclusionconstraintlist();
                this.state = 2916;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 2918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 479) {
                    {
                    this.state = 2917;
                    this.c_include_();
                    }
                }

                this.state = 2921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 2920;
                    this.definition_();
                    }
                }

                this.state = 2924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 2923;
                    this.optconstablespace();
                    }
                }

                this.state = 2927;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 2926;
                    this.exclusionwhereclause();
                    }
                }

                this.state = 2929;
                this.constraintattributespec();
                }
                break;
            case PostgreSQLParser.FOREIGN:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2931;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 2932;
                this.match(PostgreSQLParser.KEY);
                this.state = 2933;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2934;
                this.columnlist();
                this.state = 2935;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 2936;
                this.match(PostgreSQLParser.REFERENCES);
                this.state = 2937;
                this.qualified_name();
                this.state = 2939;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 2938;
                    this.column_list_();
                    }
                }

                this.state = 2942;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 287) {
                    {
                    this.state = 2941;
                    this.key_match();
                    }
                }

                this.state = 2945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 118) {
                    {
                    this.state = 2944;
                    this.key_actions();
                    }
                }

                this.state = 2947;
                this.constraintattributespec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public no_inherit_(): No_inherit_Context {
        let localContext = new No_inherit_Context(this.context, this.state);
        this.enterRule(localContext, 208, PostgreSQLParser.RULE_no_inherit_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2951;
            this.match(PostgreSQLParser.NO);
            this.state = 2952;
            this.match(PostgreSQLParser.INHERIT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_list_(): Column_list_Context {
        let localContext = new Column_list_Context(this.context, this.state);
        this.enterRule(localContext, 210, PostgreSQLParser.RULE_column_list_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2954;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 2955;
            this.columnlist();
            this.state = 2956;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnlist(): ColumnlistContext {
        let localContext = new ColumnlistContext(this.context, this.state);
        this.enterRule(localContext, 212, PostgreSQLParser.RULE_columnlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2958;
            this.columnElem();
            this.state = 2963;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2959;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2960;
                this.columnElem();
                }
                }
                this.state = 2965;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnElem(): ColumnElemContext {
        let localContext = new ColumnElemContext(this.context, this.state);
        this.enterRule(localContext, 214, PostgreSQLParser.RULE_columnElem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2966;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public c_include_(): C_include_Context {
        let localContext = new C_include_Context(this.context, this.state);
        this.enterRule(localContext, 216, PostgreSQLParser.RULE_c_include_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2968;
            this.match(PostgreSQLParser.INCLUDE);
            this.state = 2969;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 2970;
            this.columnlist();
            this.state = 2971;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_match(): Key_matchContext {
        let localContext = new Key_matchContext(this.context, this.state);
        this.enterRule(localContext, 218, PostgreSQLParser.RULE_key_match);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2973;
            this.match(PostgreSQLParser.MATCH);
            this.state = 2974;
            _la = this.tokenStream.LA(1);
            if(!(_la === 151 || _la === 315 || _la === 367)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionconstraintlist(): ExclusionconstraintlistContext {
        let localContext = new ExclusionconstraintlistContext(this.context, this.state);
        this.enterRule(localContext, 220, PostgreSQLParser.RULE_exclusionconstraintlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2976;
            this.exclusionconstraintelem();
            this.state = 2981;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 2977;
                this.match(PostgreSQLParser.COMMA);
                this.state = 2978;
                this.exclusionconstraintelem();
                }
                }
                this.state = 2983;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionconstraintelem(): ExclusionconstraintelemContext {
        let localContext = new ExclusionconstraintelemContext(this.context, this.state);
        this.enterRule(localContext, 222, PostgreSQLParser.RULE_exclusionconstraintelem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2984;
            this.index_elem();
            this.state = 2985;
            this.match(PostgreSQLParser.WITH);
            this.state = 2992;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
            case 1:
                {
                this.state = 2986;
                this.any_operator();
                }
                break;
            case 2:
                {
                this.state = 2987;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 2988;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 2989;
                this.any_operator();
                this.state = 2990;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public exclusionwhereclause(): ExclusionwhereclauseContext {
        let localContext = new ExclusionwhereclauseContext(this.context, this.state);
        this.enterRule(localContext, 224, PostgreSQLParser.RULE_exclusionwhereclause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2994;
            this.match(PostgreSQLParser.WHERE);
            this.state = 2995;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 2996;
            this.a_expr();
            this.state = 2997;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_actions(): Key_actionsContext {
        let localContext = new Key_actionsContext(this.context, this.state);
        this.enterRule(localContext, 226, PostgreSQLParser.RULE_key_actions);
        try {
            this.state = 3007;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 194, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2999;
                this.key_update();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3000;
                this.key_delete();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3001;
                this.key_update();
                this.state = 3002;
                this.key_delete();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3004;
                this.key_delete();
                this.state = 3005;
                this.key_update();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_update(): Key_updateContext {
        let localContext = new Key_updateContext(this.context, this.state);
        this.enterRule(localContext, 228, PostgreSQLParser.RULE_key_update);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3009;
            this.match(PostgreSQLParser.ON);
            this.state = 3010;
            this.match(PostgreSQLParser.UPDATE);
            this.state = 3011;
            this.key_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_delete(): Key_deleteContext {
        let localContext = new Key_deleteContext(this.context, this.state);
        this.enterRule(localContext, 230, PostgreSQLParser.RULE_key_delete);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3013;
            this.match(PostgreSQLParser.ON);
            this.state = 3014;
            this.match(PostgreSQLParser.DELETE_P);
            this.state = 3015;
            this.key_action();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public key_action(): Key_actionContext {
        let localContext = new Key_actionContext(this.context, this.state);
        this.enterRule(localContext, 232, PostgreSQLParser.RULE_key_action);
        let _la: number;
        try {
            this.state = 3023;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.NO:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3017;
                this.match(PostgreSQLParser.NO);
                this.state = 3018;
                this.match(PostgreSQLParser.ACTION);
                }
                break;
            case PostgreSQLParser.RESTRICT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3019;
                this.match(PostgreSQLParser.RESTRICT);
                }
                break;
            case PostgreSQLParser.CASCADE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3020;
                this.match(PostgreSQLParser.CASCADE);
                }
                break;
            case PostgreSQLParser.SET:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3021;
                this.match(PostgreSQLParser.SET);
                this.state = 3022;
                _la = this.tokenStream.LA(1);
                if(!(_la === 91 || _la === 116)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optinherit(): OptinheritContext {
        let localContext = new OptinheritContext(this.context, this.state);
        this.enterRule(localContext, 234, PostgreSQLParser.RULE_optinherit);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3025;
            this.match(PostgreSQLParser.INHERITS);
            this.state = 3026;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3027;
            this.qualified_name_list();
            this.state = 3028;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optpartitionspec(): OptpartitionspecContext {
        let localContext = new OptpartitionspecContext(this.context, this.state);
        this.enterRule(localContext, 236, PostgreSQLParser.RULE_optpartitionspec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3030;
            this.partitionspec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionspec(): PartitionspecContext {
        let localContext = new PartitionspecContext(this.context, this.state);
        this.enterRule(localContext, 238, PostgreSQLParser.RULE_partitionspec);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3032;
            this.match(PostgreSQLParser.PARTITION);
            this.state = 3033;
            this.match(PostgreSQLParser.BY);
            this.state = 3034;
            this.colid();
            this.state = 3035;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3036;
            this.part_params();
            this.state = 3037;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public part_params(): Part_paramsContext {
        let localContext = new Part_paramsContext(this.context, this.state);
        this.enterRule(localContext, 240, PostgreSQLParser.RULE_part_params);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3039;
            this.part_elem();
            this.state = 3044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3040;
                this.match(PostgreSQLParser.COMMA);
                this.state = 3041;
                this.part_elem();
                }
                }
                this.state = 3046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public part_elem(): Part_elemContext {
        let localContext = new Part_elemContext(this.context, this.state);
        this.enterRule(localContext, 242, PostgreSQLParser.RULE_part_elem);
        let _la: number;
        try {
            this.state = 3070;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3047;
                this.colid();
                this.state = 3049;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 3048;
                    this.collate_();
                    }
                }

                this.state = 3052;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 3051;
                    this.class_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3054;
                this.func_expr_windowless();
                this.state = 3056;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 3055;
                    this.collate_();
                    }
                }

                this.state = 3059;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 3058;
                    this.class_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3061;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 3062;
                this.a_expr();
                this.state = 3063;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 3065;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 3064;
                    this.collate_();
                    }
                }

                this.state = 3068;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 3067;
                    this.class_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_access_method_clause(): Table_access_method_clauseContext {
        let localContext = new Table_access_method_clauseContext(this.context, this.state);
        this.enterRule(localContext, 244, PostgreSQLParser.RULE_table_access_method_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3072;
            this.match(PostgreSQLParser.USING);
            this.state = 3073;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optwith(): OptwithContext {
        let localContext = new OptwithContext(this.context, this.state);
        this.enterRule(localContext, 246, PostgreSQLParser.RULE_optwith);
        try {
            this.state = 3079;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3075;
                this.match(PostgreSQLParser.WITH);
                this.state = 3076;
                this.reloptions();
                }
                break;
            case PostgreSQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3077;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 3078;
                this.match(PostgreSQLParser.OIDS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oncommitoption(): OncommitoptionContext {
        let localContext = new OncommitoptionContext(this.context, this.state);
        this.enterRule(localContext, 248, PostgreSQLParser.RULE_oncommitoption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3081;
            this.match(PostgreSQLParser.ON);
            this.state = 3082;
            this.match(PostgreSQLParser.COMMIT);
            this.state = 3088;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.DROP:
                {
                this.state = 3083;
                this.match(PostgreSQLParser.DROP);
                }
                break;
            case PostgreSQLParser.DELETE_P:
                {
                this.state = 3084;
                this.match(PostgreSQLParser.DELETE_P);
                this.state = 3085;
                this.match(PostgreSQLParser.ROWS);
                }
                break;
            case PostgreSQLParser.PRESERVE:
                {
                this.state = 3086;
                this.match(PostgreSQLParser.PRESERVE);
                this.state = 3087;
                this.match(PostgreSQLParser.ROWS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttablespace(): OpttablespaceContext {
        let localContext = new OpttablespaceContext(this.context, this.state);
        this.enterRule(localContext, 250, PostgreSQLParser.RULE_opttablespace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3090;
            this.match(PostgreSQLParser.TABLESPACE);
            this.state = 3091;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optconstablespace(): OptconstablespaceContext {
        let localContext = new OptconstablespaceContext(this.context, this.state);
        this.enterRule(localContext, 252, PostgreSQLParser.RULE_optconstablespace);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3093;
            this.match(PostgreSQLParser.USING);
            this.state = 3094;
            this.match(PostgreSQLParser.INDEX);
            this.state = 3095;
            this.match(PostgreSQLParser.TABLESPACE);
            this.state = 3096;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existingindex(): ExistingindexContext {
        let localContext = new ExistingindexContext(this.context, this.state);
        this.enterRule(localContext, 254, PostgreSQLParser.RULE_existingindex);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3098;
            this.match(PostgreSQLParser.USING);
            this.state = 3099;
            this.match(PostgreSQLParser.INDEX);
            this.state = 3100;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createstatsstmt(): CreatestatsstmtContext {
        let localContext = new CreatestatsstmtContext(this.context, this.state);
        this.enterRule(localContext, 256, PostgreSQLParser.RULE_createstatsstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3102;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3103;
            this.match(PostgreSQLParser.STATISTICS);
            this.state = 3107;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
            case 1:
                {
                this.state = 3104;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3105;
                this.match(PostgreSQLParser.NOT);
                this.state = 3106;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3109;
            this.any_name();
            this.state = 3111;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 3110;
                this.name_list_();
                }
            }

            this.state = 3113;
            this.match(PostgreSQLParser.ON);
            this.state = 3114;
            this.expr_list();
            this.state = 3115;
            this.match(PostgreSQLParser.FROM);
            this.state = 3116;
            this.from_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterstatsstmt(): AlterstatsstmtContext {
        let localContext = new AlterstatsstmtContext(this.context, this.state);
        this.enterRule(localContext, 258, PostgreSQLParser.RULE_alterstatsstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3118;
            this.match(PostgreSQLParser.ALTER);
            this.state = 3119;
            this.match(PostgreSQLParser.STATISTICS);
            this.state = 3122;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 208, this.context) ) {
            case 1:
                {
                this.state = 3120;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3121;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3124;
            this.any_name();
            this.state = 3125;
            this.match(PostgreSQLParser.SET);
            this.state = 3126;
            this.match(PostgreSQLParser.STATISTICS);
            this.state = 3127;
            this.signediconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createasstmt(): CreateasstmtContext {
        let localContext = new CreateasstmtContext(this.context, this.state);
        this.enterRule(localContext, 260, PostgreSQLParser.RULE_createasstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3129;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3131;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251 || _la === 283 || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 32773) !== 0)) {
                {
                this.state = 3130;
                this.opttemp();
                }
            }

            this.state = 3133;
            this.match(PostgreSQLParser.TABLE);
            this.state = 3137;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 210, this.context) ) {
            case 1:
                {
                this.state = 3134;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3135;
                this.match(PostgreSQLParser.NOT);
                this.state = 3136;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3139;
            this.create_as_target();
            this.state = 3140;
            this.match(PostgreSQLParser.AS);
            this.state = 3141;
            this.selectstmt();
            this.state = 3143;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3142;
                this.with_data_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_as_target(): Create_as_targetContext {
        let localContext = new Create_as_targetContext(this.context, this.state);
        this.enterRule(localContext, 262, PostgreSQLParser.RULE_create_as_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3145;
            this.qualified_name();
            this.state = 3147;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 3146;
                this.column_list_();
                }
            }

            this.state = 3150;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138) {
                {
                this.state = 3149;
                this.table_access_method_clause();
                }
            }

            this.state = 3153;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143 || _la === 410) {
                {
                this.state = 3152;
                this.optwith();
                }
            }

            this.state = 3156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 3155;
                this.oncommitoption();
                }
            }

            this.state = 3159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 382) {
                {
                this.state = 3158;
                this.opttablespace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_data_(): With_data_Context {
        let localContext = new With_data_Context(this.context, this.state);
        this.enterRule(localContext, 264, PostgreSQLParser.RULE_with_data_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3161;
            this.match(PostgreSQLParser.WITH);
            this.state = 3165;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.DATA_P:
                {
                this.state = 3162;
                this.match(PostgreSQLParser.DATA_P);
                }
                break;
            case PostgreSQLParser.NO:
                {
                this.state = 3163;
                this.match(PostgreSQLParser.NO);
                this.state = 3164;
                this.match(PostgreSQLParser.DATA_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public creatematviewstmt(): CreatematviewstmtContext {
        let localContext = new CreatematviewstmtContext(this.context, this.state);
        this.enterRule(localContext, 266, PostgreSQLParser.RULE_creatematviewstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3167;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3169;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 398) {
                {
                this.state = 3168;
                this.optnolog();
                }
            }

            this.state = 3171;
            this.match(PostgreSQLParser.MATERIALIZED);
            this.state = 3172;
            this.match(PostgreSQLParser.VIEW);
            this.state = 3176;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                {
                this.state = 3173;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3174;
                this.match(PostgreSQLParser.NOT);
                this.state = 3175;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3178;
            this.create_mv_target();
            this.state = 3179;
            this.match(PostgreSQLParser.AS);
            this.state = 3180;
            this.selectstmt();
            this.state = 3182;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3181;
                this.with_data_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_mv_target(): Create_mv_targetContext {
        let localContext = new Create_mv_targetContext(this.context, this.state);
        this.enterRule(localContext, 268, PostgreSQLParser.RULE_create_mv_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3184;
            this.qualified_name();
            this.state = 3186;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 3185;
                this.column_list_();
                }
            }

            this.state = 3189;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138) {
                {
                this.state = 3188;
                this.table_access_method_clause();
                }
            }

            this.state = 3192;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3191;
                this.reloptions_();
                }
            }

            this.state = 3195;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 382) {
                {
                this.state = 3194;
                this.opttablespace();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optnolog(): OptnologContext {
        let localContext = new OptnologContext(this.context, this.state);
        this.enterRule(localContext, 270, PostgreSQLParser.RULE_optnolog);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3197;
            this.match(PostgreSQLParser.UNLOGGED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext {
        let localContext = new RefreshmatviewstmtContext(this.context, this.state);
        this.enterRule(localContext, 272, PostgreSQLParser.RULE_refreshmatviewstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3199;
            this.match(PostgreSQLParser.REFRESH);
            this.state = 3200;
            this.match(PostgreSQLParser.MATERIALIZED);
            this.state = 3201;
            this.match(PostgreSQLParser.VIEW);
            this.state = 3203;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 147) {
                {
                this.state = 3202;
                this.concurrently_();
                }
            }

            this.state = 3205;
            this.qualified_name();
            this.state = 3207;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3206;
                this.with_data_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createseqstmt(): CreateseqstmtContext {
        let localContext = new CreateseqstmtContext(this.context, this.state);
        this.enterRule(localContext, 274, PostgreSQLParser.RULE_createseqstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3209;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3211;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251 || _la === 283 || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 32773) !== 0)) {
                {
                this.state = 3210;
                this.opttemp();
                }
            }

            this.state = 3213;
            this.match(PostgreSQLParser.SEQUENCE);
            this.state = 3217;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
            case 1:
                {
                this.state = 3214;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3215;
                this.match(PostgreSQLParser.NOT);
                this.state = 3216;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3219;
            this.qualified_name();
            this.state = 3221;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74 || _la === 186 || _la === 211 || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & 1207959553) !== 0) || _la === 300 || _la === 312 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 67125249) !== 0)) {
                {
                this.state = 3220;
                this.optseqoptlist();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterseqstmt(): AlterseqstmtContext {
        let localContext = new AlterseqstmtContext(this.context, this.state);
        this.enterRule(localContext, 276, PostgreSQLParser.RULE_alterseqstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3223;
            this.match(PostgreSQLParser.ALTER);
            this.state = 3224;
            this.match(PostgreSQLParser.SEQUENCE);
            this.state = 3227;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 230, this.context) ) {
            case 1:
                {
                this.state = 3225;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3226;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3229;
            this.qualified_name();
            this.state = 3230;
            this.seqoptlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optseqoptlist(): OptseqoptlistContext {
        let localContext = new OptseqoptlistContext(this.context, this.state);
        this.enterRule(localContext, 278, PostgreSQLParser.RULE_optseqoptlist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3232;
            this.seqoptlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext {
        let localContext = new OptparenthesizedseqoptlistContext(this.context, this.state);
        this.enterRule(localContext, 280, PostgreSQLParser.RULE_optparenthesizedseqoptlist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3234;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3235;
            this.seqoptlist();
            this.state = 3236;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seqoptlist(): SeqoptlistContext {
        let localContext = new SeqoptlistContext(this.context, this.state);
        this.enterRule(localContext, 282, PostgreSQLParser.RULE_seqoptlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3239;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3238;
                this.seqoptelem();
                }
                }
                this.state = 3241;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 74 || _la === 186 || _la === 211 || ((((_la - 263)) & ~0x1F) === 0 && ((1 << (_la - 263)) & 1207959553) !== 0) || _la === 300 || _la === 312 || ((((_la - 345)) & ~0x1F) === 0 && ((1 << (_la - 345)) & 67125249) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seqoptelem(): SeqoptelemContext {
        let localContext = new SeqoptelemContext(this.context, this.state);
        this.enterRule(localContext, 284, PostgreSQLParser.RULE_seqoptelem);
        let _la: number;
        try {
            this.state = 3277;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.AS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3243;
                this.match(PostgreSQLParser.AS);
                this.state = 3244;
                this.simpletypename();
                }
                break;
            case PostgreSQLParser.CACHE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3245;
                this.match(PostgreSQLParser.CACHE);
                this.state = 3246;
                this.numericonly();
                }
                break;
            case PostgreSQLParser.CYCLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3247;
                this.match(PostgreSQLParser.CYCLE);
                }
                break;
            case PostgreSQLParser.INCREMENT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3248;
                this.match(PostgreSQLParser.INCREMENT);
                this.state = 3250;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 185) {
                    {
                    this.state = 3249;
                    this.by_();
                    }
                }

                this.state = 3252;
                this.numericonly();
                }
                break;
            case PostgreSQLParser.MAXVALUE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3253;
                this.match(PostgreSQLParser.MAXVALUE);
                this.state = 3254;
                this.numericonly();
                }
                break;
            case PostgreSQLParser.MINVALUE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3255;
                this.match(PostgreSQLParser.MINVALUE);
                this.state = 3256;
                this.numericonly();
                }
                break;
            case PostgreSQLParser.NO:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3257;
                this.match(PostgreSQLParser.NO);
                this.state = 3258;
                _la = this.tokenStream.LA(1);
                if(!(_la === 211 || _la === 290 || _la === 293)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSQLParser.OWNED:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3259;
                this.match(PostgreSQLParser.OWNED);
                this.state = 3260;
                this.match(PostgreSQLParser.BY);
                this.state = 3261;
                this.any_name();
                }
                break;
            case PostgreSQLParser.SEQUENCE:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3262;
                this.match(PostgreSQLParser.SEQUENCE);
                this.state = 3263;
                this.match(PostgreSQLParser.NAME_P);
                this.state = 3264;
                this.any_name();
                }
                break;
            case PostgreSQLParser.START:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3265;
                this.match(PostgreSQLParser.START);
                this.state = 3267;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 3266;
                    this.with_();
                    }
                }

                this.state = 3269;
                this.numericonly();
                }
                break;
            case PostgreSQLParser.RESTART:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3270;
                this.match(PostgreSQLParser.RESTART);
                this.state = 3272;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 3271;
                    this.with_();
                    }
                }

                this.state = 3275;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 12 || _la === 13 || _la === 576 || _la === 578) {
                    {
                    this.state = 3274;
                    this.numericonly();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public by_(): By_Context {
        let localContext = new By_Context(this.context, this.state);
        this.enterRule(localContext, 286, PostgreSQLParser.RULE_by_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3279;
            this.match(PostgreSQLParser.BY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericonly(): NumericonlyContext {
        let localContext = new NumericonlyContext(this.context, this.state);
        this.enterRule(localContext, 288, PostgreSQLParser.RULE_numericonly);
        try {
            this.state = 3287;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3281;
                this.fconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3282;
                this.match(PostgreSQLParser.PLUS);
                this.state = 3283;
                this.fconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3284;
                this.match(PostgreSQLParser.MINUS);
                this.state = 3285;
                this.fconst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3286;
                this.signediconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericonly_list(): Numericonly_listContext {
        let localContext = new Numericonly_listContext(this.context, this.state);
        this.enterRule(localContext, 290, PostgreSQLParser.RULE_numericonly_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3289;
            this.numericonly();
            this.state = 3294;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3290;
                this.match(PostgreSQLParser.COMMA);
                this.state = 3291;
                this.numericonly();
                }
                }
                this.state = 3296;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createplangstmt(): CreateplangstmtContext {
        let localContext = new CreateplangstmtContext(this.context, this.state);
        this.enterRule(localContext, 292, PostgreSQLParser.RULE_createplangstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3297;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3299;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 3298;
                this.or_replace_();
                }
            }

            this.state = 3302;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 390) {
                {
                this.state = 3301;
                this.trusted_();
                }
            }

            this.state = 3305;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 326) {
                {
                this.state = 3304;
                this.procedural_();
                }
            }

            this.state = 3307;
            this.match(PostgreSQLParser.LANGUAGE);
            this.state = 3308;
            this.name();
            this.state = 3317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 253) {
                {
                this.state = 3309;
                this.match(PostgreSQLParser.HANDLER);
                this.state = 3310;
                this.handler_name();
                this.state = 3312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 3311;
                    this.inline_handler_();
                    }
                }

                this.state = 3315;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300 || _la === 404) {
                    {
                    this.state = 3314;
                    this.validator_();
                    }
                }

                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trusted_(): Trusted_Context {
        let localContext = new Trusted_Context(this.context, this.state);
        this.enterRule(localContext, 294, PostgreSQLParser.RULE_trusted_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3319;
            this.match(PostgreSQLParser.TRUSTED);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public handler_name(): Handler_nameContext {
        let localContext = new Handler_nameContext(this.context, this.state);
        this.enterRule(localContext, 296, PostgreSQLParser.RULE_handler_name);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3321;
            this.name();
            this.state = 3323;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11) {
                {
                this.state = 3322;
                this.attrs();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inline_handler_(): Inline_handler_Context {
        let localContext = new Inline_handler_Context(this.context, this.state);
        this.enterRule(localContext, 298, PostgreSQLParser.RULE_inline_handler_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3325;
            this.match(PostgreSQLParser.INLINE_P);
            this.state = 3326;
            this.handler_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validator_clause(): Validator_clauseContext {
        let localContext = new Validator_clauseContext(this.context, this.state);
        this.enterRule(localContext, 300, PostgreSQLParser.RULE_validator_clause);
        try {
            this.state = 3332;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.VALIDATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3328;
                this.match(PostgreSQLParser.VALIDATOR);
                this.state = 3329;
                this.handler_name();
                }
                break;
            case PostgreSQLParser.NO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3330;
                this.match(PostgreSQLParser.NO);
                this.state = 3331;
                this.match(PostgreSQLParser.VALIDATOR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validator_(): Validator_Context {
        let localContext = new Validator_Context(this.context, this.state);
        this.enterRule(localContext, 302, PostgreSQLParser.RULE_validator_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3334;
            this.validator_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public procedural_(): Procedural_Context {
        let localContext = new Procedural_Context(this.context, this.state);
        this.enterRule(localContext, 304, PostgreSQLParser.RULE_procedural_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3336;
            this.match(PostgreSQLParser.PROCEDURAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtablespacestmt(): CreatetablespacestmtContext {
        let localContext = new CreatetablespacestmtContext(this.context, this.state);
        this.enterRule(localContext, 306, PostgreSQLParser.RULE_createtablespacestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3338;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3339;
            this.match(PostgreSQLParser.TABLESPACE);
            this.state = 3340;
            this.name();
            this.state = 3342;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 313) {
                {
                this.state = 3341;
                this.opttablespaceowner();
                }
            }

            this.state = 3344;
            this.match(PostgreSQLParser.LOCATION);
            this.state = 3345;
            this.sconst();
            this.state = 3347;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3346;
                this.reloptions_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttablespaceowner(): OpttablespaceownerContext {
        let localContext = new OpttablespaceownerContext(this.context, this.state);
        this.enterRule(localContext, 308, PostgreSQLParser.RULE_opttablespaceowner);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3349;
            this.match(PostgreSQLParser.OWNER);
            this.state = 3350;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public droptablespacestmt(): DroptablespacestmtContext {
        let localContext = new DroptablespacestmtContext(this.context, this.state);
        this.enterRule(localContext, 310, PostgreSQLParser.RULE_droptablespacestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3352;
            this.match(PostgreSQLParser.DROP);
            this.state = 3353;
            this.match(PostgreSQLParser.TABLESPACE);
            this.state = 3356;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 249, this.context) ) {
            case 1:
                {
                this.state = 3354;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3355;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3358;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createextensionstmt(): CreateextensionstmtContext {
        let localContext = new CreateextensionstmtContext(this.context, this.state);
        this.enterRule(localContext, 312, PostgreSQLParser.RULE_createextensionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3360;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3361;
            this.match(PostgreSQLParser.EXTENSION);
            this.state = 3365;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
            case 1:
                {
                this.state = 3362;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3363;
                this.match(PostgreSQLParser.NOT);
                this.state = 3364;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 3367;
            this.name();
            this.state = 3369;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3368;
                this.with_();
                }
            }

            this.state = 3371;
            this.create_extension_opt_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_extension_opt_list(): Create_extension_opt_listContext {
        let localContext = new Create_extension_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 314, PostgreSQLParser.RULE_create_extension_opt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3376;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 102 || _la === 188 || _la === 354 || _la === 406) {
                {
                {
                this.state = 3373;
                this.create_extension_opt_item();
                }
                }
                this.state = 3378;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_extension_opt_item(): Create_extension_opt_itemContext {
        let localContext = new Create_extension_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 316, PostgreSQLParser.RULE_create_extension_opt_item);
        try {
            this.state = 3386;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3379;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 3380;
                this.name();
                }
                break;
            case PostgreSQLParser.VERSION_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3381;
                this.match(PostgreSQLParser.VERSION_P);
                this.state = 3382;
                this.nonreservedword_or_sconst();
                }
                break;
            case PostgreSQLParser.FROM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3383;
                this.match(PostgreSQLParser.FROM);
                this.state = 3384;
                this.nonreservedword_or_sconst();
                }
                break;
            case PostgreSQLParser.CASCADE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3385;
                this.match(PostgreSQLParser.CASCADE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterextensionstmt(): AlterextensionstmtContext {
        let localContext = new AlterextensionstmtContext(this.context, this.state);
        this.enterRule(localContext, 318, PostgreSQLParser.RULE_alterextensionstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3388;
            this.match(PostgreSQLParser.ALTER);
            this.state = 3389;
            this.match(PostgreSQLParser.EXTENSION);
            this.state = 3390;
            this.name();
            this.state = 3391;
            this.match(PostgreSQLParser.UPDATE);
            this.state = 3392;
            this.alter_extension_opt_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_extension_opt_list(): Alter_extension_opt_listContext {
        let localContext = new Alter_extension_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 320, PostgreSQLParser.RULE_alter_extension_opt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3397;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 132) {
                {
                {
                this.state = 3394;
                this.alter_extension_opt_item();
                }
                }
                this.state = 3399;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_extension_opt_item(): Alter_extension_opt_itemContext {
        let localContext = new Alter_extension_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 322, PostgreSQLParser.RULE_alter_extension_opt_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3400;
            this.match(PostgreSQLParser.TO);
            this.state = 3401;
            this.nonreservedword_or_sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext {
        let localContext = new AlterextensioncontentsstmtContext(this.context, this.state);
        this.enterRule(localContext, 324, PostgreSQLParser.RULE_alterextensioncontentsstmt);
        try {
            this.state = 3507;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3403;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3404;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3405;
                this.name();
                this.state = 3406;
                this.add_drop();
                this.state = 3407;
                this.object_type_name();
                this.state = 3408;
                this.name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3410;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3411;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3412;
                this.name();
                this.state = 3413;
                this.add_drop();
                this.state = 3414;
                this.object_type_any_name();
                this.state = 3415;
                this.any_name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3417;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3418;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3419;
                this.name();
                this.state = 3420;
                this.add_drop();
                this.state = 3421;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 3422;
                this.aggregate_with_argtypes();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3424;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3425;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3426;
                this.name();
                this.state = 3427;
                this.add_drop();
                this.state = 3428;
                this.match(PostgreSQLParser.CAST);
                this.state = 3429;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 3430;
                this.typename();
                this.state = 3431;
                this.match(PostgreSQLParser.AS);
                this.state = 3432;
                this.typename();
                this.state = 3433;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3435;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3436;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3437;
                this.name();
                this.state = 3438;
                this.add_drop();
                this.state = 3439;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 3440;
                this.typename();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3442;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3443;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3444;
                this.name();
                this.state = 3445;
                this.add_drop();
                this.state = 3446;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 3447;
                this.function_with_argtypes();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3449;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3450;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3451;
                this.name();
                this.state = 3452;
                this.add_drop();
                this.state = 3453;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 3454;
                this.operator_with_argtypes();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 3456;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3457;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3458;
                this.name();
                this.state = 3459;
                this.add_drop();
                this.state = 3460;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 3461;
                this.match(PostgreSQLParser.CLASS);
                this.state = 3462;
                this.any_name();
                this.state = 3463;
                this.match(PostgreSQLParser.USING);
                this.state = 3464;
                this.name();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 3466;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3467;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3468;
                this.name();
                this.state = 3469;
                this.add_drop();
                this.state = 3470;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 3471;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 3472;
                this.any_name();
                this.state = 3473;
                this.match(PostgreSQLParser.USING);
                this.state = 3474;
                this.name();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 3476;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3477;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3478;
                this.name();
                this.state = 3479;
                this.add_drop();
                this.state = 3480;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 3481;
                this.function_with_argtypes();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 3483;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3484;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3485;
                this.name();
                this.state = 3486;
                this.add_drop();
                this.state = 3487;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 3488;
                this.function_with_argtypes();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 3490;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3491;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3492;
                this.name();
                this.state = 3493;
                this.add_drop();
                this.state = 3494;
                this.match(PostgreSQLParser.TRANSFORM);
                this.state = 3495;
                this.match(PostgreSQLParser.FOR);
                this.state = 3496;
                this.typename();
                this.state = 3497;
                this.match(PostgreSQLParser.LANGUAGE);
                this.state = 3498;
                this.name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 3500;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3501;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 3502;
                this.name();
                this.state = 3503;
                this.add_drop();
                this.state = 3504;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 3505;
                this.typename();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfdwstmt(): CreatefdwstmtContext {
        let localContext = new CreatefdwstmtContext(this.context, this.state);
        this.enterRule(localContext, 326, PostgreSQLParser.RULE_createfdwstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3509;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3510;
            this.match(PostgreSQLParser.FOREIGN);
            this.state = 3511;
            this.match(PostgreSQLParser.DATA_P);
            this.state = 3512;
            this.match(PostgreSQLParser.WRAPPER);
            this.state = 3513;
            this.name();
            this.state = 3515;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 253 || _la === 300 || _la === 404) {
                {
                this.state = 3514;
                this.fdw_options_();
                }
            }

            this.state = 3518;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 311) {
                {
                this.state = 3517;
                this.create_generic_options();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fdw_option(): Fdw_optionContext {
        let localContext = new Fdw_optionContext(this.context, this.state);
        this.enterRule(localContext, 328, PostgreSQLParser.RULE_fdw_option);
        try {
            this.state = 3528;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3520;
                this.match(PostgreSQLParser.HANDLER);
                this.state = 3521;
                this.handler_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3522;
                this.match(PostgreSQLParser.NO);
                this.state = 3523;
                this.match(PostgreSQLParser.HANDLER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3524;
                this.match(PostgreSQLParser.VALIDATOR);
                this.state = 3525;
                this.handler_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3526;
                this.match(PostgreSQLParser.NO);
                this.state = 3527;
                this.match(PostgreSQLParser.VALIDATOR);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fdw_options(): Fdw_optionsContext {
        let localContext = new Fdw_optionsContext(this.context, this.state);
        this.enterRule(localContext, 330, PostgreSQLParser.RULE_fdw_options);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3531;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3530;
                this.fdw_option();
                }
                }
                this.state = 3533;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 253 || _la === 300 || _la === 404);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fdw_options_(): Fdw_options_Context {
        let localContext = new Fdw_options_Context(this.context, this.state);
        this.enterRule(localContext, 332, PostgreSQLParser.RULE_fdw_options_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3535;
            this.fdw_options();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterfdwstmt(): AlterfdwstmtContext {
        let localContext = new AlterfdwstmtContext(this.context, this.state);
        this.enterRule(localContext, 334, PostgreSQLParser.RULE_alterfdwstmt);
        let _la: number;
        try {
            this.state = 3554;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3537;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3538;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3539;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 3540;
                this.match(PostgreSQLParser.WRAPPER);
                this.state = 3541;
                this.name();
                this.state = 3543;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 253 || _la === 300 || _la === 404) {
                    {
                    this.state = 3542;
                    this.fdw_options_();
                    }
                }

                this.state = 3545;
                this.alter_generic_options();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3547;
                this.match(PostgreSQLParser.ALTER);
                this.state = 3548;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3549;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 3550;
                this.match(PostgreSQLParser.WRAPPER);
                this.state = 3551;
                this.name();
                this.state = 3552;
                this.fdw_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public create_generic_options(): Create_generic_optionsContext {
        let localContext = new Create_generic_optionsContext(this.context, this.state);
        this.enterRule(localContext, 336, PostgreSQLParser.RULE_create_generic_options);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3556;
            this.match(PostgreSQLParser.OPTIONS);
            this.state = 3557;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3558;
            this.generic_option_list();
            this.state = 3559;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_option_list(): Generic_option_listContext {
        let localContext = new Generic_option_listContext(this.context, this.state);
        this.enterRule(localContext, 338, PostgreSQLParser.RULE_generic_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3561;
            this.generic_option_elem();
            this.state = 3566;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3562;
                this.match(PostgreSQLParser.COMMA);
                this.state = 3563;
                this.generic_option_elem();
                }
                }
                this.state = 3568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_options(): Alter_generic_optionsContext {
        let localContext = new Alter_generic_optionsContext(this.context, this.state);
        this.enterRule(localContext, 340, PostgreSQLParser.RULE_alter_generic_options);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3569;
            this.match(PostgreSQLParser.OPTIONS);
            this.state = 3570;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3571;
            this.alter_generic_option_list();
            this.state = 3572;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_option_list(): Alter_generic_option_listContext {
        let localContext = new Alter_generic_option_listContext(this.context, this.state);
        this.enterRule(localContext, 342, PostgreSQLParser.RULE_alter_generic_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3574;
            this.alter_generic_option_elem();
            this.state = 3579;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3575;
                this.match(PostgreSQLParser.COMMA);
                this.state = 3576;
                this.alter_generic_option_elem();
                }
                }
                this.state = 3581;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alter_generic_option_elem(): Alter_generic_option_elemContext {
        let localContext = new Alter_generic_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 344, PostgreSQLParser.RULE_alter_generic_option_elem);
        try {
            this.state = 3589;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 264, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3582;
                this.generic_option_elem();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3583;
                this.match(PostgreSQLParser.SET);
                this.state = 3584;
                this.generic_option_elem();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3585;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 3586;
                this.generic_option_elem();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3587;
                this.match(PostgreSQLParser.DROP);
                this.state = 3588;
                this.generic_option_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_option_elem(): Generic_option_elemContext {
        let localContext = new Generic_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 346, PostgreSQLParser.RULE_generic_option_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3591;
            this.generic_option_name();
            this.state = 3592;
            this.generic_option_arg();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_option_name(): Generic_option_nameContext {
        let localContext = new Generic_option_nameContext(this.context, this.state);
        this.enterRule(localContext, 348, PostgreSQLParser.RULE_generic_option_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3594;
            this.colLabel();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generic_option_arg(): Generic_option_argContext {
        let localContext = new Generic_option_argContext(this.context, this.state);
        this.enterRule(localContext, 350, PostgreSQLParser.RULE_generic_option_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3596;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createforeignserverstmt(): CreateforeignserverstmtContext {
        let localContext = new CreateforeignserverstmtContext(this.context, this.state);
        this.enterRule(localContext, 352, PostgreSQLParser.RULE_createforeignserverstmt);
        let _la: number;
        try {
            this.state = 3633;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 271, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3598;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3599;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3600;
                this.name();
                this.state = 3602;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 391) {
                    {
                    this.state = 3601;
                    this.type_();
                    }
                }

                this.state = 3605;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 406) {
                    {
                    this.state = 3604;
                    this.foreign_server_version_();
                    }
                }

                this.state = 3607;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3608;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 3609;
                this.match(PostgreSQLParser.WRAPPER);
                this.state = 3610;
                this.name();
                this.state = 3612;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3611;
                    this.create_generic_options();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3614;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3615;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3616;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3617;
                this.match(PostgreSQLParser.NOT);
                this.state = 3618;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 3619;
                this.name();
                this.state = 3621;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 391) {
                    {
                    this.state = 3620;
                    this.type_();
                    }
                }

                this.state = 3624;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 406) {
                    {
                    this.state = 3623;
                    this.foreign_server_version_();
                    }
                }

                this.state = 3626;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3627;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 3628;
                this.match(PostgreSQLParser.WRAPPER);
                this.state = 3629;
                this.name();
                this.state = 3631;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3630;
                    this.create_generic_options();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_(): Type_Context {
        let localContext = new Type_Context(this.context, this.state);
        this.enterRule(localContext, 354, PostgreSQLParser.RULE_type_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3635;
            this.match(PostgreSQLParser.TYPE_P);
            this.state = 3636;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreign_server_version(): Foreign_server_versionContext {
        let localContext = new Foreign_server_versionContext(this.context, this.state);
        this.enterRule(localContext, 356, PostgreSQLParser.RULE_foreign_server_version);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3638;
            this.match(PostgreSQLParser.VERSION_P);
            this.state = 3641;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                {
                this.state = 3639;
                this.sconst();
                }
                break;
            case PostgreSQLParser.NULL_P:
                {
                this.state = 3640;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public foreign_server_version_(): Foreign_server_version_Context {
        let localContext = new Foreign_server_version_Context(this.context, this.state);
        this.enterRule(localContext, 358, PostgreSQLParser.RULE_foreign_server_version_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3643;
            this.foreign_server_version();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterforeignserverstmt(): AlterforeignserverstmtContext {
        let localContext = new AlterforeignserverstmtContext(this.context, this.state);
        this.enterRule(localContext, 360, PostgreSQLParser.RULE_alterforeignserverstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3645;
            this.match(PostgreSQLParser.ALTER);
            this.state = 3646;
            this.match(PostgreSQLParser.SERVER);
            this.state = 3647;
            this.name();
            this.state = 3653;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPTIONS:
                {
                this.state = 3648;
                this.alter_generic_options();
                }
                break;
            case PostgreSQLParser.VERSION_P:
                {
                this.state = 3649;
                this.foreign_server_version();
                this.state = 3651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3650;
                    this.alter_generic_options();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createforeigntablestmt(): CreateforeigntablestmtContext {
        let localContext = new CreateforeigntablestmtContext(this.context, this.state);
        this.enterRule(localContext, 362, PostgreSQLParser.RULE_createforeigntablestmt);
        let _la: number;
        try {
            this.state = 3727;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 285, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3655;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3656;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3657;
                this.match(PostgreSQLParser.TABLE);
                this.state = 3658;
                this.qualified_name();
                this.state = 3659;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 3661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 2359327) !== 0) || _la === 101 || _la === 123 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & 2218786817) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 4294967295) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 4294967295) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 4294967295) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4294967295) !== 0) || ((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294967263) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294967295) !== 0) || ((((_la - 463)) & ~0x1F) === 0 && ((1 << (_la - 463)) & 3758096383) !== 0) || ((((_la - 495)) & ~0x1F) === 0 && ((1 << (_la - 495)) & 4293885951) !== 0) || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & 469794821) !== 0) || _la === 559 || _la === 579) {
                    {
                    this.state = 3660;
                    this.opttableelementlist();
                    }
                }

                this.state = 3663;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 3665;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267) {
                    {
                    this.state = 3664;
                    this.optinherit();
                    }
                }

                this.state = 3667;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3668;
                this.name();
                this.state = 3670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3669;
                    this.create_generic_options();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3672;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3673;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3674;
                this.match(PostgreSQLParser.TABLE);
                this.state = 3675;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3676;
                this.match(PostgreSQLParser.NOT);
                this.state = 3677;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 3678;
                this.qualified_name();
                this.state = 3679;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 3681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 2359327) !== 0) || _la === 101 || _la === 123 || ((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & 2218786817) !== 0) || ((((_la - 168)) & ~0x1F) === 0 && ((1 << (_la - 168)) & 4294967295) !== 0) || ((((_la - 200)) & ~0x1F) === 0 && ((1 << (_la - 200)) & 4294967295) !== 0) || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 4294967295) !== 0) || ((((_la - 264)) & ~0x1F) === 0 && ((1 << (_la - 264)) & 4294967295) !== 0) || ((((_la - 296)) & ~0x1F) === 0 && ((1 << (_la - 296)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294967263) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294967295) !== 0) || ((((_la - 463)) & ~0x1F) === 0 && ((1 << (_la - 463)) & 3758096383) !== 0) || ((((_la - 495)) & ~0x1F) === 0 && ((1 << (_la - 495)) & 4293885951) !== 0) || ((((_la - 527)) & ~0x1F) === 0 && ((1 << (_la - 527)) & 469794821) !== 0) || _la === 559 || _la === 579) {
                    {
                    this.state = 3680;
                    this.opttableelementlist();
                    }
                }

                this.state = 3683;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 3685;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 267) {
                    {
                    this.state = 3684;
                    this.optinherit();
                    }
                }

                this.state = 3687;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3688;
                this.name();
                this.state = 3690;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3689;
                    this.create_generic_options();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3692;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3693;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3694;
                this.match(PostgreSQLParser.TABLE);
                this.state = 3695;
                this.qualified_name();
                this.state = 3696;
                this.match(PostgreSQLParser.PARTITION);
                this.state = 3697;
                this.match(PostgreSQLParser.OF);
                this.state = 3698;
                this.qualified_name();
                this.state = 3700;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3699;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 3702;
                this.partitionboundspec();
                this.state = 3703;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3704;
                this.name();
                this.state = 3706;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3705;
                    this.create_generic_options();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3708;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3709;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 3710;
                this.match(PostgreSQLParser.TABLE);
                this.state = 3711;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3712;
                this.match(PostgreSQLParser.NOT);
                this.state = 3713;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 3714;
                this.qualified_name();
                this.state = 3715;
                this.match(PostgreSQLParser.PARTITION);
                this.state = 3716;
                this.match(PostgreSQLParser.OF);
                this.state = 3717;
                this.qualified_name();
                this.state = 3719;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 3718;
                    this.opttypedtableelementlist();
                    }
                }

                this.state = 3721;
                this.partitionboundspec();
                this.state = 3722;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3723;
                this.name();
                this.state = 3725;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3724;
                    this.create_generic_options();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public importforeignschemastmt(): ImportforeignschemastmtContext {
        let localContext = new ImportforeignschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 364, PostgreSQLParser.RULE_importforeignschemastmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3729;
            this.match(PostgreSQLParser.IMPORT_P);
            this.state = 3730;
            this.match(PostgreSQLParser.FOREIGN);
            this.state = 3731;
            this.match(PostgreSQLParser.SCHEMA);
            this.state = 3732;
            this.name();
            this.state = 3734;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 97 || _la === 112) {
                {
                this.state = 3733;
                this.import_qualification();
                }
            }

            this.state = 3736;
            this.match(PostgreSQLParser.FROM);
            this.state = 3737;
            this.match(PostgreSQLParser.SERVER);
            this.state = 3738;
            this.name();
            this.state = 3739;
            this.match(PostgreSQLParser.INTO);
            this.state = 3740;
            this.name();
            this.state = 3742;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 311) {
                {
                this.state = 3741;
                this.create_generic_options();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public import_qualification_type(): Import_qualification_typeContext {
        let localContext = new Import_qualification_typeContext(this.context, this.state);
        this.enterRule(localContext, 366, PostgreSQLParser.RULE_import_qualification_type);
        try {
            this.state = 3747;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.LIMIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3744;
                this.match(PostgreSQLParser.LIMIT);
                this.state = 3745;
                this.match(PostgreSQLParser.TO);
                }
                break;
            case PostgreSQLParser.EXCEPT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3746;
                this.match(PostgreSQLParser.EXCEPT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public import_qualification(): Import_qualificationContext {
        let localContext = new Import_qualificationContext(this.context, this.state);
        this.enterRule(localContext, 368, PostgreSQLParser.RULE_import_qualification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3749;
            this.import_qualification_type();
            this.state = 3750;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3751;
            this.relation_expr_list();
            this.state = 3752;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createusermappingstmt(): CreateusermappingstmtContext {
        let localContext = new CreateusermappingstmtContext(this.context, this.state);
        this.enterRule(localContext, 370, PostgreSQLParser.RULE_createusermappingstmt);
        let _la: number;
        try {
            this.state = 3777;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3754;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3755;
                this.match(PostgreSQLParser.USER);
                this.state = 3756;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 3757;
                this.match(PostgreSQLParser.FOR);
                this.state = 3758;
                this.auth_ident();
                this.state = 3759;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3760;
                this.name();
                this.state = 3762;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3761;
                    this.create_generic_options();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3764;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3765;
                this.match(PostgreSQLParser.USER);
                this.state = 3766;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 3767;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3768;
                this.match(PostgreSQLParser.NOT);
                this.state = 3769;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 3770;
                this.match(PostgreSQLParser.FOR);
                this.state = 3771;
                this.auth_ident();
                this.state = 3772;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3773;
                this.name();
                this.state = 3775;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 311) {
                    {
                    this.state = 3774;
                    this.create_generic_options();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public auth_ident(): Auth_identContext {
        let localContext = new Auth_identContext(this.context, this.state);
        this.enterRule(localContext, 372, PostgreSQLParser.RULE_auth_ident);
        try {
            this.state = 3781;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3779;
                this.rolespec();
                }
                break;
            case PostgreSQLParser.USER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3780;
                this.match(PostgreSQLParser.USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropusermappingstmt(): DropusermappingstmtContext {
        let localContext = new DropusermappingstmtContext(this.context, this.state);
        this.enterRule(localContext, 374, PostgreSQLParser.RULE_dropusermappingstmt);
        try {
            this.state = 3801;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3783;
                this.match(PostgreSQLParser.DROP);
                this.state = 3784;
                this.match(PostgreSQLParser.USER);
                this.state = 3785;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 3786;
                this.match(PostgreSQLParser.FOR);
                this.state = 3787;
                this.auth_ident();
                this.state = 3788;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3789;
                this.name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3791;
                this.match(PostgreSQLParser.DROP);
                this.state = 3792;
                this.match(PostgreSQLParser.USER);
                this.state = 3793;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 3794;
                this.match(PostgreSQLParser.IF_P);
                this.state = 3795;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 3796;
                this.match(PostgreSQLParser.FOR);
                this.state = 3797;
                this.auth_ident();
                this.state = 3798;
                this.match(PostgreSQLParser.SERVER);
                this.state = 3799;
                this.name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterusermappingstmt(): AlterusermappingstmtContext {
        let localContext = new AlterusermappingstmtContext(this.context, this.state);
        this.enterRule(localContext, 376, PostgreSQLParser.RULE_alterusermappingstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3803;
            this.match(PostgreSQLParser.ALTER);
            this.state = 3804;
            this.match(PostgreSQLParser.USER);
            this.state = 3805;
            this.match(PostgreSQLParser.MAPPING);
            this.state = 3806;
            this.match(PostgreSQLParser.FOR);
            this.state = 3807;
            this.auth_ident();
            this.state = 3808;
            this.match(PostgreSQLParser.SERVER);
            this.state = 3809;
            this.name();
            this.state = 3810;
            this.alter_generic_options();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createpolicystmt(): CreatepolicystmtContext {
        let localContext = new CreatepolicystmtContext(this.context, this.state);
        this.enterRule(localContext, 378, PostgreSQLParser.RULE_createpolicystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3812;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3813;
            this.match(PostgreSQLParser.POLICY);
            this.state = 3814;
            this.name();
            this.state = 3815;
            this.match(PostgreSQLParser.ON);
            this.state = 3816;
            this.qualified_name();
            this.state = 3818;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 3817;
                this.rowsecuritydefaultpermissive();
                }
            }

            this.state = 3821;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3820;
                this.rowsecuritydefaultforcmd();
                }
            }

            this.state = 3824;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 132) {
                {
                this.state = 3823;
                this.rowsecuritydefaulttorole();
                }
            }

            this.state = 3827;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138) {
                {
                this.state = 3826;
                this.rowsecurityoptionalexpr();
                }
            }

            this.state = 3830;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3829;
                this.rowsecurityoptionalwithcheck();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterpolicystmt(): AlterpolicystmtContext {
        let localContext = new AlterpolicystmtContext(this.context, this.state);
        this.enterRule(localContext, 380, PostgreSQLParser.RULE_alterpolicystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3832;
            this.match(PostgreSQLParser.ALTER);
            this.state = 3833;
            this.match(PostgreSQLParser.POLICY);
            this.state = 3834;
            this.name();
            this.state = 3835;
            this.match(PostgreSQLParser.ON);
            this.state = 3836;
            this.qualified_name();
            this.state = 3838;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 132) {
                {
                this.state = 3837;
                this.rowsecurityoptionaltorole();
                }
            }

            this.state = 3841;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138) {
                {
                this.state = 3840;
                this.rowsecurityoptionalexpr();
                }
            }

            this.state = 3844;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 3843;
                this.rowsecurityoptionalwithcheck();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext {
        let localContext = new RowsecurityoptionalexprContext(this.context, this.state);
        this.enterRule(localContext, 382, PostgreSQLParser.RULE_rowsecurityoptionalexpr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3846;
            this.match(PostgreSQLParser.USING);
            this.state = 3847;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3848;
            this.a_expr();
            this.state = 3849;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext {
        let localContext = new RowsecurityoptionalwithcheckContext(this.context, this.state);
        this.enterRule(localContext, 384, PostgreSQLParser.RULE_rowsecurityoptionalwithcheck);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3851;
            this.match(PostgreSQLParser.WITH);
            this.state = 3852;
            this.match(PostgreSQLParser.CHECK);
            this.state = 3853;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3854;
            this.a_expr();
            this.state = 3855;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext {
        let localContext = new RowsecuritydefaulttoroleContext(this.context, this.state);
        this.enterRule(localContext, 386, PostgreSQLParser.RULE_rowsecuritydefaulttorole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3857;
            this.match(PostgreSQLParser.TO);
            this.state = 3858;
            this.role_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecurityoptionaltorole(): RowsecurityoptionaltoroleContext {
        let localContext = new RowsecurityoptionaltoroleContext(this.context, this.state);
        this.enterRule(localContext, 388, PostgreSQLParser.RULE_rowsecurityoptionaltorole);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3860;
            this.match(PostgreSQLParser.TO);
            this.state = 3861;
            this.role_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext {
        let localContext = new RowsecuritydefaultpermissiveContext(this.context, this.state);
        this.enterRule(localContext, 390, PostgreSQLParser.RULE_rowsecuritydefaultpermissive);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3863;
            this.match(PostgreSQLParser.AS);
            this.state = 3864;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsecuritydefaultforcmd(): RowsecuritydefaultforcmdContext {
        let localContext = new RowsecuritydefaultforcmdContext(this.context, this.state);
        this.enterRule(localContext, 392, PostgreSQLParser.RULE_rowsecuritydefaultforcmd);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3866;
            this.match(PostgreSQLParser.FOR);
            this.state = 3867;
            this.row_security_cmd();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_security_cmd(): Row_security_cmdContext {
        let localContext = new Row_security_cmdContext(this.context, this.state);
        this.enterRule(localContext, 394, PostgreSQLParser.RULE_row_security_cmd);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3869;
            _la = this.tokenStream.LA(1);
            if(!(_la === 68 || _la === 126 || _la === 220 || _la === 270 || _la === 400)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createamstmt(): CreateamstmtContext {
        let localContext = new CreateamstmtContext(this.context, this.state);
        this.enterRule(localContext, 396, PostgreSQLParser.RULE_createamstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3871;
            this.match(PostgreSQLParser.CREATE);
            this.state = 3872;
            this.match(PostgreSQLParser.ACCESS);
            this.state = 3873;
            this.match(PostgreSQLParser.METHOD);
            this.state = 3874;
            this.name();
            this.state = 3875;
            this.match(PostgreSQLParser.TYPE_P);
            this.state = 3876;
            this.am_type();
            this.state = 3877;
            this.match(PostgreSQLParser.HANDLER);
            this.state = 3878;
            this.handler_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public am_type(): Am_typeContext {
        let localContext = new Am_typeContext(this.context, this.state);
        this.enterRule(localContext, 398, PostgreSQLParser.RULE_am_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3880;
            _la = this.tokenStream.LA(1);
            if(!(_la === 130 || _la === 264)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtrigstmt(): CreatetrigstmtContext {
        let localContext = new CreatetrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 400, PostgreSQLParser.RULE_createtrigstmt);
        let _la: number;
        try {
            this.state = 3930;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3882;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3883;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 3884;
                this.name();
                this.state = 3885;
                this.triggeractiontime();
                this.state = 3886;
                this.triggerevents();
                this.state = 3887;
                this.match(PostgreSQLParser.ON);
                this.state = 3888;
                this.qualified_name();
                this.state = 3890;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 485) {
                    {
                    this.state = 3889;
                    this.triggerreferencing();
                    }
                }

                this.state = 3893;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 3892;
                    this.triggerforspec();
                    }
                }

                this.state = 3896;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 140) {
                    {
                    this.state = 3895;
                    this.triggerwhen();
                    }
                }

                this.state = 3898;
                this.match(PostgreSQLParser.EXECUTE);
                this.state = 3899;
                this.function_or_procedure();
                this.state = 3900;
                this.func_name();
                this.state = 3901;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 3902;
                this.triggerfuncargs();
                this.state = 3903;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3905;
                this.match(PostgreSQLParser.CREATE);
                this.state = 3906;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 3907;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 3908;
                this.name();
                this.state = 3909;
                this.match(PostgreSQLParser.AFTER);
                this.state = 3910;
                this.triggerevents();
                this.state = 3911;
                this.match(PostgreSQLParser.ON);
                this.state = 3912;
                this.qualified_name();
                this.state = 3914;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102) {
                    {
                    this.state = 3913;
                    this.optconstrfromtable();
                    }
                }

                this.state = 3916;
                this.constraintattributespec();
                this.state = 3917;
                this.match(PostgreSQLParser.FOR);
                this.state = 3918;
                this.match(PostgreSQLParser.EACH);
                this.state = 3919;
                this.match(PostgreSQLParser.ROW);
                this.state = 3921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 140) {
                    {
                    this.state = 3920;
                    this.triggerwhen();
                    }
                }

                this.state = 3923;
                this.match(PostgreSQLParser.EXECUTE);
                this.state = 3924;
                this.function_or_procedure();
                this.state = 3925;
                this.func_name();
                this.state = 3926;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 3927;
                this.triggerfuncargs();
                this.state = 3928;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggeractiontime(): TriggeractiontimeContext {
        let localContext = new TriggeractiontimeContext(this.context, this.state);
        this.enterRule(localContext, 402, PostgreSQLParser.RULE_triggeractiontime);
        try {
            this.state = 3936;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.BEFORE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3932;
                this.match(PostgreSQLParser.BEFORE);
                }
                break;
            case PostgreSQLParser.AFTER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3933;
                this.match(PostgreSQLParser.AFTER);
                }
                break;
            case PostgreSQLParser.INSTEAD:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3934;
                this.match(PostgreSQLParser.INSTEAD);
                this.state = 3935;
                this.match(PostgreSQLParser.OF);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerevents(): TriggereventsContext {
        let localContext = new TriggereventsContext(this.context, this.state);
        this.enterRule(localContext, 404, PostgreSQLParser.RULE_triggerevents);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3938;
            this.triggeroneevent();
            this.state = 3943;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 120) {
                {
                {
                this.state = 3939;
                this.match(PostgreSQLParser.OR);
                this.state = 3940;
                this.triggeroneevent();
                }
                }
                this.state = 3945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggeroneevent(): TriggeroneeventContext {
        let localContext = new TriggeroneeventContext(this.context, this.state);
        this.enterRule(localContext, 406, PostgreSQLParser.RULE_triggeroneevent);
        try {
            this.state = 3953;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3946;
                this.match(PostgreSQLParser.INSERT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3947;
                this.match(PostgreSQLParser.DELETE_P);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3948;
                this.match(PostgreSQLParser.UPDATE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3949;
                this.match(PostgreSQLParser.UPDATE);
                this.state = 3950;
                this.match(PostgreSQLParser.OF);
                this.state = 3951;
                this.columnlist();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3952;
                this.match(PostgreSQLParser.TRUNCATE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerreferencing(): TriggerreferencingContext {
        let localContext = new TriggerreferencingContext(this.context, this.state);
        this.enterRule(localContext, 408, PostgreSQLParser.RULE_triggerreferencing);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3955;
            this.match(PostgreSQLParser.REFERENCING);
            this.state = 3956;
            this.triggertransitions();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggertransitions(): TriggertransitionsContext {
        let localContext = new TriggertransitionsContext(this.context, this.state);
        this.enterRule(localContext, 410, PostgreSQLParser.RULE_triggertransitions);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3959;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 3958;
                this.triggertransition();
                }
                }
                this.state = 3961;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 486 || _la === 487);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggertransition(): TriggertransitionContext {
        let localContext = new TriggertransitionContext(this.context, this.state);
        this.enterRule(localContext, 412, PostgreSQLParser.RULE_triggertransition);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3963;
            this.transitionoldornew();
            this.state = 3964;
            this.transitionrowortable();
            this.state = 3966;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 3965;
                this.as_();
                }
            }

            this.state = 3968;
            this.transitionrelname();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transitionoldornew(): TransitionoldornewContext {
        let localContext = new TransitionoldornewContext(this.context, this.state);
        this.enterRule(localContext, 414, PostgreSQLParser.RULE_transitionoldornew);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3970;
            _la = this.tokenStream.LA(1);
            if(!(_la === 486 || _la === 487)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transitionrowortable(): TransitionrowortableContext {
        let localContext = new TransitionrowortableContext(this.context, this.state);
        this.enterRule(localContext, 416, PostgreSQLParser.RULE_transitionrowortable);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3972;
            _la = this.tokenStream.LA(1);
            if(!(_la === 130 || _la === 445)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transitionrelname(): TransitionrelnameContext {
        let localContext = new TransitionrelnameContext(this.context, this.state);
        this.enterRule(localContext, 418, PostgreSQLParser.RULE_transitionrelname);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3974;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerforspec(): TriggerforspecContext {
        let localContext = new TriggerforspecContext(this.context, this.state);
        this.enterRule(localContext, 420, PostgreSQLParser.RULE_triggerforspec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3976;
            this.match(PostgreSQLParser.FOR);
            this.state = 3978;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 230) {
                {
                this.state = 3977;
                this.triggerforopteach();
                }
            }

            this.state = 3980;
            this.triggerfortype();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerforopteach(): TriggerforopteachContext {
        let localContext = new TriggerforopteachContext(this.context, this.state);
        this.enterRule(localContext, 422, PostgreSQLParser.RULE_triggerforopteach);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3982;
            this.match(PostgreSQLParser.EACH);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerfortype(): TriggerfortypeContext {
        let localContext = new TriggerfortypeContext(this.context, this.state);
        this.enterRule(localContext, 424, PostgreSQLParser.RULE_triggerfortype);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3984;
            _la = this.tokenStream.LA(1);
            if(!(_la === 372 || _la === 445)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerwhen(): TriggerwhenContext {
        let localContext = new TriggerwhenContext(this.context, this.state);
        this.enterRule(localContext, 426, PostgreSQLParser.RULE_triggerwhen);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3986;
            this.match(PostgreSQLParser.WHEN);
            this.state = 3987;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 3988;
            this.a_expr();
            this.state = 3989;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_or_procedure(): Function_or_procedureContext {
        let localContext = new Function_or_procedureContext(this.context, this.state);
        this.enterRule(localContext, 428, PostgreSQLParser.RULE_function_or_procedure);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3991;
            _la = this.tokenStream.LA(1);
            if(!(_la === 249 || _la === 327)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerfuncargs(): TriggerfuncargsContext {
        let localContext = new TriggerfuncargsContext(this.context, this.state);
        this.enterRule(localContext, 430, PostgreSQLParser.RULE_triggerfuncargs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3995;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ALL:
            case PostgreSQLParser.ANALYSE:
            case PostgreSQLParser.ANALYZE:
            case PostgreSQLParser.AND:
            case PostgreSQLParser.ANY:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.AS:
            case PostgreSQLParser.ASC:
            case PostgreSQLParser.ASYMMETRIC:
            case PostgreSQLParser.BOTH:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CHECK:
            case PostgreSQLParser.COLLATE:
            case PostgreSQLParser.COLUMN:
            case PostgreSQLParser.CONSTRAINT:
            case PostgreSQLParser.CREATE:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.DEFERRABLE:
            case PostgreSQLParser.DESC:
            case PostgreSQLParser.DISTINCT:
            case PostgreSQLParser.DO:
            case PostgreSQLParser.ELSE:
            case PostgreSQLParser.EXCEPT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.FETCH:
            case PostgreSQLParser.FOR:
            case PostgreSQLParser.FOREIGN:
            case PostgreSQLParser.FROM:
            case PostgreSQLParser.GRANT:
            case PostgreSQLParser.GROUP_P:
            case PostgreSQLParser.HAVING:
            case PostgreSQLParser.IN_P:
            case PostgreSQLParser.INITIALLY:
            case PostgreSQLParser.INTERSECT:
            case PostgreSQLParser.INTO:
            case PostgreSQLParser.LATERAL_P:
            case PostgreSQLParser.LEADING:
            case PostgreSQLParser.LIMIT:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.OFFSET:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.ONLY:
            case PostgreSQLParser.OR:
            case PostgreSQLParser.ORDER:
            case PostgreSQLParser.PLACING:
            case PostgreSQLParser.PRIMARY:
            case PostgreSQLParser.REFERENCES:
            case PostgreSQLParser.RETURNING:
            case PostgreSQLParser.SELECT:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.SOME:
            case PostgreSQLParser.SYMMETRIC:
            case PostgreSQLParser.TABLE:
            case PostgreSQLParser.THEN:
            case PostgreSQLParser.TO:
            case PostgreSQLParser.TRAILING:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNION:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.USING:
            case PostgreSQLParser.VARIADIC:
            case PostgreSQLParser.WHEN:
            case PostgreSQLParser.WHERE:
            case PostgreSQLParser.WINDOW:
            case PostgreSQLParser.WITH:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.END_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.EXIT:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                {
                this.state = 3993;
                this.triggerfuncarg();
                }
                break;
            case PostgreSQLParser.CLOSE_PAREN:
            case PostgreSQLParser.COMMA:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 4001;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 3997;
                this.match(PostgreSQLParser.COMMA);
                this.state = 3998;
                this.triggerfuncarg();
                }
                }
                this.state = 4003;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public triggerfuncarg(): TriggerfuncargContext {
        let localContext = new TriggerfuncargContext(this.context, this.state);
        this.enterRule(localContext, 432, PostgreSQLParser.RULE_triggerfuncarg);
        try {
            this.state = 4008;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Integral:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4004;
                this.iconst();
                }
                break;
            case PostgreSQLParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4005;
                this.fconst();
                }
                break;
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4006;
                this.sconst();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ALL:
            case PostgreSQLParser.ANALYSE:
            case PostgreSQLParser.ANALYZE:
            case PostgreSQLParser.AND:
            case PostgreSQLParser.ANY:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.AS:
            case PostgreSQLParser.ASC:
            case PostgreSQLParser.ASYMMETRIC:
            case PostgreSQLParser.BOTH:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CHECK:
            case PostgreSQLParser.COLLATE:
            case PostgreSQLParser.COLUMN:
            case PostgreSQLParser.CONSTRAINT:
            case PostgreSQLParser.CREATE:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.DEFERRABLE:
            case PostgreSQLParser.DESC:
            case PostgreSQLParser.DISTINCT:
            case PostgreSQLParser.DO:
            case PostgreSQLParser.ELSE:
            case PostgreSQLParser.EXCEPT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.FETCH:
            case PostgreSQLParser.FOR:
            case PostgreSQLParser.FOREIGN:
            case PostgreSQLParser.FROM:
            case PostgreSQLParser.GRANT:
            case PostgreSQLParser.GROUP_P:
            case PostgreSQLParser.HAVING:
            case PostgreSQLParser.IN_P:
            case PostgreSQLParser.INITIALLY:
            case PostgreSQLParser.INTERSECT:
            case PostgreSQLParser.INTO:
            case PostgreSQLParser.LATERAL_P:
            case PostgreSQLParser.LEADING:
            case PostgreSQLParser.LIMIT:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.OFFSET:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.ONLY:
            case PostgreSQLParser.OR:
            case PostgreSQLParser.ORDER:
            case PostgreSQLParser.PLACING:
            case PostgreSQLParser.PRIMARY:
            case PostgreSQLParser.REFERENCES:
            case PostgreSQLParser.RETURNING:
            case PostgreSQLParser.SELECT:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.SOME:
            case PostgreSQLParser.SYMMETRIC:
            case PostgreSQLParser.TABLE:
            case PostgreSQLParser.THEN:
            case PostgreSQLParser.TO:
            case PostgreSQLParser.TRAILING:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNION:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.USING:
            case PostgreSQLParser.VARIADIC:
            case PostgreSQLParser.WHEN:
            case PostgreSQLParser.WHERE:
            case PostgreSQLParser.WINDOW:
            case PostgreSQLParser.WITH:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.END_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.EXIT:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4007;
                this.colLabel();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optconstrfromtable(): OptconstrfromtableContext {
        let localContext = new OptconstrfromtableContext(this.context, this.state);
        this.enterRule(localContext, 434, PostgreSQLParser.RULE_optconstrfromtable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4010;
            this.match(PostgreSQLParser.FROM);
            this.state = 4011;
            this.qualified_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintattributespec(): ConstraintattributespecContext {
        let localContext = new ConstraintattributespecContext(this.context, this.state);
        this.enterRule(localContext, 436, PostgreSQLParser.RULE_constraintattributespec);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4016;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & 8421377) !== 0) || _la === 300) {
                {
                {
                this.state = 4013;
                this.constraintattributeElem();
                }
                }
                this.state = 4018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constraintattributeElem(): ConstraintattributeElemContext {
        let localContext = new ConstraintattributeElemContext(this.context, this.state);
        this.enterRule(localContext, 438, PostgreSQLParser.RULE_constraintattributeElem);
        try {
            this.state = 4030;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4019;
                this.match(PostgreSQLParser.NOT);
                this.state = 4020;
                this.match(PostgreSQLParser.DEFERRABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4021;
                this.match(PostgreSQLParser.DEFERRABLE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4022;
                this.match(PostgreSQLParser.INITIALLY);
                this.state = 4023;
                this.match(PostgreSQLParser.IMMEDIATE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4024;
                this.match(PostgreSQLParser.INITIALLY);
                this.state = 4025;
                this.match(PostgreSQLParser.DEFERRED);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4026;
                this.match(PostgreSQLParser.NOT);
                this.state = 4027;
                this.match(PostgreSQLParser.VALID);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4028;
                this.match(PostgreSQLParser.NO);
                this.state = 4029;
                this.match(PostgreSQLParser.INHERIT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createeventtrigstmt(): CreateeventtrigstmtContext {
        let localContext = new CreateeventtrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 440, PostgreSQLParser.RULE_createeventtrigstmt);
        try {
            this.state = 4058;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 319, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4032;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4033;
                this.match(PostgreSQLParser.EVENT);
                this.state = 4034;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 4035;
                this.name();
                this.state = 4036;
                this.match(PostgreSQLParser.ON);
                this.state = 4037;
                this.colLabel();
                this.state = 4038;
                this.match(PostgreSQLParser.EXECUTE);
                this.state = 4039;
                this.function_or_procedure();
                this.state = 4040;
                this.func_name();
                this.state = 4041;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4042;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4044;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4045;
                this.match(PostgreSQLParser.EVENT);
                this.state = 4046;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 4047;
                this.name();
                this.state = 4048;
                this.match(PostgreSQLParser.ON);
                this.state = 4049;
                this.colLabel();
                this.state = 4050;
                this.match(PostgreSQLParser.WHEN);
                this.state = 4051;
                this.event_trigger_when_list();
                this.state = 4052;
                this.match(PostgreSQLParser.EXECUTE);
                this.state = 4053;
                this.function_or_procedure();
                this.state = 4054;
                this.func_name();
                this.state = 4055;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4056;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event_trigger_when_list(): Event_trigger_when_listContext {
        let localContext = new Event_trigger_when_listContext(this.context, this.state);
        this.enterRule(localContext, 442, PostgreSQLParser.RULE_event_trigger_when_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4060;
            this.event_trigger_when_item();
            this.state = 4065;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 71) {
                {
                {
                this.state = 4061;
                this.match(PostgreSQLParser.AND);
                this.state = 4062;
                this.event_trigger_when_item();
                }
                }
                this.state = 4067;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event_trigger_when_item(): Event_trigger_when_itemContext {
        let localContext = new Event_trigger_when_itemContext(this.context, this.state);
        this.enterRule(localContext, 444, PostgreSQLParser.RULE_event_trigger_when_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4068;
            this.colid();
            this.state = 4069;
            this.match(PostgreSQLParser.IN_P);
            this.state = 4070;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 4071;
            this.event_trigger_value_list();
            this.state = 4072;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event_trigger_value_list(): Event_trigger_value_listContext {
        let localContext = new Event_trigger_value_listContext(this.context, this.state);
        this.enterRule(localContext, 446, PostgreSQLParser.RULE_event_trigger_value_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4074;
            this.sconst();
            this.state = 4079;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4075;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4076;
                this.sconst();
                }
                }
                this.state = 4081;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altereventtrigstmt(): AltereventtrigstmtContext {
        let localContext = new AltereventtrigstmtContext(this.context, this.state);
        this.enterRule(localContext, 448, PostgreSQLParser.RULE_altereventtrigstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4082;
            this.match(PostgreSQLParser.ALTER);
            this.state = 4083;
            this.match(PostgreSQLParser.EVENT);
            this.state = 4084;
            this.match(PostgreSQLParser.TRIGGER);
            this.state = 4085;
            this.name();
            this.state = 4086;
            this.enable_trigger();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enable_trigger(): Enable_triggerContext {
        let localContext = new Enable_triggerContext(this.context, this.state);
        this.enterRule(localContext, 450, PostgreSQLParser.RULE_enable_trigger);
        try {
            this.state = 4094;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4088;
                this.match(PostgreSQLParser.ENABLE_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4089;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 4090;
                this.match(PostgreSQLParser.REPLICA);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4091;
                this.match(PostgreSQLParser.ENABLE_P);
                this.state = 4092;
                this.match(PostgreSQLParser.ALWAYS);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4093;
                this.match(PostgreSQLParser.DISABLE_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createassertionstmt(): CreateassertionstmtContext {
        let localContext = new CreateassertionstmtContext(this.context, this.state);
        this.enterRule(localContext, 452, PostgreSQLParser.RULE_createassertionstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4096;
            this.match(PostgreSQLParser.CREATE);
            this.state = 4097;
            this.match(PostgreSQLParser.ASSERTION);
            this.state = 4098;
            this.any_name();
            this.state = 4099;
            this.match(PostgreSQLParser.CHECK);
            this.state = 4100;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 4101;
            this.a_expr();
            this.state = 4102;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            this.state = 4103;
            this.constraintattributespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definestmt(): DefinestmtContext {
        let localContext = new DefinestmtContext(this.context, this.state);
        this.enterRule(localContext, 454, PostgreSQLParser.RULE_definestmt);
        let _la: number;
        try {
            this.state = 4219;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 327, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4105;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4107;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 120) {
                    {
                    this.state = 4106;
                    this.or_replace_();
                    }
                }

                this.state = 4109;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 4110;
                this.func_name();
                this.state = 4111;
                this.aggr_args();
                this.state = 4112;
                this.definition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4114;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4116;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 120) {
                    {
                    this.state = 4115;
                    this.or_replace_();
                    }
                }

                this.state = 4118;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 4119;
                this.func_name();
                this.state = 4120;
                this.old_aggr_definition();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4122;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4123;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4124;
                this.any_operator();
                this.state = 4125;
                this.definition();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4127;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4128;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4129;
                this.any_name();
                this.state = 4130;
                this.definition();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4132;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4133;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4134;
                this.any_name();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4135;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4136;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4137;
                this.any_name();
                this.state = 4138;
                this.match(PostgreSQLParser.AS);
                this.state = 4139;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4141;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 4140;
                    this.opttablefuncelementlist();
                    }
                }

                this.state = 4143;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4145;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4146;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4147;
                this.any_name();
                this.state = 4148;
                this.match(PostgreSQLParser.AS);
                this.state = 4149;
                this.match(PostgreSQLParser.ENUM_P);
                this.state = 4150;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 563)) & ~0x1F) === 0 && ((1 << (_la - 563)) & 16777237) !== 0)) {
                    {
                    this.state = 4151;
                    this.enum_val_list_();
                    }
                }

                this.state = 4154;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4156;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4157;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4158;
                this.any_name();
                this.state = 4159;
                this.match(PostgreSQLParser.AS);
                this.state = 4160;
                this.match(PostgreSQLParser.RANGE);
                this.state = 4161;
                this.definition();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4163;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4164;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4165;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4166;
                this.match(PostgreSQLParser.PARSER);
                this.state = 4167;
                this.any_name();
                this.state = 4168;
                this.definition();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4170;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4171;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4172;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4173;
                this.match(PostgreSQLParser.DICTIONARY);
                this.state = 4174;
                this.any_name();
                this.state = 4175;
                this.definition();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4177;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4178;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4179;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4180;
                this.match(PostgreSQLParser.TEMPLATE);
                this.state = 4181;
                this.any_name();
                this.state = 4182;
                this.definition();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4184;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4185;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4186;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4187;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 4188;
                this.any_name();
                this.state = 4189;
                this.definition();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4191;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4192;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 4193;
                this.any_name();
                this.state = 4194;
                this.definition();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4196;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4197;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 4198;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4199;
                this.match(PostgreSQLParser.NOT);
                this.state = 4200;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4201;
                this.any_name();
                this.state = 4202;
                this.definition();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4204;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4205;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 4206;
                this.any_name();
                this.state = 4207;
                this.match(PostgreSQLParser.FROM);
                this.state = 4208;
                this.any_name();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4210;
                this.match(PostgreSQLParser.CREATE);
                this.state = 4211;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 4212;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4213;
                this.match(PostgreSQLParser.NOT);
                this.state = 4214;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4215;
                this.any_name();
                this.state = 4216;
                this.match(PostgreSQLParser.FROM);
                this.state = 4217;
                this.any_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definition(): DefinitionContext {
        let localContext = new DefinitionContext(this.context, this.state);
        this.enterRule(localContext, 456, PostgreSQLParser.RULE_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4221;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 4222;
            this.def_list();
            this.state = 4223;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_list(): Def_listContext {
        let localContext = new Def_listContext(this.context, this.state);
        this.enterRule(localContext, 458, PostgreSQLParser.RULE_def_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4225;
            this.def_elem();
            this.state = 4230;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4226;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4227;
                this.def_elem();
                }
                }
                this.state = 4232;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_elem(): Def_elemContext {
        let localContext = new Def_elemContext(this.context, this.state);
        this.enterRule(localContext, 460, PostgreSQLParser.RULE_def_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4233;
            this.colLabel();
            this.state = 4236;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 4234;
                this.match(PostgreSQLParser.EQUAL);
                this.state = 4235;
                this.def_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public def_arg(): Def_argContext {
        let localContext = new Def_argContext(this.context, this.state);
        this.enterRule(localContext, 462, PostgreSQLParser.RULE_def_arg);
        try {
            this.state = 4244;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 330, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4238;
                this.func_type();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4239;
                this.reserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4240;
                this.qual_all_op();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4241;
                this.numericonly();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4242;
                this.sconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4243;
                this.match(PostgreSQLParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public old_aggr_definition(): Old_aggr_definitionContext {
        let localContext = new Old_aggr_definitionContext(this.context, this.state);
        this.enterRule(localContext, 464, PostgreSQLParser.RULE_old_aggr_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4246;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 4247;
            this.old_aggr_list();
            this.state = 4248;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public old_aggr_list(): Old_aggr_listContext {
        let localContext = new Old_aggr_listContext(this.context, this.state);
        this.enterRule(localContext, 466, PostgreSQLParser.RULE_old_aggr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4250;
            this.old_aggr_elem();
            this.state = 4255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4251;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4252;
                this.old_aggr_elem();
                }
                }
                this.state = 4257;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public old_aggr_elem(): Old_aggr_elemContext {
        let localContext = new Old_aggr_elemContext(this.context, this.state);
        this.enterRule(localContext, 468, PostgreSQLParser.RULE_old_aggr_elem);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4258;
            this.identifier();
            this.state = 4259;
            this.match(PostgreSQLParser.EQUAL);
            this.state = 4260;
            this.def_arg();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enum_val_list_(): Enum_val_list_Context {
        let localContext = new Enum_val_list_Context(this.context, this.state);
        this.enterRule(localContext, 470, PostgreSQLParser.RULE_enum_val_list_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4262;
            this.enum_val_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enum_val_list(): Enum_val_listContext {
        let localContext = new Enum_val_listContext(this.context, this.state);
        this.enterRule(localContext, 472, PostgreSQLParser.RULE_enum_val_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4264;
            this.sconst();
            this.state = 4269;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4265;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4266;
                this.sconst();
                }
                }
                this.state = 4271;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterenumstmt(): AlterenumstmtContext {
        let localContext = new AlterenumstmtContext(this.context, this.state);
        this.enterRule(localContext, 474, PostgreSQLParser.RULE_alterenumstmt);
        let _la: number;
        try {
            this.state = 4315;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4272;
                this.match(PostgreSQLParser.ALTER);
                this.state = 4273;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4274;
                this.any_name();
                this.state = 4275;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 4276;
                this.match(PostgreSQLParser.VALUE_P);
                this.state = 4278;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 258) {
                    {
                    this.state = 4277;
                    this.if_not_exists_();
                    }
                }

                this.state = 4280;
                this.sconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4282;
                this.match(PostgreSQLParser.ALTER);
                this.state = 4283;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4284;
                this.any_name();
                this.state = 4285;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 4286;
                this.match(PostgreSQLParser.VALUE_P);
                this.state = 4288;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 258) {
                    {
                    this.state = 4287;
                    this.if_not_exists_();
                    }
                }

                this.state = 4290;
                this.sconst();
                this.state = 4291;
                this.match(PostgreSQLParser.BEFORE);
                this.state = 4292;
                this.sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4294;
                this.match(PostgreSQLParser.ALTER);
                this.state = 4295;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4296;
                this.any_name();
                this.state = 4297;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 4298;
                this.match(PostgreSQLParser.VALUE_P);
                this.state = 4300;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 258) {
                    {
                    this.state = 4299;
                    this.if_not_exists_();
                    }
                }

                this.state = 4302;
                this.sconst();
                this.state = 4303;
                this.match(PostgreSQLParser.AFTER);
                this.state = 4304;
                this.sconst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4306;
                this.match(PostgreSQLParser.ALTER);
                this.state = 4307;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4308;
                this.any_name();
                this.state = 4309;
                this.match(PostgreSQLParser.RENAME);
                this.state = 4310;
                this.match(PostgreSQLParser.VALUE_P);
                this.state = 4311;
                this.sconst();
                this.state = 4312;
                this.match(PostgreSQLParser.TO);
                this.state = 4313;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public if_not_exists_(): If_not_exists_Context {
        let localContext = new If_not_exists_Context(this.context, this.state);
        this.enterRule(localContext, 476, PostgreSQLParser.RULE_if_not_exists_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4317;
            this.match(PostgreSQLParser.IF_P);
            this.state = 4318;
            this.match(PostgreSQLParser.NOT);
            this.state = 4319;
            this.match(PostgreSQLParser.EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createopclassstmt(): CreateopclassstmtContext {
        let localContext = new CreateopclassstmtContext(this.context, this.state);
        this.enterRule(localContext, 478, PostgreSQLParser.RULE_createopclassstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4321;
            this.match(PostgreSQLParser.CREATE);
            this.state = 4322;
            this.match(PostgreSQLParser.OPERATOR);
            this.state = 4323;
            this.match(PostgreSQLParser.CLASS);
            this.state = 4324;
            this.any_name();
            this.state = 4326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 91) {
                {
                this.state = 4325;
                this.default_();
                }
            }

            this.state = 4328;
            this.match(PostgreSQLParser.FOR);
            this.state = 4329;
            this.match(PostgreSQLParser.TYPE_P);
            this.state = 4330;
            this.typename();
            this.state = 4331;
            this.match(PostgreSQLParser.USING);
            this.state = 4332;
            this.name();
            this.state = 4334;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 244) {
                {
                this.state = 4333;
                this.opfamily_();
                }
            }

            this.state = 4336;
            this.match(PostgreSQLParser.AS);
            this.state = 4337;
            this.opclass_item_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_item_list(): Opclass_item_listContext {
        let localContext = new Opclass_item_listContext(this.context, this.state);
        this.enterRule(localContext, 480, PostgreSQLParser.RULE_opclass_item_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4339;
            this.opclass_item();
            this.state = 4344;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4340;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4341;
                this.opclass_item();
                }
                }
                this.state = 4346;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_item(): Opclass_itemContext {
        let localContext = new Opclass_itemContext(this.context, this.state);
        this.enterRule(localContext, 482, PostgreSQLParser.RULE_opclass_item);
        let _la: number;
        try {
            this.state = 4378;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 344, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4347;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4348;
                this.iconst();
                this.state = 4349;
                this.any_operator();
                this.state = 4351;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4350;
                    this.opclass_purpose();
                    }
                }

                this.state = 4354;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 4353;
                    this.recheck_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4356;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4357;
                this.iconst();
                this.state = 4358;
                this.operator_with_argtypes();
                this.state = 4360;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4359;
                    this.opclass_purpose();
                    }
                }

                this.state = 4363;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 333) {
                    {
                    this.state = 4362;
                    this.recheck_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4365;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 4366;
                this.iconst();
                this.state = 4367;
                this.function_with_argtypes();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4369;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 4370;
                this.iconst();
                this.state = 4371;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4372;
                this.type_list();
                this.state = 4373;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 4374;
                this.function_with_argtypes();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4376;
                this.match(PostgreSQLParser.STORAGE);
                this.state = 4377;
                this.typename();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public default_(): Default_Context {
        let localContext = new Default_Context(this.context, this.state);
        this.enterRule(localContext, 484, PostgreSQLParser.RULE_default_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4380;
            this.match(PostgreSQLParser.DEFAULT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opfamily_(): Opfamily_Context {
        let localContext = new Opfamily_Context(this.context, this.state);
        this.enterRule(localContext, 486, PostgreSQLParser.RULE_opfamily_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4382;
            this.match(PostgreSQLParser.FAMILY);
            this.state = 4383;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_purpose(): Opclass_purposeContext {
        let localContext = new Opclass_purposeContext(this.context, this.state);
        this.enterRule(localContext, 488, PostgreSQLParser.RULE_opclass_purpose);
        try {
            this.state = 4391;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4385;
                this.match(PostgreSQLParser.FOR);
                this.state = 4386;
                this.match(PostgreSQLParser.SEARCH);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4387;
                this.match(PostgreSQLParser.FOR);
                this.state = 4388;
                this.match(PostgreSQLParser.ORDER);
                this.state = 4389;
                this.match(PostgreSQLParser.BY);
                this.state = 4390;
                this.any_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public recheck_(): Recheck_Context {
        let localContext = new Recheck_Context(this.context, this.state);
        this.enterRule(localContext, 490, PostgreSQLParser.RULE_recheck_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4393;
            this.match(PostgreSQLParser.RECHECK);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createopfamilystmt(): CreateopfamilystmtContext {
        let localContext = new CreateopfamilystmtContext(this.context, this.state);
        this.enterRule(localContext, 492, PostgreSQLParser.RULE_createopfamilystmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4395;
            this.match(PostgreSQLParser.CREATE);
            this.state = 4396;
            this.match(PostgreSQLParser.OPERATOR);
            this.state = 4397;
            this.match(PostgreSQLParser.FAMILY);
            this.state = 4398;
            this.any_name();
            this.state = 4399;
            this.match(PostgreSQLParser.USING);
            this.state = 4400;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteropfamilystmt(): AlteropfamilystmtContext {
        let localContext = new AlteropfamilystmtContext(this.context, this.state);
        this.enterRule(localContext, 494, PostgreSQLParser.RULE_alteropfamilystmt);
        try {
            this.state = 4420;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4402;
                this.match(PostgreSQLParser.ALTER);
                this.state = 4403;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4404;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 4405;
                this.any_name();
                this.state = 4406;
                this.match(PostgreSQLParser.USING);
                this.state = 4407;
                this.name();
                this.state = 4408;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 4409;
                this.opclass_item_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4411;
                this.match(PostgreSQLParser.ALTER);
                this.state = 4412;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4413;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 4414;
                this.any_name();
                this.state = 4415;
                this.match(PostgreSQLParser.USING);
                this.state = 4416;
                this.name();
                this.state = 4417;
                this.match(PostgreSQLParser.DROP);
                this.state = 4418;
                this.opclass_drop_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_drop_list(): Opclass_drop_listContext {
        let localContext = new Opclass_drop_listContext(this.context, this.state);
        this.enterRule(localContext, 496, PostgreSQLParser.RULE_opclass_drop_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4422;
            this.opclass_drop();
            this.state = 4427;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4423;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4424;
                this.opclass_drop();
                }
                }
                this.state = 4429;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opclass_drop(): Opclass_dropContext {
        let localContext = new Opclass_dropContext(this.context, this.state);
        this.enterRule(localContext, 498, PostgreSQLParser.RULE_opclass_drop);
        try {
            this.state = 4442;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPERATOR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4430;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4431;
                this.iconst();
                this.state = 4432;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4433;
                this.type_list();
                this.state = 4434;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.FUNCTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4436;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 4437;
                this.iconst();
                this.state = 4438;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4439;
                this.type_list();
                this.state = 4440;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropopclassstmt(): DropopclassstmtContext {
        let localContext = new DropopclassstmtContext(this.context, this.state);
        this.enterRule(localContext, 500, PostgreSQLParser.RULE_dropopclassstmt);
        let _la: number;
        try {
            this.state = 4464;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4444;
                this.match(PostgreSQLParser.DROP);
                this.state = 4445;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4446;
                this.match(PostgreSQLParser.CLASS);
                this.state = 4447;
                this.any_name();
                this.state = 4448;
                this.match(PostgreSQLParser.USING);
                this.state = 4449;
                this.name();
                this.state = 4451;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4450;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4453;
                this.match(PostgreSQLParser.DROP);
                this.state = 4454;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4455;
                this.match(PostgreSQLParser.CLASS);
                this.state = 4456;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4457;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4458;
                this.any_name();
                this.state = 4459;
                this.match(PostgreSQLParser.USING);
                this.state = 4460;
                this.name();
                this.state = 4462;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4461;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropopfamilystmt(): DropopfamilystmtContext {
        let localContext = new DropopfamilystmtContext(this.context, this.state);
        this.enterRule(localContext, 502, PostgreSQLParser.RULE_dropopfamilystmt);
        let _la: number;
        try {
            this.state = 4486;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 354, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4466;
                this.match(PostgreSQLParser.DROP);
                this.state = 4467;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4468;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 4469;
                this.any_name();
                this.state = 4470;
                this.match(PostgreSQLParser.USING);
                this.state = 4471;
                this.name();
                this.state = 4473;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4472;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4475;
                this.match(PostgreSQLParser.DROP);
                this.state = 4476;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4477;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 4478;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4479;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4480;
                this.any_name();
                this.state = 4481;
                this.match(PostgreSQLParser.USING);
                this.state = 4482;
                this.name();
                this.state = 4484;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4483;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropownedstmt(): DropownedstmtContext {
        let localContext = new DropownedstmtContext(this.context, this.state);
        this.enterRule(localContext, 504, PostgreSQLParser.RULE_dropownedstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4488;
            this.match(PostgreSQLParser.DROP);
            this.state = 4489;
            this.match(PostgreSQLParser.OWNED);
            this.state = 4490;
            this.match(PostgreSQLParser.BY);
            this.state = 4491;
            this.role_list();
            this.state = 4493;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188 || _la === 346) {
                {
                this.state = 4492;
                this.drop_behavior_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reassignownedstmt(): ReassignownedstmtContext {
        let localContext = new ReassignownedstmtContext(this.context, this.state);
        this.enterRule(localContext, 506, PostgreSQLParser.RULE_reassignownedstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4495;
            this.match(PostgreSQLParser.REASSIGN);
            this.state = 4496;
            this.match(PostgreSQLParser.OWNED);
            this.state = 4497;
            this.match(PostgreSQLParser.BY);
            this.state = 4498;
            this.role_list();
            this.state = 4499;
            this.match(PostgreSQLParser.TO);
            this.state = 4500;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropstmt(): DropstmtContext {
        let localContext = new DropstmtContext(this.context, this.state);
        this.enterRule(localContext, 508, PostgreSQLParser.RULE_dropstmt);
        let _la: number;
        try {
            this.state = 4592;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 368, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4502;
                this.match(PostgreSQLParser.DROP);
                this.state = 4503;
                this.object_type_any_name();
                this.state = 4504;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4505;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4506;
                this.any_name_list_();
                this.state = 4508;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4507;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4510;
                this.match(PostgreSQLParser.DROP);
                this.state = 4511;
                this.object_type_any_name();
                this.state = 4512;
                this.any_name_list_();
                this.state = 4514;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4513;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4516;
                this.match(PostgreSQLParser.DROP);
                this.state = 4517;
                this.drop_type_name();
                this.state = 4518;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4519;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4520;
                this.name_list();
                this.state = 4522;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4521;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4524;
                this.match(PostgreSQLParser.DROP);
                this.state = 4525;
                this.drop_type_name();
                this.state = 4526;
                this.name_list();
                this.state = 4528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4527;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4530;
                this.match(PostgreSQLParser.DROP);
                this.state = 4531;
                this.object_type_name_on_any_name();
                this.state = 4532;
                this.name();
                this.state = 4533;
                this.match(PostgreSQLParser.ON);
                this.state = 4534;
                this.any_name();
                this.state = 4536;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4535;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4538;
                this.match(PostgreSQLParser.DROP);
                this.state = 4539;
                this.object_type_name_on_any_name();
                this.state = 4540;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4541;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4542;
                this.name();
                this.state = 4543;
                this.match(PostgreSQLParser.ON);
                this.state = 4544;
                this.any_name();
                this.state = 4546;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4545;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4548;
                this.match(PostgreSQLParser.DROP);
                this.state = 4549;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4550;
                this.type_name_list();
                this.state = 4552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4551;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4554;
                this.match(PostgreSQLParser.DROP);
                this.state = 4555;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4556;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4557;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4558;
                this.type_name_list();
                this.state = 4560;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4559;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4562;
                this.match(PostgreSQLParser.DROP);
                this.state = 4563;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 4564;
                this.type_name_list();
                this.state = 4566;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4565;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4568;
                this.match(PostgreSQLParser.DROP);
                this.state = 4569;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 4570;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4571;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4572;
                this.type_name_list();
                this.state = 4574;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4573;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4576;
                this.match(PostgreSQLParser.DROP);
                this.state = 4577;
                this.match(PostgreSQLParser.INDEX);
                this.state = 4578;
                this.match(PostgreSQLParser.CONCURRENTLY);
                this.state = 4579;
                this.any_name_list_();
                this.state = 4581;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4580;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4583;
                this.match(PostgreSQLParser.DROP);
                this.state = 4584;
                this.match(PostgreSQLParser.INDEX);
                this.state = 4585;
                this.match(PostgreSQLParser.CONCURRENTLY);
                this.state = 4586;
                this.match(PostgreSQLParser.IF_P);
                this.state = 4587;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 4588;
                this.any_name_list_();
                this.state = 4590;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 4589;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_any_name(): Object_type_any_nameContext {
        let localContext = new Object_type_any_nameContext(this.context, this.state);
        this.enterRule(localContext, 510, PostgreSQLParser.RULE_object_type_any_name);
        try {
            this.state = 4617;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 369, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4594;
                this.match(PostgreSQLParser.TABLE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4595;
                this.match(PostgreSQLParser.SEQUENCE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4596;
                this.match(PostgreSQLParser.VIEW);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4597;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 4598;
                this.match(PostgreSQLParser.VIEW);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4599;
                this.match(PostgreSQLParser.INDEX);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4600;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 4601;
                this.match(PostgreSQLParser.TABLE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4602;
                this.match(PostgreSQLParser.COLLATION);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4603;
                this.match(PostgreSQLParser.CONVERSION_P);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4604;
                this.match(PostgreSQLParser.STATISTICS);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4605;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4606;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4607;
                this.match(PostgreSQLParser.PARSER);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4608;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4609;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4610;
                this.match(PostgreSQLParser.DICTIONARY);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4611;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4612;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4613;
                this.match(PostgreSQLParser.TEMPLATE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4614;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 4615;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 4616;
                this.match(PostgreSQLParser.CONFIGURATION);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_name(): Object_type_nameContext {
        let localContext = new Object_type_nameContext(this.context, this.state);
        this.enterRule(localContext, 512, PostgreSQLParser.RULE_object_type_name);
        try {
            this.state = 4624;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.FOREIGN:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.PUBLICATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4619;
                this.drop_type_name();
                }
                break;
            case PostgreSQLParser.DATABASE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4620;
                this.match(PostgreSQLParser.DATABASE);
                }
                break;
            case PostgreSQLParser.ROLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4621;
                this.match(PostgreSQLParser.ROLE);
                }
                break;
            case PostgreSQLParser.SUBSCRIPTION:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4622;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                }
                break;
            case PostgreSQLParser.TABLESPACE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4623;
                this.match(PostgreSQLParser.TABLESPACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_type_name(): Drop_type_nameContext {
        let localContext = new Drop_type_nameContext(this.context, this.state);
        this.enterRule(localContext, 514, PostgreSQLParser.RULE_drop_type_name);
        let _la: number;
        try {
            this.state = 4641;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.ACCESS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4626;
                this.match(PostgreSQLParser.ACCESS);
                this.state = 4627;
                this.match(PostgreSQLParser.METHOD);
                }
                break;
            case PostgreSQLParser.EVENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4628;
                this.match(PostgreSQLParser.EVENT);
                this.state = 4629;
                this.match(PostgreSQLParser.TRIGGER);
                }
                break;
            case PostgreSQLParser.EXTENSION:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4630;
                this.match(PostgreSQLParser.EXTENSION);
                }
                break;
            case PostgreSQLParser.FOREIGN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4631;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 4632;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 4633;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.PROCEDURAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4635;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 326) {
                    {
                    this.state = 4634;
                    this.procedural_();
                    }
                }

                this.state = 4637;
                this.match(PostgreSQLParser.LANGUAGE);
                }
                break;
            case PostgreSQLParser.PUBLICATION:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4638;
                this.match(PostgreSQLParser.PUBLICATION);
                }
                break;
            case PostgreSQLParser.SCHEMA:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4639;
                this.match(PostgreSQLParser.SCHEMA);
                }
                break;
            case PostgreSQLParser.SERVER:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4640;
                this.match(PostgreSQLParser.SERVER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public object_type_name_on_any_name(): Object_type_name_on_any_nameContext {
        let localContext = new Object_type_name_on_any_nameContext(this.context, this.state);
        this.enterRule(localContext, 516, PostgreSQLParser.RULE_object_type_name_on_any_name);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4643;
            _la = this.tokenStream.LA(1);
            if(!(_la === 352 || _la === 388 || _la === 483)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_name_list_(): Any_name_list_Context {
        let localContext = new Any_name_list_Context(this.context, this.state);
        this.enterRule(localContext, 518, PostgreSQLParser.RULE_any_name_list_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4645;
            this.any_name();
            this.state = 4650;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4646;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4647;
                this.any_name();
                }
                }
                this.state = 4652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_name(): Any_nameContext {
        let localContext = new Any_nameContext(this.context, this.state);
        this.enterRule(localContext, 520, PostgreSQLParser.RULE_any_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4653;
            this.colid();
            this.state = 4655;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
            case 1:
                {
                this.state = 4654;
                this.attrs();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attrs(): AttrsContext {
        let localContext = new AttrsContext(this.context, this.state);
        this.enterRule(localContext, 522, PostgreSQLParser.RULE_attrs);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4659;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 4657;
                    this.match(PostgreSQLParser.DOT);
                    this.state = 4658;
                    this.attr_name();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 4661;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 375, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_name_list(): Type_name_listContext {
        let localContext = new Type_name_listContext(this.context, this.state);
        this.enterRule(localContext, 524, PostgreSQLParser.RULE_type_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4663;
            this.typename();
            this.state = 4668;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 4664;
                this.match(PostgreSQLParser.COMMA);
                this.state = 4665;
                this.typename();
                }
                }
                this.state = 4670;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncatestmt(): TruncatestmtContext {
        let localContext = new TruncatestmtContext(this.context, this.state);
        this.enterRule(localContext, 526, PostgreSQLParser.RULE_truncatestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4671;
            this.match(PostgreSQLParser.TRUNCATE);
            this.state = 4673;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 130) {
                {
                this.state = 4672;
                this.table_();
                }
            }

            this.state = 4675;
            this.relation_expr_list();
            this.state = 4677;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 205 || _la === 345) {
                {
                this.state = 4676;
                this.restart_seqs_();
                }
            }

            this.state = 4680;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188 || _la === 346) {
                {
                this.state = 4679;
                this.drop_behavior_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restart_seqs_(): Restart_seqs_Context {
        let localContext = new Restart_seqs_Context(this.context, this.state);
        this.enterRule(localContext, 528, PostgreSQLParser.RULE_restart_seqs_);
        try {
            this.state = 4686;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.CONTINUE_P:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4682;
                this.match(PostgreSQLParser.CONTINUE_P);
                this.state = 4683;
                this.match(PostgreSQLParser.IDENTITY_P);
                }
                break;
            case PostgreSQLParser.RESTART:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4684;
                this.match(PostgreSQLParser.RESTART);
                this.state = 4685;
                this.match(PostgreSQLParser.IDENTITY_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commentstmt(): CommentstmtContext {
        let localContext = new CommentstmtContext(this.context, this.state);
        this.enterRule(localContext, 530, PostgreSQLParser.RULE_commentstmt);
        try {
            this.state = 4835;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4688;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4689;
                this.match(PostgreSQLParser.ON);
                this.state = 4690;
                this.object_type_any_name();
                this.state = 4691;
                this.any_name();
                this.state = 4692;
                this.match(PostgreSQLParser.IS);
                this.state = 4693;
                this.comment_text();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4695;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4696;
                this.match(PostgreSQLParser.ON);
                this.state = 4697;
                this.match(PostgreSQLParser.COLUMN);
                this.state = 4698;
                this.any_name();
                this.state = 4699;
                this.match(PostgreSQLParser.IS);
                this.state = 4700;
                this.comment_text();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4702;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4703;
                this.match(PostgreSQLParser.ON);
                this.state = 4704;
                this.object_type_name();
                this.state = 4705;
                this.name();
                this.state = 4706;
                this.match(PostgreSQLParser.IS);
                this.state = 4707;
                this.comment_text();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4709;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4710;
                this.match(PostgreSQLParser.ON);
                this.state = 4711;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4712;
                this.typename();
                this.state = 4713;
                this.match(PostgreSQLParser.IS);
                this.state = 4714;
                this.comment_text();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4716;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4717;
                this.match(PostgreSQLParser.ON);
                this.state = 4718;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 4719;
                this.typename();
                this.state = 4720;
                this.match(PostgreSQLParser.IS);
                this.state = 4721;
                this.comment_text();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4723;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4724;
                this.match(PostgreSQLParser.ON);
                this.state = 4725;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 4726;
                this.aggregate_with_argtypes();
                this.state = 4727;
                this.match(PostgreSQLParser.IS);
                this.state = 4728;
                this.comment_text();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4730;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4731;
                this.match(PostgreSQLParser.ON);
                this.state = 4732;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 4733;
                this.function_with_argtypes();
                this.state = 4734;
                this.match(PostgreSQLParser.IS);
                this.state = 4735;
                this.comment_text();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4737;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4738;
                this.match(PostgreSQLParser.ON);
                this.state = 4739;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4740;
                this.operator_with_argtypes();
                this.state = 4741;
                this.match(PostgreSQLParser.IS);
                this.state = 4742;
                this.comment_text();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4744;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4745;
                this.match(PostgreSQLParser.ON);
                this.state = 4746;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 4747;
                this.name();
                this.state = 4748;
                this.match(PostgreSQLParser.ON);
                this.state = 4749;
                this.any_name();
                this.state = 4750;
                this.match(PostgreSQLParser.IS);
                this.state = 4751;
                this.comment_text();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4753;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4754;
                this.match(PostgreSQLParser.ON);
                this.state = 4755;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 4756;
                this.name();
                this.state = 4757;
                this.match(PostgreSQLParser.ON);
                this.state = 4758;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 4759;
                this.any_name();
                this.state = 4760;
                this.match(PostgreSQLParser.IS);
                this.state = 4761;
                this.comment_text();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 4763;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4764;
                this.match(PostgreSQLParser.ON);
                this.state = 4765;
                this.object_type_name_on_any_name();
                this.state = 4766;
                this.name();
                this.state = 4767;
                this.match(PostgreSQLParser.ON);
                this.state = 4768;
                this.any_name();
                this.state = 4769;
                this.match(PostgreSQLParser.IS);
                this.state = 4770;
                this.comment_text();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 4772;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4773;
                this.match(PostgreSQLParser.ON);
                this.state = 4774;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 4775;
                this.function_with_argtypes();
                this.state = 4776;
                this.match(PostgreSQLParser.IS);
                this.state = 4777;
                this.comment_text();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 4779;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4780;
                this.match(PostgreSQLParser.ON);
                this.state = 4781;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 4782;
                this.function_with_argtypes();
                this.state = 4783;
                this.match(PostgreSQLParser.IS);
                this.state = 4784;
                this.comment_text();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 4786;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4787;
                this.match(PostgreSQLParser.ON);
                this.state = 4788;
                this.match(PostgreSQLParser.TRANSFORM);
                this.state = 4789;
                this.match(PostgreSQLParser.FOR);
                this.state = 4790;
                this.typename();
                this.state = 4791;
                this.match(PostgreSQLParser.LANGUAGE);
                this.state = 4792;
                this.name();
                this.state = 4793;
                this.match(PostgreSQLParser.IS);
                this.state = 4794;
                this.comment_text();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 4796;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4797;
                this.match(PostgreSQLParser.ON);
                this.state = 4798;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4799;
                this.match(PostgreSQLParser.CLASS);
                this.state = 4800;
                this.any_name();
                this.state = 4801;
                this.match(PostgreSQLParser.USING);
                this.state = 4802;
                this.name();
                this.state = 4803;
                this.match(PostgreSQLParser.IS);
                this.state = 4804;
                this.comment_text();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 4806;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4807;
                this.match(PostgreSQLParser.ON);
                this.state = 4808;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 4809;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 4810;
                this.any_name();
                this.state = 4811;
                this.match(PostgreSQLParser.USING);
                this.state = 4812;
                this.name();
                this.state = 4813;
                this.match(PostgreSQLParser.IS);
                this.state = 4814;
                this.comment_text();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 4816;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4817;
                this.match(PostgreSQLParser.ON);
                this.state = 4818;
                this.match(PostgreSQLParser.LARGE_P);
                this.state = 4819;
                this.match(PostgreSQLParser.OBJECT_P);
                this.state = 4820;
                this.numericonly();
                this.state = 4821;
                this.match(PostgreSQLParser.IS);
                this.state = 4822;
                this.comment_text();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 4824;
                this.match(PostgreSQLParser.COMMENT);
                this.state = 4825;
                this.match(PostgreSQLParser.ON);
                this.state = 4826;
                this.match(PostgreSQLParser.CAST);
                this.state = 4827;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 4828;
                this.typename();
                this.state = 4829;
                this.match(PostgreSQLParser.AS);
                this.state = 4830;
                this.typename();
                this.state = 4831;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 4832;
                this.match(PostgreSQLParser.IS);
                this.state = 4833;
                this.comment_text();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comment_text(): Comment_textContext {
        let localContext = new Comment_textContext(this.context, this.state);
        this.enterRule(localContext, 532, PostgreSQLParser.RULE_comment_text);
        try {
            this.state = 4839;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4837;
                this.sconst();
                }
                break;
            case PostgreSQLParser.NULL_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4838;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public seclabelstmt(): SeclabelstmtContext {
        let localContext = new SeclabelstmtContext(this.context, this.state);
        this.enterRule(localContext, 534, PostgreSQLParser.RULE_seclabelstmt);
        let _la: number;
        try {
            this.state = 4952;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 393, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4841;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4842;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4843;
                    this.provider_();
                    }
                }

                this.state = 4846;
                this.match(PostgreSQLParser.ON);
                this.state = 4847;
                this.object_type_any_name();
                this.state = 4848;
                this.any_name();
                this.state = 4849;
                this.match(PostgreSQLParser.IS);
                this.state = 4850;
                this.security_label();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4852;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4853;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4855;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4854;
                    this.provider_();
                    }
                }

                this.state = 4857;
                this.match(PostgreSQLParser.ON);
                this.state = 4858;
                this.match(PostgreSQLParser.COLUMN);
                this.state = 4859;
                this.any_name();
                this.state = 4860;
                this.match(PostgreSQLParser.IS);
                this.state = 4861;
                this.security_label();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4863;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4864;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4866;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4865;
                    this.provider_();
                    }
                }

                this.state = 4868;
                this.match(PostgreSQLParser.ON);
                this.state = 4869;
                this.object_type_name();
                this.state = 4870;
                this.name();
                this.state = 4871;
                this.match(PostgreSQLParser.IS);
                this.state = 4872;
                this.security_label();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4874;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4875;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4877;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4876;
                    this.provider_();
                    }
                }

                this.state = 4879;
                this.match(PostgreSQLParser.ON);
                this.state = 4880;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 4881;
                this.typename();
                this.state = 4882;
                this.match(PostgreSQLParser.IS);
                this.state = 4883;
                this.security_label();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4885;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4886;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4887;
                    this.provider_();
                    }
                }

                this.state = 4890;
                this.match(PostgreSQLParser.ON);
                this.state = 4891;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 4892;
                this.typename();
                this.state = 4893;
                this.match(PostgreSQLParser.IS);
                this.state = 4894;
                this.security_label();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4896;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4897;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4899;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4898;
                    this.provider_();
                    }
                }

                this.state = 4901;
                this.match(PostgreSQLParser.ON);
                this.state = 4902;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 4903;
                this.aggregate_with_argtypes();
                this.state = 4904;
                this.match(PostgreSQLParser.IS);
                this.state = 4905;
                this.security_label();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4907;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4908;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4909;
                    this.provider_();
                    }
                }

                this.state = 4912;
                this.match(PostgreSQLParser.ON);
                this.state = 4913;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 4914;
                this.function_with_argtypes();
                this.state = 4915;
                this.match(PostgreSQLParser.IS);
                this.state = 4916;
                this.security_label();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4918;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4919;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4921;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4920;
                    this.provider_();
                    }
                }

                this.state = 4923;
                this.match(PostgreSQLParser.ON);
                this.state = 4924;
                this.match(PostgreSQLParser.LARGE_P);
                this.state = 4925;
                this.match(PostgreSQLParser.OBJECT_P);
                this.state = 4926;
                this.numericonly();
                this.state = 4927;
                this.match(PostgreSQLParser.IS);
                this.state = 4928;
                this.security_label();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 4930;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4931;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4933;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4932;
                    this.provider_();
                    }
                }

                this.state = 4935;
                this.match(PostgreSQLParser.ON);
                this.state = 4936;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 4937;
                this.function_with_argtypes();
                this.state = 4938;
                this.match(PostgreSQLParser.IS);
                this.state = 4939;
                this.security_label();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 4941;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 4942;
                this.match(PostgreSQLParser.LABEL);
                this.state = 4944;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 4943;
                    this.provider_();
                    }
                }

                this.state = 4946;
                this.match(PostgreSQLParser.ON);
                this.state = 4947;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 4948;
                this.function_with_argtypes();
                this.state = 4949;
                this.match(PostgreSQLParser.IS);
                this.state = 4950;
                this.security_label();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public provider_(): Provider_Context {
        let localContext = new Provider_Context(this.context, this.state);
        this.enterRule(localContext, 536, PostgreSQLParser.RULE_provider_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 4954;
            this.match(PostgreSQLParser.FOR);
            this.state = 4955;
            this.nonreservedword_or_sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public security_label(): Security_labelContext {
        let localContext = new Security_labelContext(this.context, this.state);
        this.enterRule(localContext, 538, PostgreSQLParser.RULE_security_label);
        try {
            this.state = 4959;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4957;
                this.sconst();
                }
                break;
            case PostgreSQLParser.NULL_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4958;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetchstmt(): FetchstmtContext {
        let localContext = new FetchstmtContext(this.context, this.state);
        this.enterRule(localContext, 540, PostgreSQLParser.RULE_fetchstmt);
        try {
            this.state = 4965;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.FETCH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4961;
                this.match(PostgreSQLParser.FETCH);
                this.state = 4962;
                this.fetch_args();
                }
                break;
            case PostgreSQLParser.MOVE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4963;
                this.match(PostgreSQLParser.MOVE);
                this.state = 4964;
                this.fetch_args();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fetch_args(): Fetch_argsContext {
        let localContext = new Fetch_argsContext(this.context, this.state);
        this.enterRule(localContext, 542, PostgreSQLParser.RULE_fetch_args);
        let _la: number;
        try {
            this.state = 5052;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 4967;
                this.cursor_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 4968;
                this.from_in();
                this.state = 4969;
                this.cursor_name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 4971;
                this.match(PostgreSQLParser.NEXT);
                this.state = 4973;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 4972;
                    this.from_in_();
                    }
                }

                this.state = 4975;
                this.cursor_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 4976;
                this.match(PostgreSQLParser.PRIOR);
                this.state = 4978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 4977;
                    this.from_in_();
                    }
                }

                this.state = 4980;
                this.cursor_name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 4981;
                this.match(PostgreSQLParser.FIRST_P);
                this.state = 4983;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 4982;
                    this.from_in_();
                    }
                }

                this.state = 4985;
                this.cursor_name();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 4986;
                this.match(PostgreSQLParser.LAST_P);
                this.state = 4988;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 4987;
                    this.from_in_();
                    }
                }

                this.state = 4990;
                this.cursor_name();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 4991;
                this.match(PostgreSQLParser.ABSOLUTE_P);
                this.state = 4992;
                this.signediconst();
                this.state = 4994;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 4993;
                    this.from_in_();
                    }
                }

                this.state = 4996;
                this.cursor_name();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 4998;
                this.match(PostgreSQLParser.RELATIVE_P);
                this.state = 4999;
                this.signediconst();
                this.state = 5001;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5000;
                    this.from_in_();
                    }
                }

                this.state = 5003;
                this.cursor_name();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5005;
                this.signediconst();
                this.state = 5007;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5006;
                    this.from_in_();
                    }
                }

                this.state = 5009;
                this.cursor_name();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5011;
                this.match(PostgreSQLParser.ALL);
                this.state = 5013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5012;
                    this.from_in_();
                    }
                }

                this.state = 5015;
                this.cursor_name();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5016;
                this.match(PostgreSQLParser.FORWARD);
                this.state = 5018;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5017;
                    this.from_in_();
                    }
                }

                this.state = 5020;
                this.cursor_name();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5021;
                this.match(PostgreSQLParser.FORWARD);
                this.state = 5022;
                this.signediconst();
                this.state = 5024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5023;
                    this.from_in_();
                    }
                }

                this.state = 5026;
                this.cursor_name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5028;
                this.match(PostgreSQLParser.FORWARD);
                this.state = 5029;
                this.match(PostgreSQLParser.ALL);
                this.state = 5031;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5030;
                    this.from_in_();
                    }
                }

                this.state = 5033;
                this.cursor_name();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5034;
                this.match(PostgreSQLParser.BACKWARD);
                this.state = 5036;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5035;
                    this.from_in_();
                    }
                }

                this.state = 5038;
                this.cursor_name();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5039;
                this.match(PostgreSQLParser.BACKWARD);
                this.state = 5040;
                this.signediconst();
                this.state = 5042;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5041;
                    this.from_in_();
                    }
                }

                this.state = 5044;
                this.cursor_name();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5046;
                this.match(PostgreSQLParser.BACKWARD);
                this.state = 5047;
                this.match(PostgreSQLParser.ALL);
                this.state = 5049;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 102 || _la === 106) {
                    {
                    this.state = 5048;
                    this.from_in_();
                    }
                }

                this.state = 5051;
                this.cursor_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_in(): From_inContext {
        let localContext = new From_inContext(this.context, this.state);
        this.enterRule(localContext, 544, PostgreSQLParser.RULE_from_in);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5054;
            _la = this.tokenStream.LA(1);
            if(!(_la === 102 || _la === 106)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_in_(): From_in_Context {
        let localContext = new From_in_Context(this.context, this.state);
        this.enterRule(localContext, 546, PostgreSQLParser.RULE_from_in_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5056;
            this.from_in();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantstmt(): GrantstmtContext {
        let localContext = new GrantstmtContext(this.context, this.state);
        this.enterRule(localContext, 548, PostgreSQLParser.RULE_grantstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5058;
            this.match(PostgreSQLParser.GRANT);
            this.state = 5059;
            this.privileges();
            this.state = 5060;
            this.match(PostgreSQLParser.ON);
            this.state = 5061;
            this.privilege_target();
            this.state = 5062;
            this.match(PostgreSQLParser.TO);
            this.state = 5063;
            this.grantee_list();
            this.state = 5065;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 5064;
                this.grant_grant_option_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokestmt(): RevokestmtContext {
        let localContext = new RevokestmtContext(this.context, this.state);
        this.enterRule(localContext, 550, PostgreSQLParser.RULE_revokestmt);
        let _la: number;
        try {
            this.state = 5088;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5067;
                this.match(PostgreSQLParser.REVOKE);
                this.state = 5068;
                this.privileges();
                this.state = 5069;
                this.match(PostgreSQLParser.ON);
                this.state = 5070;
                this.privilege_target();
                this.state = 5071;
                this.match(PostgreSQLParser.FROM);
                this.state = 5072;
                this.grantee_list();
                this.state = 5074;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5073;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5076;
                this.match(PostgreSQLParser.REVOKE);
                this.state = 5077;
                this.match(PostgreSQLParser.GRANT);
                this.state = 5078;
                this.match(PostgreSQLParser.OPTION);
                this.state = 5079;
                this.match(PostgreSQLParser.FOR);
                this.state = 5080;
                this.privileges();
                this.state = 5081;
                this.match(PostgreSQLParser.ON);
                this.state = 5082;
                this.privilege_target();
                this.state = 5083;
                this.match(PostgreSQLParser.FROM);
                this.state = 5084;
                this.grantee_list();
                this.state = 5086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5085;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privileges(): PrivilegesContext {
        let localContext = new PrivilegesContext(this.context, this.state);
        this.enterRule(localContext, 552, PostgreSQLParser.RULE_privileges);
        try {
            this.state = 5105;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 415, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5090;
                this.privilege_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5091;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5092;
                this.match(PostgreSQLParser.ALL);
                this.state = 5093;
                this.match(PostgreSQLParser.PRIVILEGES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5094;
                this.match(PostgreSQLParser.ALL);
                this.state = 5095;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5096;
                this.columnlist();
                this.state = 5097;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5099;
                this.match(PostgreSQLParser.ALL);
                this.state = 5100;
                this.match(PostgreSQLParser.PRIVILEGES);
                this.state = 5101;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5102;
                this.columnlist();
                this.state = 5103;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege_list(): Privilege_listContext {
        let localContext = new Privilege_listContext(this.context, this.state);
        this.enterRule(localContext, 554, PostgreSQLParser.RULE_privilege_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5107;
            this.privilege();
            this.state = 5112;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5108;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5109;
                this.privilege();
                }
                }
                this.state = 5114;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 556, PostgreSQLParser.RULE_privilege);
        let _la: number;
        try {
            this.state = 5131;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5115;
                this.match(PostgreSQLParser.SELECT);
                this.state = 5117;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5116;
                    this.column_list_();
                    }
                }

                }
                break;
            case PostgreSQLParser.REFERENCES:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5119;
                this.match(PostgreSQLParser.REFERENCES);
                this.state = 5121;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5120;
                    this.column_list_();
                    }
                }

                }
                break;
            case PostgreSQLParser.CREATE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5123;
                this.match(PostgreSQLParser.CREATE);
                this.state = 5125;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5124;
                    this.column_list_();
                    }
                }

                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5127;
                this.colid();
                this.state = 5129;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5128;
                    this.column_list_();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege_target(): Privilege_targetContext {
        let localContext = new Privilege_targetContext(this.context, this.state);
        this.enterRule(localContext, 558, PostgreSQLParser.RULE_privilege_target);
        try {
            this.state = 5191;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 422, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5133;
                this.qualified_name_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5134;
                this.match(PostgreSQLParser.TABLE);
                this.state = 5135;
                this.qualified_name_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5136;
                this.match(PostgreSQLParser.SEQUENCE);
                this.state = 5137;
                this.qualified_name_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5138;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 5139;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 5140;
                this.match(PostgreSQLParser.WRAPPER);
                this.state = 5141;
                this.name_list();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5142;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 5143;
                this.match(PostgreSQLParser.SERVER);
                this.state = 5144;
                this.name_list();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5145;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5146;
                this.function_with_argtypes_list();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5147;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 5148;
                this.function_with_argtypes_list();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5149;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 5150;
                this.function_with_argtypes_list();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5151;
                this.match(PostgreSQLParser.DATABASE);
                this.state = 5152;
                this.name_list();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5153;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 5154;
                this.any_name_list_();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5155;
                this.match(PostgreSQLParser.LANGUAGE);
                this.state = 5156;
                this.name_list();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5157;
                this.match(PostgreSQLParser.LARGE_P);
                this.state = 5158;
                this.match(PostgreSQLParser.OBJECT_P);
                this.state = 5159;
                this.numericonly_list();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5160;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5161;
                this.name_list();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5162;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 5163;
                this.name_list();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5164;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 5165;
                this.any_name_list_();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5166;
                this.match(PostgreSQLParser.ALL);
                this.state = 5167;
                this.match(PostgreSQLParser.TABLES);
                this.state = 5168;
                this.match(PostgreSQLParser.IN_P);
                this.state = 5169;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5170;
                this.name_list();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 5171;
                this.match(PostgreSQLParser.ALL);
                this.state = 5172;
                this.match(PostgreSQLParser.SEQUENCES);
                this.state = 5173;
                this.match(PostgreSQLParser.IN_P);
                this.state = 5174;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5175;
                this.name_list();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 5176;
                this.match(PostgreSQLParser.ALL);
                this.state = 5177;
                this.match(PostgreSQLParser.FUNCTIONS);
                this.state = 5178;
                this.match(PostgreSQLParser.IN_P);
                this.state = 5179;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5180;
                this.name_list();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 5181;
                this.match(PostgreSQLParser.ALL);
                this.state = 5182;
                this.match(PostgreSQLParser.PROCEDURES);
                this.state = 5183;
                this.match(PostgreSQLParser.IN_P);
                this.state = 5184;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5185;
                this.name_list();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 5186;
                this.match(PostgreSQLParser.ALL);
                this.state = 5187;
                this.match(PostgreSQLParser.ROUTINES);
                this.state = 5188;
                this.match(PostgreSQLParser.IN_P);
                this.state = 5189;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5190;
                this.name_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantee_list(): Grantee_listContext {
        let localContext = new Grantee_listContext(this.context, this.state);
        this.enterRule(localContext, 560, PostgreSQLParser.RULE_grantee_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5193;
            this.grantee();
            this.state = 5198;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5194;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5195;
                this.grantee();
                }
                }
                this.state = 5200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantee(): GranteeContext {
        let localContext = new GranteeContext(this.context, this.state);
        this.enterRule(localContext, 562, PostgreSQLParser.RULE_grantee);
        try {
            this.state = 5204;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5201;
                this.rolespec();
                }
                break;
            case PostgreSQLParser.GROUP_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5202;
                this.match(PostgreSQLParser.GROUP_P);
                this.state = 5203;
                this.rolespec();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grant_grant_option_(): Grant_grant_option_Context {
        let localContext = new Grant_grant_option_Context(this.context, this.state);
        this.enterRule(localContext, 564, PostgreSQLParser.RULE_grant_grant_option_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5206;
            this.match(PostgreSQLParser.WITH);
            this.state = 5207;
            this.match(PostgreSQLParser.GRANT);
            this.state = 5208;
            this.match(PostgreSQLParser.OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantrolestmt(): GrantrolestmtContext {
        let localContext = new GrantrolestmtContext(this.context, this.state);
        this.enterRule(localContext, 566, PostgreSQLParser.RULE_grantrolestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5210;
            this.match(PostgreSQLParser.GRANT);
            this.state = 5211;
            this.privilege_list();
            this.state = 5212;
            this.match(PostgreSQLParser.TO);
            this.state = 5213;
            this.role_list();
            this.state = 5215;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 5214;
                this.grant_admin_option_();
                }
            }

            this.state = 5218;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 252) {
                {
                this.state = 5217;
                this.granted_by_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokerolestmt(): RevokerolestmtContext {
        let localContext = new RevokerolestmtContext(this.context, this.state);
        this.enterRule(localContext, 568, PostgreSQLParser.RULE_revokerolestmt);
        let _la: number;
        try {
            this.state = 5243;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 431, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5220;
                this.match(PostgreSQLParser.REVOKE);
                this.state = 5221;
                this.privilege_list();
                this.state = 5222;
                this.match(PostgreSQLParser.FROM);
                this.state = 5223;
                this.role_list();
                this.state = 5225;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 252) {
                    {
                    this.state = 5224;
                    this.granted_by_();
                    }
                }

                this.state = 5228;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5227;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5230;
                this.match(PostgreSQLParser.REVOKE);
                this.state = 5231;
                this.match(PostgreSQLParser.ADMIN);
                this.state = 5232;
                this.match(PostgreSQLParser.OPTION);
                this.state = 5233;
                this.match(PostgreSQLParser.FOR);
                this.state = 5234;
                this.privilege_list();
                this.state = 5235;
                this.match(PostgreSQLParser.FROM);
                this.state = 5236;
                this.role_list();
                this.state = 5238;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 252) {
                    {
                    this.state = 5237;
                    this.granted_by_();
                    }
                }

                this.state = 5241;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5240;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grant_admin_option_(): Grant_admin_option_Context {
        let localContext = new Grant_admin_option_Context(this.context, this.state);
        this.enterRule(localContext, 570, PostgreSQLParser.RULE_grant_admin_option_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5245;
            this.match(PostgreSQLParser.WITH);
            this.state = 5246;
            this.match(PostgreSQLParser.ADMIN);
            this.state = 5247;
            this.match(PostgreSQLParser.OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public granted_by_(): Granted_by_Context {
        let localContext = new Granted_by_Context(this.context, this.state);
        this.enterRule(localContext, 572, PostgreSQLParser.RULE_granted_by_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5249;
            this.match(PostgreSQLParser.GRANTED);
            this.state = 5250;
            this.match(PostgreSQLParser.BY);
            this.state = 5251;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext {
        let localContext = new AlterdefaultprivilegesstmtContext(this.context, this.state);
        this.enterRule(localContext, 574, PostgreSQLParser.RULE_alterdefaultprivilegesstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5253;
            this.match(PostgreSQLParser.ALTER);
            this.state = 5254;
            this.match(PostgreSQLParser.DEFAULT);
            this.state = 5255;
            this.match(PostgreSQLParser.PRIVILEGES);
            this.state = 5256;
            this.defacloptionlist();
            this.state = 5257;
            this.defaclaction();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defacloptionlist(): DefacloptionlistContext {
        let localContext = new DefacloptionlistContext(this.context, this.state);
        this.enterRule(localContext, 576, PostgreSQLParser.RULE_defacloptionlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5262;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 100 || _la === 106) {
                {
                {
                this.state = 5259;
                this.defacloption();
                }
                }
                this.state = 5264;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defacloption(): DefacloptionContext {
        let localContext = new DefacloptionContext(this.context, this.state);
        this.enterRule(localContext, 578, PostgreSQLParser.RULE_defacloption);
        try {
            this.state = 5274;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5265;
                this.match(PostgreSQLParser.IN_P);
                this.state = 5266;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5267;
                this.name_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5268;
                this.match(PostgreSQLParser.FOR);
                this.state = 5269;
                this.match(PostgreSQLParser.ROLE);
                this.state = 5270;
                this.role_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5271;
                this.match(PostgreSQLParser.FOR);
                this.state = 5272;
                this.match(PostgreSQLParser.USER);
                this.state = 5273;
                this.role_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaclaction(): DefaclactionContext {
        let localContext = new DefaclactionContext(this.context, this.state);
        this.enterRule(localContext, 580, PostgreSQLParser.RULE_defaclaction);
        let _la: number;
        try {
            this.state = 5306;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 437, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5276;
                this.match(PostgreSQLParser.GRANT);
                this.state = 5277;
                this.privileges();
                this.state = 5278;
                this.match(PostgreSQLParser.ON);
                this.state = 5279;
                this.defacl_privilege_target();
                this.state = 5280;
                this.match(PostgreSQLParser.TO);
                this.state = 5281;
                this.grantee_list();
                this.state = 5283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 5282;
                    this.grant_grant_option_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5285;
                this.match(PostgreSQLParser.REVOKE);
                this.state = 5286;
                this.privileges();
                this.state = 5287;
                this.match(PostgreSQLParser.ON);
                this.state = 5288;
                this.defacl_privilege_target();
                this.state = 5289;
                this.match(PostgreSQLParser.FROM);
                this.state = 5290;
                this.grantee_list();
                this.state = 5292;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5291;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5294;
                this.match(PostgreSQLParser.REVOKE);
                this.state = 5295;
                this.match(PostgreSQLParser.GRANT);
                this.state = 5296;
                this.match(PostgreSQLParser.OPTION);
                this.state = 5297;
                this.match(PostgreSQLParser.FOR);
                this.state = 5298;
                this.privileges();
                this.state = 5299;
                this.match(PostgreSQLParser.ON);
                this.state = 5300;
                this.defacl_privilege_target();
                this.state = 5301;
                this.match(PostgreSQLParser.FROM);
                this.state = 5302;
                this.grantee_list();
                this.state = 5304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5303;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defacl_privilege_target(): Defacl_privilege_targetContext {
        let localContext = new Defacl_privilege_targetContext(this.context, this.state);
        this.enterRule(localContext, 582, PostgreSQLParser.RULE_defacl_privilege_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5308;
            _la = this.tokenStream.LA(1);
            if(!(_la === 250 || _la === 360 || _la === 381 || _la === 392 || _la === 493 || _la === 494)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexstmt(): IndexstmtContext {
        let localContext = new IndexstmtContext(this.context, this.state);
        this.enterRule(localContext, 584, PostgreSQLParser.RULE_indexstmt);
        let _la: number;
        try {
            this.state = 5373;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 453, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5310;
                this.match(PostgreSQLParser.CREATE);
                this.state = 5312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 136) {
                    {
                    this.state = 5311;
                    this.unique_();
                    }
                }

                this.state = 5314;
                this.match(PostgreSQLParser.INDEX);
                this.state = 5316;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 5315;
                    this.concurrently_();
                    }
                }

                this.state = 5319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 5318;
                    this.index_name_();
                    }
                }

                this.state = 5321;
                this.match(PostgreSQLParser.ON);
                this.state = 5322;
                this.relation_expr();
                this.state = 5324;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 5323;
                    this.access_method_clause();
                    }
                }

                this.state = 5326;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5327;
                this.index_params();
                this.state = 5328;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 5330;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 479) {
                    {
                    this.state = 5329;
                    this.include_();
                    }
                }

                this.state = 5333;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 5332;
                    this.reloptions_();
                    }
                }

                this.state = 5336;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 382) {
                    {
                    this.state = 5335;
                    this.opttablespace();
                    }
                }

                this.state = 5339;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 5338;
                    this.where_clause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5341;
                this.match(PostgreSQLParser.CREATE);
                this.state = 5343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 136) {
                    {
                    this.state = 5342;
                    this.unique_();
                    }
                }

                this.state = 5345;
                this.match(PostgreSQLParser.INDEX);
                this.state = 5347;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 5346;
                    this.concurrently_();
                    }
                }

                this.state = 5349;
                this.match(PostgreSQLParser.IF_P);
                this.state = 5350;
                this.match(PostgreSQLParser.NOT);
                this.state = 5351;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 5352;
                this.name();
                this.state = 5353;
                this.match(PostgreSQLParser.ON);
                this.state = 5354;
                this.relation_expr();
                this.state = 5356;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 5355;
                    this.access_method_clause();
                    }
                }

                this.state = 5358;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5359;
                this.index_params();
                this.state = 5360;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 5362;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 479) {
                    {
                    this.state = 5361;
                    this.include_();
                    }
                }

                this.state = 5365;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 5364;
                    this.reloptions_();
                    }
                }

                this.state = 5368;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 382) {
                    {
                    this.state = 5367;
                    this.opttablespace();
                    }
                }

                this.state = 5371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 5370;
                    this.where_clause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unique_(): Unique_Context {
        let localContext = new Unique_Context(this.context, this.state);
        this.enterRule(localContext, 586, PostgreSQLParser.RULE_unique_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5375;
            this.match(PostgreSQLParser.UNIQUE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public single_name_(): Single_name_Context {
        let localContext = new Single_name_Context(this.context, this.state);
        this.enterRule(localContext, 588, PostgreSQLParser.RULE_single_name_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5377;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public concurrently_(): Concurrently_Context {
        let localContext = new Concurrently_Context(this.context, this.state);
        this.enterRule(localContext, 590, PostgreSQLParser.RULE_concurrently_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5379;
            this.match(PostgreSQLParser.CONCURRENTLY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_name_(): Index_name_Context {
        let localContext = new Index_name_Context(this.context, this.state);
        this.enterRule(localContext, 592, PostgreSQLParser.RULE_index_name_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5381;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public access_method_clause(): Access_method_clauseContext {
        let localContext = new Access_method_clauseContext(this.context, this.state);
        this.enterRule(localContext, 594, PostgreSQLParser.RULE_access_method_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5383;
            this.match(PostgreSQLParser.USING);
            this.state = 5384;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_params(): Index_paramsContext {
        let localContext = new Index_paramsContext(this.context, this.state);
        this.enterRule(localContext, 596, PostgreSQLParser.RULE_index_params);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5386;
            this.index_elem();
            this.state = 5391;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5387;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5388;
                this.index_elem();
                }
                }
                this.state = 5393;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_elem_options(): Index_elem_optionsContext {
        let localContext = new Index_elem_optionsContext(this.context, this.state);
        this.enterRule(localContext, 598, PostgreSQLParser.RULE_index_elem_options);
        let _la: number;
        try {
            this.state = 5417;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 462, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5395;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 5394;
                    this.collate_();
                    }
                }

                this.state = 5398;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 456, this.context) ) {
                case 1:
                    {
                    this.state = 5397;
                    this.class_();
                    }
                    break;
                }
                this.state = 5401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75 || _la === 93) {
                    {
                    this.state = 5400;
                    this.asc_desc_();
                    }
                }

                this.state = 5404;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 5403;
                    this.nulls_order_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5407;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 5406;
                    this.collate_();
                    }
                }

                this.state = 5409;
                this.any_name();
                this.state = 5410;
                this.reloptions();
                this.state = 5412;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75 || _la === 93) {
                    {
                    this.state = 5411;
                    this.asc_desc_();
                    }
                }

                this.state = 5415;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 304) {
                    {
                    this.state = 5414;
                    this.nulls_order_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_elem(): Index_elemContext {
        let localContext = new Index_elemContext(this.context, this.state);
        this.enterRule(localContext, 600, PostgreSQLParser.RULE_index_elem);
        try {
            this.state = 5430;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 463, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5419;
                this.colid();
                this.state = 5420;
                this.index_elem_options();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5422;
                this.func_expr_windowless();
                this.state = 5423;
                this.index_elem_options();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5425;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5426;
                this.a_expr();
                this.state = 5427;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 5428;
                this.index_elem_options();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public include_(): Include_Context {
        let localContext = new Include_Context(this.context, this.state);
        this.enterRule(localContext, 602, PostgreSQLParser.RULE_include_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5432;
            this.match(PostgreSQLParser.INCLUDE);
            this.state = 5433;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 5434;
            this.index_including_params();
            this.state = 5435;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public index_including_params(): Index_including_paramsContext {
        let localContext = new Index_including_paramsContext(this.context, this.state);
        this.enterRule(localContext, 604, PostgreSQLParser.RULE_index_including_params);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5437;
            this.index_elem();
            this.state = 5442;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5438;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5439;
                this.index_elem();
                }
                }
                this.state = 5444;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collate_(): Collate_Context {
        let localContext = new Collate_Context(this.context, this.state);
        this.enterRule(localContext, 606, PostgreSQLParser.RULE_collate_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5445;
            this.match(PostgreSQLParser.COLLATE);
            this.state = 5446;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public class_(): Class_Context {
        let localContext = new Class_Context(this.context, this.state);
        this.enterRule(localContext, 608, PostgreSQLParser.RULE_class_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5448;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public asc_desc_(): Asc_desc_Context {
        let localContext = new Asc_desc_Context(this.context, this.state);
        this.enterRule(localContext, 610, PostgreSQLParser.RULE_asc_desc_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5450;
            _la = this.tokenStream.LA(1);
            if(!(_la === 75 || _la === 93)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nulls_order_(): Nulls_order_Context {
        let localContext = new Nulls_order_Context(this.context, this.state);
        this.enterRule(localContext, 612, PostgreSQLParser.RULE_nulls_order_);
        try {
            this.state = 5456;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 465, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5452;
                this.match(PostgreSQLParser.NULLS_P);
                this.state = 5453;
                this.match(PostgreSQLParser.FIRST_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5454;
                this.match(PostgreSQLParser.NULLS_P);
                this.state = 5455;
                this.match(PostgreSQLParser.LAST_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunctionstmt(): CreatefunctionstmtContext {
        let localContext = new CreatefunctionstmtContext(this.context, this.state);
        this.enterRule(localContext, 614, PostgreSQLParser.RULE_createfunctionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5458;
            this.match(PostgreSQLParser.CREATE);
            this.state = 5460;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 5459;
                this.or_replace_();
                }
            }

            this.state = 5462;
            _la = this.tokenStream.LA(1);
            if(!(_la === 249 || _la === 327)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5463;
            this.func_name();
            this.state = 5464;
            this.func_args_with_defaults();
            this.state = 5474;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 468, this.context) ) {
            case 1:
                {
                this.state = 5465;
                this.match(PostgreSQLParser.RETURNS);
                this.state = 5472;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.JSON:
                case PostgreSQLParser.ABSENT:
                case PostgreSQLParser.ASENSITIVE:
                case PostgreSQLParser.ATOMIC:
                case PostgreSQLParser.BREADTH:
                case PostgreSQLParser.COMPRESSION:
                case PostgreSQLParser.CONDITIONAL:
                case PostgreSQLParser.DEPTH:
                case PostgreSQLParser.EMPTY_P:
                case PostgreSQLParser.FINALIZE:
                case PostgreSQLParser.INDENT:
                case PostgreSQLParser.KEEP:
                case PostgreSQLParser.KEYS:
                case PostgreSQLParser.NESTED:
                case PostgreSQLParser.OMIT:
                case PostgreSQLParser.PARAMETER:
                case PostgreSQLParser.PATH:
                case PostgreSQLParser.PLAN:
                case PostgreSQLParser.QUOTES:
                case PostgreSQLParser.SCALAR:
                case PostgreSQLParser.SOURCE:
                case PostgreSQLParser.STRING_P:
                case PostgreSQLParser.TARGET:
                case PostgreSQLParser.UNCONDITIONAL:
                case PostgreSQLParser.PERIOD:
                case PostgreSQLParser.AUTHORIZATION:
                case PostgreSQLParser.BINARY:
                case PostgreSQLParser.COLLATION:
                case PostgreSQLParser.CONCURRENTLY:
                case PostgreSQLParser.CROSS:
                case PostgreSQLParser.CURRENT_SCHEMA:
                case PostgreSQLParser.FREEZE:
                case PostgreSQLParser.FULL:
                case PostgreSQLParser.ILIKE:
                case PostgreSQLParser.INNER_P:
                case PostgreSQLParser.IS:
                case PostgreSQLParser.ISNULL:
                case PostgreSQLParser.JOIN:
                case PostgreSQLParser.LEFT:
                case PostgreSQLParser.LIKE:
                case PostgreSQLParser.NATURAL:
                case PostgreSQLParser.NOTNULL:
                case PostgreSQLParser.OUTER_P:
                case PostgreSQLParser.OVER:
                case PostgreSQLParser.OVERLAPS:
                case PostgreSQLParser.RIGHT:
                case PostgreSQLParser.SIMILAR:
                case PostgreSQLParser.VERBOSE:
                case PostgreSQLParser.ABORT_P:
                case PostgreSQLParser.ABSOLUTE_P:
                case PostgreSQLParser.ACCESS:
                case PostgreSQLParser.ACTION:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ADMIN:
                case PostgreSQLParser.AFTER:
                case PostgreSQLParser.AGGREGATE:
                case PostgreSQLParser.ALSO:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.ALWAYS:
                case PostgreSQLParser.ASSERTION:
                case PostgreSQLParser.ASSIGNMENT:
                case PostgreSQLParser.AT:
                case PostgreSQLParser.ATTRIBUTE:
                case PostgreSQLParser.BACKWARD:
                case PostgreSQLParser.BEFORE:
                case PostgreSQLParser.BEGIN_P:
                case PostgreSQLParser.BY:
                case PostgreSQLParser.CACHE:
                case PostgreSQLParser.CALLED:
                case PostgreSQLParser.CASCADE:
                case PostgreSQLParser.CASCADED:
                case PostgreSQLParser.CATALOG:
                case PostgreSQLParser.CHAIN:
                case PostgreSQLParser.CHARACTERISTICS:
                case PostgreSQLParser.CHECKPOINT:
                case PostgreSQLParser.CLASS:
                case PostgreSQLParser.CLOSE:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.COMMENT:
                case PostgreSQLParser.COMMENTS:
                case PostgreSQLParser.COMMIT:
                case PostgreSQLParser.COMMITTED:
                case PostgreSQLParser.CONFIGURATION:
                case PostgreSQLParser.CONNECTION:
                case PostgreSQLParser.CONSTRAINTS:
                case PostgreSQLParser.CONTENT_P:
                case PostgreSQLParser.CONTINUE_P:
                case PostgreSQLParser.CONVERSION_P:
                case PostgreSQLParser.COPY:
                case PostgreSQLParser.COST:
                case PostgreSQLParser.CSV:
                case PostgreSQLParser.CURSOR:
                case PostgreSQLParser.CYCLE:
                case PostgreSQLParser.DATA_P:
                case PostgreSQLParser.DATABASE:
                case PostgreSQLParser.DAY_P:
                case PostgreSQLParser.DEALLOCATE:
                case PostgreSQLParser.DECLARE:
                case PostgreSQLParser.DEFAULTS:
                case PostgreSQLParser.DEFERRED:
                case PostgreSQLParser.DEFINER:
                case PostgreSQLParser.DELETE_P:
                case PostgreSQLParser.DELIMITER:
                case PostgreSQLParser.DELIMITERS:
                case PostgreSQLParser.DICTIONARY:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DISCARD:
                case PostgreSQLParser.DOCUMENT_P:
                case PostgreSQLParser.DOMAIN_P:
                case PostgreSQLParser.DOUBLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.EACH:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.ENCODING:
                case PostgreSQLParser.ENCRYPTED:
                case PostgreSQLParser.ENUM_P:
                case PostgreSQLParser.ESCAPE:
                case PostgreSQLParser.EVENT:
                case PostgreSQLParser.EXCLUDE:
                case PostgreSQLParser.EXCLUDING:
                case PostgreSQLParser.EXCLUSIVE:
                case PostgreSQLParser.EXECUTE:
                case PostgreSQLParser.EXPLAIN:
                case PostgreSQLParser.EXTENSION:
                case PostgreSQLParser.EXTERNAL:
                case PostgreSQLParser.FAMILY:
                case PostgreSQLParser.FIRST_P:
                case PostgreSQLParser.FOLLOWING:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.FORWARD:
                case PostgreSQLParser.FUNCTION:
                case PostgreSQLParser.FUNCTIONS:
                case PostgreSQLParser.GLOBAL:
                case PostgreSQLParser.GRANTED:
                case PostgreSQLParser.HANDLER:
                case PostgreSQLParser.HEADER_P:
                case PostgreSQLParser.HOLD:
                case PostgreSQLParser.HOUR_P:
                case PostgreSQLParser.IDENTITY_P:
                case PostgreSQLParser.IF_P:
                case PostgreSQLParser.IMMEDIATE:
                case PostgreSQLParser.IMMUTABLE:
                case PostgreSQLParser.IMPLICIT_P:
                case PostgreSQLParser.INCLUDING:
                case PostgreSQLParser.INCREMENT:
                case PostgreSQLParser.INDEX:
                case PostgreSQLParser.INDEXES:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.INHERITS:
                case PostgreSQLParser.INLINE_P:
                case PostgreSQLParser.INSENSITIVE:
                case PostgreSQLParser.INSERT:
                case PostgreSQLParser.INSTEAD:
                case PostgreSQLParser.INVOKER:
                case PostgreSQLParser.ISOLATION:
                case PostgreSQLParser.KEY:
                case PostgreSQLParser.LABEL:
                case PostgreSQLParser.LANGUAGE:
                case PostgreSQLParser.LARGE_P:
                case PostgreSQLParser.LAST_P:
                case PostgreSQLParser.LEAKPROOF:
                case PostgreSQLParser.LEVEL:
                case PostgreSQLParser.LISTEN:
                case PostgreSQLParser.LOAD:
                case PostgreSQLParser.LOCAL:
                case PostgreSQLParser.LOCATION:
                case PostgreSQLParser.LOCK_P:
                case PostgreSQLParser.MAPPING:
                case PostgreSQLParser.MATCH:
                case PostgreSQLParser.MATCHED:
                case PostgreSQLParser.MATERIALIZED:
                case PostgreSQLParser.MAXVALUE:
                case PostgreSQLParser.MERGE:
                case PostgreSQLParser.MINUTE_P:
                case PostgreSQLParser.MINVALUE:
                case PostgreSQLParser.MODE:
                case PostgreSQLParser.MONTH_P:
                case PostgreSQLParser.MOVE:
                case PostgreSQLParser.NAME_P:
                case PostgreSQLParser.NAMES:
                case PostgreSQLParser.NEXT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.NOTHING:
                case PostgreSQLParser.NOTIFY:
                case PostgreSQLParser.NOWAIT:
                case PostgreSQLParser.NULLS_P:
                case PostgreSQLParser.OBJECT_P:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OFF:
                case PostgreSQLParser.OIDS:
                case PostgreSQLParser.OPERATOR:
                case PostgreSQLParser.OPTION:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNED:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.PARSER:
                case PostgreSQLParser.PARTIAL:
                case PostgreSQLParser.PARTITION:
                case PostgreSQLParser.PASSING:
                case PostgreSQLParser.PASSWORD:
                case PostgreSQLParser.PLANS:
                case PostgreSQLParser.PRECEDING:
                case PostgreSQLParser.PREPARE:
                case PostgreSQLParser.PREPARED:
                case PostgreSQLParser.PRESERVE:
                case PostgreSQLParser.PRIOR:
                case PostgreSQLParser.PRIVILEGES:
                case PostgreSQLParser.PROCEDURAL:
                case PostgreSQLParser.PROCEDURE:
                case PostgreSQLParser.PROGRAM:
                case PostgreSQLParser.QUOTE:
                case PostgreSQLParser.RANGE:
                case PostgreSQLParser.READ:
                case PostgreSQLParser.REASSIGN:
                case PostgreSQLParser.RECURSIVE:
                case PostgreSQLParser.REF:
                case PostgreSQLParser.REFRESH:
                case PostgreSQLParser.REINDEX:
                case PostgreSQLParser.RELATIVE_P:
                case PostgreSQLParser.RELEASE:
                case PostgreSQLParser.RENAME:
                case PostgreSQLParser.REPEATABLE:
                case PostgreSQLParser.REPLACE:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.RESTART:
                case PostgreSQLParser.RESTRICT:
                case PostgreSQLParser.RETURNS:
                case PostgreSQLParser.REVOKE:
                case PostgreSQLParser.ROLE:
                case PostgreSQLParser.ROLLBACK:
                case PostgreSQLParser.ROWS:
                case PostgreSQLParser.RULE:
                case PostgreSQLParser.SAVEPOINT:
                case PostgreSQLParser.SCHEMA:
                case PostgreSQLParser.SCROLL:
                case PostgreSQLParser.SEARCH:
                case PostgreSQLParser.SECOND_P:
                case PostgreSQLParser.SECURITY:
                case PostgreSQLParser.SEQUENCE:
                case PostgreSQLParser.SEQUENCES:
                case PostgreSQLParser.SERIALIZABLE:
                case PostgreSQLParser.SERVER:
                case PostgreSQLParser.SESSION:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.SHARE:
                case PostgreSQLParser.SHOW:
                case PostgreSQLParser.SIMPLE:
                case PostgreSQLParser.SNAPSHOT:
                case PostgreSQLParser.STABLE:
                case PostgreSQLParser.STANDALONE_P:
                case PostgreSQLParser.START:
                case PostgreSQLParser.STATEMENT:
                case PostgreSQLParser.STATISTICS:
                case PostgreSQLParser.STDIN:
                case PostgreSQLParser.STDOUT:
                case PostgreSQLParser.STORAGE:
                case PostgreSQLParser.STRICT_P:
                case PostgreSQLParser.STRIP_P:
                case PostgreSQLParser.SYSID:
                case PostgreSQLParser.SYSTEM_P:
                case PostgreSQLParser.TABLES:
                case PostgreSQLParser.TABLESPACE:
                case PostgreSQLParser.TEMP:
                case PostgreSQLParser.TEMPLATE:
                case PostgreSQLParser.TEMPORARY:
                case PostgreSQLParser.TEXT_P:
                case PostgreSQLParser.TRANSACTION:
                case PostgreSQLParser.TRIGGER:
                case PostgreSQLParser.TRUNCATE:
                case PostgreSQLParser.TRUSTED:
                case PostgreSQLParser.TYPE_P:
                case PostgreSQLParser.TYPES_P:
                case PostgreSQLParser.UNBOUNDED:
                case PostgreSQLParser.UNCOMMITTED:
                case PostgreSQLParser.UNENCRYPTED:
                case PostgreSQLParser.UNKNOWN:
                case PostgreSQLParser.UNLISTEN:
                case PostgreSQLParser.UNLOGGED:
                case PostgreSQLParser.UNTIL:
                case PostgreSQLParser.UPDATE:
                case PostgreSQLParser.VACUUM:
                case PostgreSQLParser.VALID:
                case PostgreSQLParser.VALIDATE:
                case PostgreSQLParser.VALIDATOR:
                case PostgreSQLParser.VARYING:
                case PostgreSQLParser.VERSION_P:
                case PostgreSQLParser.VIEW:
                case PostgreSQLParser.VOLATILE:
                case PostgreSQLParser.WHITESPACE_P:
                case PostgreSQLParser.WITHOUT:
                case PostgreSQLParser.WORK:
                case PostgreSQLParser.WRAPPER:
                case PostgreSQLParser.WRITE:
                case PostgreSQLParser.XML_P:
                case PostgreSQLParser.YEAR_P:
                case PostgreSQLParser.YES_P:
                case PostgreSQLParser.ZONE:
                case PostgreSQLParser.BIGINT:
                case PostgreSQLParser.BIT:
                case PostgreSQLParser.BOOLEAN_P:
                case PostgreSQLParser.CHAR_P:
                case PostgreSQLParser.CHARACTER:
                case PostgreSQLParser.DEC:
                case PostgreSQLParser.DECIMAL_P:
                case PostgreSQLParser.FLOAT_P:
                case PostgreSQLParser.INT_P:
                case PostgreSQLParser.INTEGER:
                case PostgreSQLParser.INTERVAL:
                case PostgreSQLParser.NATIONAL:
                case PostgreSQLParser.NCHAR:
                case PostgreSQLParser.NUMERIC:
                case PostgreSQLParser.REAL:
                case PostgreSQLParser.SETOF:
                case PostgreSQLParser.SMALLINT:
                case PostgreSQLParser.TIME:
                case PostgreSQLParser.TIMESTAMP:
                case PostgreSQLParser.VARCHAR:
                case PostgreSQLParser.CALL:
                case PostgreSQLParser.CURRENT_P:
                case PostgreSQLParser.ATTACH:
                case PostgreSQLParser.DETACH:
                case PostgreSQLParser.EXPRESSION:
                case PostgreSQLParser.GENERATED:
                case PostgreSQLParser.LOGGED:
                case PostgreSQLParser.STORED:
                case PostgreSQLParser.INCLUDE:
                case PostgreSQLParser.ROUTINE:
                case PostgreSQLParser.TRANSFORM:
                case PostgreSQLParser.IMPORT_P:
                case PostgreSQLParser.POLICY:
                case PostgreSQLParser.METHOD:
                case PostgreSQLParser.REFERENCING:
                case PostgreSQLParser.NEW:
                case PostgreSQLParser.OLD:
                case PostgreSQLParser.VALUE_P:
                case PostgreSQLParser.SUBSCRIPTION:
                case PostgreSQLParser.PUBLICATION:
                case PostgreSQLParser.ROUTINES:
                case PostgreSQLParser.SCHEMAS:
                case PostgreSQLParser.PROCEDURES:
                case PostgreSQLParser.INPUT_P:
                case PostgreSQLParser.SUPPORT:
                case PostgreSQLParser.PARALLEL:
                case PostgreSQLParser.SQL_P:
                case PostgreSQLParser.DEPENDS:
                case PostgreSQLParser.OVERRIDING:
                case PostgreSQLParser.CONFLICT:
                case PostgreSQLParser.SKIP_P:
                case PostgreSQLParser.LOCKED:
                case PostgreSQLParser.TIES:
                case PostgreSQLParser.ROLLUP:
                case PostgreSQLParser.CUBE:
                case PostgreSQLParser.SETS:
                case PostgreSQLParser.TABLESAMPLE:
                case PostgreSQLParser.ORDINALITY:
                case PostgreSQLParser.COLUMNS:
                case PostgreSQLParser.NORMALIZED:
                case PostgreSQLParser.WITHIN:
                case PostgreSQLParser.FILTER:
                case PostgreSQLParser.GROUPS:
                case PostgreSQLParser.OTHERS:
                case PostgreSQLParser.NFC:
                case PostgreSQLParser.NFD:
                case PostgreSQLParser.NFKC:
                case PostgreSQLParser.NFKD:
                case PostgreSQLParser.UESCAPE:
                case PostgreSQLParser.VIEWS:
                case PostgreSQLParser.ERROR:
                case PostgreSQLParser.RETURN:
                case PostgreSQLParser.FORMAT:
                case PostgreSQLParser.Identifier:
                case PostgreSQLParser.QuotedIdentifier:
                case PostgreSQLParser.UnicodeQuotedIdentifier:
                case PostgreSQLParser.PLSQLVARIABLENAME:
                    {
                    this.state = 5466;
                    this.func_return();
                    }
                    break;
                case PostgreSQLParser.TABLE:
                    {
                    this.state = 5467;
                    this.match(PostgreSQLParser.TABLE);
                    this.state = 5468;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 5469;
                    this.table_func_column_list();
                    this.state = 5470;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            this.state = 5476;
            this.createfunc_opt_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public or_replace_(): Or_replace_Context {
        let localContext = new Or_replace_Context(this.context, this.state);
        this.enterRule(localContext, 616, PostgreSQLParser.RULE_or_replace_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5478;
            this.match(PostgreSQLParser.OR);
            this.state = 5479;
            this.match(PostgreSQLParser.REPLACE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args(): Func_argsContext {
        let localContext = new Func_argsContext(this.context, this.state);
        this.enterRule(localContext, 618, PostgreSQLParser.RULE_func_args);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5481;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 5483;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30 || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 16777215) !== 0) || _la === 106 || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967265) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 4294967295) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 4294967295) !== 0) || ((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & 4294967295) !== 0) || ((((_la - 299)) & ~0x1F) === 0 && ((1 << (_la - 299)) & 4294967295) !== 0) || ((((_la - 331)) & ~0x1F) === 0 && ((1 << (_la - 331)) & 4294967291) !== 0) || ((((_la - 363)) & ~0x1F) === 0 && ((1 << (_la - 363)) & 4294967295) !== 0) || ((((_la - 395)) & ~0x1F) === 0 && ((1 << (_la - 395)) & 3749707775) !== 0) || ((((_la - 429)) & ~0x1F) === 0 && ((1 << (_la - 429)) & 37128637) !== 0) || ((((_la - 471)) & ~0x1F) === 0 && ((1 << (_la - 471)) & 4292870143) !== 0) || ((((_la - 503)) & ~0x1F) === 0 && ((1 << (_la - 503)) & 83879391) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & 145409) !== 0) || _la === 579) {
                {
                this.state = 5482;
                this.func_args_list();
                }
            }

            this.state = 5485;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args_list(): Func_args_listContext {
        let localContext = new Func_args_listContext(this.context, this.state);
        this.enterRule(localContext, 620, PostgreSQLParser.RULE_func_args_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5487;
            this.func_arg();
            this.state = 5492;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5488;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5489;
                this.func_arg();
                }
                }
                this.state = 5494;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext {
        let localContext = new Function_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 622, PostgreSQLParser.RULE_function_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5495;
            this.function_with_argtypes();
            this.state = 5500;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5496;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5497;
                this.function_with_argtypes();
                }
                }
                this.state = 5502;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public function_with_argtypes(): Function_with_argtypesContext {
        let localContext = new Function_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 624, PostgreSQLParser.RULE_function_with_argtypes);
        let _la: number;
        try {
            this.state = 5511;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 473, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5503;
                this.func_name();
                this.state = 5504;
                this.func_args();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5506;
                this.type_func_name_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5507;
                this.colid();
                this.state = 5509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 4 || _la === 11) {
                    {
                    this.state = 5508;
                    this.indirection();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args_with_defaults(): Func_args_with_defaultsContext {
        let localContext = new Func_args_with_defaultsContext(this.context, this.state);
        this.enterRule(localContext, 626, PostgreSQLParser.RULE_func_args_with_defaults);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5513;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 5515;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30 || ((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 16777215) !== 0) || _la === 106 || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & 4294967265) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & 4294967295) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & 4294967295) !== 0) || ((((_la - 235)) & ~0x1F) === 0 && ((1 << (_la - 235)) & 4294967295) !== 0) || ((((_la - 267)) & ~0x1F) === 0 && ((1 << (_la - 267)) & 4294967295) !== 0) || ((((_la - 299)) & ~0x1F) === 0 && ((1 << (_la - 299)) & 4294967295) !== 0) || ((((_la - 331)) & ~0x1F) === 0 && ((1 << (_la - 331)) & 4294967291) !== 0) || ((((_la - 363)) & ~0x1F) === 0 && ((1 << (_la - 363)) & 4294967295) !== 0) || ((((_la - 395)) & ~0x1F) === 0 && ((1 << (_la - 395)) & 3749707775) !== 0) || ((((_la - 429)) & ~0x1F) === 0 && ((1 << (_la - 429)) & 37128637) !== 0) || ((((_la - 471)) & ~0x1F) === 0 && ((1 << (_la - 471)) & 4292870143) !== 0) || ((((_la - 503)) & ~0x1F) === 0 && ((1 << (_la - 503)) & 83879391) !== 0) || ((((_la - 542)) & ~0x1F) === 0 && ((1 << (_la - 542)) & 145409) !== 0) || _la === 579) {
                {
                this.state = 5514;
                this.func_args_with_defaults_list();
                }
            }

            this.state = 5517;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_args_with_defaults_list(): Func_args_with_defaults_listContext {
        let localContext = new Func_args_with_defaults_listContext(this.context, this.state);
        this.enterRule(localContext, 628, PostgreSQLParser.RULE_func_args_with_defaults_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5519;
            this.func_arg_with_default();
            this.state = 5524;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5520;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5521;
                this.func_arg_with_default();
                }
                }
                this.state = 5526;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg(): Func_argContext {
        let localContext = new Func_argContext(this.context, this.state);
        this.enterRule(localContext, 630, PostgreSQLParser.RULE_func_arg);
        let _la: number;
        try {
            this.state = 5540;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 478, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5527;
                this.arg_class();
                this.state = 5529;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 476, this.context) ) {
                case 1:
                    {
                    this.state = 5528;
                    this.param_name();
                    }
                    break;
                }
                this.state = 5531;
                this.func_type();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5533;
                this.param_name();
                this.state = 5535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 106 || _la === 139 || _la === 431 || _la === 491) {
                    {
                    this.state = 5534;
                    this.arg_class();
                    }
                }

                this.state = 5537;
                this.func_type();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5539;
                this.func_type();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arg_class(): Arg_classContext {
        let localContext = new Arg_classContext(this.context, this.state);
        this.enterRule(localContext, 632, PostgreSQLParser.RULE_arg_class);
        let _la: number;
        try {
            this.state = 5549;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.IN_P:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5542;
                this.match(PostgreSQLParser.IN_P);
                this.state = 5544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 491) {
                    {
                    this.state = 5543;
                    this.match(PostgreSQLParser.OUT_P);
                    }
                }

                }
                break;
            case PostgreSQLParser.OUT_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5546;
                this.match(PostgreSQLParser.OUT_P);
                }
                break;
            case PostgreSQLParser.INOUT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5547;
                this.match(PostgreSQLParser.INOUT);
                }
                break;
            case PostgreSQLParser.VARIADIC:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5548;
                this.match(PostgreSQLParser.VARIADIC);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public param_name(): Param_nameContext {
        let localContext = new Param_nameContext(this.context, this.state);
        this.enterRule(localContext, 634, PostgreSQLParser.RULE_param_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5551;
            this.type_function_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_return(): Func_returnContext {
        let localContext = new Func_returnContext(this.context, this.state);
        this.enterRule(localContext, 636, PostgreSQLParser.RULE_func_return);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5553;
            this.func_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_type(): Func_typeContext {
        let localContext = new Func_typeContext(this.context, this.state);
        this.enterRule(localContext, 638, PostgreSQLParser.RULE_func_type);
        let _la: number;
        try {
            this.state = 5564;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 482, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5555;
                this.typename();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5557;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 446) {
                    {
                    this.state = 5556;
                    this.match(PostgreSQLParser.SETOF);
                    }
                }

                this.state = 5559;
                this.type_function_name();
                this.state = 5560;
                this.attrs();
                this.state = 5561;
                this.match(PostgreSQLParser.PERCENT);
                this.state = 5562;
                this.match(PostgreSQLParser.TYPE_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_with_default(): Func_arg_with_defaultContext {
        let localContext = new Func_arg_with_defaultContext(this.context, this.state);
        this.enterRule(localContext, 640, PostgreSQLParser.RULE_func_arg_with_default);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5566;
            this.func_arg();
            this.state = 5569;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 91) {
                {
                this.state = 5567;
                _la = this.tokenStream.LA(1);
                if(!(_la === 10 || _la === 91)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 5568;
                this.a_expr();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggr_arg(): Aggr_argContext {
        let localContext = new Aggr_argContext(this.context, this.state);
        this.enterRule(localContext, 642, PostgreSQLParser.RULE_aggr_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5571;
            this.func_arg();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggr_args(): Aggr_argsContext {
        let localContext = new Aggr_argsContext(this.context, this.state);
        this.enterRule(localContext, 644, PostgreSQLParser.RULE_aggr_args);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5573;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 5584;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 484, this.context) ) {
            case 1:
                {
                this.state = 5574;
                this.match(PostgreSQLParser.STAR);
                }
                break;
            case 2:
                {
                this.state = 5575;
                this.aggr_args_list();
                }
                break;
            case 3:
                {
                this.state = 5576;
                this.match(PostgreSQLParser.ORDER);
                this.state = 5577;
                this.match(PostgreSQLParser.BY);
                this.state = 5578;
                this.aggr_args_list();
                }
                break;
            case 4:
                {
                this.state = 5579;
                this.aggr_args_list();
                this.state = 5580;
                this.match(PostgreSQLParser.ORDER);
                this.state = 5581;
                this.match(PostgreSQLParser.BY);
                this.state = 5582;
                this.aggr_args_list();
                }
                break;
            }
            this.state = 5586;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggr_args_list(): Aggr_args_listContext {
        let localContext = new Aggr_args_listContext(this.context, this.state);
        this.enterRule(localContext, 646, PostgreSQLParser.RULE_aggr_args_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5588;
            this.aggr_arg();
            this.state = 5593;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5589;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5590;
                this.aggr_arg();
                }
                }
                this.state = 5595;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext {
        let localContext = new Aggregate_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 648, PostgreSQLParser.RULE_aggregate_with_argtypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5596;
            this.func_name();
            this.state = 5597;
            this.aggr_args();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext {
        let localContext = new Aggregate_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 650, PostgreSQLParser.RULE_aggregate_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5599;
            this.aggregate_with_argtypes();
            this.state = 5604;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5600;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5601;
                this.aggregate_with_argtypes();
                }
                }
                this.state = 5606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunc_opt_list(): Createfunc_opt_listContext {
        let localContext = new Createfunc_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 652, PostgreSQLParser.RULE_createfunc_opt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5608;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 5607;
                this.createfunc_opt_item();
                }
                }
                this.state = 5610;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 74 || _la === 115 || _la === 142 || _la === 187 || _la === 208 || _la === 243 || _la === 260 || _la === 276 || _la === 279 || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 34619529) !== 0) || _la === 377 || _la === 408 || ((((_la - 481)) & ~0x1F) === 0 && ((1 << (_la - 481)) & 196609) !== 0));
            this.ParseRoutineBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public common_func_opt_item(): Common_func_opt_itemContext {
        let localContext = new Common_func_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 654, PostgreSQLParser.RULE_common_func_opt_item);
        try {
            this.state = 5649;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 488, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5614;
                this.match(PostgreSQLParser.CALLED);
                this.state = 5615;
                this.match(PostgreSQLParser.ON);
                this.state = 5616;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 5617;
                this.match(PostgreSQLParser.INPUT_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5618;
                this.match(PostgreSQLParser.RETURNS);
                this.state = 5619;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 5620;
                this.match(PostgreSQLParser.ON);
                this.state = 5621;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 5622;
                this.match(PostgreSQLParser.INPUT_P);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5623;
                this.match(PostgreSQLParser.STRICT_P);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5624;
                this.match(PostgreSQLParser.IMMUTABLE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5625;
                this.match(PostgreSQLParser.STABLE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5626;
                this.match(PostgreSQLParser.VOLATILE);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 5627;
                this.match(PostgreSQLParser.EXTERNAL);
                this.state = 5628;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 5629;
                this.match(PostgreSQLParser.DEFINER);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 5630;
                this.match(PostgreSQLParser.EXTERNAL);
                this.state = 5631;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 5632;
                this.match(PostgreSQLParser.INVOKER);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 5633;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 5634;
                this.match(PostgreSQLParser.DEFINER);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 5635;
                this.match(PostgreSQLParser.SECURITY);
                this.state = 5636;
                this.match(PostgreSQLParser.INVOKER);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 5637;
                this.match(PostgreSQLParser.LEAKPROOF);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 5638;
                this.match(PostgreSQLParser.NOT);
                this.state = 5639;
                this.match(PostgreSQLParser.LEAKPROOF);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 5640;
                this.match(PostgreSQLParser.COST);
                this.state = 5641;
                this.numericonly();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 5642;
                this.match(PostgreSQLParser.ROWS);
                this.state = 5643;
                this.numericonly();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 5644;
                this.match(PostgreSQLParser.SUPPORT);
                this.state = 5645;
                this.any_name();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 5646;
                this.functionsetresetclause();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 5647;
                this.match(PostgreSQLParser.PARALLEL);
                this.state = 5648;
                this.colid();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createfunc_opt_item(): Createfunc_opt_itemContext {
        let localContext = new Createfunc_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 656, PostgreSQLParser.RULE_createfunc_opt_item);
        try {
            this.state = 5659;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.AS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5651;
                this.match(PostgreSQLParser.AS);
                this.state = 5652;
                this.func_as();
                }
                break;
            case PostgreSQLParser.LANGUAGE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5653;
                this.match(PostgreSQLParser.LANGUAGE);
                this.state = 5654;
                this.nonreservedword_or_sconst();
                }
                break;
            case PostgreSQLParser.TRANSFORM:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5655;
                this.match(PostgreSQLParser.TRANSFORM);
                this.state = 5656;
                this.transform_type_list();
                }
                break;
            case PostgreSQLParser.WINDOW:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5657;
                this.match(PostgreSQLParser.WINDOW);
                }
                break;
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5658;
                this.common_func_opt_item();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_as(): Func_asContext {
        let localContext = new Func_asContext(this.context, this.state);
        this.enterRule(localContext, 658, PostgreSQLParser.RULE_func_as);
        try {
            this.state = 5666;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 490, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5661;
                localContext._def = this.sconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5662;
                this.sconst();
                this.state = 5663;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5664;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform_type_list(): Transform_type_listContext {
        let localContext = new Transform_type_listContext(this.context, this.state);
        this.enterRule(localContext, 660, PostgreSQLParser.RULE_transform_type_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5668;
            this.match(PostgreSQLParser.FOR);
            this.state = 5669;
            this.match(PostgreSQLParser.TYPE_P);
            this.state = 5670;
            this.typename();
            this.state = 5677;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5671;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5672;
                this.match(PostgreSQLParser.FOR);
                this.state = 5673;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 5674;
                this.typename();
                }
                }
                this.state = 5679;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public definition_(): Definition_Context {
        let localContext = new Definition_Context(this.context, this.state);
        this.enterRule(localContext, 662, PostgreSQLParser.RULE_definition_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5680;
            this.match(PostgreSQLParser.WITH);
            this.state = 5681;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_func_column(): Table_func_columnContext {
        let localContext = new Table_func_columnContext(this.context, this.state);
        this.enterRule(localContext, 664, PostgreSQLParser.RULE_table_func_column);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5683;
            this.param_name();
            this.state = 5684;
            this.func_type();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_func_column_list(): Table_func_column_listContext {
        let localContext = new Table_func_column_listContext(this.context, this.state);
        this.enterRule(localContext, 666, PostgreSQLParser.RULE_table_func_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5686;
            this.table_func_column();
            this.state = 5691;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5687;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5688;
                this.table_func_column();
                }
                }
                this.state = 5693;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterfunctionstmt(): AlterfunctionstmtContext {
        let localContext = new AlterfunctionstmtContext(this.context, this.state);
        this.enterRule(localContext, 668, PostgreSQLParser.RULE_alterfunctionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5694;
            this.match(PostgreSQLParser.ALTER);
            this.state = 5695;
            _la = this.tokenStream.LA(1);
            if(!(_la === 249 || _la === 327 || _la === 480)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 5696;
            this.function_with_argtypes();
            this.state = 5697;
            this.alterfunc_opt_list();
            this.state = 5699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 346) {
                {
                this.state = 5698;
                this.restrict_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterfunc_opt_list(): Alterfunc_opt_listContext {
        let localContext = new Alterfunc_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 670, PostgreSQLParser.RULE_alterfunc_opt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 5701;
                this.common_func_opt_item();
                }
                }
                this.state = 5704;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 115 || _la === 187 || _la === 208 || _la === 243 || _la === 260 || _la === 279 || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & 34619529) !== 0) || _la === 377 || _la === 408 || _la === 497 || _la === 498);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public restrict_(): Restrict_Context {
        let localContext = new Restrict_Context(this.context, this.state);
        this.enterRule(localContext, 672, PostgreSQLParser.RULE_restrict_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5706;
            this.match(PostgreSQLParser.RESTRICT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removefuncstmt(): RemovefuncstmtContext {
        let localContext = new RemovefuncstmtContext(this.context, this.state);
        this.enterRule(localContext, 674, PostgreSQLParser.RULE_removefuncstmt);
        let _la: number;
        try {
            this.state = 5750;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 501, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5708;
                this.match(PostgreSQLParser.DROP);
                this.state = 5709;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5710;
                this.function_with_argtypes_list();
                this.state = 5712;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5711;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5714;
                this.match(PostgreSQLParser.DROP);
                this.state = 5715;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5716;
                this.match(PostgreSQLParser.IF_P);
                this.state = 5717;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 5718;
                this.function_with_argtypes_list();
                this.state = 5720;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5719;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5722;
                this.match(PostgreSQLParser.DROP);
                this.state = 5723;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 5724;
                this.function_with_argtypes_list();
                this.state = 5726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5725;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5728;
                this.match(PostgreSQLParser.DROP);
                this.state = 5729;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 5730;
                this.match(PostgreSQLParser.IF_P);
                this.state = 5731;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 5732;
                this.function_with_argtypes_list();
                this.state = 5734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5733;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 5736;
                this.match(PostgreSQLParser.DROP);
                this.state = 5737;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 5738;
                this.function_with_argtypes_list();
                this.state = 5740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5739;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 5742;
                this.match(PostgreSQLParser.DROP);
                this.state = 5743;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 5744;
                this.match(PostgreSQLParser.IF_P);
                this.state = 5745;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 5746;
                this.function_with_argtypes_list();
                this.state = 5748;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5747;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeaggrstmt(): RemoveaggrstmtContext {
        let localContext = new RemoveaggrstmtContext(this.context, this.state);
        this.enterRule(localContext, 676, PostgreSQLParser.RULE_removeaggrstmt);
        let _la: number;
        try {
            this.state = 5766;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 504, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5752;
                this.match(PostgreSQLParser.DROP);
                this.state = 5753;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 5754;
                this.aggregate_with_argtypes_list();
                this.state = 5756;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5755;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5758;
                this.match(PostgreSQLParser.DROP);
                this.state = 5759;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 5760;
                this.match(PostgreSQLParser.IF_P);
                this.state = 5761;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 5762;
                this.aggregate_with_argtypes_list();
                this.state = 5764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5763;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public removeoperstmt(): RemoveoperstmtContext {
        let localContext = new RemoveoperstmtContext(this.context, this.state);
        this.enterRule(localContext, 678, PostgreSQLParser.RULE_removeoperstmt);
        let _la: number;
        try {
            this.state = 5782;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 507, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5768;
                this.match(PostgreSQLParser.DROP);
                this.state = 5769;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 5770;
                this.operator_with_argtypes_list();
                this.state = 5772;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5771;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5774;
                this.match(PostgreSQLParser.DROP);
                this.state = 5775;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 5776;
                this.match(PostgreSQLParser.IF_P);
                this.state = 5777;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 5778;
                this.operator_with_argtypes_list();
                this.state = 5780;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 5779;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public oper_argtypes(): Oper_argtypesContext {
        let localContext = new Oper_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 680, PostgreSQLParser.RULE_oper_argtypes);
        try {
            this.state = 5806;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 508, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5784;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5785;
                this.typename();
                this.state = 5786;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5788;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5789;
                this.typename();
                this.state = 5790;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5791;
                this.typename();
                this.state = 5792;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5794;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5795;
                this.match(PostgreSQLParser.NONE);
                this.state = 5796;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5797;
                this.typename();
                this.state = 5798;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5800;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5801;
                this.typename();
                this.state = 5802;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5803;
                this.match(PostgreSQLParser.NONE);
                this.state = 5804;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_operator(): Any_operatorContext {
        let localContext = new Any_operatorContext(this.context, this.state);
        this.enterRule(localContext, 682, PostgreSQLParser.RULE_any_operator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5813;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                {
                {
                this.state = 5808;
                this.colid();
                this.state = 5809;
                this.match(PostgreSQLParser.DOT);
                }
                }
                this.state = 5815;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 5816;
            this.all_op();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_with_argtypes_list(): Operator_with_argtypes_listContext {
        let localContext = new Operator_with_argtypes_listContext(this.context, this.state);
        this.enterRule(localContext, 684, PostgreSQLParser.RULE_operator_with_argtypes_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5818;
            this.operator_with_argtypes();
            this.state = 5823;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 5819;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5820;
                this.operator_with_argtypes();
                }
                }
                this.state = 5825;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_with_argtypes(): Operator_with_argtypesContext {
        let localContext = new Operator_with_argtypesContext(this.context, this.state);
        this.enterRule(localContext, 686, PostgreSQLParser.RULE_operator_with_argtypes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5826;
            this.any_operator();
            this.state = 5827;
            this.oper_argtypes();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dostmt(): DostmtContext {
        let localContext = new DostmtContext(this.context, this.state);
        this.enterRule(localContext, 688, PostgreSQLParser.RULE_dostmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5829;
            this.match(PostgreSQLParser.DO);
            this.state = 5830;
            this.dostmt_opt_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dostmt_opt_list(): Dostmt_opt_listContext {
        let localContext = new Dostmt_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 690, PostgreSQLParser.RULE_dostmt_opt_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5833;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 5832;
                this.dostmt_opt_item();
                }
                }
                this.state = 5835;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 276 || ((((_la - 563)) & ~0x1F) === 0 && ((1 << (_la - 563)) & 16777237) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dostmt_opt_item(): Dostmt_opt_itemContext {
        let localContext = new Dostmt_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 692, PostgreSQLParser.RULE_dostmt_opt_item);
        try {
            this.state = 5840;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5837;
                this.sconst();
                }
                break;
            case PostgreSQLParser.LANGUAGE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5838;
                this.match(PostgreSQLParser.LANGUAGE);
                this.state = 5839;
                this.nonreservedword_or_sconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createcaststmt(): CreatecaststmtContext {
        let localContext = new CreatecaststmtContext(this.context, this.state);
        this.enterRule(localContext, 694, PostgreSQLParser.RULE_createcaststmt);
        let _la: number;
        try {
            this.state = 5879;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 516, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5842;
                this.match(PostgreSQLParser.CREATE);
                this.state = 5843;
                this.match(PostgreSQLParser.CAST);
                this.state = 5844;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5845;
                this.typename();
                this.state = 5846;
                this.match(PostgreSQLParser.AS);
                this.state = 5847;
                this.typename();
                this.state = 5848;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 5849;
                this.match(PostgreSQLParser.WITH);
                this.state = 5850;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5851;
                this.function_with_argtypes();
                this.state = 5853;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 5852;
                    this.cast_context();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5855;
                this.match(PostgreSQLParser.CREATE);
                this.state = 5856;
                this.match(PostgreSQLParser.CAST);
                this.state = 5857;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5858;
                this.typename();
                this.state = 5859;
                this.match(PostgreSQLParser.AS);
                this.state = 5860;
                this.typename();
                this.state = 5861;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 5862;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 5863;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5865;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 5864;
                    this.cast_context();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5867;
                this.match(PostgreSQLParser.CREATE);
                this.state = 5868;
                this.match(PostgreSQLParser.CAST);
                this.state = 5869;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 5870;
                this.typename();
                this.state = 5871;
                this.match(PostgreSQLParser.AS);
                this.state = 5872;
                this.typename();
                this.state = 5873;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 5874;
                this.match(PostgreSQLParser.WITH);
                this.state = 5875;
                this.match(PostgreSQLParser.INOUT);
                this.state = 5877;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 5876;
                    this.cast_context();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cast_context(): Cast_contextContext {
        let localContext = new Cast_contextContext(this.context, this.state);
        this.enterRule(localContext, 696, PostgreSQLParser.RULE_cast_context);
        try {
            this.state = 5885;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 517, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5881;
                this.match(PostgreSQLParser.AS);
                this.state = 5882;
                this.match(PostgreSQLParser.IMPLICIT_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5883;
                this.match(PostgreSQLParser.AS);
                this.state = 5884;
                this.match(PostgreSQLParser.ASSIGNMENT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropcaststmt(): DropcaststmtContext {
        let localContext = new DropcaststmtContext(this.context, this.state);
        this.enterRule(localContext, 698, PostgreSQLParser.RULE_dropcaststmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5887;
            this.match(PostgreSQLParser.DROP);
            this.state = 5888;
            this.match(PostgreSQLParser.CAST);
            this.state = 5890;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 258) {
                {
                this.state = 5889;
                this.if_exists_();
                }
            }

            this.state = 5892;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 5893;
            this.typename();
            this.state = 5894;
            this.match(PostgreSQLParser.AS);
            this.state = 5895;
            this.typename();
            this.state = 5896;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            this.state = 5898;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188 || _la === 346) {
                {
                this.state = 5897;
                this.drop_behavior_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public if_exists_(): If_exists_Context {
        let localContext = new If_exists_Context(this.context, this.state);
        this.enterRule(localContext, 700, PostgreSQLParser.RULE_if_exists_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5900;
            this.match(PostgreSQLParser.IF_P);
            this.state = 5901;
            this.match(PostgreSQLParser.EXISTS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createtransformstmt(): CreatetransformstmtContext {
        let localContext = new CreatetransformstmtContext(this.context, this.state);
        this.enterRule(localContext, 702, PostgreSQLParser.RULE_createtransformstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5903;
            this.match(PostgreSQLParser.CREATE);
            this.state = 5905;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 5904;
                this.or_replace_();
                }
            }

            this.state = 5907;
            this.match(PostgreSQLParser.TRANSFORM);
            this.state = 5908;
            this.match(PostgreSQLParser.FOR);
            this.state = 5909;
            this.typename();
            this.state = 5910;
            this.match(PostgreSQLParser.LANGUAGE);
            this.state = 5911;
            this.name();
            this.state = 5912;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 5913;
            this.transform_element_list();
            this.state = 5914;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transform_element_list(): Transform_element_listContext {
        let localContext = new Transform_element_listContext(this.context, this.state);
        this.enterRule(localContext, 704, PostgreSQLParser.RULE_transform_element_list);
        try {
            this.state = 5950;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 521, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5916;
                this.match(PostgreSQLParser.FROM);
                this.state = 5917;
                this.match(PostgreSQLParser.SQL_P);
                this.state = 5918;
                this.match(PostgreSQLParser.WITH);
                this.state = 5919;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5920;
                this.function_with_argtypes();
                this.state = 5921;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5922;
                this.match(PostgreSQLParser.TO);
                this.state = 5923;
                this.match(PostgreSQLParser.SQL_P);
                this.state = 5924;
                this.match(PostgreSQLParser.WITH);
                this.state = 5925;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5926;
                this.function_with_argtypes();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5928;
                this.match(PostgreSQLParser.TO);
                this.state = 5929;
                this.match(PostgreSQLParser.SQL_P);
                this.state = 5930;
                this.match(PostgreSQLParser.WITH);
                this.state = 5931;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5932;
                this.function_with_argtypes();
                this.state = 5933;
                this.match(PostgreSQLParser.COMMA);
                this.state = 5934;
                this.match(PostgreSQLParser.FROM);
                this.state = 5935;
                this.match(PostgreSQLParser.SQL_P);
                this.state = 5936;
                this.match(PostgreSQLParser.WITH);
                this.state = 5937;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5938;
                this.function_with_argtypes();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5940;
                this.match(PostgreSQLParser.FROM);
                this.state = 5941;
                this.match(PostgreSQLParser.SQL_P);
                this.state = 5942;
                this.match(PostgreSQLParser.WITH);
                this.state = 5943;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5944;
                this.function_with_argtypes();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 5945;
                this.match(PostgreSQLParser.TO);
                this.state = 5946;
                this.match(PostgreSQLParser.SQL_P);
                this.state = 5947;
                this.match(PostgreSQLParser.WITH);
                this.state = 5948;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 5949;
                this.function_with_argtypes();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public droptransformstmt(): DroptransformstmtContext {
        let localContext = new DroptransformstmtContext(this.context, this.state);
        this.enterRule(localContext, 706, PostgreSQLParser.RULE_droptransformstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5952;
            this.match(PostgreSQLParser.DROP);
            this.state = 5953;
            this.match(PostgreSQLParser.TRANSFORM);
            this.state = 5955;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 258) {
                {
                this.state = 5954;
                this.if_exists_();
                }
            }

            this.state = 5957;
            this.match(PostgreSQLParser.FOR);
            this.state = 5958;
            this.typename();
            this.state = 5959;
            this.match(PostgreSQLParser.LANGUAGE);
            this.state = 5960;
            this.name();
            this.state = 5962;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188 || _la === 346) {
                {
                this.state = 5961;
                this.drop_behavior_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindexstmt(): ReindexstmtContext {
        let localContext = new ReindexstmtContext(this.context, this.state);
        this.enterRule(localContext, 708, PostgreSQLParser.RULE_reindexstmt);
        let _la: number;
        try {
            this.state = 5994;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 531, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 5964;
                this.match(PostgreSQLParser.REINDEX);
                this.state = 5966;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5965;
                    this.reindex_option_list();
                    }
                }

                this.state = 5968;
                this.reindex_target_relation();
                this.state = 5970;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 5969;
                    this.concurrently_();
                    }
                }

                this.state = 5972;
                this.qualified_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 5974;
                this.match(PostgreSQLParser.REINDEX);
                this.state = 5976;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5975;
                    this.reindex_option_list();
                    }
                }

                this.state = 5978;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 5980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 5979;
                    this.concurrently_();
                    }
                }

                this.state = 5982;
                this.name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 5983;
                this.match(PostgreSQLParser.REINDEX);
                this.state = 5985;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 5984;
                    this.reindex_option_list();
                    }
                }

                this.state = 5987;
                this.reindex_target_all();
                this.state = 5989;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 147) {
                    {
                    this.state = 5988;
                    this.concurrently_();
                    }
                }

                this.state = 5992;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 5991;
                    this.single_name_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindex_target_relation(): Reindex_target_relationContext {
        let localContext = new Reindex_target_relationContext(this.context, this.state);
        this.enterRule(localContext, 710, PostgreSQLParser.RULE_reindex_target_relation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5996;
            _la = this.tokenStream.LA(1);
            if(!(_la === 130 || _la === 264)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindex_target_all(): Reindex_target_allContext {
        let localContext = new Reindex_target_allContext(this.context, this.state);
        this.enterRule(localContext, 712, PostgreSQLParser.RULE_reindex_target_all);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 5998;
            _la = this.tokenStream.LA(1);
            if(!(_la === 213 || _la === 380)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reindex_option_list(): Reindex_option_listContext {
        let localContext = new Reindex_option_listContext(this.context, this.state);
        this.enterRule(localContext, 714, PostgreSQLParser.RULE_reindex_option_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6000;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 6001;
            this.utility_option_list();
            this.state = 6002;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertblspcstmt(): AltertblspcstmtContext {
        let localContext = new AltertblspcstmtContext(this.context, this.state);
        this.enterRule(localContext, 716, PostgreSQLParser.RULE_altertblspcstmt);
        try {
            this.state = 6016;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 532, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6004;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6005;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 6006;
                this.name();
                this.state = 6007;
                this.match(PostgreSQLParser.SET);
                this.state = 6008;
                this.reloptions();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6010;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6011;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 6012;
                this.name();
                this.state = 6013;
                this.match(PostgreSQLParser.RESET);
                this.state = 6014;
                this.reloptions();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renamestmt(): RenamestmtContext {
        let localContext = new RenamestmtContext(this.context, this.state);
        this.enterRule(localContext, 718, PostgreSQLParser.RULE_renamestmt);
        let _la: number;
        try {
            this.state = 6505;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 543, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6018;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6019;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 6020;
                this.aggregate_with_argtypes();
                this.state = 6021;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6022;
                this.match(PostgreSQLParser.TO);
                this.state = 6023;
                this.name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6025;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6026;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 6027;
                this.any_name();
                this.state = 6028;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6029;
                this.match(PostgreSQLParser.TO);
                this.state = 6030;
                this.name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6032;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6033;
                this.match(PostgreSQLParser.CONVERSION_P);
                this.state = 6034;
                this.any_name();
                this.state = 6035;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6036;
                this.match(PostgreSQLParser.TO);
                this.state = 6037;
                this.name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6039;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6040;
                this.match(PostgreSQLParser.DATABASE);
                this.state = 6041;
                this.name();
                this.state = 6042;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6043;
                this.match(PostgreSQLParser.TO);
                this.state = 6044;
                this.name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6046;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6047;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 6048;
                this.any_name();
                this.state = 6049;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6050;
                this.match(PostgreSQLParser.TO);
                this.state = 6051;
                this.name();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6053;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6054;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 6055;
                this.any_name();
                this.state = 6056;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6057;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 6058;
                this.name();
                this.state = 6059;
                this.match(PostgreSQLParser.TO);
                this.state = 6060;
                this.name();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6062;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6063;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6064;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 6065;
                this.match(PostgreSQLParser.WRAPPER);
                this.state = 6066;
                this.name();
                this.state = 6067;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6068;
                this.match(PostgreSQLParser.TO);
                this.state = 6069;
                this.name();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6071;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6072;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 6073;
                this.function_with_argtypes();
                this.state = 6074;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6075;
                this.match(PostgreSQLParser.TO);
                this.state = 6076;
                this.name();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6078;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6079;
                this.match(PostgreSQLParser.GROUP_P);
                this.state = 6080;
                this.roleid();
                this.state = 6081;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6082;
                this.match(PostgreSQLParser.TO);
                this.state = 6083;
                this.roleid();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 6085;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6087;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 326) {
                    {
                    this.state = 6086;
                    this.procedural_();
                    }
                }

                this.state = 6089;
                this.match(PostgreSQLParser.LANGUAGE);
                this.state = 6090;
                this.name();
                this.state = 6091;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6092;
                this.match(PostgreSQLParser.TO);
                this.state = 6093;
                this.name();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 6095;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6096;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6097;
                this.match(PostgreSQLParser.CLASS);
                this.state = 6098;
                this.any_name();
                this.state = 6099;
                this.match(PostgreSQLParser.USING);
                this.state = 6100;
                this.name();
                this.state = 6101;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6102;
                this.match(PostgreSQLParser.TO);
                this.state = 6103;
                this.name();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 6105;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6106;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6107;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 6108;
                this.any_name();
                this.state = 6109;
                this.match(PostgreSQLParser.USING);
                this.state = 6110;
                this.name();
                this.state = 6111;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6112;
                this.match(PostgreSQLParser.TO);
                this.state = 6113;
                this.name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 6115;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6116;
                this.match(PostgreSQLParser.POLICY);
                this.state = 6117;
                this.name();
                this.state = 6118;
                this.match(PostgreSQLParser.ON);
                this.state = 6119;
                this.qualified_name();
                this.state = 6120;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6121;
                this.match(PostgreSQLParser.TO);
                this.state = 6122;
                this.name();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 6124;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6125;
                this.match(PostgreSQLParser.POLICY);
                this.state = 6126;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6127;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6128;
                this.name();
                this.state = 6129;
                this.match(PostgreSQLParser.ON);
                this.state = 6130;
                this.qualified_name();
                this.state = 6131;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6132;
                this.match(PostgreSQLParser.TO);
                this.state = 6133;
                this.name();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 6135;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6136;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 6137;
                this.function_with_argtypes();
                this.state = 6138;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6139;
                this.match(PostgreSQLParser.TO);
                this.state = 6140;
                this.name();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 6142;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6143;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 6144;
                this.name();
                this.state = 6145;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6146;
                this.match(PostgreSQLParser.TO);
                this.state = 6147;
                this.name();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 6149;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6150;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 6151;
                this.function_with_argtypes();
                this.state = 6152;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6153;
                this.match(PostgreSQLParser.TO);
                this.state = 6154;
                this.name();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 6156;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6157;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6158;
                this.name();
                this.state = 6159;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6160;
                this.match(PostgreSQLParser.TO);
                this.state = 6161;
                this.name();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 6163;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6164;
                this.match(PostgreSQLParser.SERVER);
                this.state = 6165;
                this.name();
                this.state = 6166;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6167;
                this.match(PostgreSQLParser.TO);
                this.state = 6168;
                this.name();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 6170;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6171;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 6172;
                this.name();
                this.state = 6173;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6174;
                this.match(PostgreSQLParser.TO);
                this.state = 6175;
                this.name();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 6177;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6178;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6179;
                this.relation_expr();
                this.state = 6180;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6181;
                this.match(PostgreSQLParser.TO);
                this.state = 6182;
                this.name();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 6184;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6185;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6186;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6187;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6188;
                this.relation_expr();
                this.state = 6189;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6190;
                this.match(PostgreSQLParser.TO);
                this.state = 6191;
                this.name();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 6193;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6194;
                this.match(PostgreSQLParser.SEQUENCE);
                this.state = 6195;
                this.qualified_name();
                this.state = 6196;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6197;
                this.match(PostgreSQLParser.TO);
                this.state = 6198;
                this.name();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 6200;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6201;
                this.match(PostgreSQLParser.SEQUENCE);
                this.state = 6202;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6203;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6204;
                this.qualified_name();
                this.state = 6205;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6206;
                this.match(PostgreSQLParser.TO);
                this.state = 6207;
                this.name();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 6209;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6210;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6211;
                this.qualified_name();
                this.state = 6212;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6213;
                this.match(PostgreSQLParser.TO);
                this.state = 6214;
                this.name();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 6216;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6217;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6218;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6219;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6220;
                this.qualified_name();
                this.state = 6221;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6222;
                this.match(PostgreSQLParser.TO);
                this.state = 6223;
                this.name();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 6225;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6226;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 6227;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6228;
                this.qualified_name();
                this.state = 6229;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6230;
                this.match(PostgreSQLParser.TO);
                this.state = 6231;
                this.name();
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 6233;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6234;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 6235;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6236;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6237;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6238;
                this.qualified_name();
                this.state = 6239;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6240;
                this.match(PostgreSQLParser.TO);
                this.state = 6241;
                this.name();
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 6243;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6244;
                this.match(PostgreSQLParser.INDEX);
                this.state = 6245;
                this.qualified_name();
                this.state = 6246;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6247;
                this.match(PostgreSQLParser.TO);
                this.state = 6248;
                this.name();
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 6250;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6251;
                this.match(PostgreSQLParser.INDEX);
                this.state = 6252;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6253;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6254;
                this.qualified_name();
                this.state = 6255;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6256;
                this.match(PostgreSQLParser.TO);
                this.state = 6257;
                this.name();
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 6259;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6260;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6261;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6262;
                this.relation_expr();
                this.state = 6263;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6264;
                this.match(PostgreSQLParser.TO);
                this.state = 6265;
                this.name();
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 6267;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6268;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6269;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6270;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6271;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6272;
                this.relation_expr();
                this.state = 6273;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6274;
                this.match(PostgreSQLParser.TO);
                this.state = 6275;
                this.name();
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 6277;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6278;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6279;
                this.relation_expr();
                this.state = 6280;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6282;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6281;
                    this.column_();
                    }
                }

                this.state = 6284;
                this.name();
                this.state = 6285;
                this.match(PostgreSQLParser.TO);
                this.state = 6286;
                this.name();
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 6288;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6289;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6290;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6291;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6292;
                this.relation_expr();
                this.state = 6293;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6294;
                    this.column_();
                    }
                }

                this.state = 6297;
                this.name();
                this.state = 6298;
                this.match(PostgreSQLParser.TO);
                this.state = 6299;
                this.name();
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 6301;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6302;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6303;
                this.qualified_name();
                this.state = 6304;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6306;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6305;
                    this.column_();
                    }
                }

                this.state = 6308;
                this.name();
                this.state = 6309;
                this.match(PostgreSQLParser.TO);
                this.state = 6310;
                this.name();
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 6312;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6313;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6314;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6315;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6316;
                this.qualified_name();
                this.state = 6317;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6318;
                    this.column_();
                    }
                }

                this.state = 6321;
                this.name();
                this.state = 6322;
                this.match(PostgreSQLParser.TO);
                this.state = 6323;
                this.name();
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 6325;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6326;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 6327;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6328;
                this.qualified_name();
                this.state = 6329;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6331;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6330;
                    this.column_();
                    }
                }

                this.state = 6333;
                this.name();
                this.state = 6334;
                this.match(PostgreSQLParser.TO);
                this.state = 6335;
                this.name();
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 6337;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6338;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 6339;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6340;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6341;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6342;
                this.qualified_name();
                this.state = 6343;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6345;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6344;
                    this.column_();
                    }
                }

                this.state = 6347;
                this.name();
                this.state = 6348;
                this.match(PostgreSQLParser.TO);
                this.state = 6349;
                this.name();
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 6351;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6352;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6353;
                this.relation_expr();
                this.state = 6354;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6355;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 6356;
                this.name();
                this.state = 6357;
                this.match(PostgreSQLParser.TO);
                this.state = 6358;
                this.name();
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 6360;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6361;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6362;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6363;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6364;
                this.relation_expr();
                this.state = 6365;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6366;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 6367;
                this.name();
                this.state = 6368;
                this.match(PostgreSQLParser.TO);
                this.state = 6369;
                this.name();
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 6371;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6372;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6373;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6374;
                this.relation_expr();
                this.state = 6375;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6376;
                    this.column_();
                    }
                }

                this.state = 6379;
                this.name();
                this.state = 6380;
                this.match(PostgreSQLParser.TO);
                this.state = 6381;
                this.name();
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 6383;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6384;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6385;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6386;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6387;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6388;
                this.relation_expr();
                this.state = 6389;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6391;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82) {
                    {
                    this.state = 6390;
                    this.column_();
                    }
                }

                this.state = 6393;
                this.name();
                this.state = 6394;
                this.match(PostgreSQLParser.TO);
                this.state = 6395;
                this.name();
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 6397;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6398;
                this.match(PostgreSQLParser.RULE);
                this.state = 6399;
                this.name();
                this.state = 6400;
                this.match(PostgreSQLParser.ON);
                this.state = 6401;
                this.qualified_name();
                this.state = 6402;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6403;
                this.match(PostgreSQLParser.TO);
                this.state = 6404;
                this.name();
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 6406;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6407;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 6408;
                this.name();
                this.state = 6409;
                this.match(PostgreSQLParser.ON);
                this.state = 6410;
                this.qualified_name();
                this.state = 6411;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6412;
                this.match(PostgreSQLParser.TO);
                this.state = 6413;
                this.name();
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 6415;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6416;
                this.match(PostgreSQLParser.EVENT);
                this.state = 6417;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 6418;
                this.name();
                this.state = 6419;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6420;
                this.match(PostgreSQLParser.TO);
                this.state = 6421;
                this.name();
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 6423;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6424;
                this.match(PostgreSQLParser.ROLE);
                this.state = 6425;
                this.roleid();
                this.state = 6426;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6427;
                this.match(PostgreSQLParser.TO);
                this.state = 6428;
                this.roleid();
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 6430;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6431;
                this.match(PostgreSQLParser.USER);
                this.state = 6432;
                this.roleid();
                this.state = 6433;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6434;
                this.match(PostgreSQLParser.TO);
                this.state = 6435;
                this.roleid();
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 6437;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6438;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 6439;
                this.name();
                this.state = 6440;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6441;
                this.match(PostgreSQLParser.TO);
                this.state = 6442;
                this.name();
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 6444;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6445;
                this.match(PostgreSQLParser.STATISTICS);
                this.state = 6446;
                this.any_name();
                this.state = 6447;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6448;
                this.match(PostgreSQLParser.TO);
                this.state = 6449;
                this.name();
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 6451;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6452;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6453;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6454;
                this.match(PostgreSQLParser.PARSER);
                this.state = 6455;
                this.any_name();
                this.state = 6456;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6457;
                this.match(PostgreSQLParser.TO);
                this.state = 6458;
                this.name();
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 6460;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6461;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6462;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6463;
                this.match(PostgreSQLParser.DICTIONARY);
                this.state = 6464;
                this.any_name();
                this.state = 6465;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6466;
                this.match(PostgreSQLParser.TO);
                this.state = 6467;
                this.name();
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 6469;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6470;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6471;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6472;
                this.match(PostgreSQLParser.TEMPLATE);
                this.state = 6473;
                this.any_name();
                this.state = 6474;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6475;
                this.match(PostgreSQLParser.TO);
                this.state = 6476;
                this.name();
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 6478;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6479;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6480;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6481;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 6482;
                this.any_name();
                this.state = 6483;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6484;
                this.match(PostgreSQLParser.TO);
                this.state = 6485;
                this.name();
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 6487;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6488;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 6489;
                this.any_name();
                this.state = 6490;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6491;
                this.match(PostgreSQLParser.TO);
                this.state = 6492;
                this.name();
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 6494;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6495;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 6496;
                this.any_name();
                this.state = 6497;
                this.match(PostgreSQLParser.RENAME);
                this.state = 6498;
                this.match(PostgreSQLParser.ATTRIBUTE);
                this.state = 6499;
                this.name();
                this.state = 6500;
                this.match(PostgreSQLParser.TO);
                this.state = 6501;
                this.name();
                this.state = 6503;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 6502;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public column_(): Column_Context {
        let localContext = new Column_Context(this.context, this.state);
        this.enterRule(localContext, 720, PostgreSQLParser.RULE_column_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6507;
            this.match(PostgreSQLParser.COLUMN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_data_(): Set_data_Context {
        let localContext = new Set_data_Context(this.context, this.state);
        this.enterRule(localContext, 722, PostgreSQLParser.RULE_set_data_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6509;
            this.match(PostgreSQLParser.SET);
            this.state = 6510;
            this.match(PostgreSQLParser.DATA_P);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterobjectdependsstmt(): AlterobjectdependsstmtContext {
        let localContext = new AlterobjectdependsstmtContext(this.context, this.state);
        this.enterRule(localContext, 724, PostgreSQLParser.RULE_alterobjectdependsstmt);
        let _la: number;
        try {
            this.state = 6581;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 550, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6512;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6513;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 6514;
                this.function_with_argtypes();
                this.state = 6516;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 6515;
                    this.no_();
                    }
                }

                this.state = 6518;
                this.match(PostgreSQLParser.DEPENDS);
                this.state = 6519;
                this.match(PostgreSQLParser.ON);
                this.state = 6520;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 6521;
                this.name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6523;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6524;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 6525;
                this.function_with_argtypes();
                this.state = 6527;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 6526;
                    this.no_();
                    }
                }

                this.state = 6529;
                this.match(PostgreSQLParser.DEPENDS);
                this.state = 6530;
                this.match(PostgreSQLParser.ON);
                this.state = 6531;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 6532;
                this.name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6534;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6535;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 6536;
                this.function_with_argtypes();
                this.state = 6538;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 6537;
                    this.no_();
                    }
                }

                this.state = 6540;
                this.match(PostgreSQLParser.DEPENDS);
                this.state = 6541;
                this.match(PostgreSQLParser.ON);
                this.state = 6542;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 6543;
                this.name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6545;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6546;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 6547;
                this.name();
                this.state = 6548;
                this.match(PostgreSQLParser.ON);
                this.state = 6549;
                this.qualified_name();
                this.state = 6551;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 6550;
                    this.no_();
                    }
                }

                this.state = 6553;
                this.match(PostgreSQLParser.DEPENDS);
                this.state = 6554;
                this.match(PostgreSQLParser.ON);
                this.state = 6555;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 6556;
                this.name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6558;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6559;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 6560;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6561;
                this.qualified_name();
                this.state = 6563;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 6562;
                    this.no_();
                    }
                }

                this.state = 6565;
                this.match(PostgreSQLParser.DEPENDS);
                this.state = 6566;
                this.match(PostgreSQLParser.ON);
                this.state = 6567;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 6568;
                this.name();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6570;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6571;
                this.match(PostgreSQLParser.INDEX);
                this.state = 6572;
                this.qualified_name();
                this.state = 6574;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 6573;
                    this.no_();
                    }
                }

                this.state = 6576;
                this.match(PostgreSQLParser.DEPENDS);
                this.state = 6577;
                this.match(PostgreSQLParser.ON);
                this.state = 6578;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 6579;
                this.name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public no_(): No_Context {
        let localContext = new No_Context(this.context, this.state);
        this.enterRule(localContext, 726, PostgreSQLParser.RULE_no_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6583;
            this.match(PostgreSQLParser.NO);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterobjectschemastmt(): AlterobjectschemastmtContext {
        let localContext = new AlterobjectschemastmtContext(this.context, this.state);
        this.enterRule(localContext, 728, PostgreSQLParser.RULE_alterobjectschemastmt);
        try {
            this.state = 6802;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 551, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6585;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6586;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 6587;
                this.aggregate_with_argtypes();
                this.state = 6588;
                this.match(PostgreSQLParser.SET);
                this.state = 6589;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6590;
                this.name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6592;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6593;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 6594;
                this.any_name();
                this.state = 6595;
                this.match(PostgreSQLParser.SET);
                this.state = 6596;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6597;
                this.name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6599;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6600;
                this.match(PostgreSQLParser.CONVERSION_P);
                this.state = 6601;
                this.any_name();
                this.state = 6602;
                this.match(PostgreSQLParser.SET);
                this.state = 6603;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6604;
                this.name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6606;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6607;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 6608;
                this.any_name();
                this.state = 6609;
                this.match(PostgreSQLParser.SET);
                this.state = 6610;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6611;
                this.name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6613;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6614;
                this.match(PostgreSQLParser.EXTENSION);
                this.state = 6615;
                this.name();
                this.state = 6616;
                this.match(PostgreSQLParser.SET);
                this.state = 6617;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6618;
                this.name();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6620;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6621;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 6622;
                this.function_with_argtypes();
                this.state = 6623;
                this.match(PostgreSQLParser.SET);
                this.state = 6624;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6625;
                this.name();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6627;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6628;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6629;
                this.operator_with_argtypes();
                this.state = 6630;
                this.match(PostgreSQLParser.SET);
                this.state = 6631;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6632;
                this.name();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6634;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6635;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6636;
                this.match(PostgreSQLParser.CLASS);
                this.state = 6637;
                this.any_name();
                this.state = 6638;
                this.match(PostgreSQLParser.USING);
                this.state = 6639;
                this.name();
                this.state = 6640;
                this.match(PostgreSQLParser.SET);
                this.state = 6641;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6642;
                this.name();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6644;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6645;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6646;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 6647;
                this.any_name();
                this.state = 6648;
                this.match(PostgreSQLParser.USING);
                this.state = 6649;
                this.name();
                this.state = 6650;
                this.match(PostgreSQLParser.SET);
                this.state = 6651;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6652;
                this.name();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 6654;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6655;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 6656;
                this.function_with_argtypes();
                this.state = 6657;
                this.match(PostgreSQLParser.SET);
                this.state = 6658;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6659;
                this.name();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 6661;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6662;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 6663;
                this.function_with_argtypes();
                this.state = 6664;
                this.match(PostgreSQLParser.SET);
                this.state = 6665;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6666;
                this.name();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 6668;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6669;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6670;
                this.relation_expr();
                this.state = 6671;
                this.match(PostgreSQLParser.SET);
                this.state = 6672;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6673;
                this.name();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 6675;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6676;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6677;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6678;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6679;
                this.relation_expr();
                this.state = 6680;
                this.match(PostgreSQLParser.SET);
                this.state = 6681;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6682;
                this.name();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 6684;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6685;
                this.match(PostgreSQLParser.STATISTICS);
                this.state = 6686;
                this.any_name();
                this.state = 6687;
                this.match(PostgreSQLParser.SET);
                this.state = 6688;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6689;
                this.name();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 6691;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6692;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6693;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6694;
                this.match(PostgreSQLParser.PARSER);
                this.state = 6695;
                this.any_name();
                this.state = 6696;
                this.match(PostgreSQLParser.SET);
                this.state = 6697;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6698;
                this.name();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 6700;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6701;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6702;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6703;
                this.match(PostgreSQLParser.DICTIONARY);
                this.state = 6704;
                this.any_name();
                this.state = 6705;
                this.match(PostgreSQLParser.SET);
                this.state = 6706;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6707;
                this.name();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 6709;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6710;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6711;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6712;
                this.match(PostgreSQLParser.TEMPLATE);
                this.state = 6713;
                this.any_name();
                this.state = 6714;
                this.match(PostgreSQLParser.SET);
                this.state = 6715;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6716;
                this.name();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 6718;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6719;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6720;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6721;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 6722;
                this.any_name();
                this.state = 6723;
                this.match(PostgreSQLParser.SET);
                this.state = 6724;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6725;
                this.name();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 6727;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6728;
                this.match(PostgreSQLParser.SEQUENCE);
                this.state = 6729;
                this.qualified_name();
                this.state = 6730;
                this.match(PostgreSQLParser.SET);
                this.state = 6731;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6732;
                this.name();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 6734;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6735;
                this.match(PostgreSQLParser.SEQUENCE);
                this.state = 6736;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6737;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6738;
                this.qualified_name();
                this.state = 6739;
                this.match(PostgreSQLParser.SET);
                this.state = 6740;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6741;
                this.name();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 6743;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6744;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6745;
                this.qualified_name();
                this.state = 6746;
                this.match(PostgreSQLParser.SET);
                this.state = 6747;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6748;
                this.name();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 6750;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6751;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6752;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6753;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6754;
                this.qualified_name();
                this.state = 6755;
                this.match(PostgreSQLParser.SET);
                this.state = 6756;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6757;
                this.name();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 6759;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6760;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 6761;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6762;
                this.qualified_name();
                this.state = 6763;
                this.match(PostgreSQLParser.SET);
                this.state = 6764;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6765;
                this.name();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 6767;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6768;
                this.match(PostgreSQLParser.MATERIALIZED);
                this.state = 6769;
                this.match(PostgreSQLParser.VIEW);
                this.state = 6770;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6771;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6772;
                this.qualified_name();
                this.state = 6773;
                this.match(PostgreSQLParser.SET);
                this.state = 6774;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6775;
                this.name();
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 6777;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6778;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6779;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6780;
                this.relation_expr();
                this.state = 6781;
                this.match(PostgreSQLParser.SET);
                this.state = 6782;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6783;
                this.name();
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 6785;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6786;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6787;
                this.match(PostgreSQLParser.TABLE);
                this.state = 6788;
                this.match(PostgreSQLParser.IF_P);
                this.state = 6789;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 6790;
                this.relation_expr();
                this.state = 6791;
                this.match(PostgreSQLParser.SET);
                this.state = 6792;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6793;
                this.name();
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 6795;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6796;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 6797;
                this.any_name();
                this.state = 6798;
                this.match(PostgreSQLParser.SET);
                this.state = 6799;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6800;
                this.name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alteroperatorstmt(): AlteroperatorstmtContext {
        let localContext = new AlteroperatorstmtContext(this.context, this.state);
        this.enterRule(localContext, 730, PostgreSQLParser.RULE_alteroperatorstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6804;
            this.match(PostgreSQLParser.ALTER);
            this.state = 6805;
            this.match(PostgreSQLParser.OPERATOR);
            this.state = 6806;
            this.operator_with_argtypes();
            this.state = 6807;
            this.match(PostgreSQLParser.SET);
            this.state = 6808;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 6809;
            this.operator_def_list();
            this.state = 6810;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_list(): Operator_def_listContext {
        let localContext = new Operator_def_listContext(this.context, this.state);
        this.enterRule(localContext, 732, PostgreSQLParser.RULE_operator_def_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6812;
            this.operator_def_elem();
            this.state = 6817;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 6813;
                this.match(PostgreSQLParser.COMMA);
                this.state = 6814;
                this.operator_def_elem();
                }
                }
                this.state = 6819;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_elem(): Operator_def_elemContext {
        let localContext = new Operator_def_elemContext(this.context, this.state);
        this.enterRule(localContext, 734, PostgreSQLParser.RULE_operator_def_elem);
        try {
            this.state = 6828;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 553, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6820;
                this.colLabel();
                this.state = 6821;
                this.match(PostgreSQLParser.EQUAL);
                this.state = 6822;
                this.match(PostgreSQLParser.NONE);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6824;
                this.colLabel();
                this.state = 6825;
                this.match(PostgreSQLParser.EQUAL);
                this.state = 6826;
                this.operator_def_arg();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public operator_def_arg(): Operator_def_argContext {
        let localContext = new Operator_def_argContext(this.context, this.state);
        this.enterRule(localContext, 736, PostgreSQLParser.RULE_operator_def_arg);
        try {
            this.state = 6835;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 554, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6830;
                this.func_type();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6831;
                this.reserved_keyword();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6832;
                this.qual_all_op();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6833;
                this.numericonly();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6834;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertypestmt(): AltertypestmtContext {
        let localContext = new AltertypestmtContext(this.context, this.state);
        this.enterRule(localContext, 738, PostgreSQLParser.RULE_altertypestmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 6837;
            this.match(PostgreSQLParser.ALTER);
            this.state = 6838;
            this.match(PostgreSQLParser.TYPE_P);
            this.state = 6839;
            this.any_name();
            this.state = 6840;
            this.match(PostgreSQLParser.SET);
            this.state = 6841;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 6842;
            this.operator_def_list();
            this.state = 6843;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterownerstmt(): AlterownerstmtContext {
        let localContext = new AlterownerstmtContext(this.context, this.state);
        this.enterRule(localContext, 740, PostgreSQLParser.RULE_alterownerstmt);
        let _la: number;
        try {
            this.state = 7030;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 556, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 6845;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6846;
                this.match(PostgreSQLParser.AGGREGATE);
                this.state = 6847;
                this.aggregate_with_argtypes();
                this.state = 6848;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6849;
                this.match(PostgreSQLParser.TO);
                this.state = 6850;
                this.rolespec();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 6852;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6853;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 6854;
                this.any_name();
                this.state = 6855;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6856;
                this.match(PostgreSQLParser.TO);
                this.state = 6857;
                this.rolespec();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 6859;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6860;
                this.match(PostgreSQLParser.CONVERSION_P);
                this.state = 6861;
                this.any_name();
                this.state = 6862;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6863;
                this.match(PostgreSQLParser.TO);
                this.state = 6864;
                this.rolespec();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 6866;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6867;
                this.match(PostgreSQLParser.DATABASE);
                this.state = 6868;
                this.name();
                this.state = 6869;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6870;
                this.match(PostgreSQLParser.TO);
                this.state = 6871;
                this.rolespec();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 6873;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6874;
                this.match(PostgreSQLParser.DOMAIN_P);
                this.state = 6875;
                this.any_name();
                this.state = 6876;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6877;
                this.match(PostgreSQLParser.TO);
                this.state = 6878;
                this.rolespec();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 6880;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6881;
                this.match(PostgreSQLParser.FUNCTION);
                this.state = 6882;
                this.function_with_argtypes();
                this.state = 6883;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6884;
                this.match(PostgreSQLParser.TO);
                this.state = 6885;
                this.rolespec();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 6887;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6889;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 326) {
                    {
                    this.state = 6888;
                    this.procedural_();
                    }
                }

                this.state = 6891;
                this.match(PostgreSQLParser.LANGUAGE);
                this.state = 6892;
                this.name();
                this.state = 6893;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6894;
                this.match(PostgreSQLParser.TO);
                this.state = 6895;
                this.rolespec();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 6897;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6898;
                this.match(PostgreSQLParser.LARGE_P);
                this.state = 6899;
                this.match(PostgreSQLParser.OBJECT_P);
                this.state = 6900;
                this.numericonly();
                this.state = 6901;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6902;
                this.match(PostgreSQLParser.TO);
                this.state = 6903;
                this.rolespec();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 6905;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6906;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6907;
                this.operator_with_argtypes();
                this.state = 6908;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6909;
                this.match(PostgreSQLParser.TO);
                this.state = 6910;
                this.rolespec();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 6912;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6913;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6914;
                this.match(PostgreSQLParser.CLASS);
                this.state = 6915;
                this.any_name();
                this.state = 6916;
                this.match(PostgreSQLParser.USING);
                this.state = 6917;
                this.name();
                this.state = 6918;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6919;
                this.match(PostgreSQLParser.TO);
                this.state = 6920;
                this.rolespec();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 6922;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6923;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 6924;
                this.match(PostgreSQLParser.FAMILY);
                this.state = 6925;
                this.any_name();
                this.state = 6926;
                this.match(PostgreSQLParser.USING);
                this.state = 6927;
                this.name();
                this.state = 6928;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6929;
                this.match(PostgreSQLParser.TO);
                this.state = 6930;
                this.rolespec();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 6932;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6933;
                this.match(PostgreSQLParser.PROCEDURE);
                this.state = 6934;
                this.function_with_argtypes();
                this.state = 6935;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6936;
                this.match(PostgreSQLParser.TO);
                this.state = 6937;
                this.rolespec();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 6939;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6940;
                this.match(PostgreSQLParser.ROUTINE);
                this.state = 6941;
                this.function_with_argtypes();
                this.state = 6942;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6943;
                this.match(PostgreSQLParser.TO);
                this.state = 6944;
                this.rolespec();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 6946;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6947;
                this.match(PostgreSQLParser.SCHEMA);
                this.state = 6948;
                this.name();
                this.state = 6949;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6950;
                this.match(PostgreSQLParser.TO);
                this.state = 6951;
                this.rolespec();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 6953;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6954;
                this.match(PostgreSQLParser.TYPE_P);
                this.state = 6955;
                this.any_name();
                this.state = 6956;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6957;
                this.match(PostgreSQLParser.TO);
                this.state = 6958;
                this.rolespec();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 6960;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6961;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 6962;
                this.name();
                this.state = 6963;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6964;
                this.match(PostgreSQLParser.TO);
                this.state = 6965;
                this.rolespec();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 6967;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6968;
                this.match(PostgreSQLParser.STATISTICS);
                this.state = 6969;
                this.any_name();
                this.state = 6970;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6971;
                this.match(PostgreSQLParser.TO);
                this.state = 6972;
                this.rolespec();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 6974;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6975;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6976;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6977;
                this.match(PostgreSQLParser.DICTIONARY);
                this.state = 6978;
                this.any_name();
                this.state = 6979;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6980;
                this.match(PostgreSQLParser.TO);
                this.state = 6981;
                this.rolespec();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 6983;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6984;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 6985;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 6986;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 6987;
                this.any_name();
                this.state = 6988;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6989;
                this.match(PostgreSQLParser.TO);
                this.state = 6990;
                this.rolespec();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 6992;
                this.match(PostgreSQLParser.ALTER);
                this.state = 6993;
                this.match(PostgreSQLParser.FOREIGN);
                this.state = 6994;
                this.match(PostgreSQLParser.DATA_P);
                this.state = 6995;
                this.match(PostgreSQLParser.WRAPPER);
                this.state = 6996;
                this.name();
                this.state = 6997;
                this.match(PostgreSQLParser.OWNER);
                this.state = 6998;
                this.match(PostgreSQLParser.TO);
                this.state = 6999;
                this.rolespec();
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 7001;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7002;
                this.match(PostgreSQLParser.SERVER);
                this.state = 7003;
                this.name();
                this.state = 7004;
                this.match(PostgreSQLParser.OWNER);
                this.state = 7005;
                this.match(PostgreSQLParser.TO);
                this.state = 7006;
                this.rolespec();
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 7008;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7009;
                this.match(PostgreSQLParser.EVENT);
                this.state = 7010;
                this.match(PostgreSQLParser.TRIGGER);
                this.state = 7011;
                this.name();
                this.state = 7012;
                this.match(PostgreSQLParser.OWNER);
                this.state = 7013;
                this.match(PostgreSQLParser.TO);
                this.state = 7014;
                this.rolespec();
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 7016;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7017;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 7018;
                this.name();
                this.state = 7019;
                this.match(PostgreSQLParser.OWNER);
                this.state = 7020;
                this.match(PostgreSQLParser.TO);
                this.state = 7021;
                this.rolespec();
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 7023;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7024;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7025;
                this.name();
                this.state = 7026;
                this.match(PostgreSQLParser.OWNER);
                this.state = 7027;
                this.match(PostgreSQLParser.TO);
                this.state = 7028;
                this.rolespec();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createpublicationstmt(): CreatepublicationstmtContext {
        let localContext = new CreatepublicationstmtContext(this.context, this.state);
        this.enterRule(localContext, 742, PostgreSQLParser.RULE_createpublicationstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7032;
            this.match(PostgreSQLParser.CREATE);
            this.state = 7033;
            this.match(PostgreSQLParser.PUBLICATION);
            this.state = 7034;
            this.name();
            this.state = 7036;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 7035;
                this.publication_for_tables_();
                }
            }

            this.state = 7039;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 7038;
                this.definition_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_for_tables_(): Publication_for_tables_Context {
        let localContext = new Publication_for_tables_Context(this.context, this.state);
        this.enterRule(localContext, 744, PostgreSQLParser.RULE_publication_for_tables_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7041;
            this.publication_for_tables();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_for_tables(): Publication_for_tablesContext {
        let localContext = new Publication_for_tablesContext(this.context, this.state);
        this.enterRule(localContext, 746, PostgreSQLParser.RULE_publication_for_tables);
        try {
            this.state = 7049;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 559, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7043;
                this.match(PostgreSQLParser.FOR);
                this.state = 7044;
                this.match(PostgreSQLParser.TABLE);
                this.state = 7045;
                this.relation_expr_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7046;
                this.match(PostgreSQLParser.FOR);
                this.state = 7047;
                this.match(PostgreSQLParser.ALL);
                this.state = 7048;
                this.match(PostgreSQLParser.TABLES);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterpublicationstmt(): AlterpublicationstmtContext {
        let localContext = new AlterpublicationstmtContext(this.context, this.state);
        this.enterRule(localContext, 748, PostgreSQLParser.RULE_alterpublicationstmt);
        try {
            this.state = 7078;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 560, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7051;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7052;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 7053;
                this.name();
                this.state = 7054;
                this.match(PostgreSQLParser.SET);
                this.state = 7055;
                this.definition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7057;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7058;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 7059;
                this.name();
                this.state = 7060;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 7061;
                this.match(PostgreSQLParser.TABLE);
                this.state = 7062;
                this.relation_expr_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7064;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7065;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 7066;
                this.name();
                this.state = 7067;
                this.match(PostgreSQLParser.SET);
                this.state = 7068;
                this.match(PostgreSQLParser.TABLE);
                this.state = 7069;
                this.relation_expr_list();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7071;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7072;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 7073;
                this.name();
                this.state = 7074;
                this.match(PostgreSQLParser.DROP);
                this.state = 7075;
                this.match(PostgreSQLParser.TABLE);
                this.state = 7076;
                this.relation_expr_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createsubscriptionstmt(): CreatesubscriptionstmtContext {
        let localContext = new CreatesubscriptionstmtContext(this.context, this.state);
        this.enterRule(localContext, 750, PostgreSQLParser.RULE_createsubscriptionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7080;
            this.match(PostgreSQLParser.CREATE);
            this.state = 7081;
            this.match(PostgreSQLParser.SUBSCRIPTION);
            this.state = 7082;
            this.name();
            this.state = 7083;
            this.match(PostgreSQLParser.CONNECTION);
            this.state = 7084;
            this.sconst();
            this.state = 7085;
            this.match(PostgreSQLParser.PUBLICATION);
            this.state = 7086;
            this.publication_name_list();
            this.state = 7088;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 7087;
                this.definition_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_name_list(): Publication_name_listContext {
        let localContext = new Publication_name_listContext(this.context, this.state);
        this.enterRule(localContext, 752, PostgreSQLParser.RULE_publication_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7090;
            this.publication_name_item();
            this.state = 7095;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7091;
                this.match(PostgreSQLParser.COMMA);
                this.state = 7092;
                this.publication_name_item();
                }
                }
                this.state = 7097;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public publication_name_item(): Publication_name_itemContext {
        let localContext = new Publication_name_itemContext(this.context, this.state);
        this.enterRule(localContext, 754, PostgreSQLParser.RULE_publication_name_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7098;
            this.colLabel();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altersubscriptionstmt(): AltersubscriptionstmtContext {
        let localContext = new AltersubscriptionstmtContext(this.context, this.state);
        this.enterRule(localContext, 756, PostgreSQLParser.RULE_altersubscriptionstmt);
        let _la: number;
        try {
            this.state = 7139;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 565, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7100;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7101;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7102;
                this.name();
                this.state = 7103;
                this.match(PostgreSQLParser.SET);
                this.state = 7104;
                this.definition();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7106;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7107;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7108;
                this.name();
                this.state = 7109;
                this.match(PostgreSQLParser.CONNECTION);
                this.state = 7110;
                this.sconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7112;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7113;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7114;
                this.name();
                this.state = 7115;
                this.match(PostgreSQLParser.REFRESH);
                this.state = 7116;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 7118;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 7117;
                    this.definition_();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7120;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7121;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7122;
                this.name();
                this.state = 7123;
                this.match(PostgreSQLParser.SET);
                this.state = 7124;
                this.match(PostgreSQLParser.PUBLICATION);
                this.state = 7125;
                this.publication_name_list();
                this.state = 7127;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 7126;
                    this.definition_();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7129;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7130;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7131;
                this.name();
                this.state = 7132;
                this.match(PostgreSQLParser.ENABLE_P);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7134;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7135;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7136;
                this.name();
                this.state = 7137;
                this.match(PostgreSQLParser.DISABLE_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropsubscriptionstmt(): DropsubscriptionstmtContext {
        let localContext = new DropsubscriptionstmtContext(this.context, this.state);
        this.enterRule(localContext, 758, PostgreSQLParser.RULE_dropsubscriptionstmt);
        let _la: number;
        try {
            this.state = 7155;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 568, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7141;
                this.match(PostgreSQLParser.DROP);
                this.state = 7142;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7143;
                this.name();
                this.state = 7145;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 7144;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7147;
                this.match(PostgreSQLParser.DROP);
                this.state = 7148;
                this.match(PostgreSQLParser.SUBSCRIPTION);
                this.state = 7149;
                this.match(PostgreSQLParser.IF_P);
                this.state = 7150;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 7151;
                this.name();
                this.state = 7153;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 7152;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rulestmt(): RulestmtContext {
        let localContext = new RulestmtContext(this.context, this.state);
        this.enterRule(localContext, 760, PostgreSQLParser.RULE_rulestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7157;
            this.match(PostgreSQLParser.CREATE);
            this.state = 7159;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 7158;
                this.or_replace_();
                }
            }

            this.state = 7161;
            this.match(PostgreSQLParser.RULE);
            this.state = 7162;
            this.name();
            this.state = 7163;
            this.match(PostgreSQLParser.AS);
            this.state = 7164;
            this.match(PostgreSQLParser.ON);
            this.state = 7165;
            this.event();
            this.state = 7166;
            this.match(PostgreSQLParser.TO);
            this.state = 7167;
            this.qualified_name();
            this.state = 7169;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 141) {
                {
                this.state = 7168;
                this.where_clause();
                }
            }

            this.state = 7171;
            this.match(PostgreSQLParser.DO);
            this.state = 7173;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 175 || _la === 271) {
                {
                this.state = 7172;
                this.instead_();
                }
            }

            this.state = 7175;
            this.ruleactionlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionlist(): RuleactionlistContext {
        let localContext = new RuleactionlistContext(this.context, this.state);
        this.enterRule(localContext, 762, PostgreSQLParser.RULE_ruleactionlist);
        try {
            this.state = 7183;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 572, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7177;
                this.match(PostgreSQLParser.NOTHING);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7178;
                this.ruleactionstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7179;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7180;
                this.ruleactionmulti();
                this.state = 7181;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionmulti(): RuleactionmultiContext {
        let localContext = new RuleactionmultiContext(this.context, this.state);
        this.enterRule(localContext, 764, PostgreSQLParser.RULE_ruleactionmulti);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7186;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2 || ((((_la - 126)) & ~0x1F) === 0 && ((1 << (_la - 126)) & 131089) !== 0) || _la === 220 || _la === 270 || _la === 302 || _la === 400 || _la === 453) {
                {
                this.state = 7185;
                this.ruleactionstmtOrEmpty();
                }
            }

            this.state = 7194;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 7) {
                {
                {
                this.state = 7188;
                this.match(PostgreSQLParser.SEMI);
                this.state = 7190;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2 || ((((_la - 126)) & ~0x1F) === 0 && ((1 << (_la - 126)) & 131089) !== 0) || _la === 220 || _la === 270 || _la === 302 || _la === 400 || _la === 453) {
                    {
                    this.state = 7189;
                    this.ruleactionstmtOrEmpty();
                    }
                }

                }
                }
                this.state = 7196;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionstmt(): RuleactionstmtContext {
        let localContext = new RuleactionstmtContext(this.context, this.state);
        this.enterRule(localContext, 766, PostgreSQLParser.RULE_ruleactionstmt);
        try {
            this.state = 7202;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 576, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7197;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7198;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7199;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7200;
                this.deletestmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7201;
                this.notifystmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ruleactionstmtOrEmpty(): RuleactionstmtOrEmptyContext {
        let localContext = new RuleactionstmtOrEmptyContext(this.context, this.state);
        this.enterRule(localContext, 768, PostgreSQLParser.RULE_ruleactionstmtOrEmpty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7204;
            this.ruleactionstmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public event(): EventContext {
        let localContext = new EventContext(this.context, this.state);
        this.enterRule(localContext, 770, PostgreSQLParser.RULE_event);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7206;
            _la = this.tokenStream.LA(1);
            if(!(_la === 126 || _la === 220 || _la === 270 || _la === 400)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public instead_(): Instead_Context {
        let localContext = new Instead_Context(this.context, this.state);
        this.enterRule(localContext, 772, PostgreSQLParser.RULE_instead_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7208;
            _la = this.tokenStream.LA(1);
            if(!(_la === 175 || _la === 271)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notifystmt(): NotifystmtContext {
        let localContext = new NotifystmtContext(this.context, this.state);
        this.enterRule(localContext, 774, PostgreSQLParser.RULE_notifystmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7210;
            this.match(PostgreSQLParser.NOTIFY);
            this.state = 7211;
            this.colid();
            this.state = 7213;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 7212;
                this.notify_payload();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notify_payload(): Notify_payloadContext {
        let localContext = new Notify_payloadContext(this.context, this.state);
        this.enterRule(localContext, 776, PostgreSQLParser.RULE_notify_payload);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7215;
            this.match(PostgreSQLParser.COMMA);
            this.state = 7216;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public listenstmt(): ListenstmtContext {
        let localContext = new ListenstmtContext(this.context, this.state);
        this.enterRule(localContext, 778, PostgreSQLParser.RULE_listenstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7218;
            this.match(PostgreSQLParser.LISTEN);
            this.state = 7219;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unlistenstmt(): UnlistenstmtContext {
        let localContext = new UnlistenstmtContext(this.context, this.state);
        this.enterRule(localContext, 780, PostgreSQLParser.RULE_unlistenstmt);
        try {
            this.state = 7225;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 578, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7221;
                this.match(PostgreSQLParser.UNLISTEN);
                this.state = 7222;
                this.colid();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7223;
                this.match(PostgreSQLParser.UNLISTEN);
                this.state = 7224;
                this.match(PostgreSQLParser.STAR);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transactionstmt(): TransactionstmtContext {
        let localContext = new TransactionstmtContext(this.context, this.state);
        this.enterRule(localContext, 782, PostgreSQLParser.RULE_transactionstmt);
        let _la: number;
        try {
            this.state = 7296;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 592, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7227;
                this.match(PostgreSQLParser.ABORT_P);
                this.state = 7229;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387 || _la === 411) {
                    {
                    this.state = 7228;
                    this.transaction_();
                    }
                }

                this.state = 7232;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 7231;
                    this.transaction_chain_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7234;
                this.match(PostgreSQLParser.BEGIN_P);
                this.state = 7236;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387 || _la === 411) {
                    {
                    this.state = 7235;
                    this.transaction_();
                    }
                }

                this.state = 7239;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92 || _la === 115 || _la === 273 || _la === 331) {
                    {
                    this.state = 7238;
                    this.transaction_mode_list_or_empty();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7241;
                this.match(PostgreSQLParser.START);
                this.state = 7242;
                this.match(PostgreSQLParser.TRANSACTION);
                this.state = 7244;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92 || _la === 115 || _la === 273 || _la === 331) {
                    {
                    this.state = 7243;
                    this.transaction_mode_list_or_empty();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7246;
                this.match(PostgreSQLParser.COMMIT);
                this.state = 7248;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387 || _la === 411) {
                    {
                    this.state = 7247;
                    this.transaction_();
                    }
                }

                this.state = 7251;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 7250;
                    this.transaction_chain_();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7253;
                this.match(PostgreSQLParser.END_P);
                this.state = 7255;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387 || _la === 411) {
                    {
                    this.state = 7254;
                    this.transaction_();
                    }
                }

                this.state = 7258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 7257;
                    this.transaction_chain_();
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7260;
                this.match(PostgreSQLParser.ROLLBACK);
                this.state = 7262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387 || _la === 411) {
                    {
                    this.state = 7261;
                    this.transaction_();
                    }
                }

                this.state = 7265;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71) {
                    {
                    this.state = 7264;
                    this.transaction_chain_();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7267;
                this.match(PostgreSQLParser.SAVEPOINT);
                this.state = 7268;
                this.colid();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7269;
                this.match(PostgreSQLParser.RELEASE);
                this.state = 7270;
                this.match(PostgreSQLParser.SAVEPOINT);
                this.state = 7271;
                this.colid();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7272;
                this.match(PostgreSQLParser.RELEASE);
                this.state = 7273;
                this.colid();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 7274;
                this.match(PostgreSQLParser.ROLLBACK);
                this.state = 7276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387 || _la === 411) {
                    {
                    this.state = 7275;
                    this.transaction_();
                    }
                }

                this.state = 7278;
                this.match(PostgreSQLParser.TO);
                this.state = 7279;
                this.match(PostgreSQLParser.SAVEPOINT);
                this.state = 7280;
                this.colid();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 7281;
                this.match(PostgreSQLParser.ROLLBACK);
                this.state = 7283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 387 || _la === 411) {
                    {
                    this.state = 7282;
                    this.transaction_();
                    }
                }

                this.state = 7285;
                this.match(PostgreSQLParser.TO);
                this.state = 7286;
                this.colid();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 7287;
                this.match(PostgreSQLParser.PREPARE);
                this.state = 7288;
                this.match(PostgreSQLParser.TRANSACTION);
                this.state = 7289;
                this.sconst();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 7290;
                this.match(PostgreSQLParser.COMMIT);
                this.state = 7291;
                this.match(PostgreSQLParser.PREPARED);
                this.state = 7292;
                this.sconst();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 7293;
                this.match(PostgreSQLParser.ROLLBACK);
                this.state = 7294;
                this.match(PostgreSQLParser.PREPARED);
                this.state = 7295;
                this.sconst();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_(): Transaction_Context {
        let localContext = new Transaction_Context(this.context, this.state);
        this.enterRule(localContext, 784, PostgreSQLParser.RULE_transaction_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7298;
            _la = this.tokenStream.LA(1);
            if(!(_la === 387 || _la === 411)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_mode_item(): Transaction_mode_itemContext {
        let localContext = new Transaction_mode_itemContext(this.context, this.state);
        this.enterRule(localContext, 786, PostgreSQLParser.RULE_transaction_mode_item);
        try {
            this.state = 7310;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 593, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7300;
                this.match(PostgreSQLParser.ISOLATION);
                this.state = 7301;
                this.match(PostgreSQLParser.LEVEL);
                this.state = 7302;
                this.iso_level();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7303;
                this.match(PostgreSQLParser.READ);
                this.state = 7304;
                this.match(PostgreSQLParser.ONLY);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7305;
                this.match(PostgreSQLParser.READ);
                this.state = 7306;
                this.match(PostgreSQLParser.WRITE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7307;
                this.match(PostgreSQLParser.DEFERRABLE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7308;
                this.match(PostgreSQLParser.NOT);
                this.state = 7309;
                this.match(PostgreSQLParser.DEFERRABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_mode_list(): Transaction_mode_listContext {
        let localContext = new Transaction_mode_listContext(this.context, this.state);
        this.enterRule(localContext, 788, PostgreSQLParser.RULE_transaction_mode_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7312;
            this.transaction_mode_item();
            this.state = 7319;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6 || _la === 92 || _la === 115 || _la === 273 || _la === 331) {
                {
                {
                this.state = 7314;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 7313;
                    this.match(PostgreSQLParser.COMMA);
                    }
                }

                this.state = 7316;
                this.transaction_mode_item();
                }
                }
                this.state = 7321;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_mode_list_or_empty(): Transaction_mode_list_or_emptyContext {
        let localContext = new Transaction_mode_list_or_emptyContext(this.context, this.state);
        this.enterRule(localContext, 790, PostgreSQLParser.RULE_transaction_mode_list_or_empty);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7322;
            this.transaction_mode_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public transaction_chain_(): Transaction_chain_Context {
        let localContext = new Transaction_chain_Context(this.context, this.state);
        this.enterRule(localContext, 792, PostgreSQLParser.RULE_transaction_chain_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7324;
            this.match(PostgreSQLParser.AND);
            this.state = 7326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 300) {
                {
                this.state = 7325;
                this.match(PostgreSQLParser.NO);
                }
            }

            this.state = 7328;
            this.match(PostgreSQLParser.CHAIN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public viewstmt(): ViewstmtContext {
        let localContext = new ViewstmtContext(this.context, this.state);
        this.enterRule(localContext, 794, PostgreSQLParser.RULE_viewstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7330;
            this.match(PostgreSQLParser.CREATE);
            this.state = 7333;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 7331;
                this.match(PostgreSQLParser.OR);
                this.state = 7332;
                this.match(PostgreSQLParser.REPLACE);
                }
            }

            this.state = 7336;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 251 || _la === 283 || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 32773) !== 0)) {
                {
                this.state = 7335;
                this.opttemp();
                }
            }

            this.state = 7355;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.VIEW:
                {
                this.state = 7338;
                this.match(PostgreSQLParser.VIEW);
                this.state = 7339;
                this.qualified_name();
                this.state = 7341;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 7340;
                    this.column_list_();
                    }
                }

                this.state = 7344;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 7343;
                    this.reloptions_();
                    }
                }

                }
                break;
            case PostgreSQLParser.RECURSIVE:
                {
                this.state = 7346;
                this.match(PostgreSQLParser.RECURSIVE);
                this.state = 7347;
                this.match(PostgreSQLParser.VIEW);
                this.state = 7348;
                this.qualified_name();
                this.state = 7349;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7350;
                this.columnlist();
                this.state = 7351;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 7353;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 7352;
                    this.reloptions_();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 7357;
            this.match(PostgreSQLParser.AS);
            this.state = 7358;
            this.selectstmt();
            this.state = 7360;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 7359;
                this.check_option_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public check_option_(): Check_option_Context {
        let localContext = new Check_option_Context(this.context, this.state);
        this.enterRule(localContext, 796, PostgreSQLParser.RULE_check_option_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7362;
            this.match(PostgreSQLParser.WITH);
            this.state = 7364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 189 || _la === 283) {
                {
                this.state = 7363;
                _la = this.tokenStream.LA(1);
                if(!(_la === 189 || _la === 283)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 7366;
            this.match(PostgreSQLParser.CHECK);
            this.state = 7367;
            this.match(PostgreSQLParser.OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public loadstmt(): LoadstmtContext {
        let localContext = new LoadstmtContext(this.context, this.state);
        this.enterRule(localContext, 798, PostgreSQLParser.RULE_loadstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7369;
            this.match(PostgreSQLParser.LOAD);
            this.state = 7370;
            this.file_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdbstmt(): CreatedbstmtContext {
        let localContext = new CreatedbstmtContext(this.context, this.state);
        this.enterRule(localContext, 800, PostgreSQLParser.RULE_createdbstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7372;
            this.match(PostgreSQLParser.CREATE);
            this.state = 7373;
            this.match(PostgreSQLParser.DATABASE);
            this.state = 7374;
            this.name();
            this.state = 7376;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 7375;
                this.with_();
                }
            }

            this.state = 7379;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 202 || _la === 232 || _la === 284 || _la === 313 || _la === 382 || _la === 384 || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0)) {
                {
                this.state = 7378;
                this.createdb_opt_list();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_list(): Createdb_opt_listContext {
        let localContext = new Createdb_opt_listContext(this.context, this.state);
        this.enterRule(localContext, 802, PostgreSQLParser.RULE_createdb_opt_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7381;
            this.createdb_opt_items();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_items(): Createdb_opt_itemsContext {
        let localContext = new Createdb_opt_itemsContext(this.context, this.state);
        this.enterRule(localContext, 804, PostgreSQLParser.RULE_createdb_opt_items);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7384;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 7383;
                this.createdb_opt_item();
                }
                }
                this.state = 7386;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 202 || _la === 232 || _la === 284 || _la === 313 || _la === 382 || _la === 384 || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_item(): Createdb_opt_itemContext {
        let localContext = new Createdb_opt_itemContext(this.context, this.state);
        this.enterRule(localContext, 806, PostgreSQLParser.RULE_createdb_opt_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7388;
            this.createdb_opt_name();
            this.state = 7390;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 7389;
                this.equal_();
                }
            }

            this.state = 7395;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.Integral:
                {
                this.state = 7392;
                this.signediconst();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                {
                this.state = 7393;
                this.boolean_or_string_();
                }
                break;
            case PostgreSQLParser.DEFAULT:
                {
                this.state = 7394;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdb_opt_name(): Createdb_opt_nameContext {
        let localContext = new Createdb_opt_nameContext(this.context, this.state);
        this.enterRule(localContext, 808, PostgreSQLParser.RULE_createdb_opt_name);
        try {
            this.state = 7405;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7397;
                this.identifier();
                }
                break;
            case PostgreSQLParser.CONNECTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7398;
                this.match(PostgreSQLParser.CONNECTION);
                this.state = 7399;
                this.match(PostgreSQLParser.LIMIT);
                }
                break;
            case PostgreSQLParser.ENCODING:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7400;
                this.match(PostgreSQLParser.ENCODING);
                }
                break;
            case PostgreSQLParser.LOCATION:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7401;
                this.match(PostgreSQLParser.LOCATION);
                }
                break;
            case PostgreSQLParser.OWNER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7402;
                this.match(PostgreSQLParser.OWNER);
                }
                break;
            case PostgreSQLParser.TABLESPACE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7403;
                this.match(PostgreSQLParser.TABLESPACE);
                }
                break;
            case PostgreSQLParser.TEMPLATE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7404;
                this.match(PostgreSQLParser.TEMPLATE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public equal_(): Equal_Context {
        let localContext = new Equal_Context(this.context, this.state);
        this.enterRule(localContext, 810, PostgreSQLParser.RULE_equal_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7407;
            this.match(PostgreSQLParser.EQUAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdatabasestmt(): AlterdatabasestmtContext {
        let localContext = new AlterdatabasestmtContext(this.context, this.state);
        this.enterRule(localContext, 812, PostgreSQLParser.RULE_alterdatabasestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7409;
            this.match(PostgreSQLParser.ALTER);
            this.state = 7410;
            this.match(PostgreSQLParser.DATABASE);
            this.state = 7411;
            this.name();
            this.state = 7422;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.WITH:
                {
                this.state = 7412;
                this.match(PostgreSQLParser.WITH);
                this.state = 7414;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 202 || _la === 232 || _la === 284 || _la === 313 || _la === 382 || _la === 384 || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0)) {
                    {
                    this.state = 7413;
                    this.createdb_opt_list();
                    }
                }

                }
                break;
            case PostgreSQLParser.EOF:
            case PostgreSQLParser.SEMI:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                {
                this.state = 7417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 202 || _la === 232 || _la === 284 || _la === 313 || _la === 382 || _la === 384 || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0)) {
                    {
                    this.state = 7416;
                    this.createdb_opt_list();
                    }
                }

                }
                break;
            case PostgreSQLParser.SET:
                {
                this.state = 7419;
                this.match(PostgreSQLParser.SET);
                this.state = 7420;
                this.match(PostgreSQLParser.TABLESPACE);
                this.state = 7421;
                this.name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdatabasesetstmt(): AlterdatabasesetstmtContext {
        let localContext = new AlterdatabasesetstmtContext(this.context, this.state);
        this.enterRule(localContext, 814, PostgreSQLParser.RULE_alterdatabasesetstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7424;
            this.match(PostgreSQLParser.ALTER);
            this.state = 7425;
            this.match(PostgreSQLParser.DATABASE);
            this.state = 7426;
            this.name();
            this.state = 7427;
            this.setresetclause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropdbstmt(): DropdbstmtContext {
        let localContext = new DropdbstmtContext(this.context, this.state);
        this.enterRule(localContext, 816, PostgreSQLParser.RULE_dropdbstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7429;
            this.match(PostgreSQLParser.DROP);
            this.state = 7430;
            this.match(PostgreSQLParser.DATABASE);
            this.state = 7433;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 614, this.context) ) {
            case 1:
                {
                this.state = 7431;
                this.match(PostgreSQLParser.IF_P);
                this.state = 7432;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            }
            this.state = 7435;
            this.name();
            this.state = 7443;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2 || _la === 143) {
                {
                this.state = 7437;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 7436;
                    this.with_();
                    }
                }

                this.state = 7439;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7440;
                this.drop_option_list();
                this.state = 7441;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_option_list(): Drop_option_listContext {
        let localContext = new Drop_option_listContext(this.context, this.state);
        this.enterRule(localContext, 818, PostgreSQLParser.RULE_drop_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7445;
            this.drop_option();
            this.state = 7450;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7446;
                this.match(PostgreSQLParser.COMMA);
                this.state = 7447;
                this.drop_option();
                }
                }
                this.state = 7452;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public drop_option(): Drop_optionContext {
        let localContext = new Drop_optionContext(this.context, this.state);
        this.enterRule(localContext, 820, PostgreSQLParser.RULE_drop_option);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7453;
            this.match(PostgreSQLParser.FORCE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altercollationstmt(): AltercollationstmtContext {
        let localContext = new AltercollationstmtContext(this.context, this.state);
        this.enterRule(localContext, 822, PostgreSQLParser.RULE_altercollationstmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7455;
            this.match(PostgreSQLParser.ALTER);
            this.state = 7456;
            this.match(PostgreSQLParser.COLLATION);
            this.state = 7457;
            this.any_name();
            this.state = 7458;
            this.match(PostgreSQLParser.REFRESH);
            this.state = 7459;
            this.match(PostgreSQLParser.VERSION_P);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altersystemstmt(): AltersystemstmtContext {
        let localContext = new AltersystemstmtContext(this.context, this.state);
        this.enterRule(localContext, 824, PostgreSQLParser.RULE_altersystemstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7461;
            this.match(PostgreSQLParser.ALTER);
            this.state = 7462;
            this.match(PostgreSQLParser.SYSTEM_P);
            this.state = 7463;
            _la = this.tokenStream.LA(1);
            if(!(_la === 344 || _la === 364)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 7464;
            this.generic_set();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createdomainstmt(): CreatedomainstmtContext {
        let localContext = new CreatedomainstmtContext(this.context, this.state);
        this.enterRule(localContext, 826, PostgreSQLParser.RULE_createdomainstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7466;
            this.match(PostgreSQLParser.CREATE);
            this.state = 7467;
            this.match(PostgreSQLParser.DOMAIN_P);
            this.state = 7468;
            this.any_name();
            this.state = 7470;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 7469;
                this.as_();
                }
            }

            this.state = 7472;
            this.typename();
            this.state = 7473;
            this.colquallist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterdomainstmt(): AlterdomainstmtContext {
        let localContext = new AlterdomainstmtContext(this.context, this.state);
        this.enterRule(localContext, 828, PostgreSQLParser.RULE_alterdomainstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7475;
            this.match(PostgreSQLParser.ALTER);
            this.state = 7476;
            this.match(PostgreSQLParser.DOMAIN_P);
            this.state = 7477;
            this.any_name();
            this.state = 7500;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 621, this.context) ) {
            case 1:
                {
                this.state = 7478;
                this.alter_column_default();
                }
                break;
            case 2:
                {
                this.state = 7479;
                this.match(PostgreSQLParser.DROP);
                this.state = 7480;
                this.match(PostgreSQLParser.NOT);
                this.state = 7481;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case 3:
                {
                this.state = 7482;
                this.match(PostgreSQLParser.SET);
                this.state = 7483;
                this.match(PostgreSQLParser.NOT);
                this.state = 7484;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case 4:
                {
                this.state = 7485;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 7486;
                this.tableconstraint();
                }
                break;
            case 5:
                {
                this.state = 7487;
                this.match(PostgreSQLParser.DROP);
                this.state = 7488;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 7491;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 619, this.context) ) {
                case 1:
                    {
                    this.state = 7489;
                    this.match(PostgreSQLParser.IF_P);
                    this.state = 7490;
                    this.match(PostgreSQLParser.EXISTS);
                    }
                    break;
                }
                this.state = 7493;
                this.name();
                this.state = 7495;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 188 || _la === 346) {
                    {
                    this.state = 7494;
                    this.drop_behavior_();
                    }
                }

                }
                break;
            case 6:
                {
                this.state = 7497;
                this.match(PostgreSQLParser.VALIDATE);
                this.state = 7498;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 7499;
                this.name();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public as_(): As_Context {
        let localContext = new As_Context(this.context, this.state);
        this.enterRule(localContext, 830, PostgreSQLParser.RULE_as_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7502;
            this.match(PostgreSQLParser.AS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertsdictionarystmt(): AltertsdictionarystmtContext {
        let localContext = new AltertsdictionarystmtContext(this.context, this.state);
        this.enterRule(localContext, 832, PostgreSQLParser.RULE_altertsdictionarystmt);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7504;
            this.match(PostgreSQLParser.ALTER);
            this.state = 7505;
            this.match(PostgreSQLParser.TEXT_P);
            this.state = 7506;
            this.match(PostgreSQLParser.SEARCH);
            this.state = 7507;
            this.match(PostgreSQLParser.DICTIONARY);
            this.state = 7508;
            this.any_name();
            this.state = 7509;
            this.definition();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public altertsconfigurationstmt(): AltertsconfigurationstmtContext {
        let localContext = new AltertsconfigurationstmtContext(this.context, this.state);
        this.enterRule(localContext, 834, PostgreSQLParser.RULE_altertsconfigurationstmt);
        try {
            this.state = 7583;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 622, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7511;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7512;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 7513;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 7514;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 7515;
                this.any_name();
                this.state = 7516;
                this.match(PostgreSQLParser.ADD_P);
                this.state = 7517;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 7518;
                this.match(PostgreSQLParser.FOR);
                this.state = 7519;
                this.name_list();
                this.state = 7520;
                this.any_with();
                this.state = 7521;
                this.any_name_list_();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7523;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7524;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 7525;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 7526;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 7527;
                this.any_name();
                this.state = 7528;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7529;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 7530;
                this.match(PostgreSQLParser.FOR);
                this.state = 7531;
                this.name_list();
                this.state = 7532;
                this.any_with();
                this.state = 7533;
                this.any_name_list_();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7535;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7536;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 7537;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 7538;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 7539;
                this.any_name();
                this.state = 7540;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7541;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 7542;
                this.match(PostgreSQLParser.REPLACE);
                this.state = 7543;
                this.any_name();
                this.state = 7544;
                this.any_with();
                this.state = 7545;
                this.any_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7547;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7548;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 7549;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 7550;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 7551;
                this.any_name();
                this.state = 7552;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7553;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 7554;
                this.match(PostgreSQLParser.FOR);
                this.state = 7555;
                this.name_list();
                this.state = 7556;
                this.match(PostgreSQLParser.REPLACE);
                this.state = 7557;
                this.any_name();
                this.state = 7558;
                this.any_with();
                this.state = 7559;
                this.any_name();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7561;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7562;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 7563;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 7564;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 7565;
                this.any_name();
                this.state = 7566;
                this.match(PostgreSQLParser.DROP);
                this.state = 7567;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 7568;
                this.match(PostgreSQLParser.FOR);
                this.state = 7569;
                this.name_list();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7571;
                this.match(PostgreSQLParser.ALTER);
                this.state = 7572;
                this.match(PostgreSQLParser.TEXT_P);
                this.state = 7573;
                this.match(PostgreSQLParser.SEARCH);
                this.state = 7574;
                this.match(PostgreSQLParser.CONFIGURATION);
                this.state = 7575;
                this.any_name();
                this.state = 7576;
                this.match(PostgreSQLParser.DROP);
                this.state = 7577;
                this.match(PostgreSQLParser.MAPPING);
                this.state = 7578;
                this.match(PostgreSQLParser.IF_P);
                this.state = 7579;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 7580;
                this.match(PostgreSQLParser.FOR);
                this.state = 7581;
                this.name_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_with(): Any_withContext {
        let localContext = new Any_withContext(this.context, this.state);
        this.enterRule(localContext, 836, PostgreSQLParser.RULE_any_with);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7585;
            this.match(PostgreSQLParser.WITH);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createconversionstmt(): CreateconversionstmtContext {
        let localContext = new CreateconversionstmtContext(this.context, this.state);
        this.enterRule(localContext, 838, PostgreSQLParser.RULE_createconversionstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7587;
            this.match(PostgreSQLParser.CREATE);
            this.state = 7589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 91) {
                {
                this.state = 7588;
                this.default_();
                }
            }

            this.state = 7591;
            this.match(PostgreSQLParser.CONVERSION_P);
            this.state = 7592;
            this.any_name();
            this.state = 7593;
            this.match(PostgreSQLParser.FOR);
            this.state = 7594;
            this.sconst();
            this.state = 7595;
            this.match(PostgreSQLParser.TO);
            this.state = 7596;
            this.sconst();
            this.state = 7597;
            this.match(PostgreSQLParser.FROM);
            this.state = 7598;
            this.any_name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterstmt(): ClusterstmtContext {
        let localContext = new ClusterstmtContext(this.context, this.state);
        this.enterRule(localContext, 840, PostgreSQLParser.RULE_clusterstmt);
        let _la: number;
        try {
            this.state = 7620;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 628, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7600;
                this.match(PostgreSQLParser.CLUSTER);
                this.state = 7602;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166) {
                    {
                    this.state = 7601;
                    this.verbose_();
                    }
                }

                this.state = 7604;
                this.qualified_name();
                this.state = 7606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 138) {
                    {
                    this.state = 7605;
                    this.cluster_index_specification();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7608;
                this.match(PostgreSQLParser.CLUSTER);
                this.state = 7610;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166) {
                    {
                    this.state = 7609;
                    this.verbose_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7612;
                this.match(PostgreSQLParser.CLUSTER);
                this.state = 7614;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166) {
                    {
                    this.state = 7613;
                    this.verbose_();
                    }
                }

                this.state = 7616;
                this.name();
                this.state = 7617;
                this.match(PostgreSQLParser.ON);
                this.state = 7618;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cluster_index_specification(): Cluster_index_specificationContext {
        let localContext = new Cluster_index_specificationContext(this.context, this.state);
        this.enterRule(localContext, 842, PostgreSQLParser.RULE_cluster_index_specification);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7622;
            this.match(PostgreSQLParser.USING);
            this.state = 7623;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuumstmt(): VacuumstmtContext {
        let localContext = new VacuumstmtContext(this.context, this.state);
        this.enterRule(localContext, 844, PostgreSQLParser.RULE_vacuumstmt);
        let _la: number;
        try {
            this.state = 7648;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 635, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7625;
                this.match(PostgreSQLParser.VACUUM);
                this.state = 7627;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 151) {
                    {
                    this.state = 7626;
                    this.full_();
                    }
                }

                this.state = 7630;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 150) {
                    {
                    this.state = 7629;
                    this.freeze_();
                    }
                }

                this.state = 7633;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166) {
                    {
                    this.state = 7632;
                    this.verbose_();
                    }
                }

                this.state = 7636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69 || _la === 70) {
                    {
                    this.state = 7635;
                    this.analyze_();
                    }
                }

                this.state = 7639;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 7638;
                    this.vacuum_relation_list_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7641;
                this.match(PostgreSQLParser.VACUUM);
                this.state = 7642;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7643;
                this.vac_analyze_option_list();
                this.state = 7644;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 7646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 7645;
                    this.vacuum_relation_list_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyzestmt(): AnalyzestmtContext {
        let localContext = new AnalyzestmtContext(this.context, this.state);
        this.enterRule(localContext, 846, PostgreSQLParser.RULE_analyzestmt);
        let _la: number;
        try {
            this.state = 7664;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 639, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7650;
                this.analyze_keyword();
                this.state = 7652;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166) {
                    {
                    this.state = 7651;
                    this.verbose_();
                    }
                }

                this.state = 7655;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 7654;
                    this.vacuum_relation_list_();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7657;
                this.analyze_keyword();
                this.state = 7658;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7659;
                this.vac_analyze_option_list();
                this.state = 7660;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 7662;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 7661;
                    this.vacuum_relation_list_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public utility_option_list(): Utility_option_listContext {
        let localContext = new Utility_option_listContext(this.context, this.state);
        this.enterRule(localContext, 848, PostgreSQLParser.RULE_utility_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7666;
            this.utility_option_elem();
            this.state = 7671;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7667;
                this.match(PostgreSQLParser.COMMA);
                this.state = 7668;
                this.utility_option_elem();
                }
                }
                this.state = 7673;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_list(): Vac_analyze_option_listContext {
        let localContext = new Vac_analyze_option_listContext(this.context, this.state);
        this.enterRule(localContext, 850, PostgreSQLParser.RULE_vac_analyze_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7674;
            this.vac_analyze_option_elem();
            this.state = 7679;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7675;
                this.match(PostgreSQLParser.COMMA);
                this.state = 7676;
                this.vac_analyze_option_elem();
                }
                }
                this.state = 7681;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_keyword(): Analyze_keywordContext {
        let localContext = new Analyze_keywordContext(this.context, this.state);
        this.enterRule(localContext, 852, PostgreSQLParser.RULE_analyze_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7682;
            _la = this.tokenStream.LA(1);
            if(!(_la === 69 || _la === 70)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public utility_option_elem(): Utility_option_elemContext {
        let localContext = new Utility_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 854, PostgreSQLParser.RULE_utility_option_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7684;
            this.utility_option_name();
            this.state = 7686;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 12)) & ~0x1F) === 0 && ((1 << (_la - 12)) & 3220963331) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 8388607) !== 0) || _la === 98 || _la === 118 || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966273) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109073479) !== 0) || _la === 587) {
                {
                this.state = 7685;
                this.utility_option_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public utility_option_name(): Utility_option_nameContext {
        let localContext = new Utility_option_nameContext(this.context, this.state);
        this.enterRule(localContext, 856, PostgreSQLParser.RULE_utility_option_name);
        try {
            this.state = 7691;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7688;
                this.nonreservedword();
                }
                break;
            case PostgreSQLParser.ANALYSE:
            case PostgreSQLParser.ANALYZE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7689;
                this.analyze_keyword();
                }
                break;
            case PostgreSQLParser.FORMAT_LA:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7690;
                this.match(PostgreSQLParser.FORMAT_LA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public utility_option_arg(): Utility_option_argContext {
        let localContext = new Utility_option_argContext(this.context, this.state);
        this.enterRule(localContext, 858, PostgreSQLParser.RULE_utility_option_arg);
        try {
            this.state = 7695;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7693;
                this.boolean_or_string_();
                }
                break;
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7694;
                this.numericonly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_elem(): Vac_analyze_option_elemContext {
        let localContext = new Vac_analyze_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 860, PostgreSQLParser.RULE_vac_analyze_option_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7697;
            this.vac_analyze_option_name();
            this.state = 7699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 12)) & ~0x1F) === 0 && ((1 << (_la - 12)) & 3220963331) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 8388607) !== 0) || _la === 98 || _la === 118 || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966273) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109073479) !== 0) || _la === 587) {
                {
                this.state = 7698;
                this.vac_analyze_option_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_name(): Vac_analyze_option_nameContext {
        let localContext = new Vac_analyze_option_nameContext(this.context, this.state);
        this.enterRule(localContext, 862, PostgreSQLParser.RULE_vac_analyze_option_name);
        try {
            this.state = 7703;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7701;
                this.nonreservedword();
                }
                break;
            case PostgreSQLParser.ANALYSE:
            case PostgreSQLParser.ANALYZE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7702;
                this.analyze_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vac_analyze_option_arg(): Vac_analyze_option_argContext {
        let localContext = new Vac_analyze_option_argContext(this.context, this.state);
        this.enterRule(localContext, 864, PostgreSQLParser.RULE_vac_analyze_option_arg);
        try {
            this.state = 7707;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7705;
                this.boolean_or_string_();
                }
                break;
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7706;
                this.numericonly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public analyze_(): Analyze_Context {
        let localContext = new Analyze_Context(this.context, this.state);
        this.enterRule(localContext, 866, PostgreSQLParser.RULE_analyze_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7709;
            this.analyze_keyword();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public verbose_(): Verbose_Context {
        let localContext = new Verbose_Context(this.context, this.state);
        this.enterRule(localContext, 868, PostgreSQLParser.RULE_verbose_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7711;
            this.match(PostgreSQLParser.VERBOSE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public full_(): Full_Context {
        let localContext = new Full_Context(this.context, this.state);
        this.enterRule(localContext, 870, PostgreSQLParser.RULE_full_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7713;
            this.match(PostgreSQLParser.FULL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public freeze_(): Freeze_Context {
        let localContext = new Freeze_Context(this.context, this.state);
        this.enterRule(localContext, 872, PostgreSQLParser.RULE_freeze_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7715;
            this.match(PostgreSQLParser.FREEZE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public name_list_(): Name_list_Context {
        let localContext = new Name_list_Context(this.context, this.state);
        this.enterRule(localContext, 874, PostgreSQLParser.RULE_name_list_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7717;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 7718;
            this.name_list();
            this.state = 7719;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuum_relation(): Vacuum_relationContext {
        let localContext = new Vacuum_relationContext(this.context, this.state);
        this.enterRule(localContext, 876, PostgreSQLParser.RULE_vacuum_relation);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7721;
            this.qualified_name();
            this.state = 7723;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 7722;
                this.name_list_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuum_relation_list(): Vacuum_relation_listContext {
        let localContext = new Vacuum_relation_listContext(this.context, this.state);
        this.enterRule(localContext, 878, PostgreSQLParser.RULE_vacuum_relation_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7725;
            this.vacuum_relation();
            this.state = 7730;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7726;
                this.match(PostgreSQLParser.COMMA);
                this.state = 7727;
                this.vacuum_relation();
                }
                }
                this.state = 7732;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public vacuum_relation_list_(): Vacuum_relation_list_Context {
        let localContext = new Vacuum_relation_list_Context(this.context, this.state);
        this.enterRule(localContext, 880, PostgreSQLParser.RULE_vacuum_relation_list_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7733;
            this.vacuum_relation_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainstmt(): ExplainstmtContext {
        let localContext = new ExplainstmtContext(this.context, this.state);
        this.enterRule(localContext, 882, PostgreSQLParser.RULE_explainstmt);
        let _la: number;
        try {
            this.state = 7753;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 651, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7735;
                this.match(PostgreSQLParser.EXPLAIN);
                this.state = 7736;
                this.explainablestmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7737;
                this.match(PostgreSQLParser.EXPLAIN);
                this.state = 7738;
                this.analyze_keyword();
                this.state = 7740;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 166) {
                    {
                    this.state = 7739;
                    this.verbose_();
                    }
                }

                this.state = 7742;
                this.explainablestmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7744;
                this.match(PostgreSQLParser.EXPLAIN);
                this.state = 7745;
                this.match(PostgreSQLParser.VERBOSE);
                this.state = 7746;
                this.explainablestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7747;
                this.match(PostgreSQLParser.EXPLAIN);
                this.state = 7748;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7749;
                this.explain_option_list();
                this.state = 7750;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 7751;
                this.explainablestmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainablestmt(): ExplainablestmtContext {
        let localContext = new ExplainablestmtContext(this.context, this.state);
        this.enterRule(localContext, 884, PostgreSQLParser.RULE_explainablestmt);
        try {
            this.state = 7764;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 652, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7755;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7756;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7757;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7758;
                this.deletestmt();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 7759;
                this.declarecursorstmt();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 7760;
                this.createasstmt();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 7761;
                this.creatematviewstmt();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 7762;
                this.refreshmatviewstmt();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 7763;
                this.executestmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explain_option_list(): Explain_option_listContext {
        let localContext = new Explain_option_listContext(this.context, this.state);
        this.enterRule(localContext, 886, PostgreSQLParser.RULE_explain_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7766;
            this.explain_option_elem();
            this.state = 7771;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7767;
                this.match(PostgreSQLParser.COMMA);
                this.state = 7768;
                this.explain_option_elem();
                }
                }
                this.state = 7773;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explain_option_elem(): Explain_option_elemContext {
        let localContext = new Explain_option_elemContext(this.context, this.state);
        this.enterRule(localContext, 888, PostgreSQLParser.RULE_explain_option_elem);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7774;
            this.explain_option_name();
            this.state = 7776;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 12)) & ~0x1F) === 0 && ((1 << (_la - 12)) & 3220963331) !== 0) || ((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & 8388607) !== 0) || _la === 98 || _la === 118 || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966273) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109073479) !== 0) || _la === 587) {
                {
                this.state = 7775;
                this.explain_option_arg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explain_option_name(): Explain_option_nameContext {
        let localContext = new Explain_option_nameContext(this.context, this.state);
        this.enterRule(localContext, 890, PostgreSQLParser.RULE_explain_option_name);
        try {
            this.state = 7780;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7778;
                this.nonreservedword();
                }
                break;
            case PostgreSQLParser.ANALYSE:
            case PostgreSQLParser.ANALYZE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7779;
                this.analyze_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explain_option_arg(): Explain_option_argContext {
        let localContext = new Explain_option_argContext(this.context, this.state);
        this.enterRule(localContext, 892, PostgreSQLParser.RULE_explain_option_arg);
        try {
            this.state = 7784;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7782;
                this.boolean_or_string_();
                }
                break;
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7783;
                this.numericonly();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparestmt(): PreparestmtContext {
        let localContext = new PreparestmtContext(this.context, this.state);
        this.enterRule(localContext, 894, PostgreSQLParser.RULE_preparestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7786;
            this.match(PostgreSQLParser.PREPARE);
            this.state = 7787;
            this.name();
            this.state = 7789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 7788;
                this.prep_type_clause();
                }
            }

            this.state = 7791;
            this.match(PostgreSQLParser.AS);
            this.state = 7792;
            this.preparablestmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prep_type_clause(): Prep_type_clauseContext {
        let localContext = new Prep_type_clauseContext(this.context, this.state);
        this.enterRule(localContext, 896, PostgreSQLParser.RULE_prep_type_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7794;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 7795;
            this.type_list();
            this.state = 7796;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public preparablestmt(): PreparablestmtContext {
        let localContext = new PreparablestmtContext(this.context, this.state);
        this.enterRule(localContext, 898, PostgreSQLParser.RULE_preparablestmt);
        try {
            this.state = 7802;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 658, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7798;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7799;
                this.insertstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7800;
                this.updatestmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7801;
                this.deletestmt();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public executestmt(): ExecutestmtContext {
        let localContext = new ExecutestmtContext(this.context, this.state);
        this.enterRule(localContext, 900, PostgreSQLParser.RULE_executestmt);
        let _la: number;
        try {
            this.state = 7842;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 666, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7804;
                this.match(PostgreSQLParser.EXECUTE);
                this.state = 7805;
                this.name();
                this.state = 7807;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 7806;
                    this.execute_param_clause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7809;
                this.match(PostgreSQLParser.CREATE);
                this.state = 7811;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 251 || _la === 283 || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 32773) !== 0)) {
                    {
                    this.state = 7810;
                    this.opttemp();
                    }
                }

                this.state = 7813;
                this.match(PostgreSQLParser.TABLE);
                this.state = 7814;
                this.create_as_target();
                this.state = 7815;
                this.match(PostgreSQLParser.AS);
                this.state = 7816;
                this.match(PostgreSQLParser.EXECUTE);
                this.state = 7817;
                this.name();
                this.state = 7819;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 7818;
                    this.execute_param_clause();
                    }
                }

                this.state = 7822;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 7821;
                    this.with_data_();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7824;
                this.match(PostgreSQLParser.CREATE);
                this.state = 7826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 251 || _la === 283 || ((((_la - 383)) & ~0x1F) === 0 && ((1 << (_la - 383)) & 32773) !== 0)) {
                    {
                    this.state = 7825;
                    this.opttemp();
                    }
                }

                this.state = 7828;
                this.match(PostgreSQLParser.TABLE);
                this.state = 7829;
                this.match(PostgreSQLParser.IF_P);
                this.state = 7830;
                this.match(PostgreSQLParser.NOT);
                this.state = 7831;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 7832;
                this.create_as_target();
                this.state = 7833;
                this.match(PostgreSQLParser.AS);
                this.state = 7834;
                this.match(PostgreSQLParser.EXECUTE);
                this.state = 7835;
                this.name();
                this.state = 7837;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 7836;
                    this.execute_param_clause();
                    }
                }

                this.state = 7840;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143) {
                    {
                    this.state = 7839;
                    this.with_data_();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public execute_param_clause(): Execute_param_clauseContext {
        let localContext = new Execute_param_clauseContext(this.context, this.state);
        this.enterRule(localContext, 902, PostgreSQLParser.RULE_execute_param_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7844;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 7845;
            this.expr_list();
            this.state = 7846;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deallocatestmt(): DeallocatestmtContext {
        let localContext = new DeallocatestmtContext(this.context, this.state);
        this.enterRule(localContext, 904, PostgreSQLParser.RULE_deallocatestmt);
        try {
            this.state = 7858;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 667, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7848;
                this.match(PostgreSQLParser.DEALLOCATE);
                this.state = 7849;
                this.name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7850;
                this.match(PostgreSQLParser.DEALLOCATE);
                this.state = 7851;
                this.match(PostgreSQLParser.PREPARE);
                this.state = 7852;
                this.name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7853;
                this.match(PostgreSQLParser.DEALLOCATE);
                this.state = 7854;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7855;
                this.match(PostgreSQLParser.DEALLOCATE);
                this.state = 7856;
                this.match(PostgreSQLParser.PREPARE);
                this.state = 7857;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertstmt(): InsertstmtContext {
        let localContext = new InsertstmtContext(this.context, this.state);
        this.enterRule(localContext, 906, PostgreSQLParser.RULE_insertstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7861;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 7860;
                this.with_clause_();
                }
            }

            this.state = 7863;
            this.match(PostgreSQLParser.INSERT);
            this.state = 7864;
            this.match(PostgreSQLParser.INTO);
            this.state = 7865;
            this.insert_target();
            this.state = 7866;
            this.insert_rest();
            this.state = 7868;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 7867;
                this.on_conflict_();
                }
            }

            this.state = 7871;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 125) {
                {
                this.state = 7870;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_target(): Insert_targetContext {
        let localContext = new Insert_targetContext(this.context, this.state);
        this.enterRule(localContext, 908, PostgreSQLParser.RULE_insert_target);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7873;
            this.qualified_name();
            this.state = 7876;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 7874;
                this.match(PostgreSQLParser.AS);
                this.state = 7875;
                this.colid();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_rest(): Insert_restContext {
        let localContext = new Insert_restContext(this.context, this.state);
        this.enterRule(localContext, 910, PostgreSQLParser.RULE_insert_rest);
        let _la: number;
        try {
            this.state = 7897;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 673, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7878;
                this.selectstmt();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7879;
                this.match(PostgreSQLParser.OVERRIDING);
                this.state = 7880;
                this.override_kind();
                this.state = 7881;
                this.match(PostgreSQLParser.VALUE_P);
                this.state = 7882;
                this.selectstmt();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 7884;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7885;
                this.insert_column_list();
                this.state = 7886;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 7891;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 501) {
                    {
                    this.state = 7887;
                    this.match(PostgreSQLParser.OVERRIDING);
                    this.state = 7888;
                    this.override_kind();
                    this.state = 7889;
                    this.match(PostgreSQLParser.VALUE_P);
                    }
                }

                this.state = 7893;
                this.selectstmt();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 7895;
                this.match(PostgreSQLParser.DEFAULT);
                this.state = 7896;
                this.match(PostgreSQLParser.VALUES);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public override_kind(): Override_kindContext {
        let localContext = new Override_kindContext(this.context, this.state);
        this.enterRule(localContext, 912, PostgreSQLParser.RULE_override_kind);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7899;
            _la = this.tokenStream.LA(1);
            if(!(_la === 137 || _la === 380)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_column_list(): Insert_column_listContext {
        let localContext = new Insert_column_listContext(this.context, this.state);
        this.enterRule(localContext, 914, PostgreSQLParser.RULE_insert_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7901;
            this.insert_column_item();
            this.state = 7906;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 7902;
                this.match(PostgreSQLParser.COMMA);
                this.state = 7903;
                this.insert_column_item();
                }
                }
                this.state = 7908;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insert_column_item(): Insert_column_itemContext {
        let localContext = new Insert_column_itemContext(this.context, this.state);
        this.enterRule(localContext, 916, PostgreSQLParser.RULE_insert_column_item);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7909;
            this.colid();
            this.state = 7910;
            this.opt_indirection();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public on_conflict_(): On_conflict_Context {
        let localContext = new On_conflict_Context(this.context, this.state);
        this.enterRule(localContext, 918, PostgreSQLParser.RULE_on_conflict_);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7912;
            this.match(PostgreSQLParser.ON);
            this.state = 7913;
            this.match(PostgreSQLParser.CONFLICT);
            this.state = 7915;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2 || _la === 118) {
                {
                this.state = 7914;
                this.conf_expr_();
                }
            }

            this.state = 7917;
            this.match(PostgreSQLParser.DO);
            this.state = 7925;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.UPDATE:
                {
                this.state = 7918;
                this.match(PostgreSQLParser.UPDATE);
                this.state = 7919;
                this.match(PostgreSQLParser.SET);
                this.state = 7920;
                this.set_clause_list();
                this.state = 7922;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 7921;
                    this.where_clause();
                    }
                }

                }
                break;
            case PostgreSQLParser.NOTHING:
                {
                this.state = 7924;
                this.match(PostgreSQLParser.NOTHING);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conf_expr_(): Conf_expr_Context {
        let localContext = new Conf_expr_Context(this.context, this.state);
        this.enterRule(localContext, 920, PostgreSQLParser.RULE_conf_expr_);
        let _la: number;
        try {
            this.state = 7936;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 7927;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7928;
                this.index_params();
                this.state = 7929;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 7931;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 141) {
                    {
                    this.state = 7930;
                    this.where_clause();
                    }
                }

                }
                break;
            case PostgreSQLParser.ON:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 7933;
                this.match(PostgreSQLParser.ON);
                this.state = 7934;
                this.match(PostgreSQLParser.CONSTRAINT);
                this.state = 7935;
                this.name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public returning_clause(): Returning_clauseContext {
        let localContext = new Returning_clauseContext(this.context, this.state);
        this.enterRule(localContext, 922, PostgreSQLParser.RULE_returning_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7938;
            this.match(PostgreSQLParser.RETURNING);
            this.state = 7939;
            this.target_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mergestmt(): MergestmtContext {
        let localContext = new MergestmtContext(this.context, this.state);
        this.enterRule(localContext, 924, PostgreSQLParser.RULE_mergestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7941;
            this.match(PostgreSQLParser.MERGE);
            this.state = 7943;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 109) {
                {
                this.state = 7942;
                this.match(PostgreSQLParser.INTO);
                }
            }

            this.state = 7945;
            this.qualified_name();
            this.state = 7947;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                {
                this.state = 7946;
                this.alias_clause();
                }
            }

            this.state = 7949;
            this.match(PostgreSQLParser.USING);
            this.state = 7952;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
                {
                this.state = 7950;
                this.select_with_parens();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                {
                this.state = 7951;
                this.qualified_name();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 7955;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                {
                this.state = 7954;
                this.alias_clause();
                }
            }

            this.state = 7957;
            this.match(PostgreSQLParser.ON);
            this.state = 7958;
            this.a_expr();
            this.state = 7967;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 686, this.context) ) {
            case 1:
                {
                this.state = 7959;
                this.merge_insert_clause();
                this.state = 7961;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 684, this.context) ) {
                case 1:
                    {
                    this.state = 7960;
                    this.merge_update_clause();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                this.state = 7963;
                this.merge_update_clause();
                this.state = 7965;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 685, this.context) ) {
                case 1:
                    {
                    this.state = 7964;
                    this.merge_insert_clause();
                    }
                    break;
                }
                }
                break;
            }
            this.state = 7970;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 140) {
                {
                this.state = 7969;
                this.merge_delete_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_insert_clause(): Merge_insert_clauseContext {
        let localContext = new Merge_insert_clauseContext(this.context, this.state);
        this.enterRule(localContext, 926, PostgreSQLParser.RULE_merge_insert_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7972;
            this.match(PostgreSQLParser.WHEN);
            this.state = 7973;
            this.match(PostgreSQLParser.NOT);
            this.state = 7974;
            this.match(PostgreSQLParser.MATCHED);
            this.state = 7977;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 7975;
                this.match(PostgreSQLParser.AND);
                this.state = 7976;
                this.a_expr();
                }
            }

            this.state = 7980;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 131) {
                {
                this.state = 7979;
                this.match(PostgreSQLParser.THEN);
                }
            }

            this.state = 7982;
            this.match(PostgreSQLParser.INSERT);
            this.state = 7987;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 7983;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 7984;
                this.insert_column_list();
                this.state = 7985;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
            }

            this.state = 7989;
            this.values_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_update_clause(): Merge_update_clauseContext {
        let localContext = new Merge_update_clauseContext(this.context, this.state);
        this.enterRule(localContext, 928, PostgreSQLParser.RULE_merge_update_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 7991;
            this.match(PostgreSQLParser.WHEN);
            this.state = 7992;
            this.match(PostgreSQLParser.MATCHED);
            this.state = 7995;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 71) {
                {
                this.state = 7993;
                this.match(PostgreSQLParser.AND);
                this.state = 7994;
                this.a_expr();
                }
            }

            this.state = 7998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 131) {
                {
                this.state = 7997;
                this.match(PostgreSQLParser.THEN);
                }
            }

            this.state = 8000;
            this.match(PostgreSQLParser.UPDATE);
            this.state = 8001;
            this.match(PostgreSQLParser.SET);
            this.state = 8002;
            this.set_clause_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public merge_delete_clause(): Merge_delete_clauseContext {
        let localContext = new Merge_delete_clauseContext(this.context, this.state);
        this.enterRule(localContext, 930, PostgreSQLParser.RULE_merge_delete_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8004;
            this.match(PostgreSQLParser.WHEN);
            this.state = 8005;
            this.match(PostgreSQLParser.MATCHED);
            this.state = 8007;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 131) {
                {
                this.state = 8006;
                this.match(PostgreSQLParser.THEN);
                }
            }

            this.state = 8009;
            this.match(PostgreSQLParser.DELETE_P);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deletestmt(): DeletestmtContext {
        let localContext = new DeletestmtContext(this.context, this.state);
        this.enterRule(localContext, 932, PostgreSQLParser.RULE_deletestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8012;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 8011;
                this.with_clause_();
                }
            }

            this.state = 8014;
            this.match(PostgreSQLParser.DELETE_P);
            this.state = 8015;
            this.match(PostgreSQLParser.FROM);
            this.state = 8016;
            this.relation_expr_opt_alias();
            this.state = 8018;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 138) {
                {
                this.state = 8017;
                this.using_clause();
                }
            }

            this.state = 8021;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 141) {
                {
                this.state = 8020;
                this.where_or_current_clause();
                }
            }

            this.state = 8024;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 125) {
                {
                this.state = 8023;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public using_clause(): Using_clauseContext {
        let localContext = new Using_clauseContext(this.context, this.state);
        this.enterRule(localContext, 934, PostgreSQLParser.RULE_using_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8026;
            this.match(PostgreSQLParser.USING);
            this.state = 8027;
            this.from_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lockstmt(): LockstmtContext {
        let localContext = new LockstmtContext(this.context, this.state);
        this.enterRule(localContext, 936, PostgreSQLParser.RULE_lockstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8029;
            this.match(PostgreSQLParser.LOCK_P);
            this.state = 8031;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 130) {
                {
                this.state = 8030;
                this.table_();
                }
            }

            this.state = 8033;
            this.relation_expr_list();
            this.state = 8035;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106) {
                {
                this.state = 8034;
                this.lock_();
                }
            }

            this.state = 8038;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 303) {
                {
                this.state = 8037;
                this.nowait_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lock_(): Lock_Context {
        let localContext = new Lock_Context(this.context, this.state);
        this.enterRule(localContext, 938, PostgreSQLParser.RULE_lock_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8040;
            this.match(PostgreSQLParser.IN_P);
            this.state = 8041;
            this.lock_type();
            this.state = 8042;
            this.match(PostgreSQLParser.MODE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lock_type(): Lock_typeContext {
        let localContext = new Lock_typeContext(this.context, this.state);
        this.enterRule(localContext, 940, PostgreSQLParser.RULE_lock_type);
        let _la: number;
        try {
            this.state = 8056;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.ACCESS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8044;
                this.match(PostgreSQLParser.ACCESS);
                this.state = 8045;
                _la = this.tokenStream.LA(1);
                if(!(_la === 239 || _la === 365)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSQLParser.ROW:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8046;
                this.match(PostgreSQLParser.ROW);
                this.state = 8047;
                _la = this.tokenStream.LA(1);
                if(!(_la === 239 || _la === 365)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case PostgreSQLParser.SHARE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8048;
                this.match(PostgreSQLParser.SHARE);
                this.state = 8053;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.UPDATE:
                    {
                    this.state = 8049;
                    this.match(PostgreSQLParser.UPDATE);
                    this.state = 8050;
                    this.match(PostgreSQLParser.EXCLUSIVE);
                    }
                    break;
                case PostgreSQLParser.ROW:
                    {
                    this.state = 8051;
                    this.match(PostgreSQLParser.ROW);
                    this.state = 8052;
                    this.match(PostgreSQLParser.EXCLUSIVE);
                    }
                    break;
                case PostgreSQLParser.MODE:
                    break;
                default:
                    break;
                }
                }
                break;
            case PostgreSQLParser.EXCLUSIVE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8055;
                this.match(PostgreSQLParser.EXCLUSIVE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nowait_(): Nowait_Context {
        let localContext = new Nowait_Context(this.context, this.state);
        this.enterRule(localContext, 942, PostgreSQLParser.RULE_nowait_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8058;
            this.match(PostgreSQLParser.NOWAIT);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nowait_or_skip_(): Nowait_or_skip_Context {
        let localContext = new Nowait_or_skip_Context(this.context, this.state);
        this.enterRule(localContext, 944, PostgreSQLParser.RULE_nowait_or_skip_);
        try {
            this.state = 8063;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.NOWAIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8060;
                this.match(PostgreSQLParser.NOWAIT);
                }
                break;
            case PostgreSQLParser.SKIP_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8061;
                this.match(PostgreSQLParser.SKIP_P);
                this.state = 8062;
                this.match(PostgreSQLParser.LOCKED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public updatestmt(): UpdatestmtContext {
        let localContext = new UpdatestmtContext(this.context, this.state);
        this.enterRule(localContext, 946, PostgreSQLParser.RULE_updatestmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8066;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143) {
                {
                this.state = 8065;
                this.with_clause_();
                }
            }

            this.state = 8068;
            this.match(PostgreSQLParser.UPDATE);
            this.state = 8069;
            this.relation_expr_opt_alias();
            this.state = 8070;
            this.match(PostgreSQLParser.SET);
            this.state = 8071;
            this.set_clause_list();
            this.state = 8073;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 102) {
                {
                this.state = 8072;
                this.from_clause();
                }
            }

            this.state = 8076;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 141) {
                {
                this.state = 8075;
                this.where_or_current_clause();
                }
            }

            this.state = 8079;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 125) {
                {
                this.state = 8078;
                this.returning_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause_list(): Set_clause_listContext {
        let localContext = new Set_clause_listContext(this.context, this.state);
        this.enterRule(localContext, 948, PostgreSQLParser.RULE_set_clause_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8081;
            this.set_clause();
            this.state = 8086;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8082;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8083;
                this.set_clause();
                }
                }
                this.state = 8088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_clause(): Set_clauseContext {
        let localContext = new Set_clauseContext(this.context, this.state);
        this.enterRule(localContext, 950, PostgreSQLParser.RULE_set_clause);
        try {
            this.state = 8099;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8089;
                this.set_target();
                this.state = 8090;
                this.match(PostgreSQLParser.EQUAL);
                this.state = 8091;
                this.a_expr();
                }
                break;
            case PostgreSQLParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8093;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8094;
                this.set_target_list();
                this.state = 8095;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 8096;
                this.match(PostgreSQLParser.EQUAL);
                this.state = 8097;
                this.a_expr();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target(): Set_targetContext {
        let localContext = new Set_targetContext(this.context, this.state);
        this.enterRule(localContext, 952, PostgreSQLParser.RULE_set_target);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8101;
            this.colid();
            this.state = 8102;
            this.opt_indirection();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public set_target_list(): Set_target_listContext {
        let localContext = new Set_target_listContext(this.context, this.state);
        this.enterRule(localContext, 954, PostgreSQLParser.RULE_set_target_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8104;
            this.set_target();
            this.state = 8109;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8105;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8106;
                this.set_target();
                }
                }
                this.state = 8111;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public declarecursorstmt(): DeclarecursorstmtContext {
        let localContext = new DeclarecursorstmtContext(this.context, this.state);
        this.enterRule(localContext, 956, PostgreSQLParser.RULE_declarecursorstmt);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8112;
            this.match(PostgreSQLParser.DECLARE);
            this.state = 8113;
            this.cursor_name();
            this.state = 8114;
            this.cursor_options();
            this.state = 8115;
            this.match(PostgreSQLParser.CURSOR);
            this.state = 8117;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 143 || _la === 410) {
                {
                this.state = 8116;
                this.hold_();
                }
            }

            this.state = 8119;
            this.match(PostgreSQLParser.FOR);
            this.state = 8120;
            this.selectstmt();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursor_name(): Cursor_nameContext {
        let localContext = new Cursor_nameContext(this.context, this.state);
        this.enterRule(localContext, 958, PostgreSQLParser.RULE_cursor_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8122;
            this.name();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cursor_options(): Cursor_optionsContext {
        let localContext = new Cursor_optionsContext(this.context, this.state);
        this.enterRule(localContext, 960, PostgreSQLParser.RULE_cursor_options);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8131;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 145 || _la === 269 || _la === 300 || _la === 355) {
                {
                this.state = 8129;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.NO:
                    {
                    this.state = 8124;
                    this.match(PostgreSQLParser.NO);
                    this.state = 8125;
                    this.match(PostgreSQLParser.SCROLL);
                    }
                    break;
                case PostgreSQLParser.SCROLL:
                    {
                    this.state = 8126;
                    this.match(PostgreSQLParser.SCROLL);
                    }
                    break;
                case PostgreSQLParser.BINARY:
                    {
                    this.state = 8127;
                    this.match(PostgreSQLParser.BINARY);
                    }
                    break;
                case PostgreSQLParser.INSENSITIVE:
                    {
                    this.state = 8128;
                    this.match(PostgreSQLParser.INSENSITIVE);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 8133;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hold_(): Hold_Context {
        let localContext = new Hold_Context(this.context, this.state);
        this.enterRule(localContext, 962, PostgreSQLParser.RULE_hold_);
        try {
            this.state = 8138;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8134;
                this.match(PostgreSQLParser.WITH);
                this.state = 8135;
                this.match(PostgreSQLParser.HOLD);
                }
                break;
            case PostgreSQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8136;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 8137;
                this.match(PostgreSQLParser.HOLD);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectstmt(): SelectstmtContext {
        let localContext = new SelectstmtContext(this.context, this.state);
        this.enterRule(localContext, 964, PostgreSQLParser.RULE_selectstmt);
        try {
            this.state = 8142;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 715, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8140;
                this.select_no_parens();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8141;
                this.select_with_parens();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_with_parens(): Select_with_parensContext {
        let localContext = new Select_with_parensContext(this.context, this.state);
        this.enterRule(localContext, 966, PostgreSQLParser.RULE_select_with_parens);
        try {
            this.state = 8152;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 716, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8144;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8145;
                this.select_no_parens();
                this.state = 8146;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8148;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8149;
                this.select_with_parens();
                this.state = 8150;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_no_parens(): Select_no_parensContext {
        let localContext = new Select_no_parensContext(this.context, this.state);
        this.enterRule(localContext, 968, PostgreSQLParser.RULE_select_no_parens);
        let _la: number;
        try {
            this.state = 8183;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
            case PostgreSQLParser.SELECT:
            case PostgreSQLParser.TABLE:
            case PostgreSQLParser.VALUES:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8154;
                this.select_clause();
                this.state = 8156;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 8155;
                    this.sort_clause_();
                    }
                }

                this.state = 8166;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.FOR:
                    {
                    this.state = 8158;
                    this.for_locking_clause();
                    this.state = 8160;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 270337) !== 0)) {
                        {
                        this.state = 8159;
                        this.select_limit_();
                        }
                    }

                    }
                    break;
                case PostgreSQLParser.FETCH:
                case PostgreSQLParser.LIMIT:
                case PostgreSQLParser.OFFSET:
                    {
                    this.state = 8162;
                    this.select_limit();
                    this.state = 8164;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 8163;
                        this.for_locking_clause_();
                        }
                    }

                    }
                    break;
                case PostgreSQLParser.EOF:
                case PostgreSQLParser.CLOSE_PAREN:
                case PostgreSQLParser.SEMI:
                case PostgreSQLParser.FORMAT_LA:
                case PostgreSQLParser.CREATE:
                case PostgreSQLParser.GRANT:
                case PostgreSQLParser.ON:
                case PostgreSQLParser.RETURNING:
                case PostgreSQLParser.WITH:
                    break;
                default:
                    break;
                }
                }
                break;
            case PostgreSQLParser.WITH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8168;
                this.with_clause();
                this.state = 8169;
                this.select_clause();
                this.state = 8171;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 8170;
                    this.sort_clause_();
                    }
                }

                this.state = 8181;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.FOR:
                    {
                    this.state = 8173;
                    this.for_locking_clause();
                    this.state = 8175;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 99)) & ~0x1F) === 0 && ((1 << (_la - 99)) & 270337) !== 0)) {
                        {
                        this.state = 8174;
                        this.select_limit_();
                        }
                    }

                    }
                    break;
                case PostgreSQLParser.FETCH:
                case PostgreSQLParser.LIMIT:
                case PostgreSQLParser.OFFSET:
                    {
                    this.state = 8177;
                    this.select_limit();
                    this.state = 8179;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 100) {
                        {
                        this.state = 8178;
                        this.for_locking_clause_();
                        }
                    }

                    }
                    break;
                case PostgreSQLParser.EOF:
                case PostgreSQLParser.CLOSE_PAREN:
                case PostgreSQLParser.SEMI:
                case PostgreSQLParser.FORMAT_LA:
                case PostgreSQLParser.CREATE:
                case PostgreSQLParser.GRANT:
                case PostgreSQLParser.ON:
                case PostgreSQLParser.RETURNING:
                case PostgreSQLParser.WITH:
                    break;
                default:
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_clause(): Select_clauseContext {
        let localContext = new Select_clauseContext(this.context, this.state);
        this.enterRule(localContext, 970, PostgreSQLParser.RULE_select_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8185;
            this.simple_select_intersect();
            this.state = 8193;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 97 || _la === 135) {
                {
                {
                this.state = 8186;
                _la = this.tokenStream.LA(1);
                if(!(_la === 97 || _la === 135)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8188;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 94) {
                    {
                    this.state = 8187;
                    this.all_or_distinct();
                    }
                }

                this.state = 8190;
                this.simple_select_intersect();
                }
                }
                this.state = 8195;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_select_intersect(): Simple_select_intersectContext {
        let localContext = new Simple_select_intersectContext(this.context, this.state);
        this.enterRule(localContext, 972, PostgreSQLParser.RULE_simple_select_intersect);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8196;
            this.simple_select_pramary();
            this.state = 8204;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 108) {
                {
                {
                this.state = 8197;
                this.match(PostgreSQLParser.INTERSECT);
                this.state = 8199;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 94) {
                    {
                    this.state = 8198;
                    this.all_or_distinct();
                    }
                }

                this.state = 8201;
                this.simple_select_pramary();
                }
                }
                this.state = 8206;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simple_select_pramary(): Simple_select_pramaryContext {
        let localContext = new Simple_select_pramaryContext(this.context, this.state);
        this.enterRule(localContext, 974, PostgreSQLParser.RULE_simple_select_pramary);
        let _la: number;
        try {
            this.state = 8258;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.SELECT:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 8207;
                this.match(PostgreSQLParser.SELECT);
                this.state = 8252;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.EOF:
                case PostgreSQLParser.OPEN_PAREN:
                case PostgreSQLParser.CLOSE_PAREN:
                case PostgreSQLParser.SEMI:
                case PostgreSQLParser.STAR:
                case PostgreSQLParser.PLUS:
                case PostgreSQLParser.MINUS:
                case PostgreSQLParser.PARAM:
                case PostgreSQLParser.Operator:
                case PostgreSQLParser.JSON:
                case PostgreSQLParser.JSON_ARRAY:
                case PostgreSQLParser.JSON_ARRAYAGG:
                case PostgreSQLParser.JSON_EXISTS:
                case PostgreSQLParser.JSON_OBJECT:
                case PostgreSQLParser.JSON_OBJECTAGG:
                case PostgreSQLParser.JSON_QUERY:
                case PostgreSQLParser.JSON_SCALAR:
                case PostgreSQLParser.JSON_SERIALIZE:
                case PostgreSQLParser.JSON_TABLE:
                case PostgreSQLParser.JSON_VALUE:
                case PostgreSQLParser.MERGE_ACTION:
                case PostgreSQLParser.SYSTEM_USER:
                case PostgreSQLParser.ABSENT:
                case PostgreSQLParser.ASENSITIVE:
                case PostgreSQLParser.ATOMIC:
                case PostgreSQLParser.BREADTH:
                case PostgreSQLParser.COMPRESSION:
                case PostgreSQLParser.CONDITIONAL:
                case PostgreSQLParser.DEPTH:
                case PostgreSQLParser.EMPTY_P:
                case PostgreSQLParser.FINALIZE:
                case PostgreSQLParser.INDENT:
                case PostgreSQLParser.KEEP:
                case PostgreSQLParser.KEYS:
                case PostgreSQLParser.NESTED:
                case PostgreSQLParser.OMIT:
                case PostgreSQLParser.PARAMETER:
                case PostgreSQLParser.PATH:
                case PostgreSQLParser.PLAN:
                case PostgreSQLParser.QUOTES:
                case PostgreSQLParser.SCALAR:
                case PostgreSQLParser.SOURCE:
                case PostgreSQLParser.STRING_P:
                case PostgreSQLParser.TARGET:
                case PostgreSQLParser.UNCONDITIONAL:
                case PostgreSQLParser.PERIOD:
                case PostgreSQLParser.FORMAT_LA:
                case PostgreSQLParser.ALL:
                case PostgreSQLParser.ARRAY:
                case PostgreSQLParser.CASE:
                case PostgreSQLParser.CAST:
                case PostgreSQLParser.CREATE:
                case PostgreSQLParser.CURRENT_CATALOG:
                case PostgreSQLParser.CURRENT_DATE:
                case PostgreSQLParser.CURRENT_ROLE:
                case PostgreSQLParser.CURRENT_TIME:
                case PostgreSQLParser.CURRENT_TIMESTAMP:
                case PostgreSQLParser.CURRENT_USER:
                case PostgreSQLParser.DEFAULT:
                case PostgreSQLParser.EXCEPT:
                case PostgreSQLParser.FALSE_P:
                case PostgreSQLParser.FETCH:
                case PostgreSQLParser.FOR:
                case PostgreSQLParser.FROM:
                case PostgreSQLParser.GRANT:
                case PostgreSQLParser.GROUP_P:
                case PostgreSQLParser.HAVING:
                case PostgreSQLParser.INTERSECT:
                case PostgreSQLParser.INTO:
                case PostgreSQLParser.LIMIT:
                case PostgreSQLParser.LOCALTIME:
                case PostgreSQLParser.LOCALTIMESTAMP:
                case PostgreSQLParser.NOT:
                case PostgreSQLParser.NULL_P:
                case PostgreSQLParser.OFFSET:
                case PostgreSQLParser.ON:
                case PostgreSQLParser.ORDER:
                case PostgreSQLParser.RETURNING:
                case PostgreSQLParser.SESSION_USER:
                case PostgreSQLParser.TRUE_P:
                case PostgreSQLParser.UNION:
                case PostgreSQLParser.UNIQUE:
                case PostgreSQLParser.USER:
                case PostgreSQLParser.WHERE:
                case PostgreSQLParser.WINDOW:
                case PostgreSQLParser.WITH:
                case PostgreSQLParser.AUTHORIZATION:
                case PostgreSQLParser.BINARY:
                case PostgreSQLParser.COLLATION:
                case PostgreSQLParser.CONCURRENTLY:
                case PostgreSQLParser.CROSS:
                case PostgreSQLParser.CURRENT_SCHEMA:
                case PostgreSQLParser.FREEZE:
                case PostgreSQLParser.FULL:
                case PostgreSQLParser.ILIKE:
                case PostgreSQLParser.INNER_P:
                case PostgreSQLParser.IS:
                case PostgreSQLParser.ISNULL:
                case PostgreSQLParser.JOIN:
                case PostgreSQLParser.LEFT:
                case PostgreSQLParser.LIKE:
                case PostgreSQLParser.NATURAL:
                case PostgreSQLParser.NOTNULL:
                case PostgreSQLParser.OUTER_P:
                case PostgreSQLParser.OVER:
                case PostgreSQLParser.OVERLAPS:
                case PostgreSQLParser.RIGHT:
                case PostgreSQLParser.SIMILAR:
                case PostgreSQLParser.VERBOSE:
                case PostgreSQLParser.ABORT_P:
                case PostgreSQLParser.ABSOLUTE_P:
                case PostgreSQLParser.ACCESS:
                case PostgreSQLParser.ACTION:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ADMIN:
                case PostgreSQLParser.AFTER:
                case PostgreSQLParser.AGGREGATE:
                case PostgreSQLParser.ALSO:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.ALWAYS:
                case PostgreSQLParser.ASSERTION:
                case PostgreSQLParser.ASSIGNMENT:
                case PostgreSQLParser.AT:
                case PostgreSQLParser.ATTRIBUTE:
                case PostgreSQLParser.BACKWARD:
                case PostgreSQLParser.BEFORE:
                case PostgreSQLParser.BEGIN_P:
                case PostgreSQLParser.BY:
                case PostgreSQLParser.CACHE:
                case PostgreSQLParser.CALLED:
                case PostgreSQLParser.CASCADE:
                case PostgreSQLParser.CASCADED:
                case PostgreSQLParser.CATALOG:
                case PostgreSQLParser.CHAIN:
                case PostgreSQLParser.CHARACTERISTICS:
                case PostgreSQLParser.CHECKPOINT:
                case PostgreSQLParser.CLASS:
                case PostgreSQLParser.CLOSE:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.COMMENT:
                case PostgreSQLParser.COMMENTS:
                case PostgreSQLParser.COMMIT:
                case PostgreSQLParser.COMMITTED:
                case PostgreSQLParser.CONFIGURATION:
                case PostgreSQLParser.CONNECTION:
                case PostgreSQLParser.CONSTRAINTS:
                case PostgreSQLParser.CONTENT_P:
                case PostgreSQLParser.CONTINUE_P:
                case PostgreSQLParser.CONVERSION_P:
                case PostgreSQLParser.COPY:
                case PostgreSQLParser.COST:
                case PostgreSQLParser.CSV:
                case PostgreSQLParser.CURSOR:
                case PostgreSQLParser.CYCLE:
                case PostgreSQLParser.DATA_P:
                case PostgreSQLParser.DATABASE:
                case PostgreSQLParser.DAY_P:
                case PostgreSQLParser.DEALLOCATE:
                case PostgreSQLParser.DECLARE:
                case PostgreSQLParser.DEFAULTS:
                case PostgreSQLParser.DEFERRED:
                case PostgreSQLParser.DEFINER:
                case PostgreSQLParser.DELETE_P:
                case PostgreSQLParser.DELIMITER:
                case PostgreSQLParser.DELIMITERS:
                case PostgreSQLParser.DICTIONARY:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DISCARD:
                case PostgreSQLParser.DOCUMENT_P:
                case PostgreSQLParser.DOMAIN_P:
                case PostgreSQLParser.DOUBLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.EACH:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.ENCODING:
                case PostgreSQLParser.ENCRYPTED:
                case PostgreSQLParser.ENUM_P:
                case PostgreSQLParser.ESCAPE:
                case PostgreSQLParser.EVENT:
                case PostgreSQLParser.EXCLUDE:
                case PostgreSQLParser.EXCLUDING:
                case PostgreSQLParser.EXCLUSIVE:
                case PostgreSQLParser.EXECUTE:
                case PostgreSQLParser.EXPLAIN:
                case PostgreSQLParser.EXTENSION:
                case PostgreSQLParser.EXTERNAL:
                case PostgreSQLParser.FAMILY:
                case PostgreSQLParser.FIRST_P:
                case PostgreSQLParser.FOLLOWING:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.FORWARD:
                case PostgreSQLParser.FUNCTION:
                case PostgreSQLParser.FUNCTIONS:
                case PostgreSQLParser.GLOBAL:
                case PostgreSQLParser.GRANTED:
                case PostgreSQLParser.HANDLER:
                case PostgreSQLParser.HEADER_P:
                case PostgreSQLParser.HOLD:
                case PostgreSQLParser.HOUR_P:
                case PostgreSQLParser.IDENTITY_P:
                case PostgreSQLParser.IF_P:
                case PostgreSQLParser.IMMEDIATE:
                case PostgreSQLParser.IMMUTABLE:
                case PostgreSQLParser.IMPLICIT_P:
                case PostgreSQLParser.INCLUDING:
                case PostgreSQLParser.INCREMENT:
                case PostgreSQLParser.INDEX:
                case PostgreSQLParser.INDEXES:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.INHERITS:
                case PostgreSQLParser.INLINE_P:
                case PostgreSQLParser.INSENSITIVE:
                case PostgreSQLParser.INSERT:
                case PostgreSQLParser.INSTEAD:
                case PostgreSQLParser.INVOKER:
                case PostgreSQLParser.ISOLATION:
                case PostgreSQLParser.KEY:
                case PostgreSQLParser.LABEL:
                case PostgreSQLParser.LANGUAGE:
                case PostgreSQLParser.LARGE_P:
                case PostgreSQLParser.LAST_P:
                case PostgreSQLParser.LEAKPROOF:
                case PostgreSQLParser.LEVEL:
                case PostgreSQLParser.LISTEN:
                case PostgreSQLParser.LOAD:
                case PostgreSQLParser.LOCAL:
                case PostgreSQLParser.LOCATION:
                case PostgreSQLParser.LOCK_P:
                case PostgreSQLParser.MAPPING:
                case PostgreSQLParser.MATCH:
                case PostgreSQLParser.MATCHED:
                case PostgreSQLParser.MATERIALIZED:
                case PostgreSQLParser.MAXVALUE:
                case PostgreSQLParser.MERGE:
                case PostgreSQLParser.MINUTE_P:
                case PostgreSQLParser.MINVALUE:
                case PostgreSQLParser.MODE:
                case PostgreSQLParser.MONTH_P:
                case PostgreSQLParser.MOVE:
                case PostgreSQLParser.NAME_P:
                case PostgreSQLParser.NAMES:
                case PostgreSQLParser.NEXT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.NOTHING:
                case PostgreSQLParser.NOTIFY:
                case PostgreSQLParser.NOWAIT:
                case PostgreSQLParser.NULLS_P:
                case PostgreSQLParser.OBJECT_P:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OFF:
                case PostgreSQLParser.OIDS:
                case PostgreSQLParser.OPERATOR:
                case PostgreSQLParser.OPTION:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNED:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.PARSER:
                case PostgreSQLParser.PARTIAL:
                case PostgreSQLParser.PARTITION:
                case PostgreSQLParser.PASSING:
                case PostgreSQLParser.PASSWORD:
                case PostgreSQLParser.PLANS:
                case PostgreSQLParser.PRECEDING:
                case PostgreSQLParser.PREPARE:
                case PostgreSQLParser.PREPARED:
                case PostgreSQLParser.PRESERVE:
                case PostgreSQLParser.PRIOR:
                case PostgreSQLParser.PRIVILEGES:
                case PostgreSQLParser.PROCEDURAL:
                case PostgreSQLParser.PROCEDURE:
                case PostgreSQLParser.PROGRAM:
                case PostgreSQLParser.QUOTE:
                case PostgreSQLParser.RANGE:
                case PostgreSQLParser.READ:
                case PostgreSQLParser.REASSIGN:
                case PostgreSQLParser.RECURSIVE:
                case PostgreSQLParser.REF:
                case PostgreSQLParser.REFRESH:
                case PostgreSQLParser.REINDEX:
                case PostgreSQLParser.RELATIVE_P:
                case PostgreSQLParser.RELEASE:
                case PostgreSQLParser.RENAME:
                case PostgreSQLParser.REPEATABLE:
                case PostgreSQLParser.REPLACE:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.RESTART:
                case PostgreSQLParser.RESTRICT:
                case PostgreSQLParser.RETURNS:
                case PostgreSQLParser.REVOKE:
                case PostgreSQLParser.ROLE:
                case PostgreSQLParser.ROLLBACK:
                case PostgreSQLParser.ROWS:
                case PostgreSQLParser.RULE:
                case PostgreSQLParser.SAVEPOINT:
                case PostgreSQLParser.SCHEMA:
                case PostgreSQLParser.SCROLL:
                case PostgreSQLParser.SEARCH:
                case PostgreSQLParser.SECOND_P:
                case PostgreSQLParser.SECURITY:
                case PostgreSQLParser.SEQUENCE:
                case PostgreSQLParser.SEQUENCES:
                case PostgreSQLParser.SERIALIZABLE:
                case PostgreSQLParser.SERVER:
                case PostgreSQLParser.SESSION:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.SHARE:
                case PostgreSQLParser.SHOW:
                case PostgreSQLParser.SIMPLE:
                case PostgreSQLParser.SNAPSHOT:
                case PostgreSQLParser.STABLE:
                case PostgreSQLParser.STANDALONE_P:
                case PostgreSQLParser.START:
                case PostgreSQLParser.STATEMENT:
                case PostgreSQLParser.STATISTICS:
                case PostgreSQLParser.STDIN:
                case PostgreSQLParser.STDOUT:
                case PostgreSQLParser.STORAGE:
                case PostgreSQLParser.STRICT_P:
                case PostgreSQLParser.STRIP_P:
                case PostgreSQLParser.SYSID:
                case PostgreSQLParser.SYSTEM_P:
                case PostgreSQLParser.TABLES:
                case PostgreSQLParser.TABLESPACE:
                case PostgreSQLParser.TEMP:
                case PostgreSQLParser.TEMPLATE:
                case PostgreSQLParser.TEMPORARY:
                case PostgreSQLParser.TEXT_P:
                case PostgreSQLParser.TRANSACTION:
                case PostgreSQLParser.TRIGGER:
                case PostgreSQLParser.TRUNCATE:
                case PostgreSQLParser.TRUSTED:
                case PostgreSQLParser.TYPE_P:
                case PostgreSQLParser.TYPES_P:
                case PostgreSQLParser.UNBOUNDED:
                case PostgreSQLParser.UNCOMMITTED:
                case PostgreSQLParser.UNENCRYPTED:
                case PostgreSQLParser.UNKNOWN:
                case PostgreSQLParser.UNLISTEN:
                case PostgreSQLParser.UNLOGGED:
                case PostgreSQLParser.UNTIL:
                case PostgreSQLParser.UPDATE:
                case PostgreSQLParser.VACUUM:
                case PostgreSQLParser.VALID:
                case PostgreSQLParser.VALIDATE:
                case PostgreSQLParser.VALIDATOR:
                case PostgreSQLParser.VARYING:
                case PostgreSQLParser.VERSION_P:
                case PostgreSQLParser.VIEW:
                case PostgreSQLParser.VOLATILE:
                case PostgreSQLParser.WHITESPACE_P:
                case PostgreSQLParser.WITHOUT:
                case PostgreSQLParser.WORK:
                case PostgreSQLParser.WRAPPER:
                case PostgreSQLParser.WRITE:
                case PostgreSQLParser.XML_P:
                case PostgreSQLParser.YEAR_P:
                case PostgreSQLParser.YES_P:
                case PostgreSQLParser.ZONE:
                case PostgreSQLParser.BETWEEN:
                case PostgreSQLParser.BIGINT:
                case PostgreSQLParser.BIT:
                case PostgreSQLParser.BOOLEAN_P:
                case PostgreSQLParser.CHAR_P:
                case PostgreSQLParser.CHARACTER:
                case PostgreSQLParser.COALESCE:
                case PostgreSQLParser.DEC:
                case PostgreSQLParser.DECIMAL_P:
                case PostgreSQLParser.EXISTS:
                case PostgreSQLParser.EXTRACT:
                case PostgreSQLParser.FLOAT_P:
                case PostgreSQLParser.GREATEST:
                case PostgreSQLParser.INOUT:
                case PostgreSQLParser.INT_P:
                case PostgreSQLParser.INTEGER:
                case PostgreSQLParser.INTERVAL:
                case PostgreSQLParser.LEAST:
                case PostgreSQLParser.NATIONAL:
                case PostgreSQLParser.NCHAR:
                case PostgreSQLParser.NONE:
                case PostgreSQLParser.NULLIF:
                case PostgreSQLParser.NUMERIC:
                case PostgreSQLParser.OVERLAY:
                case PostgreSQLParser.POSITION:
                case PostgreSQLParser.PRECISION:
                case PostgreSQLParser.REAL:
                case PostgreSQLParser.ROW:
                case PostgreSQLParser.SETOF:
                case PostgreSQLParser.SMALLINT:
                case PostgreSQLParser.SUBSTRING:
                case PostgreSQLParser.TIME:
                case PostgreSQLParser.TIMESTAMP:
                case PostgreSQLParser.TREAT:
                case PostgreSQLParser.TRIM:
                case PostgreSQLParser.VALUES:
                case PostgreSQLParser.VARCHAR:
                case PostgreSQLParser.XMLATTRIBUTES:
                case PostgreSQLParser.XMLCONCAT:
                case PostgreSQLParser.XMLELEMENT:
                case PostgreSQLParser.XMLEXISTS:
                case PostgreSQLParser.XMLFOREST:
                case PostgreSQLParser.XMLPARSE:
                case PostgreSQLParser.XMLPI:
                case PostgreSQLParser.XMLROOT:
                case PostgreSQLParser.XMLSERIALIZE:
                case PostgreSQLParser.CALL:
                case PostgreSQLParser.CURRENT_P:
                case PostgreSQLParser.ATTACH:
                case PostgreSQLParser.DETACH:
                case PostgreSQLParser.EXPRESSION:
                case PostgreSQLParser.GENERATED:
                case PostgreSQLParser.LOGGED:
                case PostgreSQLParser.STORED:
                case PostgreSQLParser.INCLUDE:
                case PostgreSQLParser.ROUTINE:
                case PostgreSQLParser.TRANSFORM:
                case PostgreSQLParser.IMPORT_P:
                case PostgreSQLParser.POLICY:
                case PostgreSQLParser.METHOD:
                case PostgreSQLParser.REFERENCING:
                case PostgreSQLParser.NEW:
                case PostgreSQLParser.OLD:
                case PostgreSQLParser.VALUE_P:
                case PostgreSQLParser.SUBSCRIPTION:
                case PostgreSQLParser.PUBLICATION:
                case PostgreSQLParser.OUT_P:
                case PostgreSQLParser.ROUTINES:
                case PostgreSQLParser.SCHEMAS:
                case PostgreSQLParser.PROCEDURES:
                case PostgreSQLParser.INPUT_P:
                case PostgreSQLParser.SUPPORT:
                case PostgreSQLParser.PARALLEL:
                case PostgreSQLParser.SQL_P:
                case PostgreSQLParser.DEPENDS:
                case PostgreSQLParser.OVERRIDING:
                case PostgreSQLParser.CONFLICT:
                case PostgreSQLParser.SKIP_P:
                case PostgreSQLParser.LOCKED:
                case PostgreSQLParser.TIES:
                case PostgreSQLParser.ROLLUP:
                case PostgreSQLParser.CUBE:
                case PostgreSQLParser.GROUPING:
                case PostgreSQLParser.SETS:
                case PostgreSQLParser.TABLESAMPLE:
                case PostgreSQLParser.ORDINALITY:
                case PostgreSQLParser.XMLTABLE:
                case PostgreSQLParser.COLUMNS:
                case PostgreSQLParser.XMLNAMESPACES:
                case PostgreSQLParser.NORMALIZED:
                case PostgreSQLParser.WITHIN:
                case PostgreSQLParser.FILTER:
                case PostgreSQLParser.GROUPS:
                case PostgreSQLParser.OTHERS:
                case PostgreSQLParser.NFC:
                case PostgreSQLParser.NFD:
                case PostgreSQLParser.NFKC:
                case PostgreSQLParser.NFKD:
                case PostgreSQLParser.UESCAPE:
                case PostgreSQLParser.VIEWS:
                case PostgreSQLParser.NORMALIZE:
                case PostgreSQLParser.ERROR:
                case PostgreSQLParser.RETURN:
                case PostgreSQLParser.FORMAT:
                case PostgreSQLParser.Identifier:
                case PostgreSQLParser.QuotedIdentifier:
                case PostgreSQLParser.UnicodeQuotedIdentifier:
                case PostgreSQLParser.StringConstant:
                case PostgreSQLParser.UnicodeEscapeStringConstant:
                case PostgreSQLParser.BeginDollarStringConstant:
                case PostgreSQLParser.BinaryStringConstant:
                case PostgreSQLParser.HexadecimalStringConstant:
                case PostgreSQLParser.Integral:
                case PostgreSQLParser.Numeric:
                case PostgreSQLParser.PLSQLVARIABLENAME:
                case PostgreSQLParser.EscapeStringConstant:
                    {
                    this.state = 8209;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 68) {
                        {
                        this.state = 8208;
                        this.all_clause_();
                        }
                    }

                    this.state = 8212;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544644) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                        {
                        this.state = 8211;
                        this.target_list_();
                        }
                    }

                    this.state = 8215;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 109) {
                        {
                        this.state = 8214;
                        this.into_clause();
                        }
                    }

                    this.state = 8218;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 102) {
                        {
                        this.state = 8217;
                        this.from_clause();
                        }
                    }

                    this.state = 8221;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 141) {
                        {
                        this.state = 8220;
                        this.where_clause();
                        }
                    }

                    this.state = 8224;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 8223;
                        this.group_clause();
                        }
                    }

                    this.state = 8227;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 8226;
                        this.having_clause();
                        }
                    }

                    this.state = 8230;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 142) {
                        {
                        this.state = 8229;
                        this.window_clause();
                        }
                    }

                    }
                    break;
                case PostgreSQLParser.DISTINCT:
                    {
                    this.state = 8232;
                    this.distinct_clause();
                    this.state = 8233;
                    this.target_list();
                    this.state = 8235;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 109) {
                        {
                        this.state = 8234;
                        this.into_clause();
                        }
                    }

                    this.state = 8238;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 102) {
                        {
                        this.state = 8237;
                        this.from_clause();
                        }
                    }

                    this.state = 8241;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 141) {
                        {
                        this.state = 8240;
                        this.where_clause();
                        }
                    }

                    this.state = 8244;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 104) {
                        {
                        this.state = 8243;
                        this.group_clause();
                        }
                    }

                    this.state = 8247;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 105) {
                        {
                        this.state = 8246;
                        this.having_clause();
                        }
                    }

                    this.state = 8250;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 142) {
                        {
                        this.state = 8249;
                        this.window_clause();
                        }
                    }

                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                }
                break;
            case PostgreSQLParser.VALUES:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8254;
                this.values_clause();
                }
                break;
            case PostgreSQLParser.TABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8255;
                this.match(PostgreSQLParser.TABLE);
                this.state = 8256;
                this.relation_expr();
                }
                break;
            case PostgreSQLParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8257;
                this.select_with_parens();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_clause(): With_clauseContext {
        let localContext = new With_clauseContext(this.context, this.state);
        this.enterRule(localContext, 976, PostgreSQLParser.RULE_with_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8260;
            this.match(PostgreSQLParser.WITH);
            this.state = 8262;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 746, this.context) ) {
            case 1:
                {
                this.state = 8261;
                this.match(PostgreSQLParser.RECURSIVE);
                }
                break;
            }
            this.state = 8264;
            this.cte_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cte_list(): Cte_listContext {
        let localContext = new Cte_listContext(this.context, this.state);
        this.enterRule(localContext, 978, PostgreSQLParser.RULE_cte_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8266;
            this.common_table_expr();
            this.state = 8271;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8267;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8268;
                this.common_table_expr();
                }
                }
                this.state = 8273;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public common_table_expr(): Common_table_exprContext {
        let localContext = new Common_table_exprContext(this.context, this.state);
        this.enterRule(localContext, 980, PostgreSQLParser.RULE_common_table_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8274;
            this.name();
            this.state = 8276;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 8275;
                this.name_list_();
                }
            }

            this.state = 8278;
            this.match(PostgreSQLParser.AS);
            this.state = 8280;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 289) {
                {
                this.state = 8279;
                this.materialized_();
                }
            }

            this.state = 8282;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8283;
            this.preparablestmt();
            this.state = 8284;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public materialized_(): Materialized_Context {
        let localContext = new Materialized_Context(this.context, this.state);
        this.enterRule(localContext, 982, PostgreSQLParser.RULE_materialized_);
        try {
            this.state = 8289;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.MATERIALIZED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8286;
                this.match(PostgreSQLParser.MATERIALIZED);
                }
                break;
            case PostgreSQLParser.NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8287;
                this.match(PostgreSQLParser.NOT);
                this.state = 8288;
                this.match(PostgreSQLParser.MATERIALIZED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public with_clause_(): With_clause_Context {
        let localContext = new With_clause_Context(this.context, this.state);
        this.enterRule(localContext, 984, PostgreSQLParser.RULE_with_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8291;
            this.with_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public into_clause(): Into_clauseContext {
        let localContext = new Into_clauseContext(this.context, this.state);
        this.enterRule(localContext, 986, PostgreSQLParser.RULE_into_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8293;
            this.match(PostgreSQLParser.INTO);
            this.state = 8294;
            this.opttempTableName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public strict_(): Strict_Context {
        let localContext = new Strict_Context(this.context, this.state);
        this.enterRule(localContext, 988, PostgreSQLParser.RULE_strict_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8296;
            this.match(PostgreSQLParser.STRICT_P);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttempTableName(): OpttempTableNameContext {
        let localContext = new OpttempTableNameContext(this.context, this.state);
        this.enterRule(localContext, 990, PostgreSQLParser.RULE_opttempTableName);
        let _la: number;
        try {
            this.state = 8314;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 754, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8299;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 251 || _la === 283) {
                    {
                    this.state = 8298;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 251 || _la === 283)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 8301;
                _la = this.tokenStream.LA(1);
                if(!(_la === 383 || _la === 385)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 130) {
                    {
                    this.state = 8302;
                    this.table_();
                    }
                }

                this.state = 8305;
                this.qualified_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8306;
                this.match(PostgreSQLParser.UNLOGGED);
                this.state = 8308;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 130) {
                    {
                    this.state = 8307;
                    this.table_();
                    }
                }

                this.state = 8310;
                this.qualified_name();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8311;
                this.match(PostgreSQLParser.TABLE);
                this.state = 8312;
                this.qualified_name();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8313;
                this.qualified_name();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_(): Table_Context {
        let localContext = new Table_Context(this.context, this.state);
        this.enterRule(localContext, 992, PostgreSQLParser.RULE_table_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8316;
            this.match(PostgreSQLParser.TABLE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_or_distinct(): All_or_distinctContext {
        let localContext = new All_or_distinctContext(this.context, this.state);
        this.enterRule(localContext, 994, PostgreSQLParser.RULE_all_or_distinct);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8318;
            _la = this.tokenStream.LA(1);
            if(!(_la === 68 || _la === 94)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public distinct_clause(): Distinct_clauseContext {
        let localContext = new Distinct_clauseContext(this.context, this.state);
        this.enterRule(localContext, 996, PostgreSQLParser.RULE_distinct_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8320;
            this.match(PostgreSQLParser.DISTINCT);
            this.state = 8326;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118) {
                {
                this.state = 8321;
                this.match(PostgreSQLParser.ON);
                this.state = 8322;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8323;
                this.expr_list();
                this.state = 8324;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_clause_(): All_clause_Context {
        let localContext = new All_clause_Context(this.context, this.state);
        this.enterRule(localContext, 998, PostgreSQLParser.RULE_all_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8328;
            this.match(PostgreSQLParser.ALL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_clause_(): Sort_clause_Context {
        let localContext = new Sort_clause_Context(this.context, this.state);
        this.enterRule(localContext, 1000, PostgreSQLParser.RULE_sort_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8330;
            this.sort_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sort_clause(): Sort_clauseContext {
        let localContext = new Sort_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1002, PostgreSQLParser.RULE_sort_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8332;
            this.match(PostgreSQLParser.ORDER);
            this.state = 8333;
            this.match(PostgreSQLParser.BY);
            this.state = 8334;
            this.sortby_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortby_list(): Sortby_listContext {
        let localContext = new Sortby_listContext(this.context, this.state);
        this.enterRule(localContext, 1004, PostgreSQLParser.RULE_sortby_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8336;
            this.sortby();
            this.state = 8341;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8337;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8338;
                this.sortby();
                }
                }
                this.state = 8343;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortby(): SortbyContext {
        let localContext = new SortbyContext(this.context, this.state);
        this.enterRule(localContext, 1006, PostgreSQLParser.RULE_sortby);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8344;
            this.a_expr();
            this.state = 8350;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.USING:
                {
                this.state = 8345;
                this.match(PostgreSQLParser.USING);
                this.state = 8346;
                this.qual_all_op();
                }
                break;
            case PostgreSQLParser.EOF:
            case PostgreSQLParser.CLOSE_PAREN:
            case PostgreSQLParser.COMMA:
            case PostgreSQLParser.SEMI:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.FORMAT_LA:
            case PostgreSQLParser.ASC:
            case PostgreSQLParser.CREATE:
            case PostgreSQLParser.DESC:
            case PostgreSQLParser.FETCH:
            case PostgreSQLParser.FOR:
            case PostgreSQLParser.GRANT:
            case PostgreSQLParser.LIMIT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.OFFSET:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.RETURNING:
            case PostgreSQLParser.WITH:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.GROUPS:
                {
                this.state = 8348;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 75 || _la === 93) {
                    {
                    this.state = 8347;
                    this.asc_desc_();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 8353;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 304) {
                {
                this.state = 8352;
                this.nulls_order_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_limit(): Select_limitContext {
        let localContext = new Select_limitContext(this.context, this.state);
        this.enterRule(localContext, 1008, PostgreSQLParser.RULE_select_limit);
        let _la: number;
        try {
            this.state = 8363;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.FETCH:
            case PostgreSQLParser.LIMIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8355;
                this.limit_clause();
                this.state = 8357;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117) {
                    {
                    this.state = 8356;
                    this.offset_clause();
                    }
                }

                }
                break;
            case PostgreSQLParser.OFFSET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8359;
                this.offset_clause();
                this.state = 8361;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99 || _la === 112) {
                    {
                    this.state = 8360;
                    this.limit_clause();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_limit_(): Select_limit_Context {
        let localContext = new Select_limit_Context(this.context, this.state);
        this.enterRule(localContext, 1010, PostgreSQLParser.RULE_select_limit_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8365;
            this.select_limit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limit_clause(): Limit_clauseContext {
        let localContext = new Limit_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1012, PostgreSQLParser.RULE_limit_clause);
        let _la: number;
        try {
            this.state = 8390;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.LIMIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8367;
                this.match(PostgreSQLParser.LIMIT);
                this.state = 8368;
                this.select_limit_value();
                this.state = 8371;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 8369;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 8370;
                    this.select_offset_value();
                    }
                }

                }
                break;
            case PostgreSQLParser.FETCH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8373;
                this.match(PostgreSQLParser.FETCH);
                this.state = 8374;
                this.first_or_next();
                this.state = 8388;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 766, this.context) ) {
                case 1:
                    {
                    this.state = 8375;
                    this.select_fetch_first_value();
                    this.state = 8376;
                    this.row_or_rows();
                    this.state = 8380;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSQLParser.ONLY:
                        {
                        this.state = 8377;
                        this.match(PostgreSQLParser.ONLY);
                        }
                        break;
                    case PostgreSQLParser.WITH:
                        {
                        this.state = 8378;
                        this.match(PostgreSQLParser.WITH);
                        this.state = 8379;
                        this.match(PostgreSQLParser.TIES);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 8382;
                    this.row_or_rows();
                    this.state = 8386;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSQLParser.ONLY:
                        {
                        this.state = 8383;
                        this.match(PostgreSQLParser.ONLY);
                        }
                        break;
                    case PostgreSQLParser.WITH:
                        {
                        this.state = 8384;
                        this.match(PostgreSQLParser.WITH);
                        this.state = 8385;
                        this.match(PostgreSQLParser.TIES);
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public offset_clause(): Offset_clauseContext {
        let localContext = new Offset_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1014, PostgreSQLParser.RULE_offset_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8392;
            this.match(PostgreSQLParser.OFFSET);
            this.state = 8397;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 768, this.context) ) {
            case 1:
                {
                this.state = 8393;
                this.select_offset_value();
                }
                break;
            case 2:
                {
                this.state = 8394;
                this.select_fetch_first_value();
                this.state = 8395;
                this.row_or_rows();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_limit_value(): Select_limit_valueContext {
        let localContext = new Select_limit_valueContext(this.context, this.state);
        this.enterRule(localContext, 1016, PostgreSQLParser.RULE_select_limit_value);
        try {
            this.state = 8401;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.PARAM:
            case PostgreSQLParser.Operator:
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.BinaryStringConstant:
            case PostgreSQLParser.HexadecimalStringConstant:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8399;
                this.a_expr();
                }
                break;
            case PostgreSQLParser.ALL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8400;
                this.match(PostgreSQLParser.ALL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_offset_value(): Select_offset_valueContext {
        let localContext = new Select_offset_valueContext(this.context, this.state);
        this.enterRule(localContext, 1018, PostgreSQLParser.RULE_select_offset_value);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8403;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext {
        let localContext = new Select_fetch_first_valueContext(this.context, this.state);
        this.enterRule(localContext, 1020, PostgreSQLParser.RULE_select_fetch_first_value);
        try {
            this.state = 8410;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
            case PostgreSQLParser.PARAM:
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.BinaryStringConstant:
            case PostgreSQLParser.HexadecimalStringConstant:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8405;
                this.c_expr();
                }
                break;
            case PostgreSQLParser.PLUS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8406;
                this.match(PostgreSQLParser.PLUS);
                this.state = 8407;
                this.i_or_f_const();
                }
                break;
            case PostgreSQLParser.MINUS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8408;
                this.match(PostgreSQLParser.MINUS);
                this.state = 8409;
                this.i_or_f_const();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public i_or_f_const(): I_or_f_constContext {
        let localContext = new I_or_f_constContext(this.context, this.state);
        this.enterRule(localContext, 1022, PostgreSQLParser.RULE_i_or_f_const);
        try {
            this.state = 8414;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Integral:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8412;
                this.iconst();
                }
                break;
            case PostgreSQLParser.Numeric:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8413;
                this.fconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row_or_rows(): Row_or_rowsContext {
        let localContext = new Row_or_rowsContext(this.context, this.state);
        this.enterRule(localContext, 1024, PostgreSQLParser.RULE_row_or_rows);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8416;
            _la = this.tokenStream.LA(1);
            if(!(_la === 351 || _la === 445)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public first_or_next(): First_or_nextContext {
        let localContext = new First_or_nextContext(this.context, this.state);
        this.enterRule(localContext, 1026, PostgreSQLParser.RULE_first_or_next);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8418;
            _la = this.tokenStream.LA(1);
            if(!(_la === 245 || _la === 299)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_clause(): Group_clauseContext {
        let localContext = new Group_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1028, PostgreSQLParser.RULE_group_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8420;
            this.match(PostgreSQLParser.GROUP_P);
            this.state = 8421;
            this.match(PostgreSQLParser.BY);
            this.state = 8422;
            this.group_by_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_list(): Group_by_listContext {
        let localContext = new Group_by_listContext(this.context, this.state);
        this.enterRule(localContext, 1030, PostgreSQLParser.RULE_group_by_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8424;
            this.group_by_item();
            this.state = 8429;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8425;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8426;
                this.group_by_item();
                }
                }
                this.state = 8431;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public group_by_item(): Group_by_itemContext {
        let localContext = new Group_by_itemContext(this.context, this.state);
        this.enterRule(localContext, 1032, PostgreSQLParser.RULE_group_by_item);
        try {
            this.state = 8437;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 773, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8432;
                this.empty_grouping_set();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8433;
                this.cube_clause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8434;
                this.rollup_clause();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8435;
                this.grouping_sets_clause();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8436;
                this.a_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public empty_grouping_set(): Empty_grouping_setContext {
        let localContext = new Empty_grouping_setContext(this.context, this.state);
        this.enterRule(localContext, 1034, PostgreSQLParser.RULE_empty_grouping_set);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8439;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8440;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rollup_clause(): Rollup_clauseContext {
        let localContext = new Rollup_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1036, PostgreSQLParser.RULE_rollup_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8442;
            this.match(PostgreSQLParser.ROLLUP);
            this.state = 8443;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8444;
            this.expr_list();
            this.state = 8445;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cube_clause(): Cube_clauseContext {
        let localContext = new Cube_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1038, PostgreSQLParser.RULE_cube_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8447;
            this.match(PostgreSQLParser.CUBE);
            this.state = 8448;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8449;
            this.expr_list();
            this.state = 8450;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grouping_sets_clause(): Grouping_sets_clauseContext {
        let localContext = new Grouping_sets_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1040, PostgreSQLParser.RULE_grouping_sets_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8452;
            this.match(PostgreSQLParser.GROUPING);
            this.state = 8453;
            this.match(PostgreSQLParser.SETS);
            this.state = 8454;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8455;
            this.group_by_list();
            this.state = 8456;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public having_clause(): Having_clauseContext {
        let localContext = new Having_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1042, PostgreSQLParser.RULE_having_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8458;
            this.match(PostgreSQLParser.HAVING);
            this.state = 8459;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_clause(): For_locking_clauseContext {
        let localContext = new For_locking_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1044, PostgreSQLParser.RULE_for_locking_clause);
        try {
            this.state = 8465;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 774, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8461;
                this.for_locking_items();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8462;
                this.match(PostgreSQLParser.FOR);
                this.state = 8463;
                this.match(PostgreSQLParser.READ);
                this.state = 8464;
                this.match(PostgreSQLParser.ONLY);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_clause_(): For_locking_clause_Context {
        let localContext = new For_locking_clause_Context(this.context, this.state);
        this.enterRule(localContext, 1046, PostgreSQLParser.RULE_for_locking_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8467;
            this.for_locking_clause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_items(): For_locking_itemsContext {
        let localContext = new For_locking_itemsContext(this.context, this.state);
        this.enterRule(localContext, 1048, PostgreSQLParser.RULE_for_locking_items);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8470;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8469;
                this.for_locking_item();
                }
                }
                this.state = 8472;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 100);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_item(): For_locking_itemContext {
        let localContext = new For_locking_itemContext(this.context, this.state);
        this.enterRule(localContext, 1050, PostgreSQLParser.RULE_for_locking_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8474;
            this.for_locking_strength();
            this.state = 8476;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 306) {
                {
                this.state = 8475;
                this.locked_rels_list();
                }
            }

            this.state = 8479;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 303 || _la === 503) {
                {
                this.state = 8478;
                this.nowait_or_skip_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public for_locking_strength(): For_locking_strengthContext {
        let localContext = new For_locking_strengthContext(this.context, this.state);
        this.enterRule(localContext, 1052, PostgreSQLParser.RULE_for_locking_strength);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8481;
            this.match(PostgreSQLParser.FOR);
            this.state = 8491;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.NO:
            case PostgreSQLParser.UPDATE:
                {
                this.state = 8484;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 300) {
                    {
                    this.state = 8482;
                    this.match(PostgreSQLParser.NO);
                    this.state = 8483;
                    this.match(PostgreSQLParser.KEY);
                    }
                }

                this.state = 8486;
                this.match(PostgreSQLParser.UPDATE);
                }
                break;
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.SHARE:
                {
                this.state = 8488;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 274) {
                    {
                    this.state = 8487;
                    this.match(PostgreSQLParser.KEY);
                    }
                }

                this.state = 8490;
                this.match(PostgreSQLParser.SHARE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public locked_rels_list(): Locked_rels_listContext {
        let localContext = new Locked_rels_listContext(this.context, this.state);
        this.enterRule(localContext, 1054, PostgreSQLParser.RULE_locked_rels_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8493;
            this.match(PostgreSQLParser.OF);
            this.state = 8494;
            this.qualified_name_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public values_clause(): Values_clauseContext {
        let localContext = new Values_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1056, PostgreSQLParser.RULE_values_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8496;
            this.match(PostgreSQLParser.VALUES);
            this.state = 8497;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8498;
            this.expr_list();
            this.state = 8499;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            this.state = 8507;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8500;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8501;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8502;
                this.expr_list();
                this.state = 8503;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                }
                this.state = 8509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_clause(): From_clauseContext {
        let localContext = new From_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1058, PostgreSQLParser.RULE_from_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8510;
            this.match(PostgreSQLParser.FROM);
            this.state = 8511;
            this.from_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public from_list(): From_listContext {
        let localContext = new From_listContext(this.context, this.state);
        this.enterRule(localContext, 1060, PostgreSQLParser.RULE_from_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8513;
            this.table_ref();
            this.state = 8518;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8514;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8515;
                this.table_ref();
                }
                }
                this.state = 8520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public table_ref(): Table_refContext {
        let localContext = new Table_refContext(this.context, this.state);
        this.enterRule(localContext, 1062, PostgreSQLParser.RULE_table_ref);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8579;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 796, this.context) ) {
            case 1:
                {
                this.state = 8521;
                this.relation_expr();
                this.state = 8523;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 8522;
                    this.alias_clause();
                    }
                }

                this.state = 8526;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 510) {
                    {
                    this.state = 8525;
                    this.tablesample_clause();
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 8528;
                this.func_table();
                this.state = 8530;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 8529;
                    this.func_alias_clause();
                    }
                }

                }
                break;
            case 3:
                {
                this.state = 8532;
                this.xmltable();
                this.state = 8534;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 8533;
                    this.alias_clause();
                    }
                }

                }
                break;
            case 4:
                {
                this.state = 8536;
                this.select_with_parens();
                this.state = 8538;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 8537;
                    this.alias_clause();
                    }
                }

                }
                break;
            case 5:
                {
                this.state = 8540;
                this.match(PostgreSQLParser.LATERAL_P);
                this.state = 8553;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 791, this.context) ) {
                case 1:
                    {
                    this.state = 8541;
                    this.xmltable();
                    this.state = 8543;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                        {
                        this.state = 8542;
                        this.alias_clause();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 8545;
                    this.func_table();
                    this.state = 8547;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                        {
                        this.state = 8546;
                        this.func_alias_clause();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 8549;
                    this.select_with_parens();
                    this.state = 8551;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                        {
                        this.state = 8550;
                        this.alias_clause();
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 6:
                {
                this.state = 8555;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8556;
                this.table_ref();
                this.state = 8573;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.CROSS:
                    {
                    this.state = 8557;
                    this.match(PostgreSQLParser.CROSS);
                    this.state = 8558;
                    this.match(PostgreSQLParser.JOIN);
                    this.state = 8559;
                    this.table_ref();
                    }
                    break;
                case PostgreSQLParser.NATURAL:
                    {
                    this.state = 8560;
                    this.match(PostgreSQLParser.NATURAL);
                    this.state = 8562;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & 8261) !== 0)) {
                        {
                        this.state = 8561;
                        this.join_type();
                        }
                    }

                    this.state = 8564;
                    this.match(PostgreSQLParser.JOIN);
                    this.state = 8565;
                    this.table_ref();
                    }
                    break;
                case PostgreSQLParser.FULL:
                case PostgreSQLParser.INNER_P:
                case PostgreSQLParser.JOIN:
                case PostgreSQLParser.LEFT:
                case PostgreSQLParser.RIGHT:
                    {
                    this.state = 8567;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & 8261) !== 0)) {
                        {
                        this.state = 8566;
                        this.join_type();
                        }
                    }

                    this.state = 8569;
                    this.match(PostgreSQLParser.JOIN);
                    this.state = 8570;
                    this.table_ref();
                    this.state = 8571;
                    this.join_qual();
                    }
                    break;
                case PostgreSQLParser.CLOSE_PAREN:
                    break;
                default:
                    break;
                }
                this.state = 8575;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 8577;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4127) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                    {
                    this.state = 8576;
                    this.alias_clause();
                    }
                }

                }
                break;
            }
            this.state = 8599;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 800, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 8597;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case PostgreSQLParser.CROSS:
                        {
                        this.state = 8581;
                        this.match(PostgreSQLParser.CROSS);
                        this.state = 8582;
                        this.match(PostgreSQLParser.JOIN);
                        this.state = 8583;
                        this.table_ref();
                        }
                        break;
                    case PostgreSQLParser.NATURAL:
                        {
                        this.state = 8584;
                        this.match(PostgreSQLParser.NATURAL);
                        this.state = 8586;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & 8261) !== 0)) {
                            {
                            this.state = 8585;
                            this.join_type();
                            }
                        }

                        this.state = 8588;
                        this.match(PostgreSQLParser.JOIN);
                        this.state = 8589;
                        this.table_ref();
                        }
                        break;
                    case PostgreSQLParser.FULL:
                    case PostgreSQLParser.INNER_P:
                    case PostgreSQLParser.JOIN:
                    case PostgreSQLParser.LEFT:
                    case PostgreSQLParser.RIGHT:
                        {
                        this.state = 8591;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & 8261) !== 0)) {
                            {
                            this.state = 8590;
                            this.join_type();
                            }
                        }

                        this.state = 8593;
                        this.match(PostgreSQLParser.JOIN);
                        this.state = 8594;
                        this.table_ref();
                        this.state = 8595;
                        this.join_qual();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                }
                this.state = 8601;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 800, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alias_clause(): Alias_clauseContext {
        let localContext = new Alias_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1064, PostgreSQLParser.RULE_alias_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8603;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 8602;
                this.match(PostgreSQLParser.AS);
                }
            }

            this.state = 8605;
            this.colid();
            this.state = 8610;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 8606;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8607;
                this.name_list();
                this.state = 8608;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_alias_clause(): Func_alias_clauseContext {
        let localContext = new Func_alias_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1066, PostgreSQLParser.RULE_func_alias_clause);
        let _la: number;
        try {
            this.state = 8624;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 805, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8612;
                this.alias_clause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8618;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.AS:
                    {
                    this.state = 8613;
                    this.match(PostgreSQLParser.AS);
                    this.state = 8615;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294963199) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 31) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 418)) & ~0x1F) === 0 && ((1 << (_la - 418)) & 4294967295) !== 0) || ((((_la - 450)) & ~0x1F) === 0 && ((1 << (_la - 450)) & 4294959167) !== 0) || ((((_la - 482)) & ~0x1F) === 0 && ((1 << (_la - 482)) & 4026530815) !== 0) || ((((_la - 514)) & ~0x1F) === 0 && ((1 << (_la - 514)) & 268484605) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 67108935) !== 0)) {
                        {
                        this.state = 8614;
                        this.colid();
                        }
                    }

                    }
                    break;
                case PostgreSQLParser.JSON:
                case PostgreSQLParser.JSON_ARRAY:
                case PostgreSQLParser.JSON_ARRAYAGG:
                case PostgreSQLParser.JSON_EXISTS:
                case PostgreSQLParser.JSON_OBJECT:
                case PostgreSQLParser.JSON_OBJECTAGG:
                case PostgreSQLParser.JSON_QUERY:
                case PostgreSQLParser.JSON_SCALAR:
                case PostgreSQLParser.JSON_SERIALIZE:
                case PostgreSQLParser.JSON_TABLE:
                case PostgreSQLParser.JSON_VALUE:
                case PostgreSQLParser.MERGE_ACTION:
                case PostgreSQLParser.ABSENT:
                case PostgreSQLParser.ASENSITIVE:
                case PostgreSQLParser.ATOMIC:
                case PostgreSQLParser.BREADTH:
                case PostgreSQLParser.COMPRESSION:
                case PostgreSQLParser.CONDITIONAL:
                case PostgreSQLParser.DEPTH:
                case PostgreSQLParser.EMPTY_P:
                case PostgreSQLParser.FINALIZE:
                case PostgreSQLParser.INDENT:
                case PostgreSQLParser.KEEP:
                case PostgreSQLParser.KEYS:
                case PostgreSQLParser.NESTED:
                case PostgreSQLParser.OMIT:
                case PostgreSQLParser.PARAMETER:
                case PostgreSQLParser.PATH:
                case PostgreSQLParser.PLAN:
                case PostgreSQLParser.QUOTES:
                case PostgreSQLParser.SCALAR:
                case PostgreSQLParser.SOURCE:
                case PostgreSQLParser.STRING_P:
                case PostgreSQLParser.TARGET:
                case PostgreSQLParser.UNCONDITIONAL:
                case PostgreSQLParser.PERIOD:
                case PostgreSQLParser.OVER:
                case PostgreSQLParser.ABORT_P:
                case PostgreSQLParser.ABSOLUTE_P:
                case PostgreSQLParser.ACCESS:
                case PostgreSQLParser.ACTION:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ADMIN:
                case PostgreSQLParser.AFTER:
                case PostgreSQLParser.AGGREGATE:
                case PostgreSQLParser.ALSO:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.ALWAYS:
                case PostgreSQLParser.ASSERTION:
                case PostgreSQLParser.ASSIGNMENT:
                case PostgreSQLParser.AT:
                case PostgreSQLParser.ATTRIBUTE:
                case PostgreSQLParser.BACKWARD:
                case PostgreSQLParser.BEFORE:
                case PostgreSQLParser.BEGIN_P:
                case PostgreSQLParser.BY:
                case PostgreSQLParser.CACHE:
                case PostgreSQLParser.CALLED:
                case PostgreSQLParser.CASCADE:
                case PostgreSQLParser.CASCADED:
                case PostgreSQLParser.CATALOG:
                case PostgreSQLParser.CHAIN:
                case PostgreSQLParser.CHARACTERISTICS:
                case PostgreSQLParser.CHECKPOINT:
                case PostgreSQLParser.CLASS:
                case PostgreSQLParser.CLOSE:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.COMMENT:
                case PostgreSQLParser.COMMENTS:
                case PostgreSQLParser.COMMIT:
                case PostgreSQLParser.COMMITTED:
                case PostgreSQLParser.CONFIGURATION:
                case PostgreSQLParser.CONNECTION:
                case PostgreSQLParser.CONSTRAINTS:
                case PostgreSQLParser.CONTENT_P:
                case PostgreSQLParser.CONTINUE_P:
                case PostgreSQLParser.CONVERSION_P:
                case PostgreSQLParser.COPY:
                case PostgreSQLParser.COST:
                case PostgreSQLParser.CSV:
                case PostgreSQLParser.CURSOR:
                case PostgreSQLParser.CYCLE:
                case PostgreSQLParser.DATA_P:
                case PostgreSQLParser.DATABASE:
                case PostgreSQLParser.DAY_P:
                case PostgreSQLParser.DEALLOCATE:
                case PostgreSQLParser.DECLARE:
                case PostgreSQLParser.DEFAULTS:
                case PostgreSQLParser.DEFERRED:
                case PostgreSQLParser.DEFINER:
                case PostgreSQLParser.DELETE_P:
                case PostgreSQLParser.DELIMITER:
                case PostgreSQLParser.DELIMITERS:
                case PostgreSQLParser.DICTIONARY:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DISCARD:
                case PostgreSQLParser.DOCUMENT_P:
                case PostgreSQLParser.DOMAIN_P:
                case PostgreSQLParser.DOUBLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.EACH:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.ENCODING:
                case PostgreSQLParser.ENCRYPTED:
                case PostgreSQLParser.ENUM_P:
                case PostgreSQLParser.ESCAPE:
                case PostgreSQLParser.EVENT:
                case PostgreSQLParser.EXCLUDE:
                case PostgreSQLParser.EXCLUDING:
                case PostgreSQLParser.EXCLUSIVE:
                case PostgreSQLParser.EXECUTE:
                case PostgreSQLParser.EXPLAIN:
                case PostgreSQLParser.EXTENSION:
                case PostgreSQLParser.EXTERNAL:
                case PostgreSQLParser.FAMILY:
                case PostgreSQLParser.FIRST_P:
                case PostgreSQLParser.FOLLOWING:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.FORWARD:
                case PostgreSQLParser.FUNCTION:
                case PostgreSQLParser.FUNCTIONS:
                case PostgreSQLParser.GLOBAL:
                case PostgreSQLParser.GRANTED:
                case PostgreSQLParser.HANDLER:
                case PostgreSQLParser.HEADER_P:
                case PostgreSQLParser.HOLD:
                case PostgreSQLParser.HOUR_P:
                case PostgreSQLParser.IDENTITY_P:
                case PostgreSQLParser.IF_P:
                case PostgreSQLParser.IMMEDIATE:
                case PostgreSQLParser.IMMUTABLE:
                case PostgreSQLParser.IMPLICIT_P:
                case PostgreSQLParser.INCLUDING:
                case PostgreSQLParser.INCREMENT:
                case PostgreSQLParser.INDEX:
                case PostgreSQLParser.INDEXES:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.INHERITS:
                case PostgreSQLParser.INLINE_P:
                case PostgreSQLParser.INSENSITIVE:
                case PostgreSQLParser.INSERT:
                case PostgreSQLParser.INSTEAD:
                case PostgreSQLParser.INVOKER:
                case PostgreSQLParser.ISOLATION:
                case PostgreSQLParser.KEY:
                case PostgreSQLParser.LABEL:
                case PostgreSQLParser.LANGUAGE:
                case PostgreSQLParser.LARGE_P:
                case PostgreSQLParser.LAST_P:
                case PostgreSQLParser.LEAKPROOF:
                case PostgreSQLParser.LEVEL:
                case PostgreSQLParser.LISTEN:
                case PostgreSQLParser.LOAD:
                case PostgreSQLParser.LOCAL:
                case PostgreSQLParser.LOCATION:
                case PostgreSQLParser.LOCK_P:
                case PostgreSQLParser.MAPPING:
                case PostgreSQLParser.MATCH:
                case PostgreSQLParser.MATCHED:
                case PostgreSQLParser.MATERIALIZED:
                case PostgreSQLParser.MAXVALUE:
                case PostgreSQLParser.MERGE:
                case PostgreSQLParser.MINUTE_P:
                case PostgreSQLParser.MINVALUE:
                case PostgreSQLParser.MODE:
                case PostgreSQLParser.MONTH_P:
                case PostgreSQLParser.MOVE:
                case PostgreSQLParser.NAME_P:
                case PostgreSQLParser.NAMES:
                case PostgreSQLParser.NEXT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.NOTHING:
                case PostgreSQLParser.NOTIFY:
                case PostgreSQLParser.NOWAIT:
                case PostgreSQLParser.NULLS_P:
                case PostgreSQLParser.OBJECT_P:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OFF:
                case PostgreSQLParser.OIDS:
                case PostgreSQLParser.OPERATOR:
                case PostgreSQLParser.OPTION:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNED:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.PARSER:
                case PostgreSQLParser.PARTIAL:
                case PostgreSQLParser.PARTITION:
                case PostgreSQLParser.PASSING:
                case PostgreSQLParser.PASSWORD:
                case PostgreSQLParser.PLANS:
                case PostgreSQLParser.PRECEDING:
                case PostgreSQLParser.PREPARE:
                case PostgreSQLParser.PREPARED:
                case PostgreSQLParser.PRESERVE:
                case PostgreSQLParser.PRIOR:
                case PostgreSQLParser.PRIVILEGES:
                case PostgreSQLParser.PROCEDURAL:
                case PostgreSQLParser.PROCEDURE:
                case PostgreSQLParser.PROGRAM:
                case PostgreSQLParser.QUOTE:
                case PostgreSQLParser.RANGE:
                case PostgreSQLParser.READ:
                case PostgreSQLParser.REASSIGN:
                case PostgreSQLParser.RECURSIVE:
                case PostgreSQLParser.REF:
                case PostgreSQLParser.REFRESH:
                case PostgreSQLParser.REINDEX:
                case PostgreSQLParser.RELATIVE_P:
                case PostgreSQLParser.RELEASE:
                case PostgreSQLParser.RENAME:
                case PostgreSQLParser.REPEATABLE:
                case PostgreSQLParser.REPLACE:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.RESTART:
                case PostgreSQLParser.RESTRICT:
                case PostgreSQLParser.RETURNS:
                case PostgreSQLParser.REVOKE:
                case PostgreSQLParser.ROLE:
                case PostgreSQLParser.ROLLBACK:
                case PostgreSQLParser.ROWS:
                case PostgreSQLParser.RULE:
                case PostgreSQLParser.SAVEPOINT:
                case PostgreSQLParser.SCHEMA:
                case PostgreSQLParser.SCROLL:
                case PostgreSQLParser.SEARCH:
                case PostgreSQLParser.SECOND_P:
                case PostgreSQLParser.SECURITY:
                case PostgreSQLParser.SEQUENCE:
                case PostgreSQLParser.SEQUENCES:
                case PostgreSQLParser.SERIALIZABLE:
                case PostgreSQLParser.SERVER:
                case PostgreSQLParser.SESSION:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.SHARE:
                case PostgreSQLParser.SHOW:
                case PostgreSQLParser.SIMPLE:
                case PostgreSQLParser.SNAPSHOT:
                case PostgreSQLParser.STABLE:
                case PostgreSQLParser.STANDALONE_P:
                case PostgreSQLParser.START:
                case PostgreSQLParser.STATEMENT:
                case PostgreSQLParser.STATISTICS:
                case PostgreSQLParser.STDIN:
                case PostgreSQLParser.STDOUT:
                case PostgreSQLParser.STORAGE:
                case PostgreSQLParser.STRICT_P:
                case PostgreSQLParser.STRIP_P:
                case PostgreSQLParser.SYSID:
                case PostgreSQLParser.SYSTEM_P:
                case PostgreSQLParser.TABLES:
                case PostgreSQLParser.TABLESPACE:
                case PostgreSQLParser.TEMP:
                case PostgreSQLParser.TEMPLATE:
                case PostgreSQLParser.TEMPORARY:
                case PostgreSQLParser.TEXT_P:
                case PostgreSQLParser.TRANSACTION:
                case PostgreSQLParser.TRIGGER:
                case PostgreSQLParser.TRUNCATE:
                case PostgreSQLParser.TRUSTED:
                case PostgreSQLParser.TYPE_P:
                case PostgreSQLParser.TYPES_P:
                case PostgreSQLParser.UNBOUNDED:
                case PostgreSQLParser.UNCOMMITTED:
                case PostgreSQLParser.UNENCRYPTED:
                case PostgreSQLParser.UNKNOWN:
                case PostgreSQLParser.UNLISTEN:
                case PostgreSQLParser.UNLOGGED:
                case PostgreSQLParser.UNTIL:
                case PostgreSQLParser.UPDATE:
                case PostgreSQLParser.VACUUM:
                case PostgreSQLParser.VALID:
                case PostgreSQLParser.VALIDATE:
                case PostgreSQLParser.VALIDATOR:
                case PostgreSQLParser.VARYING:
                case PostgreSQLParser.VERSION_P:
                case PostgreSQLParser.VIEW:
                case PostgreSQLParser.VOLATILE:
                case PostgreSQLParser.WHITESPACE_P:
                case PostgreSQLParser.WITHOUT:
                case PostgreSQLParser.WORK:
                case PostgreSQLParser.WRAPPER:
                case PostgreSQLParser.WRITE:
                case PostgreSQLParser.XML_P:
                case PostgreSQLParser.YEAR_P:
                case PostgreSQLParser.YES_P:
                case PostgreSQLParser.ZONE:
                case PostgreSQLParser.BETWEEN:
                case PostgreSQLParser.BIGINT:
                case PostgreSQLParser.BIT:
                case PostgreSQLParser.BOOLEAN_P:
                case PostgreSQLParser.CHAR_P:
                case PostgreSQLParser.CHARACTER:
                case PostgreSQLParser.COALESCE:
                case PostgreSQLParser.DEC:
                case PostgreSQLParser.DECIMAL_P:
                case PostgreSQLParser.EXISTS:
                case PostgreSQLParser.EXTRACT:
                case PostgreSQLParser.FLOAT_P:
                case PostgreSQLParser.GREATEST:
                case PostgreSQLParser.INOUT:
                case PostgreSQLParser.INT_P:
                case PostgreSQLParser.INTEGER:
                case PostgreSQLParser.INTERVAL:
                case PostgreSQLParser.LEAST:
                case PostgreSQLParser.NATIONAL:
                case PostgreSQLParser.NCHAR:
                case PostgreSQLParser.NONE:
                case PostgreSQLParser.NULLIF:
                case PostgreSQLParser.NUMERIC:
                case PostgreSQLParser.OVERLAY:
                case PostgreSQLParser.POSITION:
                case PostgreSQLParser.PRECISION:
                case PostgreSQLParser.REAL:
                case PostgreSQLParser.ROW:
                case PostgreSQLParser.SETOF:
                case PostgreSQLParser.SMALLINT:
                case PostgreSQLParser.SUBSTRING:
                case PostgreSQLParser.TIME:
                case PostgreSQLParser.TIMESTAMP:
                case PostgreSQLParser.TREAT:
                case PostgreSQLParser.TRIM:
                case PostgreSQLParser.VALUES:
                case PostgreSQLParser.VARCHAR:
                case PostgreSQLParser.XMLATTRIBUTES:
                case PostgreSQLParser.XMLCONCAT:
                case PostgreSQLParser.XMLELEMENT:
                case PostgreSQLParser.XMLEXISTS:
                case PostgreSQLParser.XMLFOREST:
                case PostgreSQLParser.XMLPARSE:
                case PostgreSQLParser.XMLPI:
                case PostgreSQLParser.XMLROOT:
                case PostgreSQLParser.XMLSERIALIZE:
                case PostgreSQLParser.CALL:
                case PostgreSQLParser.CURRENT_P:
                case PostgreSQLParser.ATTACH:
                case PostgreSQLParser.DETACH:
                case PostgreSQLParser.EXPRESSION:
                case PostgreSQLParser.GENERATED:
                case PostgreSQLParser.LOGGED:
                case PostgreSQLParser.STORED:
                case PostgreSQLParser.INCLUDE:
                case PostgreSQLParser.ROUTINE:
                case PostgreSQLParser.TRANSFORM:
                case PostgreSQLParser.IMPORT_P:
                case PostgreSQLParser.POLICY:
                case PostgreSQLParser.METHOD:
                case PostgreSQLParser.REFERENCING:
                case PostgreSQLParser.NEW:
                case PostgreSQLParser.OLD:
                case PostgreSQLParser.VALUE_P:
                case PostgreSQLParser.SUBSCRIPTION:
                case PostgreSQLParser.PUBLICATION:
                case PostgreSQLParser.OUT_P:
                case PostgreSQLParser.ROUTINES:
                case PostgreSQLParser.SCHEMAS:
                case PostgreSQLParser.PROCEDURES:
                case PostgreSQLParser.INPUT_P:
                case PostgreSQLParser.SUPPORT:
                case PostgreSQLParser.PARALLEL:
                case PostgreSQLParser.SQL_P:
                case PostgreSQLParser.DEPENDS:
                case PostgreSQLParser.OVERRIDING:
                case PostgreSQLParser.CONFLICT:
                case PostgreSQLParser.SKIP_P:
                case PostgreSQLParser.LOCKED:
                case PostgreSQLParser.TIES:
                case PostgreSQLParser.ROLLUP:
                case PostgreSQLParser.CUBE:
                case PostgreSQLParser.GROUPING:
                case PostgreSQLParser.SETS:
                case PostgreSQLParser.ORDINALITY:
                case PostgreSQLParser.XMLTABLE:
                case PostgreSQLParser.COLUMNS:
                case PostgreSQLParser.XMLNAMESPACES:
                case PostgreSQLParser.NORMALIZED:
                case PostgreSQLParser.WITHIN:
                case PostgreSQLParser.FILTER:
                case PostgreSQLParser.GROUPS:
                case PostgreSQLParser.OTHERS:
                case PostgreSQLParser.NFC:
                case PostgreSQLParser.NFD:
                case PostgreSQLParser.NFKC:
                case PostgreSQLParser.NFKD:
                case PostgreSQLParser.UESCAPE:
                case PostgreSQLParser.VIEWS:
                case PostgreSQLParser.NORMALIZE:
                case PostgreSQLParser.ERROR:
                case PostgreSQLParser.RETURN:
                case PostgreSQLParser.FORMAT:
                case PostgreSQLParser.Identifier:
                case PostgreSQLParser.QuotedIdentifier:
                case PostgreSQLParser.UnicodeQuotedIdentifier:
                case PostgreSQLParser.PLSQLVARIABLENAME:
                    {
                    this.state = 8617;
                    this.colid();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 8620;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8621;
                this.tablefuncelementlist();
                this.state = 8622;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_type(): Join_typeContext {
        let localContext = new Join_typeContext(this.context, this.state);
        this.enterRule(localContext, 1068, PostgreSQLParser.RULE_join_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8626;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 151)) & ~0x1F) === 0 && ((1 << (_la - 151)) & 8261) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8628;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 161) {
                {
                this.state = 8627;
                this.match(PostgreSQLParser.OUTER_P);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public join_qual(): Join_qualContext {
        let localContext = new Join_qualContext(this.context, this.state);
        this.enterRule(localContext, 1070, PostgreSQLParser.RULE_join_qual);
        try {
            this.state = 8637;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.USING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8630;
                this.match(PostgreSQLParser.USING);
                this.state = 8631;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8632;
                this.name_list();
                this.state = 8633;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.ON:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8635;
                this.match(PostgreSQLParser.ON);
                this.state = 8636;
                this.a_expr();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr(): Relation_exprContext {
        let localContext = new Relation_exprContext(this.context, this.state);
        this.enterRule(localContext, 1072, PostgreSQLParser.RULE_relation_expr);
        let _la: number;
        try {
            this.state = 8651;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8639;
                this.qualified_name();
                this.state = 8641;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 9) {
                    {
                    this.state = 8640;
                    this.match(PostgreSQLParser.STAR);
                    }
                }

                }
                break;
            case PostgreSQLParser.ONLY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8643;
                this.match(PostgreSQLParser.ONLY);
                this.state = 8649;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.JSON:
                case PostgreSQLParser.JSON_ARRAY:
                case PostgreSQLParser.JSON_ARRAYAGG:
                case PostgreSQLParser.JSON_EXISTS:
                case PostgreSQLParser.JSON_OBJECT:
                case PostgreSQLParser.JSON_OBJECTAGG:
                case PostgreSQLParser.JSON_QUERY:
                case PostgreSQLParser.JSON_SCALAR:
                case PostgreSQLParser.JSON_SERIALIZE:
                case PostgreSQLParser.JSON_TABLE:
                case PostgreSQLParser.JSON_VALUE:
                case PostgreSQLParser.MERGE_ACTION:
                case PostgreSQLParser.ABSENT:
                case PostgreSQLParser.ASENSITIVE:
                case PostgreSQLParser.ATOMIC:
                case PostgreSQLParser.BREADTH:
                case PostgreSQLParser.COMPRESSION:
                case PostgreSQLParser.CONDITIONAL:
                case PostgreSQLParser.DEPTH:
                case PostgreSQLParser.EMPTY_P:
                case PostgreSQLParser.FINALIZE:
                case PostgreSQLParser.INDENT:
                case PostgreSQLParser.KEEP:
                case PostgreSQLParser.KEYS:
                case PostgreSQLParser.NESTED:
                case PostgreSQLParser.OMIT:
                case PostgreSQLParser.PARAMETER:
                case PostgreSQLParser.PATH:
                case PostgreSQLParser.PLAN:
                case PostgreSQLParser.QUOTES:
                case PostgreSQLParser.SCALAR:
                case PostgreSQLParser.SOURCE:
                case PostgreSQLParser.STRING_P:
                case PostgreSQLParser.TARGET:
                case PostgreSQLParser.UNCONDITIONAL:
                case PostgreSQLParser.PERIOD:
                case PostgreSQLParser.OVER:
                case PostgreSQLParser.ABORT_P:
                case PostgreSQLParser.ABSOLUTE_P:
                case PostgreSQLParser.ACCESS:
                case PostgreSQLParser.ACTION:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ADMIN:
                case PostgreSQLParser.AFTER:
                case PostgreSQLParser.AGGREGATE:
                case PostgreSQLParser.ALSO:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.ALWAYS:
                case PostgreSQLParser.ASSERTION:
                case PostgreSQLParser.ASSIGNMENT:
                case PostgreSQLParser.AT:
                case PostgreSQLParser.ATTRIBUTE:
                case PostgreSQLParser.BACKWARD:
                case PostgreSQLParser.BEFORE:
                case PostgreSQLParser.BEGIN_P:
                case PostgreSQLParser.BY:
                case PostgreSQLParser.CACHE:
                case PostgreSQLParser.CALLED:
                case PostgreSQLParser.CASCADE:
                case PostgreSQLParser.CASCADED:
                case PostgreSQLParser.CATALOG:
                case PostgreSQLParser.CHAIN:
                case PostgreSQLParser.CHARACTERISTICS:
                case PostgreSQLParser.CHECKPOINT:
                case PostgreSQLParser.CLASS:
                case PostgreSQLParser.CLOSE:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.COMMENT:
                case PostgreSQLParser.COMMENTS:
                case PostgreSQLParser.COMMIT:
                case PostgreSQLParser.COMMITTED:
                case PostgreSQLParser.CONFIGURATION:
                case PostgreSQLParser.CONNECTION:
                case PostgreSQLParser.CONSTRAINTS:
                case PostgreSQLParser.CONTENT_P:
                case PostgreSQLParser.CONTINUE_P:
                case PostgreSQLParser.CONVERSION_P:
                case PostgreSQLParser.COPY:
                case PostgreSQLParser.COST:
                case PostgreSQLParser.CSV:
                case PostgreSQLParser.CURSOR:
                case PostgreSQLParser.CYCLE:
                case PostgreSQLParser.DATA_P:
                case PostgreSQLParser.DATABASE:
                case PostgreSQLParser.DAY_P:
                case PostgreSQLParser.DEALLOCATE:
                case PostgreSQLParser.DECLARE:
                case PostgreSQLParser.DEFAULTS:
                case PostgreSQLParser.DEFERRED:
                case PostgreSQLParser.DEFINER:
                case PostgreSQLParser.DELETE_P:
                case PostgreSQLParser.DELIMITER:
                case PostgreSQLParser.DELIMITERS:
                case PostgreSQLParser.DICTIONARY:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DISCARD:
                case PostgreSQLParser.DOCUMENT_P:
                case PostgreSQLParser.DOMAIN_P:
                case PostgreSQLParser.DOUBLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.EACH:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.ENCODING:
                case PostgreSQLParser.ENCRYPTED:
                case PostgreSQLParser.ENUM_P:
                case PostgreSQLParser.ESCAPE:
                case PostgreSQLParser.EVENT:
                case PostgreSQLParser.EXCLUDE:
                case PostgreSQLParser.EXCLUDING:
                case PostgreSQLParser.EXCLUSIVE:
                case PostgreSQLParser.EXECUTE:
                case PostgreSQLParser.EXPLAIN:
                case PostgreSQLParser.EXTENSION:
                case PostgreSQLParser.EXTERNAL:
                case PostgreSQLParser.FAMILY:
                case PostgreSQLParser.FIRST_P:
                case PostgreSQLParser.FOLLOWING:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.FORWARD:
                case PostgreSQLParser.FUNCTION:
                case PostgreSQLParser.FUNCTIONS:
                case PostgreSQLParser.GLOBAL:
                case PostgreSQLParser.GRANTED:
                case PostgreSQLParser.HANDLER:
                case PostgreSQLParser.HEADER_P:
                case PostgreSQLParser.HOLD:
                case PostgreSQLParser.HOUR_P:
                case PostgreSQLParser.IDENTITY_P:
                case PostgreSQLParser.IF_P:
                case PostgreSQLParser.IMMEDIATE:
                case PostgreSQLParser.IMMUTABLE:
                case PostgreSQLParser.IMPLICIT_P:
                case PostgreSQLParser.INCLUDING:
                case PostgreSQLParser.INCREMENT:
                case PostgreSQLParser.INDEX:
                case PostgreSQLParser.INDEXES:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.INHERITS:
                case PostgreSQLParser.INLINE_P:
                case PostgreSQLParser.INSENSITIVE:
                case PostgreSQLParser.INSERT:
                case PostgreSQLParser.INSTEAD:
                case PostgreSQLParser.INVOKER:
                case PostgreSQLParser.ISOLATION:
                case PostgreSQLParser.KEY:
                case PostgreSQLParser.LABEL:
                case PostgreSQLParser.LANGUAGE:
                case PostgreSQLParser.LARGE_P:
                case PostgreSQLParser.LAST_P:
                case PostgreSQLParser.LEAKPROOF:
                case PostgreSQLParser.LEVEL:
                case PostgreSQLParser.LISTEN:
                case PostgreSQLParser.LOAD:
                case PostgreSQLParser.LOCAL:
                case PostgreSQLParser.LOCATION:
                case PostgreSQLParser.LOCK_P:
                case PostgreSQLParser.MAPPING:
                case PostgreSQLParser.MATCH:
                case PostgreSQLParser.MATCHED:
                case PostgreSQLParser.MATERIALIZED:
                case PostgreSQLParser.MAXVALUE:
                case PostgreSQLParser.MERGE:
                case PostgreSQLParser.MINUTE_P:
                case PostgreSQLParser.MINVALUE:
                case PostgreSQLParser.MODE:
                case PostgreSQLParser.MONTH_P:
                case PostgreSQLParser.MOVE:
                case PostgreSQLParser.NAME_P:
                case PostgreSQLParser.NAMES:
                case PostgreSQLParser.NEXT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.NOTHING:
                case PostgreSQLParser.NOTIFY:
                case PostgreSQLParser.NOWAIT:
                case PostgreSQLParser.NULLS_P:
                case PostgreSQLParser.OBJECT_P:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OFF:
                case PostgreSQLParser.OIDS:
                case PostgreSQLParser.OPERATOR:
                case PostgreSQLParser.OPTION:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNED:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.PARSER:
                case PostgreSQLParser.PARTIAL:
                case PostgreSQLParser.PARTITION:
                case PostgreSQLParser.PASSING:
                case PostgreSQLParser.PASSWORD:
                case PostgreSQLParser.PLANS:
                case PostgreSQLParser.PRECEDING:
                case PostgreSQLParser.PREPARE:
                case PostgreSQLParser.PREPARED:
                case PostgreSQLParser.PRESERVE:
                case PostgreSQLParser.PRIOR:
                case PostgreSQLParser.PRIVILEGES:
                case PostgreSQLParser.PROCEDURAL:
                case PostgreSQLParser.PROCEDURE:
                case PostgreSQLParser.PROGRAM:
                case PostgreSQLParser.QUOTE:
                case PostgreSQLParser.RANGE:
                case PostgreSQLParser.READ:
                case PostgreSQLParser.REASSIGN:
                case PostgreSQLParser.RECURSIVE:
                case PostgreSQLParser.REF:
                case PostgreSQLParser.REFRESH:
                case PostgreSQLParser.REINDEX:
                case PostgreSQLParser.RELATIVE_P:
                case PostgreSQLParser.RELEASE:
                case PostgreSQLParser.RENAME:
                case PostgreSQLParser.REPEATABLE:
                case PostgreSQLParser.REPLACE:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.RESTART:
                case PostgreSQLParser.RESTRICT:
                case PostgreSQLParser.RETURNS:
                case PostgreSQLParser.REVOKE:
                case PostgreSQLParser.ROLE:
                case PostgreSQLParser.ROLLBACK:
                case PostgreSQLParser.ROWS:
                case PostgreSQLParser.RULE:
                case PostgreSQLParser.SAVEPOINT:
                case PostgreSQLParser.SCHEMA:
                case PostgreSQLParser.SCROLL:
                case PostgreSQLParser.SEARCH:
                case PostgreSQLParser.SECOND_P:
                case PostgreSQLParser.SECURITY:
                case PostgreSQLParser.SEQUENCE:
                case PostgreSQLParser.SEQUENCES:
                case PostgreSQLParser.SERIALIZABLE:
                case PostgreSQLParser.SERVER:
                case PostgreSQLParser.SESSION:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.SHARE:
                case PostgreSQLParser.SHOW:
                case PostgreSQLParser.SIMPLE:
                case PostgreSQLParser.SNAPSHOT:
                case PostgreSQLParser.STABLE:
                case PostgreSQLParser.STANDALONE_P:
                case PostgreSQLParser.START:
                case PostgreSQLParser.STATEMENT:
                case PostgreSQLParser.STATISTICS:
                case PostgreSQLParser.STDIN:
                case PostgreSQLParser.STDOUT:
                case PostgreSQLParser.STORAGE:
                case PostgreSQLParser.STRICT_P:
                case PostgreSQLParser.STRIP_P:
                case PostgreSQLParser.SYSID:
                case PostgreSQLParser.SYSTEM_P:
                case PostgreSQLParser.TABLES:
                case PostgreSQLParser.TABLESPACE:
                case PostgreSQLParser.TEMP:
                case PostgreSQLParser.TEMPLATE:
                case PostgreSQLParser.TEMPORARY:
                case PostgreSQLParser.TEXT_P:
                case PostgreSQLParser.TRANSACTION:
                case PostgreSQLParser.TRIGGER:
                case PostgreSQLParser.TRUNCATE:
                case PostgreSQLParser.TRUSTED:
                case PostgreSQLParser.TYPE_P:
                case PostgreSQLParser.TYPES_P:
                case PostgreSQLParser.UNBOUNDED:
                case PostgreSQLParser.UNCOMMITTED:
                case PostgreSQLParser.UNENCRYPTED:
                case PostgreSQLParser.UNKNOWN:
                case PostgreSQLParser.UNLISTEN:
                case PostgreSQLParser.UNLOGGED:
                case PostgreSQLParser.UNTIL:
                case PostgreSQLParser.UPDATE:
                case PostgreSQLParser.VACUUM:
                case PostgreSQLParser.VALID:
                case PostgreSQLParser.VALIDATE:
                case PostgreSQLParser.VALIDATOR:
                case PostgreSQLParser.VARYING:
                case PostgreSQLParser.VERSION_P:
                case PostgreSQLParser.VIEW:
                case PostgreSQLParser.VOLATILE:
                case PostgreSQLParser.WHITESPACE_P:
                case PostgreSQLParser.WITHOUT:
                case PostgreSQLParser.WORK:
                case PostgreSQLParser.WRAPPER:
                case PostgreSQLParser.WRITE:
                case PostgreSQLParser.XML_P:
                case PostgreSQLParser.YEAR_P:
                case PostgreSQLParser.YES_P:
                case PostgreSQLParser.ZONE:
                case PostgreSQLParser.BETWEEN:
                case PostgreSQLParser.BIGINT:
                case PostgreSQLParser.BIT:
                case PostgreSQLParser.BOOLEAN_P:
                case PostgreSQLParser.CHAR_P:
                case PostgreSQLParser.CHARACTER:
                case PostgreSQLParser.COALESCE:
                case PostgreSQLParser.DEC:
                case PostgreSQLParser.DECIMAL_P:
                case PostgreSQLParser.EXISTS:
                case PostgreSQLParser.EXTRACT:
                case PostgreSQLParser.FLOAT_P:
                case PostgreSQLParser.GREATEST:
                case PostgreSQLParser.INOUT:
                case PostgreSQLParser.INT_P:
                case PostgreSQLParser.INTEGER:
                case PostgreSQLParser.INTERVAL:
                case PostgreSQLParser.LEAST:
                case PostgreSQLParser.NATIONAL:
                case PostgreSQLParser.NCHAR:
                case PostgreSQLParser.NONE:
                case PostgreSQLParser.NULLIF:
                case PostgreSQLParser.NUMERIC:
                case PostgreSQLParser.OVERLAY:
                case PostgreSQLParser.POSITION:
                case PostgreSQLParser.PRECISION:
                case PostgreSQLParser.REAL:
                case PostgreSQLParser.ROW:
                case PostgreSQLParser.SETOF:
                case PostgreSQLParser.SMALLINT:
                case PostgreSQLParser.SUBSTRING:
                case PostgreSQLParser.TIME:
                case PostgreSQLParser.TIMESTAMP:
                case PostgreSQLParser.TREAT:
                case PostgreSQLParser.TRIM:
                case PostgreSQLParser.VALUES:
                case PostgreSQLParser.VARCHAR:
                case PostgreSQLParser.XMLATTRIBUTES:
                case PostgreSQLParser.XMLCONCAT:
                case PostgreSQLParser.XMLELEMENT:
                case PostgreSQLParser.XMLEXISTS:
                case PostgreSQLParser.XMLFOREST:
                case PostgreSQLParser.XMLPARSE:
                case PostgreSQLParser.XMLPI:
                case PostgreSQLParser.XMLROOT:
                case PostgreSQLParser.XMLSERIALIZE:
                case PostgreSQLParser.CALL:
                case PostgreSQLParser.CURRENT_P:
                case PostgreSQLParser.ATTACH:
                case PostgreSQLParser.DETACH:
                case PostgreSQLParser.EXPRESSION:
                case PostgreSQLParser.GENERATED:
                case PostgreSQLParser.LOGGED:
                case PostgreSQLParser.STORED:
                case PostgreSQLParser.INCLUDE:
                case PostgreSQLParser.ROUTINE:
                case PostgreSQLParser.TRANSFORM:
                case PostgreSQLParser.IMPORT_P:
                case PostgreSQLParser.POLICY:
                case PostgreSQLParser.METHOD:
                case PostgreSQLParser.REFERENCING:
                case PostgreSQLParser.NEW:
                case PostgreSQLParser.OLD:
                case PostgreSQLParser.VALUE_P:
                case PostgreSQLParser.SUBSCRIPTION:
                case PostgreSQLParser.PUBLICATION:
                case PostgreSQLParser.OUT_P:
                case PostgreSQLParser.ROUTINES:
                case PostgreSQLParser.SCHEMAS:
                case PostgreSQLParser.PROCEDURES:
                case PostgreSQLParser.INPUT_P:
                case PostgreSQLParser.SUPPORT:
                case PostgreSQLParser.PARALLEL:
                case PostgreSQLParser.SQL_P:
                case PostgreSQLParser.DEPENDS:
                case PostgreSQLParser.OVERRIDING:
                case PostgreSQLParser.CONFLICT:
                case PostgreSQLParser.SKIP_P:
                case PostgreSQLParser.LOCKED:
                case PostgreSQLParser.TIES:
                case PostgreSQLParser.ROLLUP:
                case PostgreSQLParser.CUBE:
                case PostgreSQLParser.GROUPING:
                case PostgreSQLParser.SETS:
                case PostgreSQLParser.ORDINALITY:
                case PostgreSQLParser.XMLTABLE:
                case PostgreSQLParser.COLUMNS:
                case PostgreSQLParser.XMLNAMESPACES:
                case PostgreSQLParser.NORMALIZED:
                case PostgreSQLParser.WITHIN:
                case PostgreSQLParser.FILTER:
                case PostgreSQLParser.GROUPS:
                case PostgreSQLParser.OTHERS:
                case PostgreSQLParser.NFC:
                case PostgreSQLParser.NFD:
                case PostgreSQLParser.NFKC:
                case PostgreSQLParser.NFKD:
                case PostgreSQLParser.UESCAPE:
                case PostgreSQLParser.VIEWS:
                case PostgreSQLParser.NORMALIZE:
                case PostgreSQLParser.ERROR:
                case PostgreSQLParser.RETURN:
                case PostgreSQLParser.FORMAT:
                case PostgreSQLParser.Identifier:
                case PostgreSQLParser.QuotedIdentifier:
                case PostgreSQLParser.UnicodeQuotedIdentifier:
                case PostgreSQLParser.PLSQLVARIABLENAME:
                    {
                    this.state = 8644;
                    this.qualified_name();
                    }
                    break;
                case PostgreSQLParser.OPEN_PAREN:
                    {
                    this.state = 8645;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 8646;
                    this.qualified_name();
                    this.state = 8647;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr_list(): Relation_expr_listContext {
        let localContext = new Relation_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 1074, PostgreSQLParser.RULE_relation_expr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8653;
            this.relation_expr();
            this.state = 8658;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8654;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8655;
                this.relation_expr();
                }
                }
                this.state = 8660;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        let localContext = new Relation_expr_opt_aliasContext(this.context, this.state);
        this.enterRule(localContext, 1076, PostgreSQLParser.RULE_relation_expr_opt_alias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8661;
            this.relation_expr();
            this.state = 8666;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 813, this.context) ) {
            case 1:
                {
                this.state = 8663;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 74) {
                    {
                    this.state = 8662;
                    this.match(PostgreSQLParser.AS);
                    }
                }

                this.state = 8665;
                this.colid();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablesample_clause(): Tablesample_clauseContext {
        let localContext = new Tablesample_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1078, PostgreSQLParser.RULE_tablesample_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8668;
            this.match(PostgreSQLParser.TABLESAMPLE);
            this.state = 8669;
            this.func_name();
            this.state = 8670;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8671;
            this.expr_list();
            this.state = 8672;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            this.state = 8674;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 341) {
                {
                this.state = 8673;
                this.repeatable_clause_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public repeatable_clause_(): Repeatable_clause_Context {
        let localContext = new Repeatable_clause_Context(this.context, this.state);
        this.enterRule(localContext, 1080, PostgreSQLParser.RULE_repeatable_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8676;
            this.match(PostgreSQLParser.REPEATABLE);
            this.state = 8677;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8678;
            this.a_expr();
            this.state = 8679;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_table(): Func_tableContext {
        let localContext = new Func_tableContext(this.context, this.state);
        this.enterRule(localContext, 1082, PostgreSQLParser.RULE_func_table);
        try {
            this.state = 8693;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 817, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8681;
                this.func_expr_windowless();
                this.state = 8683;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 815, this.context) ) {
                case 1:
                    {
                    this.state = 8682;
                    this.ordinality_();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8685;
                this.match(PostgreSQLParser.ROWS);
                this.state = 8686;
                this.match(PostgreSQLParser.FROM);
                this.state = 8687;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8688;
                this.rowsfrom_list();
                this.state = 8689;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 8691;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 816, this.context) ) {
                case 1:
                    {
                    this.state = 8690;
                    this.ordinality_();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsfrom_item(): Rowsfrom_itemContext {
        let localContext = new Rowsfrom_itemContext(this.context, this.state);
        this.enterRule(localContext, 1084, PostgreSQLParser.RULE_rowsfrom_item);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8695;
            this.func_expr_windowless();
            this.state = 8697;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 8696;
                this.col_def_list_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rowsfrom_list(): Rowsfrom_listContext {
        let localContext = new Rowsfrom_listContext(this.context, this.state);
        this.enterRule(localContext, 1086, PostgreSQLParser.RULE_rowsfrom_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8699;
            this.rowsfrom_item();
            this.state = 8704;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8700;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8701;
                this.rowsfrom_item();
                }
                }
                this.state = 8706;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public col_def_list_(): Col_def_list_Context {
        let localContext = new Col_def_list_Context(this.context, this.state);
        this.enterRule(localContext, 1088, PostgreSQLParser.RULE_col_def_list_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8707;
            this.match(PostgreSQLParser.AS);
            this.state = 8708;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8709;
            this.tablefuncelementlist();
            this.state = 8710;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ordinality_(): Ordinality_Context {
        let localContext = new Ordinality_Context(this.context, this.state);
        this.enterRule(localContext, 1090, PostgreSQLParser.RULE_ordinality_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8712;
            this.match(PostgreSQLParser.WITH);
            this.state = 8713;
            this.match(PostgreSQLParser.ORDINALITY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_clause(): Where_clauseContext {
        let localContext = new Where_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1092, PostgreSQLParser.RULE_where_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8715;
            this.match(PostgreSQLParser.WHERE);
            this.state = 8716;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public where_or_current_clause(): Where_or_current_clauseContext {
        let localContext = new Where_or_current_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1094, PostgreSQLParser.RULE_where_or_current_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8718;
            this.match(PostgreSQLParser.WHERE);
            this.state = 8723;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 820, this.context) ) {
            case 1:
                {
                this.state = 8719;
                this.match(PostgreSQLParser.CURRENT_P);
                this.state = 8720;
                this.match(PostgreSQLParser.OF);
                this.state = 8721;
                this.cursor_name();
                }
                break;
            case 2:
                {
                this.state = 8722;
                this.a_expr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opttablefuncelementlist(): OpttablefuncelementlistContext {
        let localContext = new OpttablefuncelementlistContext(this.context, this.state);
        this.enterRule(localContext, 1096, PostgreSQLParser.RULE_opttablefuncelementlist);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8725;
            this.tablefuncelementlist();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablefuncelementlist(): TablefuncelementlistContext {
        let localContext = new TablefuncelementlistContext(this.context, this.state);
        this.enterRule(localContext, 1098, PostgreSQLParser.RULE_tablefuncelementlist);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8727;
            this.tablefuncelement();
            this.state = 8732;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8728;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8729;
                this.tablefuncelement();
                }
                }
                this.state = 8734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tablefuncelement(): TablefuncelementContext {
        let localContext = new TablefuncelementContext(this.context, this.state);
        this.enterRule(localContext, 1100, PostgreSQLParser.RULE_tablefuncelement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8735;
            this.colid();
            this.state = 8736;
            this.typename();
            this.state = 8738;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 8737;
                this.collate_clause_();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable(): XmltableContext {
        let localContext = new XmltableContext(this.context, this.state);
        this.enterRule(localContext, 1102, PostgreSQLParser.RULE_xmltable);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8740;
            this.match(PostgreSQLParser.XMLTABLE);
            this.state = 8741;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8757;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 823, this.context) ) {
            case 1:
                {
                this.state = 8742;
                this.c_expr();
                this.state = 8743;
                this.xmlexists_argument();
                this.state = 8744;
                this.match(PostgreSQLParser.COLUMNS);
                this.state = 8745;
                this.xmltable_column_list();
                }
                break;
            case 2:
                {
                this.state = 8747;
                this.match(PostgreSQLParser.XMLNAMESPACES);
                this.state = 8748;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8749;
                this.xml_namespace_list();
                this.state = 8750;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 8751;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8752;
                this.c_expr();
                this.state = 8753;
                this.xmlexists_argument();
                this.state = 8754;
                this.match(PostgreSQLParser.COLUMNS);
                this.state = 8755;
                this.xmltable_column_list();
                }
                break;
            }
            this.state = 8759;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_list(): Xmltable_column_listContext {
        let localContext = new Xmltable_column_listContext(this.context, this.state);
        this.enterRule(localContext, 1104, PostgreSQLParser.RULE_xmltable_column_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8761;
            this.xmltable_column_el();
            this.state = 8766;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8762;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8763;
                this.xmltable_column_el();
                }
                }
                this.state = 8768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_el(): Xmltable_column_elContext {
        let localContext = new Xmltable_column_elContext(this.context, this.state);
        this.enterRule(localContext, 1106, PostgreSQLParser.RULE_xmltable_column_el);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8769;
            this.colid();
            this.state = 8776;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                {
                this.state = 8770;
                this.typename();
                this.state = 8772;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 50331649) !== 0) || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0)) {
                    {
                    this.state = 8771;
                    this.xmltable_column_option_list();
                    }
                }

                }
                break;
            case PostgreSQLParser.FOR:
                {
                this.state = 8774;
                this.match(PostgreSQLParser.FOR);
                this.state = 8775;
                this.match(PostgreSQLParser.ORDINALITY);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_option_list(): Xmltable_column_option_listContext {
        let localContext = new Xmltable_column_option_listContext(this.context, this.state);
        this.enterRule(localContext, 1108, PostgreSQLParser.RULE_xmltable_column_option_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8779;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 8778;
                this.xmltable_column_option_el();
                }
                }
                this.state = 8781;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 50331649) !== 0) || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33554467) !== 0));
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmltable_column_option_el(): Xmltable_column_option_elContext {
        let localContext = new Xmltable_column_option_elContext(this.context, this.state);
        this.enterRule(localContext, 1110, PostgreSQLParser.RULE_xmltable_column_option_el);
        try {
            this.state = 8791;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8783;
                this.match(PostgreSQLParser.DEFAULT);
                this.state = 8784;
                this.a_expr();
                }
                break;
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8785;
                this.identifier();
                this.state = 8786;
                this.a_expr();
                }
                break;
            case PostgreSQLParser.NOT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8788;
                this.match(PostgreSQLParser.NOT);
                this.state = 8789;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case PostgreSQLParser.NULL_P:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8790;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_namespace_list(): Xml_namespace_listContext {
        let localContext = new Xml_namespace_listContext(this.context, this.state);
        this.enterRule(localContext, 1112, PostgreSQLParser.RULE_xml_namespace_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8793;
            this.xml_namespace_el();
            this.state = 8798;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 8794;
                this.match(PostgreSQLParser.COMMA);
                this.state = 8795;
                this.xml_namespace_el();
                }
                }
                this.state = 8800;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_namespace_el(): Xml_namespace_elContext {
        let localContext = new Xml_namespace_elContext(this.context, this.state);
        this.enterRule(localContext, 1114, PostgreSQLParser.RULE_xml_namespace_el);
        try {
            this.state = 8807;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 830, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8801;
                this.b_expr(0);
                this.state = 8802;
                this.match(PostgreSQLParser.AS);
                this.state = 8803;
                this.colLabel();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8805;
                this.match(PostgreSQLParser.DEFAULT);
                this.state = 8806;
                this.b_expr(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public typename(): TypenameContext {
        let localContext = new TypenameContext(this.context, this.state);
        this.enterRule(localContext, 1116, PostgreSQLParser.RULE_typename);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8810;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 446) {
                {
                this.state = 8809;
                this.match(PostgreSQLParser.SETOF);
                }
            }

            this.state = 8812;
            this.simpletypename();
            this.state = 8821;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 833, this.context) ) {
            case 1:
                {
                this.state = 8813;
                this.opt_array_bounds();
                }
                break;
            case 2:
                {
                this.state = 8814;
                this.match(PostgreSQLParser.ARRAY);
                this.state = 8819;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 832, this.context) ) {
                case 1:
                    {
                    this.state = 8815;
                    this.match(PostgreSQLParser.OPEN_BRACKET);
                    this.state = 8816;
                    this.iconst();
                    this.state = 8817;
                    this.match(PostgreSQLParser.CLOSE_BRACKET);
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_array_bounds(): Opt_array_boundsContext {
        let localContext = new Opt_array_boundsContext(this.context, this.state);
        this.enterRule(localContext, 1118, PostgreSQLParser.RULE_opt_array_bounds);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8830;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 835, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 8823;
                    this.match(PostgreSQLParser.OPEN_BRACKET);
                    this.state = 8825;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 576) {
                        {
                        this.state = 8824;
                        this.iconst();
                        }
                    }

                    this.state = 8827;
                    this.match(PostgreSQLParser.CLOSE_BRACKET);
                    }
                    }
                }
                this.state = 8832;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 835, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpletypename(): SimpletypenameContext {
        let localContext = new SimpletypenameContext(this.context, this.state);
        this.enterRule(localContext, 1120, PostgreSQLParser.RULE_simpletypename);
        try {
            this.state = 8849;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 838, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8833;
                this.generictype();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8834;
                this.numeric();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8835;
                this.bit();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8836;
                this.character();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8837;
                this.constdatetime();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8838;
                this.constinterval();
                this.state = 8846;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 837, this.context) ) {
                case 1:
                    {
                    this.state = 8840;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 836, this.context) ) {
                    case 1:
                        {
                        this.state = 8839;
                        this.interval_();
                        }
                        break;
                    }
                    }
                    break;
                case 2:
                    {
                    this.state = 8842;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 8843;
                    this.iconst();
                    this.state = 8844;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8848;
                this.jsonType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public consttypename(): ConsttypenameContext {
        let localContext = new ConsttypenameContext(this.context, this.state);
        this.enterRule(localContext, 1122, PostgreSQLParser.RULE_consttypename);
        try {
            this.state = 8856;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.SMALLINT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8851;
                this.numeric();
                }
                break;
            case PostgreSQLParser.BIT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8852;
                this.constbit();
                }
                break;
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.VARCHAR:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8853;
                this.constcharacter();
                }
                break;
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8854;
                this.constdatetime();
                }
                break;
            case PostgreSQLParser.JSON:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8855;
                this.jsonType();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public generictype(): GenerictypeContext {
        let localContext = new GenerictypeContext(this.context, this.state);
        this.enterRule(localContext, 1124, PostgreSQLParser.RULE_generictype);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8858;
            this.type_function_name();
            this.state = 8860;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 840, this.context) ) {
            case 1:
                {
                this.state = 8859;
                this.attrs();
                }
                break;
            }
            this.state = 8863;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 841, this.context) ) {
            case 1:
                {
                this.state = 8862;
                this.type_modifiers_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_modifiers_(): Type_modifiers_Context {
        let localContext = new Type_modifiers_Context(this.context, this.state);
        this.enterRule(localContext, 1126, PostgreSQLParser.RULE_type_modifiers_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8865;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8866;
            this.expr_list();
            this.state = 8867;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numeric(): NumericContext {
        let localContext = new NumericContext(this.context, this.state);
        this.enterRule(localContext, 1128, PostgreSQLParser.RULE_numeric);
        try {
            this.state = 8893;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.INT_P:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8869;
                this.match(PostgreSQLParser.INT_P);
                }
                break;
            case PostgreSQLParser.INTEGER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8870;
                this.match(PostgreSQLParser.INTEGER);
                }
                break;
            case PostgreSQLParser.SMALLINT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8871;
                this.match(PostgreSQLParser.SMALLINT);
                }
                break;
            case PostgreSQLParser.BIGINT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8872;
                this.match(PostgreSQLParser.BIGINT);
                }
                break;
            case PostgreSQLParser.REAL:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8873;
                this.match(PostgreSQLParser.REAL);
                }
                break;
            case PostgreSQLParser.FLOAT_P:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8874;
                this.match(PostgreSQLParser.FLOAT_P);
                this.state = 8876;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 842, this.context) ) {
                case 1:
                    {
                    this.state = 8875;
                    this.float_();
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.DOUBLE_P:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8878;
                this.match(PostgreSQLParser.DOUBLE_P);
                this.state = 8879;
                this.match(PostgreSQLParser.PRECISION);
                }
                break;
            case PostgreSQLParser.DECIMAL_P:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 8880;
                this.match(PostgreSQLParser.DECIMAL_P);
                this.state = 8882;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 843, this.context) ) {
                case 1:
                    {
                    this.state = 8881;
                    this.type_modifiers_();
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.DEC:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 8884;
                this.match(PostgreSQLParser.DEC);
                this.state = 8886;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 844, this.context) ) {
                case 1:
                    {
                    this.state = 8885;
                    this.type_modifiers_();
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.NUMERIC:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 8888;
                this.match(PostgreSQLParser.NUMERIC);
                this.state = 8890;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 845, this.context) ) {
                case 1:
                    {
                    this.state = 8889;
                    this.type_modifiers_();
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.BOOLEAN_P:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 8892;
                this.match(PostgreSQLParser.BOOLEAN_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public float_(): Float_Context {
        let localContext = new Float_Context(this.context, this.state);
        this.enterRule(localContext, 1130, PostgreSQLParser.RULE_float_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8895;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8896;
            this.iconst();
            this.state = 8897;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bit(): BitContext {
        let localContext = new BitContext(this.context, this.state);
        this.enterRule(localContext, 1132, PostgreSQLParser.RULE_bit);
        try {
            this.state = 8901;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 847, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8899;
                this.bitwithlength();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8900;
                this.bitwithoutlength();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constbit(): ConstbitContext {
        let localContext = new ConstbitContext(this.context, this.state);
        this.enterRule(localContext, 1134, PostgreSQLParser.RULE_constbit);
        try {
            this.state = 8905;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 848, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8903;
                this.bitwithlength();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8904;
                this.bitwithoutlength();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bitwithlength(): BitwithlengthContext {
        let localContext = new BitwithlengthContext(this.context, this.state);
        this.enterRule(localContext, 1136, PostgreSQLParser.RULE_bitwithlength);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8907;
            this.match(PostgreSQLParser.BIT);
            this.state = 8909;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 405) {
                {
                this.state = 8908;
                this.varying_();
                }
            }

            this.state = 8911;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 8912;
            this.expr_list();
            this.state = 8913;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bitwithoutlength(): BitwithoutlengthContext {
        let localContext = new BitwithoutlengthContext(this.context, this.state);
        this.enterRule(localContext, 1138, PostgreSQLParser.RULE_bitwithoutlength);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8915;
            this.match(PostgreSQLParser.BIT);
            this.state = 8917;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 850, this.context) ) {
            case 1:
                {
                this.state = 8916;
                this.varying_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public character(): CharacterContext {
        let localContext = new CharacterContext(this.context, this.state);
        this.enterRule(localContext, 1140, PostgreSQLParser.RULE_character);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8919;
            this.character_c();
            this.state = 8924;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 851, this.context) ) {
            case 1:
                {
                this.state = 8920;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8921;
                this.iconst();
                this.state = 8922;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constcharacter(): ConstcharacterContext {
        let localContext = new ConstcharacterContext(this.context, this.state);
        this.enterRule(localContext, 1142, PostgreSQLParser.RULE_constcharacter);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8926;
            this.character_c();
            this.state = 8931;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 2) {
                {
                this.state = 8927;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8928;
                this.iconst();
                this.state = 8929;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public character_c(): Character_cContext {
        let localContext = new Character_cContext(this.context, this.state);
        this.enterRule(localContext, 1144, PostgreSQLParser.RULE_character_c);
        let _la: number;
        try {
            this.state = 8943;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.NCHAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8933;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 32771) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8935;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 853, this.context) ) {
                case 1:
                    {
                    this.state = 8934;
                    this.varying_();
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.VARCHAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8937;
                this.match(PostgreSQLParser.VARCHAR);
                }
                break;
            case PostgreSQLParser.NATIONAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8938;
                this.match(PostgreSQLParser.NATIONAL);
                this.state = 8939;
                _la = this.tokenStream.LA(1);
                if(!(_la === 422 || _la === 423)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 8941;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 854, this.context) ) {
                case 1:
                    {
                    this.state = 8940;
                    this.varying_();
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public varying_(): Varying_Context {
        let localContext = new Varying_Context(this.context, this.state);
        this.enterRule(localContext, 1146, PostgreSQLParser.RULE_varying_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8945;
            this.match(PostgreSQLParser.VARYING);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constdatetime(): ConstdatetimeContext {
        let localContext = new ConstdatetimeContext(this.context, this.state);
        this.enterRule(localContext, 1148, PostgreSQLParser.RULE_constdatetime);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8947;
            _la = this.tokenStream.LA(1);
            if(!(_la === 449 || _la === 450)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 8952;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 856, this.context) ) {
            case 1:
                {
                this.state = 8948;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8949;
                this.iconst();
                this.state = 8950;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
            this.state = 8955;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 857, this.context) ) {
            case 1:
                {
                this.state = 8954;
                this.timezone_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public constinterval(): ConstintervalContext {
        let localContext = new ConstintervalContext(this.context, this.state);
        this.enterRule(localContext, 1150, PostgreSQLParser.RULE_constinterval);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8957;
            this.match(PostgreSQLParser.INTERVAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timezone_(): Timezone_Context {
        let localContext = new Timezone_Context(this.context, this.state);
        this.enterRule(localContext, 1152, PostgreSQLParser.RULE_timezone_);
        try {
            this.state = 8965;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8959;
                this.match(PostgreSQLParser.WITH);
                this.state = 8960;
                this.match(PostgreSQLParser.TIME);
                this.state = 8961;
                this.match(PostgreSQLParser.ZONE);
                }
                break;
            case PostgreSQLParser.WITHOUT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8962;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 8963;
                this.match(PostgreSQLParser.TIME);
                this.state = 8964;
                this.match(PostgreSQLParser.ZONE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval_(): Interval_Context {
        let localContext = new Interval_Context(this.context, this.state);
        this.enterRule(localContext, 1154, PostgreSQLParser.RULE_interval_);
        try {
            this.state = 8992;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 861, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 8967;
                this.match(PostgreSQLParser.YEAR_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 8968;
                this.match(PostgreSQLParser.MONTH_P);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 8969;
                this.match(PostgreSQLParser.DAY_P);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 8970;
                this.match(PostgreSQLParser.HOUR_P);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 8971;
                this.match(PostgreSQLParser.MINUTE_P);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 8972;
                this.interval_second();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 8973;
                this.match(PostgreSQLParser.YEAR_P);
                this.state = 8974;
                this.match(PostgreSQLParser.TO);
                this.state = 8975;
                this.match(PostgreSQLParser.MONTH_P);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 8976;
                this.match(PostgreSQLParser.DAY_P);
                this.state = 8977;
                this.match(PostgreSQLParser.TO);
                this.state = 8981;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.HOUR_P:
                    {
                    this.state = 8978;
                    this.match(PostgreSQLParser.HOUR_P);
                    }
                    break;
                case PostgreSQLParser.MINUTE_P:
                    {
                    this.state = 8979;
                    this.match(PostgreSQLParser.MINUTE_P);
                    }
                    break;
                case PostgreSQLParser.SECOND_P:
                    {
                    this.state = 8980;
                    this.interval_second();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 8983;
                this.match(PostgreSQLParser.HOUR_P);
                this.state = 8984;
                this.match(PostgreSQLParser.TO);
                this.state = 8987;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.MINUTE_P:
                    {
                    this.state = 8985;
                    this.match(PostgreSQLParser.MINUTE_P);
                    }
                    break;
                case PostgreSQLParser.SECOND_P:
                    {
                    this.state = 8986;
                    this.interval_second();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 8989;
                this.match(PostgreSQLParser.MINUTE_P);
                this.state = 8990;
                this.match(PostgreSQLParser.TO);
                this.state = 8991;
                this.interval_second();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval_second(): Interval_secondContext {
        let localContext = new Interval_secondContext(this.context, this.state);
        this.enterRule(localContext, 1156, PostgreSQLParser.RULE_interval_second);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 8994;
            this.match(PostgreSQLParser.SECOND_P);
            this.state = 8999;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 862, this.context) ) {
            case 1:
                {
                this.state = 8995;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 8996;
                this.iconst();
                this.state = 8997;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonType(): JsonTypeContext {
        let localContext = new JsonTypeContext(this.context, this.state);
        this.enterRule(localContext, 1158, PostgreSQLParser.RULE_jsonType);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9001;
            this.match(PostgreSQLParser.JSON);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public escape_(): Escape_Context {
        let localContext = new Escape_Context(this.context, this.state);
        this.enterRule(localContext, 1160, PostgreSQLParser.RULE_escape_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9003;
            this.match(PostgreSQLParser.ESCAPE);
            this.state = 9004;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr(): A_exprContext {
        let localContext = new A_exprContext(this.context, this.state);
        this.enterRule(localContext, 1162, PostgreSQLParser.RULE_a_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9006;
            this.a_expr_qual();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_qual(): A_expr_qualContext {
        let localContext = new A_expr_qualContext(this.context, this.state);
        this.enterRule(localContext, 1164, PostgreSQLParser.RULE_a_expr_qual);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9008;
            this.a_expr_lessless();
            this.state = 9012;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 863, this.context) ) {
            case 1:
                {
                this.state = 9009;
                if (!(this.OnlyAcceptableOps())) {
                    throw this.createFailedPredicateException("this.OnlyAcceptableOps()");
                }
                this.state = 9010;
                this.qual_op();
                }
                break;
            case 2:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_lessless(): A_expr_lesslessContext {
        let localContext = new A_expr_lesslessContext(this.context, this.state);
        this.enterRule(localContext, 1166, PostgreSQLParser.RULE_a_expr_lessless);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9014;
            this.a_expr_or();
            this.state = 9019;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 864, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9015;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 18 || _la === 19)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 9016;
                    this.a_expr_or();
                    }
                    }
                }
                this.state = 9021;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 864, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_or(): A_expr_orContext {
        let localContext = new A_expr_orContext(this.context, this.state);
        this.enterRule(localContext, 1168, PostgreSQLParser.RULE_a_expr_or);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9022;
            this.a_expr_and();
            this.state = 9027;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 865, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9023;
                    this.match(PostgreSQLParser.OR);
                    this.state = 9024;
                    this.a_expr_and();
                    }
                    }
                }
                this.state = 9029;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 865, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_and(): A_expr_andContext {
        let localContext = new A_expr_andContext(this.context, this.state);
        this.enterRule(localContext, 1170, PostgreSQLParser.RULE_a_expr_and);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9030;
            this.a_expr_between();
            this.state = 9035;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 866, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9031;
                    this.match(PostgreSQLParser.AND);
                    this.state = 9032;
                    this.a_expr_between();
                    }
                    }
                }
                this.state = 9037;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 866, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_between(): A_expr_betweenContext {
        let localContext = new A_expr_betweenContext(this.context, this.state);
        this.enterRule(localContext, 1172, PostgreSQLParser.RULE_a_expr_between);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9038;
            this.a_expr_in();
            this.state = 9050;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 869, this.context) ) {
            case 1:
                {
                this.state = 9040;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 9039;
                    this.match(PostgreSQLParser.NOT);
                    }
                }

                this.state = 9042;
                this.match(PostgreSQLParser.BETWEEN);
                this.state = 9044;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 9043;
                    this.match(PostgreSQLParser.SYMMETRIC);
                    }
                }

                this.state = 9046;
                this.a_expr_in();
                this.state = 9047;
                this.match(PostgreSQLParser.AND);
                this.state = 9048;
                this.a_expr_in();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_in(): A_expr_inContext {
        let localContext = new A_expr_inContext(this.context, this.state);
        this.enterRule(localContext, 1174, PostgreSQLParser.RULE_a_expr_in);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9052;
            this.a_expr_unary_not();
            this.state = 9058;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 871, this.context) ) {
            case 1:
                {
                this.state = 9054;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 9053;
                    this.match(PostgreSQLParser.NOT);
                    }
                }

                this.state = 9056;
                this.match(PostgreSQLParser.IN_P);
                this.state = 9057;
                this.in_expr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_unary_not(): A_expr_unary_notContext {
        let localContext = new A_expr_unary_notContext(this.context, this.state);
        this.enterRule(localContext, 1176, PostgreSQLParser.RULE_a_expr_unary_not);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9061;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115) {
                {
                this.state = 9060;
                this.match(PostgreSQLParser.NOT);
                }
            }

            this.state = 9063;
            this.a_expr_isnull();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_isnull(): A_expr_isnullContext {
        let localContext = new A_expr_isnullContext(this.context, this.state);
        this.enterRule(localContext, 1178, PostgreSQLParser.RULE_a_expr_isnull);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9065;
            this.a_expr_is_not();
            this.state = 9067;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 873, this.context) ) {
            case 1:
                {
                this.state = 9066;
                _la = this.tokenStream.LA(1);
                if(!(_la === 155 || _la === 160)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_is_not(): A_expr_is_notContext {
        let localContext = new A_expr_is_notContext(this.context, this.state);
        this.enterRule(localContext, 1180, PostgreSQLParser.RULE_a_expr_is_not);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9069;
            this.a_expr_compare();
            this.state = 9093;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 877, this.context) ) {
            case 1:
                {
                this.state = 9070;
                this.match(PostgreSQLParser.IS);
                this.state = 9072;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 9071;
                    this.match(PostgreSQLParser.NOT);
                    }
                }

                this.state = 9091;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.NULL_P:
                    {
                    this.state = 9074;
                    this.match(PostgreSQLParser.NULL_P);
                    }
                    break;
                case PostgreSQLParser.TRUE_P:
                    {
                    this.state = 9075;
                    this.match(PostgreSQLParser.TRUE_P);
                    }
                    break;
                case PostgreSQLParser.FALSE_P:
                    {
                    this.state = 9076;
                    this.match(PostgreSQLParser.FALSE_P);
                    }
                    break;
                case PostgreSQLParser.UNKNOWN:
                    {
                    this.state = 9077;
                    this.match(PostgreSQLParser.UNKNOWN);
                    }
                    break;
                case PostgreSQLParser.DISTINCT:
                    {
                    this.state = 9078;
                    this.match(PostgreSQLParser.DISTINCT);
                    this.state = 9079;
                    this.match(PostgreSQLParser.FROM);
                    this.state = 9080;
                    this.a_expr();
                    }
                    break;
                case PostgreSQLParser.OF:
                    {
                    this.state = 9081;
                    this.match(PostgreSQLParser.OF);
                    this.state = 9082;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 9083;
                    this.type_list();
                    this.state = 9084;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                case PostgreSQLParser.DOCUMENT_P:
                    {
                    this.state = 9086;
                    this.match(PostgreSQLParser.DOCUMENT_P);
                    }
                    break;
                case PostgreSQLParser.NORMALIZED:
                case PostgreSQLParser.NFC:
                case PostgreSQLParser.NFD:
                case PostgreSQLParser.NFKC:
                case PostgreSQLParser.NFKD:
                    {
                    this.state = 9088;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & 15) !== 0)) {
                        {
                        this.state = 9087;
                        this.unicode_normal_form();
                        }
                    }

                    this.state = 9090;
                    this.match(PostgreSQLParser.NORMALIZED);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_compare(): A_expr_compareContext {
        let localContext = new A_expr_compareContext(this.context, this.state);
        this.enterRule(localContext, 1182, PostgreSQLParser.RULE_a_expr_compare);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9095;
            this.a_expr_like();
            this.state = 9107;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 879, this.context) ) {
            case 1:
                {
                this.state = 9096;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 44237824) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 9097;
                this.a_expr_like();
                }
                break;
            case 2:
                {
                this.state = 9098;
                this.subquery_Op();
                this.state = 9099;
                this.sub_type();
                this.state = 9105;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 878, this.context) ) {
                case 1:
                    {
                    this.state = 9100;
                    this.select_with_parens();
                    }
                    break;
                case 2:
                    {
                    this.state = 9101;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 9102;
                    this.a_expr();
                    this.state = 9103;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_like(): A_expr_likeContext {
        let localContext = new A_expr_likeContext(this.context, this.state);
        this.enterRule(localContext, 1184, PostgreSQLParser.RULE_a_expr_like);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9109;
            this.a_expr_qual_op();
            this.state = 9123;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 883, this.context) ) {
            case 1:
                {
                this.state = 9111;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 9110;
                    this.match(PostgreSQLParser.NOT);
                    }
                }

                this.state = 9117;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.LIKE:
                    {
                    this.state = 9113;
                    this.match(PostgreSQLParser.LIKE);
                    }
                    break;
                case PostgreSQLParser.ILIKE:
                    {
                    this.state = 9114;
                    this.match(PostgreSQLParser.ILIKE);
                    }
                    break;
                case PostgreSQLParser.SIMILAR:
                    {
                    this.state = 9115;
                    this.match(PostgreSQLParser.SIMILAR);
                    this.state = 9116;
                    this.match(PostgreSQLParser.TO);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 9119;
                this.a_expr_qual_op();
                this.state = 9121;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 882, this.context) ) {
                case 1:
                    {
                    this.state = 9120;
                    this.escape_();
                    }
                    break;
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_qual_op(): A_expr_qual_opContext {
        let localContext = new A_expr_qual_opContext(this.context, this.state);
        this.enterRule(localContext, 1186, PostgreSQLParser.RULE_a_expr_qual_op);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9125;
            this.a_expr_unary_qualop();
            this.state = 9131;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 884, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9126;
                    this.qual_op();
                    this.state = 9127;
                    this.a_expr_unary_qualop();
                    }
                    }
                }
                this.state = 9133;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 884, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_unary_qualop(): A_expr_unary_qualopContext {
        let localContext = new A_expr_unary_qualopContext(this.context, this.state);
        this.enterRule(localContext, 1188, PostgreSQLParser.RULE_a_expr_unary_qualop);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9135;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 885, this.context) ) {
            case 1:
                {
                this.state = 9134;
                this.qual_op();
                }
                break;
            }
            this.state = 9137;
            this.a_expr_add();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_add(): A_expr_addContext {
        let localContext = new A_expr_addContext(this.context, this.state);
        this.enterRule(localContext, 1190, PostgreSQLParser.RULE_a_expr_add);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9139;
            this.a_expr_mul();
            this.state = 9144;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 886, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9140;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 12 || _la === 13)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 9141;
                    this.a_expr_mul();
                    }
                    }
                }
                this.state = 9146;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 886, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_mul(): A_expr_mulContext {
        let localContext = new A_expr_mulContext(this.context, this.state);
        this.enterRule(localContext, 1192, PostgreSQLParser.RULE_a_expr_mul);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9147;
            this.a_expr_caret();
            this.state = 9152;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 887, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9148;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 134234624) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 9149;
                    this.a_expr_caret();
                    }
                    }
                }
                this.state = 9154;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 887, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_caret(): A_expr_caretContext {
        let localContext = new A_expr_caretContext(this.context, this.state);
        this.enterRule(localContext, 1194, PostgreSQLParser.RULE_a_expr_caret);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9155;
            this.a_expr_unary_sign();
            this.state = 9158;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 888, this.context) ) {
            case 1:
                {
                this.state = 9156;
                this.match(PostgreSQLParser.CARET);
                this.state = 9157;
                this.a_expr_unary_sign();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_unary_sign(): A_expr_unary_signContext {
        let localContext = new A_expr_unary_signContext(this.context, this.state);
        this.enterRule(localContext, 1196, PostgreSQLParser.RULE_a_expr_unary_sign);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9161;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 12 || _la === 13) {
                {
                this.state = 9160;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 9163;
            this.a_expr_at_time_zone();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_at_time_zone(): A_expr_at_time_zoneContext {
        let localContext = new A_expr_at_time_zoneContext(this.context, this.state);
        this.enterRule(localContext, 1198, PostgreSQLParser.RULE_a_expr_at_time_zone);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9165;
            this.a_expr_collate();
            this.state = 9170;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 890, this.context) ) {
            case 1:
                {
                this.state = 9166;
                this.match(PostgreSQLParser.AT);
                this.state = 9167;
                this.match(PostgreSQLParser.TIME);
                this.state = 9168;
                this.match(PostgreSQLParser.ZONE);
                this.state = 9169;
                this.a_expr();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_collate(): A_expr_collateContext {
        let localContext = new A_expr_collateContext(this.context, this.state);
        this.enterRule(localContext, 1200, PostgreSQLParser.RULE_a_expr_collate);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9172;
            this.a_expr_typecast();
            this.state = 9175;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 891, this.context) ) {
            case 1:
                {
                this.state = 9173;
                this.match(PostgreSQLParser.COLLATE);
                this.state = 9174;
                this.any_name();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public a_expr_typecast(): A_expr_typecastContext {
        let localContext = new A_expr_typecastContext(this.context, this.state);
        this.enterRule(localContext, 1202, PostgreSQLParser.RULE_a_expr_typecast);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9177;
            this.c_expr();
            this.state = 9182;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 892, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9178;
                    this.match(PostgreSQLParser.TYPECAST);
                    this.state = 9179;
                    this.typename();
                    }
                    }
                }
                this.state = 9184;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 892, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public b_expr(): B_exprContext;
    public b_expr(_p: number): B_exprContext;
    public b_expr(_p?: number): B_exprContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new B_exprContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 1204;
        this.enterRecursionRule(localContext, 1204, PostgreSQLParser.RULE_b_expr, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9192;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 893, this.context) ) {
            case 1:
                {
                this.state = 9186;
                this.c_expr();
                }
                break;
            case 2:
                {
                this.state = 9187;
                _la = this.tokenStream.LA(1);
                if(!(_la === 12 || _la === 13)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 9188;
                this.b_expr(9);
                }
                break;
            case 3:
                {
                this.state = 9189;
                this.qual_op();
                this.state = 9190;
                this.b_expr(3);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 9233;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 897, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 9231;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 896, this.context) ) {
                    case 1:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9194;
                        if (!(this.precpred(this.context, 8))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 8)");
                        }
                        this.state = 9195;
                        this.match(PostgreSQLParser.CARET);
                        this.state = 9196;
                        this.b_expr(9);
                        }
                        break;
                    case 2:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9197;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 9198;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 134234624) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 9199;
                        this.b_expr(8);
                        }
                        break;
                    case 3:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9200;
                        if (!(this.precpred(this.context, 6))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 6)");
                        }
                        this.state = 9201;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 12 || _la === 13)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 9202;
                        this.b_expr(7);
                        }
                        break;
                    case 4:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9203;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 9204;
                        this.qual_op();
                        this.state = 9205;
                        this.b_expr(6);
                        }
                        break;
                    case 5:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9207;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 9208;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 44237824) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 9209;
                        this.b_expr(5);
                        }
                        break;
                    case 6:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9210;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 9211;
                        this.match(PostgreSQLParser.TYPECAST);
                        this.state = 9212;
                        this.typename();
                        }
                        break;
                    case 7:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9213;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 9214;
                        this.qual_op();
                        }
                        break;
                    case 8:
                        {
                        localContext = new B_exprContext(parentContext, parentState);
                        this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_b_expr);
                        this.state = 9215;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 9216;
                        this.match(PostgreSQLParser.IS);
                        this.state = 9218;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 115) {
                            {
                            this.state = 9217;
                            this.match(PostgreSQLParser.NOT);
                            }
                        }

                        this.state = 9229;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case PostgreSQLParser.DISTINCT:
                            {
                            this.state = 9220;
                            this.match(PostgreSQLParser.DISTINCT);
                            this.state = 9221;
                            this.match(PostgreSQLParser.FROM);
                            this.state = 9222;
                            this.b_expr(0);
                            }
                            break;
                        case PostgreSQLParser.OF:
                            {
                            this.state = 9223;
                            this.match(PostgreSQLParser.OF);
                            this.state = 9224;
                            this.match(PostgreSQLParser.OPEN_PAREN);
                            this.state = 9225;
                            this.type_list();
                            this.state = 9226;
                            this.match(PostgreSQLParser.CLOSE_PAREN);
                            }
                            break;
                        case PostgreSQLParser.DOCUMENT_P:
                            {
                            this.state = 9228;
                            this.match(PostgreSQLParser.DOCUMENT_P);
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 9235;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 897, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public c_expr(): C_exprContext {
        let localContext = new C_exprContext(this.context, this.state);
        this.enterRule(localContext, 1206, PostgreSQLParser.RULE_c_expr);
        try {
            this.state = 9272;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 900, this.context) ) {
            case 1:
                localContext = new C_expr_existsContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9236;
                this.match(PostgreSQLParser.EXISTS);
                this.state = 9237;
                this.select_with_parens();
                }
                break;
            case 2:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9238;
                this.match(PostgreSQLParser.ARRAY);
                this.state = 9241;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.OPEN_PAREN:
                    {
                    this.state = 9239;
                    this.select_with_parens();
                    }
                    break;
                case PostgreSQLParser.OPEN_BRACKET:
                    {
                    this.state = 9240;
                    this.array_expr();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 3:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9243;
                this.match(PostgreSQLParser.PARAM);
                this.state = 9244;
                this.opt_indirection();
                }
                break;
            case 4:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9245;
                this.match(PostgreSQLParser.GROUPING);
                this.state = 9246;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9247;
                this.expr_list();
                this.state = 9248;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 5:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 9250;
                this.match(PostgreSQLParser.UNIQUE);
                this.state = 9251;
                this.select_with_parens();
                }
                break;
            case 6:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 9252;
                this.columnref();
                }
                break;
            case 7:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 9253;
                this.aexprconst();
                }
                break;
            case 8:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 9254;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9255;
                (localContext as C_expr_exprContext)._a_expr_in_parens = this.a_expr();
                this.state = 9256;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                this.state = 9257;
                this.opt_indirection();
                }
                break;
            case 9:
                localContext = new C_expr_caseContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 9259;
                this.case_expr();
                }
                break;
            case 10:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 9260;
                this.func_expr();
                }
                break;
            case 11:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 9261;
                this.select_with_parens();
                this.state = 9263;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 899, this.context) ) {
                case 1:
                    {
                    this.state = 9262;
                    this.indirection();
                    }
                    break;
                }
                }
                break;
            case 12:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 9265;
                this.explicit_row();
                }
                break;
            case 13:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 9266;
                this.implicit_row();
                }
                break;
            case 14:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 9267;
                this.row();
                this.state = 9268;
                this.match(PostgreSQLParser.OVERLAPS);
                this.state = 9269;
                this.row();
                }
                break;
            case 15:
                localContext = new C_expr_exprContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 9271;
                this.match(PostgreSQLParser.DEFAULT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public plsqlvariablename(): PlsqlvariablenameContext {
        let localContext = new PlsqlvariablenameContext(this.context, this.state);
        this.enterRule(localContext, 1208, PostgreSQLParser.RULE_plsqlvariablename);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9274;
            this.match(PostgreSQLParser.PLSQLVARIABLENAME);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_application(): Func_applicationContext {
        let localContext = new Func_applicationContext(this.context, this.state);
        this.enterRule(localContext, 1210, PostgreSQLParser.RULE_func_application);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9276;
            this.func_name();
            this.state = 9277;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 9299;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.PARAM:
            case PostgreSQLParser.Operator:
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.BinaryStringConstant:
            case PostgreSQLParser.HexadecimalStringConstant:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                {
                this.state = 9278;
                this.func_arg_list();
                this.state = 9282;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 9279;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 9280;
                    this.match(PostgreSQLParser.VARIADIC);
                    this.state = 9281;
                    this.func_arg_expr();
                    }
                }

                this.state = 9285;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 9284;
                    this.sort_clause_();
                    }
                }

                }
                break;
            case PostgreSQLParser.VARIADIC:
                {
                this.state = 9287;
                this.match(PostgreSQLParser.VARIADIC);
                this.state = 9288;
                this.func_arg_expr();
                this.state = 9290;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 9289;
                    this.sort_clause_();
                    }
                }

                }
                break;
            case PostgreSQLParser.ALL:
            case PostgreSQLParser.DISTINCT:
                {
                this.state = 9292;
                _la = this.tokenStream.LA(1);
                if(!(_la === 68 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 9293;
                this.func_arg_list();
                this.state = 9295;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 9294;
                    this.sort_clause_();
                    }
                }

                }
                break;
            case PostgreSQLParser.STAR:
                {
                this.state = 9297;
                this.match(PostgreSQLParser.STAR);
                }
                break;
            case PostgreSQLParser.CLOSE_PAREN:
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 9301;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr(): Func_exprContext {
        let localContext = new Func_exprContext(this.context, this.state);
        this.enterRule(localContext, 1212, PostgreSQLParser.RULE_func_expr);
        try {
            this.state = 9314;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 909, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9303;
                this.func_application();
                this.state = 9305;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 906, this.context) ) {
                case 1:
                    {
                    this.state = 9304;
                    this.within_group_clause();
                    }
                    break;
                }
                this.state = 9308;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 907, this.context) ) {
                case 1:
                    {
                    this.state = 9307;
                    this.filter_clause();
                    }
                    break;
                }
                this.state = 9311;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 908, this.context) ) {
                case 1:
                    {
                    this.state = 9310;
                    this.over_clause();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9313;
                this.func_expr_common_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr_windowless(): Func_expr_windowlessContext {
        let localContext = new Func_expr_windowlessContext(this.context, this.state);
        this.enterRule(localContext, 1214, PostgreSQLParser.RULE_func_expr_windowless);
        try {
            this.state = 9318;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 910, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9316;
                this.func_application();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9317;
                this.func_expr_common_subexpr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext {
        let localContext = new Func_expr_common_subexprContext(this.context, this.state);
        this.enterRule(localContext, 1216, PostgreSQLParser.RULE_func_expr_common_subexpr);
        let _la: number;
        try {
            this.state = 9626;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.COLLATION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9320;
                this.match(PostgreSQLParser.COLLATION);
                this.state = 9321;
                this.match(PostgreSQLParser.FOR);
                this.state = 9322;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9323;
                this.a_expr();
                this.state = 9324;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.CURRENT_DATE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9326;
                this.match(PostgreSQLParser.CURRENT_DATE);
                }
                break;
            case PostgreSQLParser.CURRENT_TIME:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9327;
                this.match(PostgreSQLParser.CURRENT_TIME);
                this.state = 9332;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 911, this.context) ) {
                case 1:
                    {
                    this.state = 9328;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 9329;
                    this.iconst();
                    this.state = 9330;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.CURRENT_TIMESTAMP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9334;
                this.match(PostgreSQLParser.CURRENT_TIMESTAMP);
                this.state = 9339;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 912, this.context) ) {
                case 1:
                    {
                    this.state = 9335;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 9336;
                    this.iconst();
                    this.state = 9337;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.LOCALTIME:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 9341;
                this.match(PostgreSQLParser.LOCALTIME);
                this.state = 9346;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 913, this.context) ) {
                case 1:
                    {
                    this.state = 9342;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 9343;
                    this.iconst();
                    this.state = 9344;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.LOCALTIMESTAMP:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 9348;
                this.match(PostgreSQLParser.LOCALTIMESTAMP);
                this.state = 9353;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 914, this.context) ) {
                case 1:
                    {
                    this.state = 9349;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 9350;
                    this.iconst();
                    this.state = 9351;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.CURRENT_ROLE:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 9355;
                this.match(PostgreSQLParser.CURRENT_ROLE);
                }
                break;
            case PostgreSQLParser.CURRENT_USER:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 9356;
                this.match(PostgreSQLParser.CURRENT_USER);
                }
                break;
            case PostgreSQLParser.SESSION_USER:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 9357;
                this.match(PostgreSQLParser.SESSION_USER);
                }
                break;
            case PostgreSQLParser.SYSTEM_USER:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 9358;
                this.match(PostgreSQLParser.SYSTEM_USER);
                }
                break;
            case PostgreSQLParser.USER:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 9359;
                this.match(PostgreSQLParser.USER);
                }
                break;
            case PostgreSQLParser.CURRENT_CATALOG:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 9360;
                this.match(PostgreSQLParser.CURRENT_CATALOG);
                }
                break;
            case PostgreSQLParser.CURRENT_SCHEMA:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 9361;
                this.match(PostgreSQLParser.CURRENT_SCHEMA);
                }
                break;
            case PostgreSQLParser.CAST:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 9362;
                this.match(PostgreSQLParser.CAST);
                this.state = 9363;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9364;
                this.a_expr();
                this.state = 9365;
                this.match(PostgreSQLParser.AS);
                this.state = 9366;
                this.typename();
                this.state = 9367;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.EXTRACT:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 9369;
                this.match(PostgreSQLParser.EXTRACT);
                this.state = 9370;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9372;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214 || _la === 256 || _la === 292 || _la === 295 || _la === 357 || _la === 415 || ((((_la - 554)) & ~0x1F) === 0 && ((1 << (_la - 554)) & 33565219) !== 0) || _la === 587) {
                    {
                    this.state = 9371;
                    this.extract_list();
                    }
                }

                this.state = 9374;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.NORMALIZE:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 9375;
                this.match(PostgreSQLParser.NORMALIZE);
                this.state = 9376;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9377;
                this.a_expr();
                this.state = 9380;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 9378;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 9379;
                    this.unicode_normal_form();
                    }
                }

                this.state = 9382;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.OVERLAY:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 9384;
                this.match(PostgreSQLParser.OVERLAY);
                this.state = 9385;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9390;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 918, this.context) ) {
                case 1:
                    {
                    this.state = 9386;
                    this.overlay_list();
                    }
                    break;
                case 2:
                    {
                    this.state = 9388;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                        {
                        this.state = 9387;
                        this.func_arg_list();
                        }
                    }

                    }
                    break;
                }
                this.state = 9392;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.POSITION:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 9393;
                this.match(PostgreSQLParser.POSITION);
                this.state = 9394;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9396;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537231361) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                    {
                    this.state = 9395;
                    this.position_list();
                    }
                }

                this.state = 9398;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.SUBSTRING:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 9399;
                this.match(PostgreSQLParser.SUBSTRING);
                this.state = 9400;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9405;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 921, this.context) ) {
                case 1:
                    {
                    this.state = 9401;
                    this.substr_list();
                    }
                    break;
                case 2:
                    {
                    this.state = 9403;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                        {
                        this.state = 9402;
                        this.func_arg_list();
                        }
                    }

                    }
                    break;
                }
                this.state = 9407;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.TREAT:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 9408;
                this.match(PostgreSQLParser.TREAT);
                this.state = 9409;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9410;
                this.a_expr();
                this.state = 9411;
                this.match(PostgreSQLParser.AS);
                this.state = 9412;
                this.typename();
                this.state = 9413;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.TRIM:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 9415;
                this.match(PostgreSQLParser.TRIM);
                this.state = 9416;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9418;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 77 || _la === 111 || _la === 133) {
                    {
                    this.state = 9417;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 77 || _la === 111 || _la === 133)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 9420;
                this.trim_list();
                this.state = 9421;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.NULLIF:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 9423;
                this.match(PostgreSQLParser.NULLIF);
                this.state = 9424;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9425;
                this.a_expr();
                this.state = 9426;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9427;
                this.a_expr();
                this.state = 9428;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.COALESCE:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 9430;
                this.match(PostgreSQLParser.COALESCE);
                this.state = 9431;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9432;
                this.expr_list();
                this.state = 9433;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.GREATEST:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 9435;
                this.match(PostgreSQLParser.GREATEST);
                this.state = 9436;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9437;
                this.expr_list();
                this.state = 9438;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.LEAST:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 9440;
                this.match(PostgreSQLParser.LEAST);
                this.state = 9441;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9442;
                this.expr_list();
                this.state = 9443;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLCONCAT:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 9445;
                this.match(PostgreSQLParser.XMLCONCAT);
                this.state = 9446;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9447;
                this.expr_list();
                this.state = 9448;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLELEMENT:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 9450;
                this.match(PostgreSQLParser.XMLELEMENT);
                this.state = 9451;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9452;
                this.match(PostgreSQLParser.NAME_P);
                this.state = 9453;
                this.colLabel();
                this.state = 9459;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 9454;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 9457;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 923, this.context) ) {
                    case 1:
                        {
                        this.state = 9455;
                        this.xml_attributes();
                        }
                        break;
                    case 2:
                        {
                        this.state = 9456;
                        this.expr_list();
                        }
                        break;
                    }
                    }
                }

                this.state = 9461;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLEXISTS:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 9463;
                this.match(PostgreSQLParser.XMLEXISTS);
                this.state = 9464;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9465;
                this.c_expr();
                this.state = 9466;
                this.xmlexists_argument();
                this.state = 9467;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLFOREST:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 9469;
                this.match(PostgreSQLParser.XMLFOREST);
                this.state = 9470;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9471;
                this.xml_attribute_list();
                this.state = 9472;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLPARSE:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 9474;
                this.match(PostgreSQLParser.XMLPARSE);
                this.state = 9475;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9476;
                this.document_or_content();
                this.state = 9477;
                this.a_expr();
                this.state = 9479;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 323 || _la === 378) {
                    {
                    this.state = 9478;
                    this.xml_whitespace_option();
                    }
                }

                this.state = 9481;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLPI:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 9483;
                this.match(PostgreSQLParser.XMLPI);
                this.state = 9484;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9485;
                this.match(PostgreSQLParser.NAME_P);
                this.state = 9486;
                this.colLabel();
                this.state = 9489;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 9487;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 9488;
                    this.a_expr();
                    }
                }

                this.state = 9491;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLROOT:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 9493;
                this.match(PostgreSQLParser.XMLROOT);
                this.state = 9494;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9495;
                this.match(PostgreSQLParser.XML_P);
                this.state = 9496;
                this.a_expr();
                this.state = 9497;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9498;
                this.xml_root_version();
                this.state = 9500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 6) {
                    {
                    this.state = 9499;
                    this.xml_root_standalone_();
                    }
                }

                this.state = 9502;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.XMLSERIALIZE:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 9504;
                this.match(PostgreSQLParser.XMLSERIALIZE);
                this.state = 9505;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9506;
                this.document_or_content();
                this.state = 9507;
                this.a_expr();
                this.state = 9508;
                this.match(PostgreSQLParser.AS);
                this.state = 9509;
                this.simpletypename();
                this.state = 9510;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_OBJECT:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 9512;
                this.match(PostgreSQLParser.JSON_OBJECT);
                this.state = 9513;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9528;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 932, this.context) ) {
                case 1:
                    {
                    this.state = 9514;
                    this.func_arg_list();
                    }
                    break;
                case 2:
                    {
                    this.state = 9515;
                    this.json_name_and_value_list(0);
                    this.state = 9517;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 43 || _la === 116) {
                        {
                        this.state = 9516;
                        this.json_object_constructor_null_clause();
                        }
                    }

                    this.state = 9520;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 143 || _la === 410) {
                        {
                        this.state = 9519;
                        this.json_key_uniqueness_constraint();
                        }
                    }

                    this.state = 9523;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 125) {
                        {
                        this.state = 9522;
                        this.json_returning_clause();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 9526;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 125) {
                        {
                        this.state = 9525;
                        this.json_returning_clause();
                        }
                    }

                    }
                    break;
                }
                this.state = 9530;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_ARRAY:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 9531;
                this.match(PostgreSQLParser.JSON_ARRAY);
                this.state = 9532;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9550;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 938, this.context) ) {
                case 1:
                    {
                    this.state = 9533;
                    this.json_value_expr_list(0);
                    this.state = 9535;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 43 || _la === 116) {
                        {
                        this.state = 9534;
                        this.json_array_constructor_null_clause();
                        }
                    }

                    this.state = 9538;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 125) {
                        {
                        this.state = 9537;
                        this.json_returning_clause();
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 9540;
                    this.select_no_parens();
                    this.state = 9542;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 67) {
                        {
                        this.state = 9541;
                        this.json_format_clause();
                        }
                    }

                    this.state = 9545;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 125) {
                        {
                        this.state = 9544;
                        this.json_returning_clause();
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 9548;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 125) {
                        {
                        this.state = 9547;
                        this.json_returning_clause();
                        }
                    }

                    }
                    break;
                }
                this.state = 9552;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 9553;
                this.match(PostgreSQLParser.JSON);
                this.state = 9554;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9555;
                this.json_value_expr();
                this.state = 9557;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143 || _la === 410) {
                    {
                    this.state = 9556;
                    this.json_key_uniqueness_constraint();
                    }
                }

                this.state = 9559;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_SCALAR:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 9561;
                this.match(PostgreSQLParser.JSON_SCALAR);
                this.state = 9562;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9563;
                this.a_expr();
                this.state = 9564;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_SERIALIZE:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 9566;
                this.match(PostgreSQLParser.JSON_SERIALIZE);
                this.state = 9567;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9568;
                this.json_value_expr();
                this.state = 9570;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 125) {
                    {
                    this.state = 9569;
                    this.json_returning_clause();
                    }
                }

                this.state = 9572;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.MERGE_ACTION:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 9574;
                this.match(PostgreSQLParser.MERGE_ACTION);
                this.state = 9575;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9576;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_QUERY:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 9577;
                this.match(PostgreSQLParser.JSON_QUERY);
                this.state = 9578;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9579;
                this.json_value_expr();
                this.state = 9580;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9581;
                this.a_expr();
                this.state = 9583;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 9582;
                    this.json_passing_clause();
                    }
                }

                this.state = 9586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 125) {
                    {
                    this.state = 9585;
                    this.json_returning_clause();
                    }
                }

                this.state = 9588;
                this.json_wrapper_behavior();
                this.state = 9590;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 53 || _la === 56) {
                    {
                    this.state = 9589;
                    this.json_quotes_clause();
                    }
                }

                this.state = 9593;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 50 || ((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 33554561) !== 0) || _la === 134 || _la === 396 || _la === 529) {
                    {
                    this.state = 9592;
                    this.json_behavior_clause();
                    }
                }

                this.state = 9595;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_EXISTS:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 9597;
                this.match(PostgreSQLParser.JSON_EXISTS);
                this.state = 9598;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9599;
                this.json_value_expr();
                this.state = 9600;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9601;
                this.a_expr();
                this.state = 9603;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 9602;
                    this.json_passing_clause();
                    }
                }

                this.state = 9606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 50 || ((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 33554561) !== 0) || _la === 134 || _la === 396 || _la === 529) {
                    {
                    this.state = 9605;
                    this.json_on_error_clause();
                    }
                }

                this.state = 9608;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_VALUE:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 9610;
                this.match(PostgreSQLParser.JSON_VALUE);
                this.state = 9611;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9612;
                this.json_value_expr();
                this.state = 9613;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9614;
                this.a_expr();
                this.state = 9616;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 317) {
                    {
                    this.state = 9615;
                    this.json_passing_clause();
                    }
                }

                this.state = 9619;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 125) {
                    {
                    this.state = 9618;
                    this.json_returning_clause();
                    }
                }

                this.state = 9622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 50 || ((((_la - 91)) & ~0x1F) === 0 && ((1 << (_la - 91)) & 33554561) !== 0) || _la === 134 || _la === 396 || _la === 529) {
                    {
                    this.state = 9621;
                    this.json_behavior_clause();
                    }
                }

                this.state = 9624;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_root_version(): Xml_root_versionContext {
        let localContext = new Xml_root_versionContext(this.context, this.state);
        this.enterRule(localContext, 1218, PostgreSQLParser.RULE_xml_root_version);
        try {
            this.state = 9633;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 951, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9628;
                this.match(PostgreSQLParser.VERSION_P);
                this.state = 9629;
                this.a_expr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9630;
                this.match(PostgreSQLParser.VERSION_P);
                this.state = 9631;
                this.match(PostgreSQLParser.NO);
                this.state = 9632;
                this.match(PostgreSQLParser.VALUE_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_root_standalone_(): Xml_root_standalone_Context {
        let localContext = new Xml_root_standalone_Context(this.context, this.state);
        this.enterRule(localContext, 1220, PostgreSQLParser.RULE_xml_root_standalone_);
        try {
            this.state = 9645;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 952, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9635;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9636;
                this.match(PostgreSQLParser.STANDALONE_P);
                this.state = 9637;
                this.match(PostgreSQLParser.YES_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9638;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9639;
                this.match(PostgreSQLParser.STANDALONE_P);
                this.state = 9640;
                this.match(PostgreSQLParser.NO);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9641;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9642;
                this.match(PostgreSQLParser.STANDALONE_P);
                this.state = 9643;
                this.match(PostgreSQLParser.NO);
                this.state = 9644;
                this.match(PostgreSQLParser.VALUE_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attributes(): Xml_attributesContext {
        let localContext = new Xml_attributesContext(this.context, this.state);
        this.enterRule(localContext, 1222, PostgreSQLParser.RULE_xml_attributes);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9647;
            this.match(PostgreSQLParser.XMLATTRIBUTES);
            this.state = 9648;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 9649;
            this.xml_attribute_list();
            this.state = 9650;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attribute_list(): Xml_attribute_listContext {
        let localContext = new Xml_attribute_listContext(this.context, this.state);
        this.enterRule(localContext, 1224, PostgreSQLParser.RULE_xml_attribute_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9652;
            this.xml_attribute_el();
            this.state = 9657;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 9653;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9654;
                this.xml_attribute_el();
                }
                }
                this.state = 9659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_attribute_el(): Xml_attribute_elContext {
        let localContext = new Xml_attribute_elContext(this.context, this.state);
        this.enterRule(localContext, 1226, PostgreSQLParser.RULE_xml_attribute_el);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9660;
            this.a_expr();
            this.state = 9663;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 9661;
                this.match(PostgreSQLParser.AS);
                this.state = 9662;
                this.colLabel();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public document_or_content(): Document_or_contentContext {
        let localContext = new Document_or_contentContext(this.context, this.state);
        this.enterRule(localContext, 1228, PostgreSQLParser.RULE_document_or_content);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9665;
            _la = this.tokenStream.LA(1);
            if(!(_la === 204 || _la === 226)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_whitespace_option(): Xml_whitespace_optionContext {
        let localContext = new Xml_whitespace_optionContext(this.context, this.state);
        this.enterRule(localContext, 1230, PostgreSQLParser.RULE_xml_whitespace_option);
        try {
            this.state = 9671;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.PRESERVE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9667;
                this.match(PostgreSQLParser.PRESERVE);
                this.state = 9668;
                this.match(PostgreSQLParser.WHITESPACE_P);
                }
                break;
            case PostgreSQLParser.STRIP_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9669;
                this.match(PostgreSQLParser.STRIP_P);
                this.state = 9670;
                this.match(PostgreSQLParser.WHITESPACE_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xmlexists_argument(): Xmlexists_argumentContext {
        let localContext = new Xmlexists_argumentContext(this.context, this.state);
        this.enterRule(localContext, 1232, PostgreSQLParser.RULE_xmlexists_argument);
        try {
            this.state = 9688;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 956, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9673;
                this.match(PostgreSQLParser.PASSING);
                this.state = 9674;
                this.c_expr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9675;
                this.match(PostgreSQLParser.PASSING);
                this.state = 9676;
                this.c_expr();
                this.state = 9677;
                this.xml_passing_mech();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9679;
                this.match(PostgreSQLParser.PASSING);
                this.state = 9680;
                this.xml_passing_mech();
                this.state = 9681;
                this.c_expr();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9683;
                this.match(PostgreSQLParser.PASSING);
                this.state = 9684;
                this.xml_passing_mech();
                this.state = 9685;
                this.c_expr();
                this.state = 9686;
                this.xml_passing_mech();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xml_passing_mech(): Xml_passing_mechContext {
        let localContext = new Xml_passing_mechContext(this.context, this.state);
        this.enterRule(localContext, 1234, PostgreSQLParser.RULE_xml_passing_mech);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9690;
            this.match(PostgreSQLParser.BY);
            this.state = 9691;
            _la = this.tokenStream.LA(1);
            if(!(_la === 335 || _la === 488)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public within_group_clause(): Within_group_clauseContext {
        let localContext = new Within_group_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1236, PostgreSQLParser.RULE_within_group_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9693;
            this.match(PostgreSQLParser.WITHIN);
            this.state = 9694;
            this.match(PostgreSQLParser.GROUP_P);
            this.state = 9695;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 9696;
            this.sort_clause();
            this.state = 9697;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filter_clause(): Filter_clauseContext {
        let localContext = new Filter_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1238, PostgreSQLParser.RULE_filter_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9699;
            this.match(PostgreSQLParser.FILTER);
            this.state = 9700;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 9701;
            this.match(PostgreSQLParser.WHERE);
            this.state = 9702;
            this.a_expr();
            this.state = 9703;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_clause(): Window_clauseContext {
        let localContext = new Window_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1240, PostgreSQLParser.RULE_window_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9705;
            this.match(PostgreSQLParser.WINDOW);
            this.state = 9706;
            this.window_definition_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition_list(): Window_definition_listContext {
        let localContext = new Window_definition_listContext(this.context, this.state);
        this.enterRule(localContext, 1242, PostgreSQLParser.RULE_window_definition_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9708;
            this.window_definition();
            this.state = 9713;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 9709;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9710;
                this.window_definition();
                }
                }
                this.state = 9715;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_definition(): Window_definitionContext {
        let localContext = new Window_definitionContext(this.context, this.state);
        this.enterRule(localContext, 1244, PostgreSQLParser.RULE_window_definition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9716;
            this.colid();
            this.state = 9717;
            this.match(PostgreSQLParser.AS);
            this.state = 9718;
            this.window_specification();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public over_clause(): Over_clauseContext {
        let localContext = new Over_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1246, PostgreSQLParser.RULE_over_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9720;
            this.match(PostgreSQLParser.OVER);
            this.state = 9723;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
                {
                this.state = 9721;
                this.window_specification();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                {
                this.state = 9722;
                this.colid();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_specification(): Window_specificationContext {
        let localContext = new Window_specificationContext(this.context, this.state);
        this.enterRule(localContext, 1248, PostgreSQLParser.RULE_window_specification);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9725;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 9727;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 959, this.context) ) {
            case 1:
                {
                this.state = 9726;
                this.existing_window_name_();
                }
                break;
            }
            this.state = 9730;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 316) {
                {
                this.state = 9729;
                this.partition_clause_();
                }
            }

            this.state = 9733;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 121) {
                {
                this.state = 9732;
                this.sort_clause_();
                }
            }

            this.state = 9736;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 330 || _la === 351 || _la === 519) {
                {
                this.state = 9735;
                this.frame_clause_();
                }
            }

            this.state = 9738;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existing_window_name_(): Existing_window_name_Context {
        let localContext = new Existing_window_name_Context(this.context, this.state);
        this.enterRule(localContext, 1250, PostgreSQLParser.RULE_existing_window_name_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9740;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partition_clause_(): Partition_clause_Context {
        let localContext = new Partition_clause_Context(this.context, this.state);
        this.enterRule(localContext, 1252, PostgreSQLParser.RULE_partition_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9742;
            this.match(PostgreSQLParser.PARTITION);
            this.state = 9743;
            this.match(PostgreSQLParser.BY);
            this.state = 9744;
            this.expr_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frame_clause_(): Frame_clause_Context {
        let localContext = new Frame_clause_Context(this.context, this.state);
        this.enterRule(localContext, 1254, PostgreSQLParser.RULE_frame_clause_);
        let _la: number;
        try {
            this.state = 9761;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.RANGE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9746;
                this.match(PostgreSQLParser.RANGE);
                this.state = 9747;
                this.frame_extent();
                this.state = 9749;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 9748;
                    this.window_exclusion_clause_();
                    }
                }

                }
                break;
            case PostgreSQLParser.ROWS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9751;
                this.match(PostgreSQLParser.ROWS);
                this.state = 9752;
                this.frame_extent();
                this.state = 9754;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 9753;
                    this.window_exclusion_clause_();
                    }
                }

                }
                break;
            case PostgreSQLParser.GROUPS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9756;
                this.match(PostgreSQLParser.GROUPS);
                this.state = 9757;
                this.frame_extent();
                this.state = 9759;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 9758;
                    this.window_exclusion_clause_();
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frame_extent(): Frame_extentContext {
        let localContext = new Frame_extentContext(this.context, this.state);
        this.enterRule(localContext, 1256, PostgreSQLParser.RULE_frame_extent);
        try {
            this.state = 9769;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 967, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9763;
                this.frame_bound();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9764;
                this.match(PostgreSQLParser.BETWEEN);
                this.state = 9765;
                this.frame_bound();
                this.state = 9766;
                this.match(PostgreSQLParser.AND);
                this.state = 9767;
                this.frame_bound();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public frame_bound(): Frame_boundContext {
        let localContext = new Frame_boundContext(this.context, this.state);
        this.enterRule(localContext, 1258, PostgreSQLParser.RULE_frame_bound);
        let _la: number;
        try {
            this.state = 9778;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 968, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9771;
                this.match(PostgreSQLParser.UNBOUNDED);
                this.state = 9772;
                _la = this.tokenStream.LA(1);
                if(!(_la === 246 || _la === 320)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9773;
                this.match(PostgreSQLParser.CURRENT_P);
                this.state = 9774;
                this.match(PostgreSQLParser.ROW);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9775;
                this.a_expr();
                this.state = 9776;
                _la = this.tokenStream.LA(1);
                if(!(_la === 246 || _la === 320)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public window_exclusion_clause_(): Window_exclusion_clause_Context {
        let localContext = new Window_exclusion_clause_Context(this.context, this.state);
        this.enterRule(localContext, 1260, PostgreSQLParser.RULE_window_exclusion_clause_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9780;
            this.match(PostgreSQLParser.EXCLUDE);
            this.state = 9787;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.CURRENT_P:
                {
                this.state = 9781;
                this.match(PostgreSQLParser.CURRENT_P);
                this.state = 9782;
                this.match(PostgreSQLParser.ROW);
                }
                break;
            case PostgreSQLParser.GROUP_P:
                {
                this.state = 9783;
                this.match(PostgreSQLParser.GROUP_P);
                }
                break;
            case PostgreSQLParser.TIES:
                {
                this.state = 9784;
                this.match(PostgreSQLParser.TIES);
                }
                break;
            case PostgreSQLParser.NO:
                {
                this.state = 9785;
                this.match(PostgreSQLParser.NO);
                this.state = 9786;
                this.match(PostgreSQLParser.OTHERS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public row(): RowContext {
        let localContext = new RowContext(this.context, this.state);
        this.enterRule(localContext, 1262, PostgreSQLParser.RULE_row);
        let _la: number;
        try {
            this.state = 9801;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.ROW:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9789;
                this.match(PostgreSQLParser.ROW);
                this.state = 9790;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9792;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                    {
                    this.state = 9791;
                    this.expr_list();
                    }
                }

                this.state = 9794;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.OPEN_PAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9795;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9796;
                this.expr_list();
                this.state = 9797;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9798;
                this.a_expr();
                this.state = 9799;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explicit_row(): Explicit_rowContext {
        let localContext = new Explicit_rowContext(this.context, this.state);
        this.enterRule(localContext, 1264, PostgreSQLParser.RULE_explicit_row);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9803;
            this.match(PostgreSQLParser.ROW);
            this.state = 9804;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 9806;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                {
                this.state = 9805;
                this.expr_list();
                }
            }

            this.state = 9808;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public implicit_row(): Implicit_rowContext {
        let localContext = new Implicit_rowContext(this.context, this.state);
        this.enterRule(localContext, 1266, PostgreSQLParser.RULE_implicit_row);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9810;
            this.match(PostgreSQLParser.OPEN_PAREN);
            this.state = 9811;
            this.expr_list();
            this.state = 9812;
            this.match(PostgreSQLParser.COMMA);
            this.state = 9813;
            this.a_expr();
            this.state = 9814;
            this.match(PostgreSQLParser.CLOSE_PAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sub_type(): Sub_typeContext {
        let localContext = new Sub_typeContext(this.context, this.state);
        this.enterRule(localContext, 1268, PostgreSQLParser.RULE_sub_type);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9816;
            _la = this.tokenStream.LA(1);
            if(!(_la === 68 || _la === 72 || _la === 128)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public all_op(): All_opContext {
        let localContext = new All_opContext(this.context, this.state);
        this.enterRule(localContext, 1270, PostgreSQLParser.RULE_all_op);
        try {
            this.state = 9820;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9818;
                this.match(PostgreSQLParser.Operator);
                }
                break;
            case PostgreSQLParser.STAR:
            case PostgreSQLParser.EQUAL:
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.SLASH:
            case PostgreSQLParser.CARET:
            case PostgreSQLParser.LT:
            case PostgreSQLParser.GT:
            case PostgreSQLParser.LESS_EQUALS:
            case PostgreSQLParser.GREATER_EQUALS:
            case PostgreSQLParser.NOT_EQUALS:
            case PostgreSQLParser.PERCENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9819;
                this.mathop();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mathop(): MathopContext {
        let localContext = new MathopContext(this.context, this.state);
        this.enterRule(localContext, 1272, PostgreSQLParser.RULE_mathop);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9822;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 178517504) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qual_op(): Qual_opContext {
        let localContext = new Qual_opContext(this.context, this.state);
        this.enterRule(localContext, 1274, PostgreSQLParser.RULE_qual_op);
        try {
            this.state = 9830;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9824;
                this.match(PostgreSQLParser.Operator);
                }
                break;
            case PostgreSQLParser.OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9825;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 9826;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9827;
                this.any_operator();
                this.state = 9828;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qual_all_op(): Qual_all_opContext {
        let localContext = new Qual_all_opContext(this.context, this.state);
        this.enterRule(localContext, 1276, PostgreSQLParser.RULE_qual_all_op);
        try {
            this.state = 9838;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.STAR:
            case PostgreSQLParser.EQUAL:
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.SLASH:
            case PostgreSQLParser.CARET:
            case PostgreSQLParser.LT:
            case PostgreSQLParser.GT:
            case PostgreSQLParser.LESS_EQUALS:
            case PostgreSQLParser.GREATER_EQUALS:
            case PostgreSQLParser.NOT_EQUALS:
            case PostgreSQLParser.PERCENT:
            case PostgreSQLParser.Operator:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9832;
                this.all_op();
                }
                break;
            case PostgreSQLParser.OPERATOR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9833;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 9834;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9835;
                this.any_operator();
                this.state = 9836;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subquery_Op(): Subquery_OpContext {
        let localContext = new Subquery_OpContext(this.context, this.state);
        this.enterRule(localContext, 1278, PostgreSQLParser.RULE_subquery_Op);
        try {
            this.state = 9852;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 976, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9840;
                this.all_op();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9841;
                this.match(PostgreSQLParser.OPERATOR);
                this.state = 9842;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9843;
                this.any_operator();
                this.state = 9844;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9846;
                this.match(PostgreSQLParser.LIKE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9847;
                this.match(PostgreSQLParser.NOT);
                this.state = 9848;
                this.match(PostgreSQLParser.LIKE);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 9849;
                this.match(PostgreSQLParser.ILIKE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 9850;
                this.match(PostgreSQLParser.NOT);
                this.state = 9851;
                this.match(PostgreSQLParser.ILIKE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expr_list(): Expr_listContext {
        let localContext = new Expr_listContext(this.context, this.state);
        this.enterRule(localContext, 1280, PostgreSQLParser.RULE_expr_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9854;
            this.a_expr();
            this.state = 9859;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 977, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9855;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 9856;
                    this.a_expr();
                    }
                    }
                }
                this.state = 9861;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 977, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_list(): Func_arg_listContext {
        let localContext = new Func_arg_listContext(this.context, this.state);
        this.enterRule(localContext, 1282, PostgreSQLParser.RULE_func_arg_list);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9862;
            this.func_arg_expr();
            this.state = 9867;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 978, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 9863;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 9864;
                    this.func_arg_expr();
                    }
                    }
                }
                this.state = 9869;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 978, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_arg_expr(): Func_arg_exprContext {
        let localContext = new Func_arg_exprContext(this.context, this.state);
        this.enterRule(localContext, 1284, PostgreSQLParser.RULE_func_arg_expr);
        let _la: number;
        try {
            this.state = 9875;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 979, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9870;
                this.a_expr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9871;
                this.param_name();
                this.state = 9872;
                _la = this.tokenStream.LA(1);
                if(!(_la === 20 || _la === 22)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 9873;
                this.a_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_list(): Type_listContext {
        let localContext = new Type_listContext(this.context, this.state);
        this.enterRule(localContext, 1286, PostgreSQLParser.RULE_type_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9877;
            this.typename();
            this.state = 9882;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 9878;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9879;
                this.typename();
                }
                }
                this.state = 9884;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array_expr(): Array_exprContext {
        let localContext = new Array_exprContext(this.context, this.state);
        this.enterRule(localContext, 1288, PostgreSQLParser.RULE_array_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9885;
            this.match(PostgreSQLParser.OPEN_BRACKET);
            this.state = 9888;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.PARAM:
            case PostgreSQLParser.Operator:
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.BinaryStringConstant:
            case PostgreSQLParser.HexadecimalStringConstant:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                {
                this.state = 9886;
                this.expr_list();
                }
                break;
            case PostgreSQLParser.OPEN_BRACKET:
                {
                this.state = 9887;
                this.array_expr_list();
                }
                break;
            case PostgreSQLParser.CLOSE_BRACKET:
                break;
            default:
                break;
            }
            this.state = 9890;
            this.match(PostgreSQLParser.CLOSE_BRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public array_expr_list(): Array_expr_listContext {
        let localContext = new Array_expr_listContext(this.context, this.state);
        this.enterRule(localContext, 1290, PostgreSQLParser.RULE_array_expr_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9892;
            this.array_expr();
            this.state = 9897;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 9893;
                this.match(PostgreSQLParser.COMMA);
                this.state = 9894;
                this.array_expr();
                }
                }
                this.state = 9899;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extract_list(): Extract_listContext {
        let localContext = new Extract_listContext(this.context, this.state);
        this.enterRule(localContext, 1292, PostgreSQLParser.RULE_extract_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9900;
            this.extract_arg();
            this.state = 9901;
            this.match(PostgreSQLParser.FROM);
            this.state = 9902;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extract_arg(): Extract_argContext {
        let localContext = new Extract_argContext(this.context, this.state);
        this.enterRule(localContext, 1294, PostgreSQLParser.RULE_extract_arg);
        try {
            this.state = 9912;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9904;
                this.identifier();
                }
                break;
            case PostgreSQLParser.YEAR_P:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9905;
                this.match(PostgreSQLParser.YEAR_P);
                }
                break;
            case PostgreSQLParser.MONTH_P:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9906;
                this.match(PostgreSQLParser.MONTH_P);
                }
                break;
            case PostgreSQLParser.DAY_P:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9907;
                this.match(PostgreSQLParser.DAY_P);
                }
                break;
            case PostgreSQLParser.HOUR_P:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 9908;
                this.match(PostgreSQLParser.HOUR_P);
                }
                break;
            case PostgreSQLParser.MINUTE_P:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 9909;
                this.match(PostgreSQLParser.MINUTE_P);
                }
                break;
            case PostgreSQLParser.SECOND_P:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 9910;
                this.match(PostgreSQLParser.SECOND_P);
                }
                break;
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 9911;
                this.sconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unicode_normal_form(): Unicode_normal_formContext {
        let localContext = new Unicode_normal_formContext(this.context, this.state);
        this.enterRule(localContext, 1296, PostgreSQLParser.RULE_unicode_normal_form);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9914;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public overlay_list(): Overlay_listContext {
        let localContext = new Overlay_listContext(this.context, this.state);
        this.enterRule(localContext, 1298, PostgreSQLParser.RULE_overlay_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9916;
            this.a_expr();
            this.state = 9917;
            this.match(PostgreSQLParser.PLACING);
            this.state = 9918;
            this.a_expr();
            this.state = 9919;
            this.match(PostgreSQLParser.FROM);
            this.state = 9920;
            this.a_expr();
            this.state = 9923;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 9921;
                this.match(PostgreSQLParser.FOR);
                this.state = 9922;
                this.a_expr();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public position_list(): Position_listContext {
        let localContext = new Position_listContext(this.context, this.state);
        this.enterRule(localContext, 1300, PostgreSQLParser.RULE_position_list);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9925;
            this.b_expr(0);
            this.state = 9926;
            this.match(PostgreSQLParser.IN_P);
            this.state = 9927;
            this.b_expr(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public substr_list(): Substr_listContext {
        let localContext = new Substr_listContext(this.context, this.state);
        this.enterRule(localContext, 1302, PostgreSQLParser.RULE_substr_list);
        try {
            this.state = 9955;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 985, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9929;
                this.a_expr();
                this.state = 9930;
                this.match(PostgreSQLParser.FROM);
                this.state = 9931;
                this.a_expr();
                this.state = 9932;
                this.match(PostgreSQLParser.FOR);
                this.state = 9933;
                this.a_expr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9935;
                this.a_expr();
                this.state = 9936;
                this.match(PostgreSQLParser.FOR);
                this.state = 9937;
                this.a_expr();
                this.state = 9938;
                this.match(PostgreSQLParser.FROM);
                this.state = 9939;
                this.a_expr();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9941;
                this.a_expr();
                this.state = 9942;
                this.match(PostgreSQLParser.FROM);
                this.state = 9943;
                this.a_expr();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 9945;
                this.a_expr();
                this.state = 9946;
                this.match(PostgreSQLParser.FOR);
                this.state = 9947;
                this.a_expr();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 9949;
                this.a_expr();
                this.state = 9950;
                this.match(PostgreSQLParser.SIMILAR);
                this.state = 9951;
                this.a_expr();
                this.state = 9952;
                this.match(PostgreSQLParser.ESCAPE);
                this.state = 9953;
                this.a_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trim_list(): Trim_listContext {
        let localContext = new Trim_listContext(this.context, this.state);
        this.enterRule(localContext, 1304, PostgreSQLParser.RULE_trim_list);
        try {
            this.state = 9964;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 986, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9957;
                this.a_expr();
                this.state = 9958;
                this.match(PostgreSQLParser.FROM);
                this.state = 9959;
                this.expr_list();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9961;
                this.match(PostgreSQLParser.FROM);
                this.state = 9962;
                this.expr_list();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 9963;
                this.expr_list();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public in_expr(): In_exprContext {
        let localContext = new In_exprContext(this.context, this.state);
        this.enterRule(localContext, 1306, PostgreSQLParser.RULE_in_expr);
        try {
            this.state = 9971;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 987, this.context) ) {
            case 1:
                localContext = new In_expr_selectContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 9966;
                this.select_with_parens();
                }
                break;
            case 2:
                localContext = new In_expr_listContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 9967;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 9968;
                this.expr_list();
                this.state = 9969;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public case_expr(): Case_exprContext {
        let localContext = new Case_exprContext(this.context, this.state);
        this.enterRule(localContext, 1308, PostgreSQLParser.RULE_case_expr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9973;
            this.match(PostgreSQLParser.CASE);
            this.state = 9975;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                {
                this.state = 9974;
                this.case_arg();
                }
            }

            this.state = 9977;
            this.when_clause_list();
            this.state = 9979;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 96) {
                {
                this.state = 9978;
                this.case_default();
                }
            }

            this.state = 9981;
            this.match(PostgreSQLParser.END_P);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_clause_list(): When_clause_listContext {
        let localContext = new When_clause_listContext(this.context, this.state);
        this.enterRule(localContext, 1310, PostgreSQLParser.RULE_when_clause_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9984;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            do {
                {
                {
                this.state = 9983;
                this.when_clause();
                }
                }
                this.state = 9986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            } while (_la === 140);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public when_clause(): When_clauseContext {
        let localContext = new When_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1312, PostgreSQLParser.RULE_when_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9988;
            this.match(PostgreSQLParser.WHEN);
            this.state = 9989;
            this.a_expr();
            this.state = 9990;
            this.match(PostgreSQLParser.THEN);
            this.state = 9991;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public case_default(): Case_defaultContext {
        let localContext = new Case_defaultContext(this.context, this.state);
        this.enterRule(localContext, 1314, PostgreSQLParser.RULE_case_default);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9993;
            this.match(PostgreSQLParser.ELSE);
            this.state = 9994;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public case_arg(): Case_argContext {
        let localContext = new Case_argContext(this.context, this.state);
        this.enterRule(localContext, 1316, PostgreSQLParser.RULE_case_arg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9996;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnref(): ColumnrefContext {
        let localContext = new ColumnrefContext(this.context, this.state);
        this.enterRule(localContext, 1318, PostgreSQLParser.RULE_columnref);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 9998;
            this.colid();
            this.state = 10000;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 991, this.context) ) {
            case 1:
                {
                this.state = 9999;
                this.indirection();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirection_el(): Indirection_elContext {
        let localContext = new Indirection_elContext(this.context, this.state);
        this.enterRule(localContext, 1320, PostgreSQLParser.RULE_indirection_el);
        let _la: number;
        try {
            this.state = 10019;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.DOT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10002;
                this.match(PostgreSQLParser.DOT);
                this.state = 10005;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.JSON:
                case PostgreSQLParser.JSON_ARRAY:
                case PostgreSQLParser.JSON_ARRAYAGG:
                case PostgreSQLParser.JSON_EXISTS:
                case PostgreSQLParser.JSON_OBJECT:
                case PostgreSQLParser.JSON_OBJECTAGG:
                case PostgreSQLParser.JSON_QUERY:
                case PostgreSQLParser.JSON_SCALAR:
                case PostgreSQLParser.JSON_SERIALIZE:
                case PostgreSQLParser.JSON_TABLE:
                case PostgreSQLParser.JSON_VALUE:
                case PostgreSQLParser.MERGE_ACTION:
                case PostgreSQLParser.SYSTEM_USER:
                case PostgreSQLParser.ABSENT:
                case PostgreSQLParser.ASENSITIVE:
                case PostgreSQLParser.ATOMIC:
                case PostgreSQLParser.BREADTH:
                case PostgreSQLParser.COMPRESSION:
                case PostgreSQLParser.CONDITIONAL:
                case PostgreSQLParser.DEPTH:
                case PostgreSQLParser.EMPTY_P:
                case PostgreSQLParser.FINALIZE:
                case PostgreSQLParser.INDENT:
                case PostgreSQLParser.KEEP:
                case PostgreSQLParser.KEYS:
                case PostgreSQLParser.NESTED:
                case PostgreSQLParser.OMIT:
                case PostgreSQLParser.PARAMETER:
                case PostgreSQLParser.PATH:
                case PostgreSQLParser.PLAN:
                case PostgreSQLParser.QUOTES:
                case PostgreSQLParser.SCALAR:
                case PostgreSQLParser.SOURCE:
                case PostgreSQLParser.STRING_P:
                case PostgreSQLParser.TARGET:
                case PostgreSQLParser.UNCONDITIONAL:
                case PostgreSQLParser.PERIOD:
                case PostgreSQLParser.ALL:
                case PostgreSQLParser.ANALYSE:
                case PostgreSQLParser.ANALYZE:
                case PostgreSQLParser.AND:
                case PostgreSQLParser.ANY:
                case PostgreSQLParser.ARRAY:
                case PostgreSQLParser.AS:
                case PostgreSQLParser.ASC:
                case PostgreSQLParser.ASYMMETRIC:
                case PostgreSQLParser.BOTH:
                case PostgreSQLParser.CASE:
                case PostgreSQLParser.CAST:
                case PostgreSQLParser.CHECK:
                case PostgreSQLParser.COLLATE:
                case PostgreSQLParser.COLUMN:
                case PostgreSQLParser.CONSTRAINT:
                case PostgreSQLParser.CREATE:
                case PostgreSQLParser.CURRENT_CATALOG:
                case PostgreSQLParser.CURRENT_DATE:
                case PostgreSQLParser.CURRENT_ROLE:
                case PostgreSQLParser.CURRENT_TIME:
                case PostgreSQLParser.CURRENT_TIMESTAMP:
                case PostgreSQLParser.CURRENT_USER:
                case PostgreSQLParser.DEFAULT:
                case PostgreSQLParser.DEFERRABLE:
                case PostgreSQLParser.DESC:
                case PostgreSQLParser.DISTINCT:
                case PostgreSQLParser.DO:
                case PostgreSQLParser.ELSE:
                case PostgreSQLParser.EXCEPT:
                case PostgreSQLParser.FALSE_P:
                case PostgreSQLParser.FETCH:
                case PostgreSQLParser.FOR:
                case PostgreSQLParser.FOREIGN:
                case PostgreSQLParser.FROM:
                case PostgreSQLParser.GRANT:
                case PostgreSQLParser.GROUP_P:
                case PostgreSQLParser.HAVING:
                case PostgreSQLParser.IN_P:
                case PostgreSQLParser.INITIALLY:
                case PostgreSQLParser.INTERSECT:
                case PostgreSQLParser.INTO:
                case PostgreSQLParser.LATERAL_P:
                case PostgreSQLParser.LEADING:
                case PostgreSQLParser.LIMIT:
                case PostgreSQLParser.LOCALTIME:
                case PostgreSQLParser.LOCALTIMESTAMP:
                case PostgreSQLParser.NOT:
                case PostgreSQLParser.NULL_P:
                case PostgreSQLParser.OFFSET:
                case PostgreSQLParser.ON:
                case PostgreSQLParser.ONLY:
                case PostgreSQLParser.OR:
                case PostgreSQLParser.ORDER:
                case PostgreSQLParser.PLACING:
                case PostgreSQLParser.PRIMARY:
                case PostgreSQLParser.REFERENCES:
                case PostgreSQLParser.RETURNING:
                case PostgreSQLParser.SELECT:
                case PostgreSQLParser.SESSION_USER:
                case PostgreSQLParser.SOME:
                case PostgreSQLParser.SYMMETRIC:
                case PostgreSQLParser.TABLE:
                case PostgreSQLParser.THEN:
                case PostgreSQLParser.TO:
                case PostgreSQLParser.TRAILING:
                case PostgreSQLParser.TRUE_P:
                case PostgreSQLParser.UNION:
                case PostgreSQLParser.UNIQUE:
                case PostgreSQLParser.USER:
                case PostgreSQLParser.USING:
                case PostgreSQLParser.VARIADIC:
                case PostgreSQLParser.WHEN:
                case PostgreSQLParser.WHERE:
                case PostgreSQLParser.WINDOW:
                case PostgreSQLParser.WITH:
                case PostgreSQLParser.AUTHORIZATION:
                case PostgreSQLParser.BINARY:
                case PostgreSQLParser.COLLATION:
                case PostgreSQLParser.CONCURRENTLY:
                case PostgreSQLParser.CROSS:
                case PostgreSQLParser.CURRENT_SCHEMA:
                case PostgreSQLParser.FREEZE:
                case PostgreSQLParser.FULL:
                case PostgreSQLParser.ILIKE:
                case PostgreSQLParser.INNER_P:
                case PostgreSQLParser.IS:
                case PostgreSQLParser.ISNULL:
                case PostgreSQLParser.JOIN:
                case PostgreSQLParser.LEFT:
                case PostgreSQLParser.LIKE:
                case PostgreSQLParser.NATURAL:
                case PostgreSQLParser.NOTNULL:
                case PostgreSQLParser.OUTER_P:
                case PostgreSQLParser.OVER:
                case PostgreSQLParser.OVERLAPS:
                case PostgreSQLParser.RIGHT:
                case PostgreSQLParser.SIMILAR:
                case PostgreSQLParser.VERBOSE:
                case PostgreSQLParser.ABORT_P:
                case PostgreSQLParser.ABSOLUTE_P:
                case PostgreSQLParser.ACCESS:
                case PostgreSQLParser.ACTION:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ADMIN:
                case PostgreSQLParser.AFTER:
                case PostgreSQLParser.AGGREGATE:
                case PostgreSQLParser.ALSO:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.ALWAYS:
                case PostgreSQLParser.ASSERTION:
                case PostgreSQLParser.ASSIGNMENT:
                case PostgreSQLParser.AT:
                case PostgreSQLParser.ATTRIBUTE:
                case PostgreSQLParser.BACKWARD:
                case PostgreSQLParser.BEFORE:
                case PostgreSQLParser.BEGIN_P:
                case PostgreSQLParser.BY:
                case PostgreSQLParser.CACHE:
                case PostgreSQLParser.CALLED:
                case PostgreSQLParser.CASCADE:
                case PostgreSQLParser.CASCADED:
                case PostgreSQLParser.CATALOG:
                case PostgreSQLParser.CHAIN:
                case PostgreSQLParser.CHARACTERISTICS:
                case PostgreSQLParser.CHECKPOINT:
                case PostgreSQLParser.CLASS:
                case PostgreSQLParser.CLOSE:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.COMMENT:
                case PostgreSQLParser.COMMENTS:
                case PostgreSQLParser.COMMIT:
                case PostgreSQLParser.COMMITTED:
                case PostgreSQLParser.CONFIGURATION:
                case PostgreSQLParser.CONNECTION:
                case PostgreSQLParser.CONSTRAINTS:
                case PostgreSQLParser.CONTENT_P:
                case PostgreSQLParser.CONTINUE_P:
                case PostgreSQLParser.CONVERSION_P:
                case PostgreSQLParser.COPY:
                case PostgreSQLParser.COST:
                case PostgreSQLParser.CSV:
                case PostgreSQLParser.CURSOR:
                case PostgreSQLParser.CYCLE:
                case PostgreSQLParser.DATA_P:
                case PostgreSQLParser.DATABASE:
                case PostgreSQLParser.DAY_P:
                case PostgreSQLParser.DEALLOCATE:
                case PostgreSQLParser.DECLARE:
                case PostgreSQLParser.DEFAULTS:
                case PostgreSQLParser.DEFERRED:
                case PostgreSQLParser.DEFINER:
                case PostgreSQLParser.DELETE_P:
                case PostgreSQLParser.DELIMITER:
                case PostgreSQLParser.DELIMITERS:
                case PostgreSQLParser.DICTIONARY:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DISCARD:
                case PostgreSQLParser.DOCUMENT_P:
                case PostgreSQLParser.DOMAIN_P:
                case PostgreSQLParser.DOUBLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.EACH:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.ENCODING:
                case PostgreSQLParser.ENCRYPTED:
                case PostgreSQLParser.ENUM_P:
                case PostgreSQLParser.ESCAPE:
                case PostgreSQLParser.EVENT:
                case PostgreSQLParser.EXCLUDE:
                case PostgreSQLParser.EXCLUDING:
                case PostgreSQLParser.EXCLUSIVE:
                case PostgreSQLParser.EXECUTE:
                case PostgreSQLParser.EXPLAIN:
                case PostgreSQLParser.EXTENSION:
                case PostgreSQLParser.EXTERNAL:
                case PostgreSQLParser.FAMILY:
                case PostgreSQLParser.FIRST_P:
                case PostgreSQLParser.FOLLOWING:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.FORWARD:
                case PostgreSQLParser.FUNCTION:
                case PostgreSQLParser.FUNCTIONS:
                case PostgreSQLParser.GLOBAL:
                case PostgreSQLParser.GRANTED:
                case PostgreSQLParser.HANDLER:
                case PostgreSQLParser.HEADER_P:
                case PostgreSQLParser.HOLD:
                case PostgreSQLParser.HOUR_P:
                case PostgreSQLParser.IDENTITY_P:
                case PostgreSQLParser.IF_P:
                case PostgreSQLParser.IMMEDIATE:
                case PostgreSQLParser.IMMUTABLE:
                case PostgreSQLParser.IMPLICIT_P:
                case PostgreSQLParser.INCLUDING:
                case PostgreSQLParser.INCREMENT:
                case PostgreSQLParser.INDEX:
                case PostgreSQLParser.INDEXES:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.INHERITS:
                case PostgreSQLParser.INLINE_P:
                case PostgreSQLParser.INSENSITIVE:
                case PostgreSQLParser.INSERT:
                case PostgreSQLParser.INSTEAD:
                case PostgreSQLParser.INVOKER:
                case PostgreSQLParser.ISOLATION:
                case PostgreSQLParser.KEY:
                case PostgreSQLParser.LABEL:
                case PostgreSQLParser.LANGUAGE:
                case PostgreSQLParser.LARGE_P:
                case PostgreSQLParser.LAST_P:
                case PostgreSQLParser.LEAKPROOF:
                case PostgreSQLParser.LEVEL:
                case PostgreSQLParser.LISTEN:
                case PostgreSQLParser.LOAD:
                case PostgreSQLParser.LOCAL:
                case PostgreSQLParser.LOCATION:
                case PostgreSQLParser.LOCK_P:
                case PostgreSQLParser.MAPPING:
                case PostgreSQLParser.MATCH:
                case PostgreSQLParser.MATCHED:
                case PostgreSQLParser.MATERIALIZED:
                case PostgreSQLParser.MAXVALUE:
                case PostgreSQLParser.MERGE:
                case PostgreSQLParser.MINUTE_P:
                case PostgreSQLParser.MINVALUE:
                case PostgreSQLParser.MODE:
                case PostgreSQLParser.MONTH_P:
                case PostgreSQLParser.MOVE:
                case PostgreSQLParser.NAME_P:
                case PostgreSQLParser.NAMES:
                case PostgreSQLParser.NEXT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.NOTHING:
                case PostgreSQLParser.NOTIFY:
                case PostgreSQLParser.NOWAIT:
                case PostgreSQLParser.NULLS_P:
                case PostgreSQLParser.OBJECT_P:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OFF:
                case PostgreSQLParser.OIDS:
                case PostgreSQLParser.OPERATOR:
                case PostgreSQLParser.OPTION:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNED:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.PARSER:
                case PostgreSQLParser.PARTIAL:
                case PostgreSQLParser.PARTITION:
                case PostgreSQLParser.PASSING:
                case PostgreSQLParser.PASSWORD:
                case PostgreSQLParser.PLANS:
                case PostgreSQLParser.PRECEDING:
                case PostgreSQLParser.PREPARE:
                case PostgreSQLParser.PREPARED:
                case PostgreSQLParser.PRESERVE:
                case PostgreSQLParser.PRIOR:
                case PostgreSQLParser.PRIVILEGES:
                case PostgreSQLParser.PROCEDURAL:
                case PostgreSQLParser.PROCEDURE:
                case PostgreSQLParser.PROGRAM:
                case PostgreSQLParser.QUOTE:
                case PostgreSQLParser.RANGE:
                case PostgreSQLParser.READ:
                case PostgreSQLParser.REASSIGN:
                case PostgreSQLParser.RECURSIVE:
                case PostgreSQLParser.REF:
                case PostgreSQLParser.REFRESH:
                case PostgreSQLParser.REINDEX:
                case PostgreSQLParser.RELATIVE_P:
                case PostgreSQLParser.RELEASE:
                case PostgreSQLParser.RENAME:
                case PostgreSQLParser.REPEATABLE:
                case PostgreSQLParser.REPLACE:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.RESTART:
                case PostgreSQLParser.RESTRICT:
                case PostgreSQLParser.RETURNS:
                case PostgreSQLParser.REVOKE:
                case PostgreSQLParser.ROLE:
                case PostgreSQLParser.ROLLBACK:
                case PostgreSQLParser.ROWS:
                case PostgreSQLParser.RULE:
                case PostgreSQLParser.SAVEPOINT:
                case PostgreSQLParser.SCHEMA:
                case PostgreSQLParser.SCROLL:
                case PostgreSQLParser.SEARCH:
                case PostgreSQLParser.SECOND_P:
                case PostgreSQLParser.SECURITY:
                case PostgreSQLParser.SEQUENCE:
                case PostgreSQLParser.SEQUENCES:
                case PostgreSQLParser.SERIALIZABLE:
                case PostgreSQLParser.SERVER:
                case PostgreSQLParser.SESSION:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.SHARE:
                case PostgreSQLParser.SHOW:
                case PostgreSQLParser.SIMPLE:
                case PostgreSQLParser.SNAPSHOT:
                case PostgreSQLParser.STABLE:
                case PostgreSQLParser.STANDALONE_P:
                case PostgreSQLParser.START:
                case PostgreSQLParser.STATEMENT:
                case PostgreSQLParser.STATISTICS:
                case PostgreSQLParser.STDIN:
                case PostgreSQLParser.STDOUT:
                case PostgreSQLParser.STORAGE:
                case PostgreSQLParser.STRICT_P:
                case PostgreSQLParser.STRIP_P:
                case PostgreSQLParser.SYSID:
                case PostgreSQLParser.SYSTEM_P:
                case PostgreSQLParser.TABLES:
                case PostgreSQLParser.TABLESPACE:
                case PostgreSQLParser.TEMP:
                case PostgreSQLParser.TEMPLATE:
                case PostgreSQLParser.TEMPORARY:
                case PostgreSQLParser.TEXT_P:
                case PostgreSQLParser.TRANSACTION:
                case PostgreSQLParser.TRIGGER:
                case PostgreSQLParser.TRUNCATE:
                case PostgreSQLParser.TRUSTED:
                case PostgreSQLParser.TYPE_P:
                case PostgreSQLParser.TYPES_P:
                case PostgreSQLParser.UNBOUNDED:
                case PostgreSQLParser.UNCOMMITTED:
                case PostgreSQLParser.UNENCRYPTED:
                case PostgreSQLParser.UNKNOWN:
                case PostgreSQLParser.UNLISTEN:
                case PostgreSQLParser.UNLOGGED:
                case PostgreSQLParser.UNTIL:
                case PostgreSQLParser.UPDATE:
                case PostgreSQLParser.VACUUM:
                case PostgreSQLParser.VALID:
                case PostgreSQLParser.VALIDATE:
                case PostgreSQLParser.VALIDATOR:
                case PostgreSQLParser.VARYING:
                case PostgreSQLParser.VERSION_P:
                case PostgreSQLParser.VIEW:
                case PostgreSQLParser.VOLATILE:
                case PostgreSQLParser.WHITESPACE_P:
                case PostgreSQLParser.WITHOUT:
                case PostgreSQLParser.WORK:
                case PostgreSQLParser.WRAPPER:
                case PostgreSQLParser.WRITE:
                case PostgreSQLParser.XML_P:
                case PostgreSQLParser.YEAR_P:
                case PostgreSQLParser.YES_P:
                case PostgreSQLParser.ZONE:
                case PostgreSQLParser.BETWEEN:
                case PostgreSQLParser.BIGINT:
                case PostgreSQLParser.BIT:
                case PostgreSQLParser.BOOLEAN_P:
                case PostgreSQLParser.CHAR_P:
                case PostgreSQLParser.CHARACTER:
                case PostgreSQLParser.COALESCE:
                case PostgreSQLParser.DEC:
                case PostgreSQLParser.DECIMAL_P:
                case PostgreSQLParser.EXISTS:
                case PostgreSQLParser.EXTRACT:
                case PostgreSQLParser.FLOAT_P:
                case PostgreSQLParser.GREATEST:
                case PostgreSQLParser.INOUT:
                case PostgreSQLParser.INT_P:
                case PostgreSQLParser.INTEGER:
                case PostgreSQLParser.INTERVAL:
                case PostgreSQLParser.LEAST:
                case PostgreSQLParser.NATIONAL:
                case PostgreSQLParser.NCHAR:
                case PostgreSQLParser.NONE:
                case PostgreSQLParser.NULLIF:
                case PostgreSQLParser.NUMERIC:
                case PostgreSQLParser.OVERLAY:
                case PostgreSQLParser.POSITION:
                case PostgreSQLParser.PRECISION:
                case PostgreSQLParser.REAL:
                case PostgreSQLParser.ROW:
                case PostgreSQLParser.SETOF:
                case PostgreSQLParser.SMALLINT:
                case PostgreSQLParser.SUBSTRING:
                case PostgreSQLParser.TIME:
                case PostgreSQLParser.TIMESTAMP:
                case PostgreSQLParser.TREAT:
                case PostgreSQLParser.TRIM:
                case PostgreSQLParser.VALUES:
                case PostgreSQLParser.VARCHAR:
                case PostgreSQLParser.XMLATTRIBUTES:
                case PostgreSQLParser.XMLCONCAT:
                case PostgreSQLParser.XMLELEMENT:
                case PostgreSQLParser.XMLEXISTS:
                case PostgreSQLParser.XMLFOREST:
                case PostgreSQLParser.XMLPARSE:
                case PostgreSQLParser.XMLPI:
                case PostgreSQLParser.XMLROOT:
                case PostgreSQLParser.XMLSERIALIZE:
                case PostgreSQLParser.CALL:
                case PostgreSQLParser.CURRENT_P:
                case PostgreSQLParser.ATTACH:
                case PostgreSQLParser.DETACH:
                case PostgreSQLParser.EXPRESSION:
                case PostgreSQLParser.GENERATED:
                case PostgreSQLParser.LOGGED:
                case PostgreSQLParser.STORED:
                case PostgreSQLParser.INCLUDE:
                case PostgreSQLParser.ROUTINE:
                case PostgreSQLParser.TRANSFORM:
                case PostgreSQLParser.IMPORT_P:
                case PostgreSQLParser.POLICY:
                case PostgreSQLParser.METHOD:
                case PostgreSQLParser.REFERENCING:
                case PostgreSQLParser.NEW:
                case PostgreSQLParser.OLD:
                case PostgreSQLParser.VALUE_P:
                case PostgreSQLParser.SUBSCRIPTION:
                case PostgreSQLParser.PUBLICATION:
                case PostgreSQLParser.OUT_P:
                case PostgreSQLParser.END_P:
                case PostgreSQLParser.ROUTINES:
                case PostgreSQLParser.SCHEMAS:
                case PostgreSQLParser.PROCEDURES:
                case PostgreSQLParser.INPUT_P:
                case PostgreSQLParser.SUPPORT:
                case PostgreSQLParser.PARALLEL:
                case PostgreSQLParser.SQL_P:
                case PostgreSQLParser.DEPENDS:
                case PostgreSQLParser.OVERRIDING:
                case PostgreSQLParser.CONFLICT:
                case PostgreSQLParser.SKIP_P:
                case PostgreSQLParser.LOCKED:
                case PostgreSQLParser.TIES:
                case PostgreSQLParser.ROLLUP:
                case PostgreSQLParser.CUBE:
                case PostgreSQLParser.GROUPING:
                case PostgreSQLParser.SETS:
                case PostgreSQLParser.TABLESAMPLE:
                case PostgreSQLParser.ORDINALITY:
                case PostgreSQLParser.XMLTABLE:
                case PostgreSQLParser.COLUMNS:
                case PostgreSQLParser.XMLNAMESPACES:
                case PostgreSQLParser.NORMALIZED:
                case PostgreSQLParser.WITHIN:
                case PostgreSQLParser.FILTER:
                case PostgreSQLParser.GROUPS:
                case PostgreSQLParser.OTHERS:
                case PostgreSQLParser.NFC:
                case PostgreSQLParser.NFD:
                case PostgreSQLParser.NFKC:
                case PostgreSQLParser.NFKD:
                case PostgreSQLParser.UESCAPE:
                case PostgreSQLParser.VIEWS:
                case PostgreSQLParser.NORMALIZE:
                case PostgreSQLParser.ERROR:
                case PostgreSQLParser.EXIT:
                case PostgreSQLParser.RETURN:
                case PostgreSQLParser.FORMAT:
                case PostgreSQLParser.Identifier:
                case PostgreSQLParser.QuotedIdentifier:
                case PostgreSQLParser.UnicodeQuotedIdentifier:
                case PostgreSQLParser.PLSQLVARIABLENAME:
                    {
                    this.state = 10003;
                    this.attr_name();
                    }
                    break;
                case PostgreSQLParser.STAR:
                    {
                    this.state = 10004;
                    this.match(PostgreSQLParser.STAR);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSQLParser.OPEN_BRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10007;
                this.match(PostgreSQLParser.OPEN_BRACKET);
                this.state = 10016;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 995, this.context) ) {
                case 1:
                    {
                    this.state = 10008;
                    this.a_expr();
                    }
                    break;
                case 2:
                    {
                    this.state = 10010;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                        {
                        this.state = 10009;
                        this.slice_bound_();
                        }
                    }

                    this.state = 10012;
                    this.match(PostgreSQLParser.COLON);
                    this.state = 10014;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4026544132) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 266387975) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & 537362433) !== 0) || ((((_la - 134)) & ~0x1F) === 0 && ((1 << (_la - 134)) & 4294966285) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 4294967295) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294967295) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967167) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294967295) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 4294966787) !== 0) || ((((_la - 486)) & ~0x1F) === 0 && ((1 << (_la - 486)) & 3758096319) !== 0) || ((((_la - 518)) & ~0x1F) === 0 && ((1 << (_la - 518)) & 16780287) !== 0) || ((((_la - 553)) & ~0x1F) === 0 && ((1 << (_la - 553)) & 109630535) !== 0) || _la === 587) {
                        {
                        this.state = 10013;
                        this.slice_bound_();
                        }
                    }

                    }
                    break;
                }
                this.state = 10018;
                this.match(PostgreSQLParser.CLOSE_BRACKET);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public slice_bound_(): Slice_bound_Context {
        let localContext = new Slice_bound_Context(this.context, this.state);
        this.enterRule(localContext, 1322, PostgreSQLParser.RULE_slice_bound_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10021;
            this.a_expr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indirection(): IndirectionContext {
        let localContext = new IndirectionContext(this.context, this.state);
        this.enterRule(localContext, 1324, PostgreSQLParser.RULE_indirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10024;
            this.errorHandler.sync(this);
            alternative = 1;
            do {
                switch (alternative) {
                case 1:
                    {
                    {
                    this.state = 10023;
                    this.indirection_el();
                    }
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 10026;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 997, this.context);
            } while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public opt_indirection(): Opt_indirectionContext {
        let localContext = new Opt_indirectionContext(this.context, this.state);
        this.enterRule(localContext, 1326, PostgreSQLParser.RULE_opt_indirection);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10031;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 998, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 10028;
                    this.indirection_el();
                    }
                    }
                }
                this.state = 10033;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 998, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_passing_clause(): Json_passing_clauseContext {
        let localContext = new Json_passing_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1328, PostgreSQLParser.RULE_json_passing_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10034;
            this.match(PostgreSQLParser.PASSING);
            this.state = 10035;
            this.json_arguments(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public json_arguments(): Json_argumentsContext;
    public json_arguments(_p: number): Json_argumentsContext;
    public json_arguments(_p?: number): Json_argumentsContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new Json_argumentsContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 1330;
        this.enterRecursionRule(localContext, 1330, PostgreSQLParser.RULE_json_arguments, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 10038;
            this.json_argument();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 10045;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 999, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new Json_argumentsContext(parentContext, parentState);
                    this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_json_arguments);
                    this.state = 10040;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 10041;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 10042;
                    this.json_argument();
                    }
                    }
                }
                this.state = 10047;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 999, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public json_argument(): Json_argumentContext {
        let localContext = new Json_argumentContext(this.context, this.state);
        this.enterRule(localContext, 1332, PostgreSQLParser.RULE_json_argument);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10048;
            this.json_value_expr();
            this.state = 10049;
            this.match(PostgreSQLParser.AS);
            this.state = 10050;
            this.colLabel();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_wrapper_behavior(): Json_wrapper_behaviorContext {
        let localContext = new Json_wrapper_behaviorContext(this.context, this.state);
        this.enterRule(localContext, 1334, PostgreSQLParser.RULE_json_wrapper_behavior);
        try {
            this.state = 10077;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1000, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10052;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 10053;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10054;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 10055;
                this.match(PostgreSQLParser.ARRAY);
                this.state = 10056;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10057;
                this.match(PostgreSQLParser.WITH);
                this.state = 10058;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10059;
                this.match(PostgreSQLParser.WITH);
                this.state = 10060;
                this.match(PostgreSQLParser.ARRAY);
                this.state = 10061;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 10062;
                this.match(PostgreSQLParser.WITH);
                this.state = 10063;
                this.match(PostgreSQLParser.CONDITIONAL);
                this.state = 10064;
                this.match(PostgreSQLParser.ARRAY);
                this.state = 10065;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 10066;
                this.match(PostgreSQLParser.WITH);
                this.state = 10067;
                this.match(PostgreSQLParser.UNCONDITIONAL);
                this.state = 10068;
                this.match(PostgreSQLParser.ARRAY);
                this.state = 10069;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 10070;
                this.match(PostgreSQLParser.WITH);
                this.state = 10071;
                this.match(PostgreSQLParser.CONDITIONAL);
                this.state = 10072;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 10073;
                this.match(PostgreSQLParser.WITH);
                this.state = 10074;
                this.match(PostgreSQLParser.UNCONDITIONAL);
                this.state = 10075;
                this.match(PostgreSQLParser.WRAPPER);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                // tslint:disable-next-line:no-empty
                {
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_behavior(): Json_behaviorContext {
        let localContext = new Json_behaviorContext(this.context, this.state);
        this.enterRule(localContext, 1336, PostgreSQLParser.RULE_json_behavior);
        try {
            this.state = 10082;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.DEFAULT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10079;
                this.match(PostgreSQLParser.DEFAULT);
                this.state = 10080;
                this.a_expr();
                }
                break;
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.ERROR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10081;
                this.json_behavior_type();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_behavior_type(): Json_behavior_typeContext {
        let localContext = new Json_behavior_typeContext(this.context, this.state);
        this.enterRule(localContext, 1338, PostgreSQLParser.RULE_json_behavior_type);
        try {
            this.state = 10094;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1002, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10084;
                this.match(PostgreSQLParser.ERROR);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10085;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10086;
                this.match(PostgreSQLParser.TRUE_P);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10087;
                this.match(PostgreSQLParser.FALSE_P);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 10088;
                this.match(PostgreSQLParser.UNKNOWN);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 10089;
                this.match(PostgreSQLParser.EMPTY_P);
                this.state = 10090;
                this.match(PostgreSQLParser.ARRAY);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 10091;
                this.match(PostgreSQLParser.EMPTY_P);
                this.state = 10092;
                this.match(PostgreSQLParser.OBJECT_P);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 10093;
                this.match(PostgreSQLParser.EMPTY_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_behavior_clause(): Json_behavior_clauseContext {
        let localContext = new Json_behavior_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1340, PostgreSQLParser.RULE_json_behavior_clause);
        try {
            this.state = 10111;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1003, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10096;
                this.json_behavior();
                this.state = 10097;
                this.match(PostgreSQLParser.ON);
                this.state = 10098;
                this.match(PostgreSQLParser.EMPTY_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10100;
                this.json_behavior();
                this.state = 10101;
                this.match(PostgreSQLParser.ON);
                this.state = 10102;
                this.match(PostgreSQLParser.ERROR);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10104;
                this.json_behavior();
                this.state = 10105;
                this.match(PostgreSQLParser.ON);
                this.state = 10106;
                this.match(PostgreSQLParser.EMPTY_P);
                this.state = 10107;
                this.json_behavior();
                this.state = 10108;
                this.match(PostgreSQLParser.ON);
                this.state = 10109;
                this.match(PostgreSQLParser.ERROR);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_on_error_clause(): Json_on_error_clauseContext {
        let localContext = new Json_on_error_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1342, PostgreSQLParser.RULE_json_on_error_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10113;
            this.json_behavior();
            this.state = 10114;
            this.match(PostgreSQLParser.ON);
            this.state = 10115;
            this.match(PostgreSQLParser.ERROR);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_value_expr(): Json_value_exprContext {
        let localContext = new Json_value_exprContext(this.context, this.state);
        this.enterRule(localContext, 1344, PostgreSQLParser.RULE_json_value_expr);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10117;
            this.a_expr();
            this.state = 10119;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1004, this.context) ) {
            case 1:
                {
                this.state = 10118;
                this.json_format_clause();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_format_clause(): Json_format_clauseContext {
        let localContext = new Json_format_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1346, PostgreSQLParser.RULE_json_format_clause);
        try {
            this.state = 10127;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1005, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10121;
                this.match(PostgreSQLParser.FORMAT_LA);
                this.state = 10122;
                this.match(PostgreSQLParser.JSON);
                this.state = 10123;
                this.match(PostgreSQLParser.ENCODING);
                this.state = 10124;
                this.name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10125;
                this.match(PostgreSQLParser.FORMAT_LA);
                this.state = 10126;
                this.match(PostgreSQLParser.JSON);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_quotes_clause(): Json_quotes_clauseContext {
        let localContext = new Json_quotes_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1348, PostgreSQLParser.RULE_json_quotes_clause);
        try {
            this.state = 10143;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1006, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10129;
                this.match(PostgreSQLParser.KEEP);
                this.state = 10130;
                this.match(PostgreSQLParser.QUOTES);
                this.state = 10131;
                this.match(PostgreSQLParser.ON);
                this.state = 10132;
                this.match(PostgreSQLParser.SCALAR);
                this.state = 10133;
                this.match(PostgreSQLParser.STRING_P);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10134;
                this.match(PostgreSQLParser.KEEP);
                this.state = 10135;
                this.match(PostgreSQLParser.QUOTES);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10136;
                this.match(PostgreSQLParser.OMIT);
                this.state = 10137;
                this.match(PostgreSQLParser.QUOTES);
                this.state = 10138;
                this.match(PostgreSQLParser.ON);
                this.state = 10139;
                this.match(PostgreSQLParser.SCALAR);
                this.state = 10140;
                this.match(PostgreSQLParser.STRING_P);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10141;
                this.match(PostgreSQLParser.OMIT);
                this.state = 10142;
                this.match(PostgreSQLParser.QUOTES);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_returning_clause(): Json_returning_clauseContext {
        let localContext = new Json_returning_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1350, PostgreSQLParser.RULE_json_returning_clause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10145;
            this.match(PostgreSQLParser.RETURNING);
            this.state = 10146;
            this.typename();
            this.state = 10148;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 67) {
                {
                this.state = 10147;
                this.json_format_clause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_predicate_type_constraint(): Json_predicate_type_constraintContext {
        let localContext = new Json_predicate_type_constraintContext(this.context, this.state);
        this.enterRule(localContext, 1352, PostgreSQLParser.RULE_json_predicate_type_constraint);
        try {
            this.state = 10159;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1008, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10150;
                this.match(PostgreSQLParser.JSON);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10151;
                this.match(PostgreSQLParser.JSON);
                this.state = 10152;
                this.match(PostgreSQLParser.VALUE_P);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10153;
                this.match(PostgreSQLParser.JSON);
                this.state = 10154;
                this.match(PostgreSQLParser.ARRAY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10155;
                this.match(PostgreSQLParser.JSON);
                this.state = 10156;
                this.match(PostgreSQLParser.OBJECT_P);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 10157;
                this.match(PostgreSQLParser.JSON);
                this.state = 10158;
                this.match(PostgreSQLParser.SCALAR);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_key_uniqueness_constraint(): Json_key_uniqueness_constraintContext {
        let localContext = new Json_key_uniqueness_constraintContext(this.context, this.state);
        this.enterRule(localContext, 1354, PostgreSQLParser.RULE_json_key_uniqueness_constraint);
        try {
            this.state = 10171;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1009, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10161;
                this.match(PostgreSQLParser.WITH);
                this.state = 10162;
                this.match(PostgreSQLParser.UNIQUE);
                this.state = 10163;
                this.match(PostgreSQLParser.KEYS);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10164;
                this.match(PostgreSQLParser.WITH);
                this.state = 10165;
                this.match(PostgreSQLParser.UNIQUE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10166;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 10167;
                this.match(PostgreSQLParser.UNIQUE);
                this.state = 10168;
                this.match(PostgreSQLParser.KEYS);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10169;
                this.match(PostgreSQLParser.WITHOUT);
                this.state = 10170;
                this.match(PostgreSQLParser.UNIQUE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public json_name_and_value_list(): Json_name_and_value_listContext;
    public json_name_and_value_list(_p: number): Json_name_and_value_listContext;
    public json_name_and_value_list(_p?: number): Json_name_and_value_listContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new Json_name_and_value_listContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 1356;
        this.enterRecursionRule(localContext, 1356, PostgreSQLParser.RULE_json_name_and_value_list, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 10174;
            this.json_name_and_value();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 10181;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1010, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new Json_name_and_value_listContext(parentContext, parentState);
                    this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_json_name_and_value_list);
                    this.state = 10176;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 10177;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 10178;
                    this.json_name_and_value();
                    }
                    }
                }
                this.state = 10183;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1010, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public json_name_and_value(): Json_name_and_valueContext {
        let localContext = new Json_name_and_valueContext(this.context, this.state);
        this.enterRule(localContext, 1358, PostgreSQLParser.RULE_json_name_and_value);
        try {
            this.state = 10192;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1011, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10184;
                this.c_expr();
                this.state = 10185;
                this.match(PostgreSQLParser.VALUE_P);
                this.state = 10186;
                this.json_value_expr();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10188;
                this.a_expr();
                this.state = 10189;
                this.match(PostgreSQLParser.COLON);
                this.state = 10190;
                this.json_value_expr();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_object_constructor_null_clause(): Json_object_constructor_null_clauseContext {
        let localContext = new Json_object_constructor_null_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1360, PostgreSQLParser.RULE_json_object_constructor_null_clause);
        try {
            this.state = 10200;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.NULL_P:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10194;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 10195;
                this.match(PostgreSQLParser.ON);
                this.state = 10196;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case PostgreSQLParser.ABSENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10197;
                this.match(PostgreSQLParser.ABSENT);
                this.state = 10198;
                this.match(PostgreSQLParser.ON);
                this.state = 10199;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_array_constructor_null_clause(): Json_array_constructor_null_clauseContext {
        let localContext = new Json_array_constructor_null_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1362, PostgreSQLParser.RULE_json_array_constructor_null_clause);
        try {
            this.state = 10208;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.NULL_P:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10202;
                this.match(PostgreSQLParser.NULL_P);
                this.state = 10203;
                this.match(PostgreSQLParser.ON);
                this.state = 10204;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            case PostgreSQLParser.ABSENT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10205;
                this.match(PostgreSQLParser.ABSENT);
                this.state = 10206;
                this.match(PostgreSQLParser.ON);
                this.state = 10207;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public json_value_expr_list(): Json_value_expr_listContext;
    public json_value_expr_list(_p: number): Json_value_expr_listContext;
    public json_value_expr_list(_p?: number): Json_value_expr_listContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new Json_value_expr_listContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 1364;
        this.enterRecursionRule(localContext, 1364, PostgreSQLParser.RULE_json_value_expr_list, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 10211;
            this.json_value_expr();
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 10218;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 1014, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new Json_value_expr_listContext(parentContext, parentState);
                    this.pushNewRecursionContext(localContext, _startState, PostgreSQLParser.RULE_json_value_expr_list);
                    this.state = 10213;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 10214;
                    this.match(PostgreSQLParser.COMMA);
                    this.state = 10215;
                    this.json_value_expr();
                    }
                    }
                }
                this.state = 10220;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 1014, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public json_aggregate_func(): Json_aggregate_funcContext {
        let localContext = new Json_aggregate_funcContext(this.context, this.state);
        this.enterRule(localContext, 1366, PostgreSQLParser.RULE_json_aggregate_func);
        let _la: number;
        try {
            this.state = 10245;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON_OBJECTAGG:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10221;
                this.match(PostgreSQLParser.JSON_OBJECTAGG);
                this.state = 10222;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 10223;
                this.json_name_and_value();
                this.state = 10225;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43 || _la === 116) {
                    {
                    this.state = 10224;
                    this.json_object_constructor_null_clause();
                    }
                }

                this.state = 10228;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 143 || _la === 410) {
                    {
                    this.state = 10227;
                    this.json_key_uniqueness_constraint();
                    }
                }

                this.state = 10230;
                this.json_returning_clause();
                this.state = 10231;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            case PostgreSQLParser.JSON_ARRAYAGG:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10233;
                this.match(PostgreSQLParser.JSON_ARRAYAGG);
                this.state = 10234;
                this.match(PostgreSQLParser.OPEN_PAREN);
                this.state = 10235;
                this.json_value_expr();
                this.state = 10237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 10236;
                    this.json_array_aggregate_order_by_clause();
                    }
                }

                this.state = 10240;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 43 || _la === 116) {
                    {
                    this.state = 10239;
                    this.json_array_constructor_null_clause();
                    }
                }

                this.state = 10242;
                this.json_returning_clause();
                this.state = 10243;
                this.match(PostgreSQLParser.CLOSE_PAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public json_array_aggregate_order_by_clause(): Json_array_aggregate_order_by_clauseContext {
        let localContext = new Json_array_aggregate_order_by_clauseContext(this.context, this.state);
        this.enterRule(localContext, 1368, PostgreSQLParser.RULE_json_array_aggregate_order_by_clause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10247;
            this.match(PostgreSQLParser.ORDER);
            this.state = 10248;
            this.match(PostgreSQLParser.BY);
            this.state = 10249;
            this.sortby_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public target_list_(): Target_list_Context {
        let localContext = new Target_list_Context(this.context, this.state);
        this.enterRule(localContext, 1370, PostgreSQLParser.RULE_target_list_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10251;
            this.target_list();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public target_list(): Target_listContext {
        let localContext = new Target_listContext(this.context, this.state);
        this.enterRule(localContext, 1372, PostgreSQLParser.RULE_target_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10253;
            this.target_el();
            this.state = 10258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 10254;
                this.match(PostgreSQLParser.COMMA);
                this.state = 10255;
                this.target_el();
                }
                }
                this.state = 10260;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public target_el(): Target_elContext {
        let localContext = new Target_elContext(this.context, this.state);
        this.enterRule(localContext, 1374, PostgreSQLParser.RULE_target_el);
        try {
            this.state = 10269;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.OPEN_PAREN:
            case PostgreSQLParser.PLUS:
            case PostgreSQLParser.MINUS:
            case PostgreSQLParser.PARAM:
            case PostgreSQLParser.Operator:
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.StringConstant:
            case PostgreSQLParser.UnicodeEscapeStringConstant:
            case PostgreSQLParser.BeginDollarStringConstant:
            case PostgreSQLParser.BinaryStringConstant:
            case PostgreSQLParser.HexadecimalStringConstant:
            case PostgreSQLParser.Integral:
            case PostgreSQLParser.Numeric:
            case PostgreSQLParser.PLSQLVARIABLENAME:
            case PostgreSQLParser.EscapeStringConstant:
                localContext = new Target_labelContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10261;
                this.a_expr();
                this.state = 10266;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.AS:
                    {
                    this.state = 10262;
                    this.match(PostgreSQLParser.AS);
                    this.state = 10263;
                    this.colLabel();
                    }
                    break;
                case PostgreSQLParser.JSON:
                case PostgreSQLParser.JSON_ARRAY:
                case PostgreSQLParser.JSON_ARRAYAGG:
                case PostgreSQLParser.JSON_EXISTS:
                case PostgreSQLParser.JSON_OBJECT:
                case PostgreSQLParser.JSON_OBJECTAGG:
                case PostgreSQLParser.JSON_QUERY:
                case PostgreSQLParser.JSON_SCALAR:
                case PostgreSQLParser.JSON_SERIALIZE:
                case PostgreSQLParser.JSON_TABLE:
                case PostgreSQLParser.JSON_VALUE:
                case PostgreSQLParser.MERGE_ACTION:
                case PostgreSQLParser.SYSTEM_USER:
                case PostgreSQLParser.ABSENT:
                case PostgreSQLParser.ASENSITIVE:
                case PostgreSQLParser.ATOMIC:
                case PostgreSQLParser.BREADTH:
                case PostgreSQLParser.COMPRESSION:
                case PostgreSQLParser.CONDITIONAL:
                case PostgreSQLParser.DEPTH:
                case PostgreSQLParser.EMPTY_P:
                case PostgreSQLParser.FINALIZE:
                case PostgreSQLParser.INDENT:
                case PostgreSQLParser.KEEP:
                case PostgreSQLParser.KEYS:
                case PostgreSQLParser.NESTED:
                case PostgreSQLParser.OMIT:
                case PostgreSQLParser.PARAMETER:
                case PostgreSQLParser.PATH:
                case PostgreSQLParser.PLAN:
                case PostgreSQLParser.QUOTES:
                case PostgreSQLParser.SCALAR:
                case PostgreSQLParser.SOURCE:
                case PostgreSQLParser.STRING_P:
                case PostgreSQLParser.TARGET:
                case PostgreSQLParser.UNCONDITIONAL:
                case PostgreSQLParser.PERIOD:
                case PostgreSQLParser.ALL:
                case PostgreSQLParser.ANALYSE:
                case PostgreSQLParser.ANALYZE:
                case PostgreSQLParser.AND:
                case PostgreSQLParser.ANY:
                case PostgreSQLParser.ASC:
                case PostgreSQLParser.ASYMMETRIC:
                case PostgreSQLParser.BOTH:
                case PostgreSQLParser.CASE:
                case PostgreSQLParser.CAST:
                case PostgreSQLParser.CHECK:
                case PostgreSQLParser.COLLATE:
                case PostgreSQLParser.COLUMN:
                case PostgreSQLParser.CONSTRAINT:
                case PostgreSQLParser.CURRENT_CATALOG:
                case PostgreSQLParser.CURRENT_DATE:
                case PostgreSQLParser.CURRENT_ROLE:
                case PostgreSQLParser.CURRENT_TIME:
                case PostgreSQLParser.CURRENT_TIMESTAMP:
                case PostgreSQLParser.CURRENT_USER:
                case PostgreSQLParser.DEFAULT:
                case PostgreSQLParser.DEFERRABLE:
                case PostgreSQLParser.DESC:
                case PostgreSQLParser.DISTINCT:
                case PostgreSQLParser.DO:
                case PostgreSQLParser.ELSE:
                case PostgreSQLParser.FALSE_P:
                case PostgreSQLParser.FOREIGN:
                case PostgreSQLParser.IN_P:
                case PostgreSQLParser.INITIALLY:
                case PostgreSQLParser.LATERAL_P:
                case PostgreSQLParser.LEADING:
                case PostgreSQLParser.LOCALTIME:
                case PostgreSQLParser.LOCALTIMESTAMP:
                case PostgreSQLParser.NOT:
                case PostgreSQLParser.NULL_P:
                case PostgreSQLParser.ONLY:
                case PostgreSQLParser.OR:
                case PostgreSQLParser.PLACING:
                case PostgreSQLParser.PRIMARY:
                case PostgreSQLParser.REFERENCES:
                case PostgreSQLParser.SELECT:
                case PostgreSQLParser.SESSION_USER:
                case PostgreSQLParser.SOME:
                case PostgreSQLParser.SYMMETRIC:
                case PostgreSQLParser.TABLE:
                case PostgreSQLParser.THEN:
                case PostgreSQLParser.TRAILING:
                case PostgreSQLParser.TRUE_P:
                case PostgreSQLParser.UNIQUE:
                case PostgreSQLParser.USER:
                case PostgreSQLParser.USING:
                case PostgreSQLParser.VARIADIC:
                case PostgreSQLParser.WHEN:
                case PostgreSQLParser.AUTHORIZATION:
                case PostgreSQLParser.BINARY:
                case PostgreSQLParser.COLLATION:
                case PostgreSQLParser.CONCURRENTLY:
                case PostgreSQLParser.CROSS:
                case PostgreSQLParser.CURRENT_SCHEMA:
                case PostgreSQLParser.FREEZE:
                case PostgreSQLParser.FULL:
                case PostgreSQLParser.ILIKE:
                case PostgreSQLParser.INNER_P:
                case PostgreSQLParser.IS:
                case PostgreSQLParser.JOIN:
                case PostgreSQLParser.LEFT:
                case PostgreSQLParser.LIKE:
                case PostgreSQLParser.NATURAL:
                case PostgreSQLParser.OUTER_P:
                case PostgreSQLParser.RIGHT:
                case PostgreSQLParser.SIMILAR:
                case PostgreSQLParser.VERBOSE:
                case PostgreSQLParser.ABORT_P:
                case PostgreSQLParser.ABSOLUTE_P:
                case PostgreSQLParser.ACCESS:
                case PostgreSQLParser.ACTION:
                case PostgreSQLParser.ADD_P:
                case PostgreSQLParser.ADMIN:
                case PostgreSQLParser.AFTER:
                case PostgreSQLParser.AGGREGATE:
                case PostgreSQLParser.ALSO:
                case PostgreSQLParser.ALTER:
                case PostgreSQLParser.ALWAYS:
                case PostgreSQLParser.ASSERTION:
                case PostgreSQLParser.ASSIGNMENT:
                case PostgreSQLParser.AT:
                case PostgreSQLParser.ATTRIBUTE:
                case PostgreSQLParser.BACKWARD:
                case PostgreSQLParser.BEFORE:
                case PostgreSQLParser.BEGIN_P:
                case PostgreSQLParser.BY:
                case PostgreSQLParser.CACHE:
                case PostgreSQLParser.CALLED:
                case PostgreSQLParser.CASCADE:
                case PostgreSQLParser.CASCADED:
                case PostgreSQLParser.CATALOG:
                case PostgreSQLParser.CHAIN:
                case PostgreSQLParser.CHARACTERISTICS:
                case PostgreSQLParser.CHECKPOINT:
                case PostgreSQLParser.CLASS:
                case PostgreSQLParser.CLOSE:
                case PostgreSQLParser.CLUSTER:
                case PostgreSQLParser.COMMENT:
                case PostgreSQLParser.COMMENTS:
                case PostgreSQLParser.COMMIT:
                case PostgreSQLParser.COMMITTED:
                case PostgreSQLParser.CONFIGURATION:
                case PostgreSQLParser.CONNECTION:
                case PostgreSQLParser.CONSTRAINTS:
                case PostgreSQLParser.CONTENT_P:
                case PostgreSQLParser.CONTINUE_P:
                case PostgreSQLParser.CONVERSION_P:
                case PostgreSQLParser.COPY:
                case PostgreSQLParser.COST:
                case PostgreSQLParser.CSV:
                case PostgreSQLParser.CURSOR:
                case PostgreSQLParser.CYCLE:
                case PostgreSQLParser.DATA_P:
                case PostgreSQLParser.DATABASE:
                case PostgreSQLParser.DEALLOCATE:
                case PostgreSQLParser.DECLARE:
                case PostgreSQLParser.DEFAULTS:
                case PostgreSQLParser.DEFERRED:
                case PostgreSQLParser.DEFINER:
                case PostgreSQLParser.DELETE_P:
                case PostgreSQLParser.DELIMITER:
                case PostgreSQLParser.DELIMITERS:
                case PostgreSQLParser.DICTIONARY:
                case PostgreSQLParser.DISABLE_P:
                case PostgreSQLParser.DISCARD:
                case PostgreSQLParser.DOCUMENT_P:
                case PostgreSQLParser.DOMAIN_P:
                case PostgreSQLParser.DOUBLE_P:
                case PostgreSQLParser.DROP:
                case PostgreSQLParser.EACH:
                case PostgreSQLParser.ENABLE_P:
                case PostgreSQLParser.ENCODING:
                case PostgreSQLParser.ENCRYPTED:
                case PostgreSQLParser.ENUM_P:
                case PostgreSQLParser.ESCAPE:
                case PostgreSQLParser.EVENT:
                case PostgreSQLParser.EXCLUDE:
                case PostgreSQLParser.EXCLUDING:
                case PostgreSQLParser.EXCLUSIVE:
                case PostgreSQLParser.EXECUTE:
                case PostgreSQLParser.EXPLAIN:
                case PostgreSQLParser.EXTENSION:
                case PostgreSQLParser.EXTERNAL:
                case PostgreSQLParser.FAMILY:
                case PostgreSQLParser.FIRST_P:
                case PostgreSQLParser.FOLLOWING:
                case PostgreSQLParser.FORCE:
                case PostgreSQLParser.FORWARD:
                case PostgreSQLParser.FUNCTION:
                case PostgreSQLParser.FUNCTIONS:
                case PostgreSQLParser.GLOBAL:
                case PostgreSQLParser.GRANTED:
                case PostgreSQLParser.HANDLER:
                case PostgreSQLParser.HEADER_P:
                case PostgreSQLParser.HOLD:
                case PostgreSQLParser.IDENTITY_P:
                case PostgreSQLParser.IF_P:
                case PostgreSQLParser.IMMEDIATE:
                case PostgreSQLParser.IMMUTABLE:
                case PostgreSQLParser.IMPLICIT_P:
                case PostgreSQLParser.INCLUDING:
                case PostgreSQLParser.INCREMENT:
                case PostgreSQLParser.INDEX:
                case PostgreSQLParser.INDEXES:
                case PostgreSQLParser.INHERIT:
                case PostgreSQLParser.INHERITS:
                case PostgreSQLParser.INLINE_P:
                case PostgreSQLParser.INSENSITIVE:
                case PostgreSQLParser.INSERT:
                case PostgreSQLParser.INSTEAD:
                case PostgreSQLParser.INVOKER:
                case PostgreSQLParser.ISOLATION:
                case PostgreSQLParser.KEY:
                case PostgreSQLParser.LABEL:
                case PostgreSQLParser.LANGUAGE:
                case PostgreSQLParser.LARGE_P:
                case PostgreSQLParser.LAST_P:
                case PostgreSQLParser.LEAKPROOF:
                case PostgreSQLParser.LEVEL:
                case PostgreSQLParser.LISTEN:
                case PostgreSQLParser.LOAD:
                case PostgreSQLParser.LOCAL:
                case PostgreSQLParser.LOCATION:
                case PostgreSQLParser.LOCK_P:
                case PostgreSQLParser.MAPPING:
                case PostgreSQLParser.MATCH:
                case PostgreSQLParser.MATCHED:
                case PostgreSQLParser.MATERIALIZED:
                case PostgreSQLParser.MAXVALUE:
                case PostgreSQLParser.MERGE:
                case PostgreSQLParser.MINVALUE:
                case PostgreSQLParser.MODE:
                case PostgreSQLParser.MOVE:
                case PostgreSQLParser.NAME_P:
                case PostgreSQLParser.NAMES:
                case PostgreSQLParser.NEXT:
                case PostgreSQLParser.NO:
                case PostgreSQLParser.NOTHING:
                case PostgreSQLParser.NOTIFY:
                case PostgreSQLParser.NOWAIT:
                case PostgreSQLParser.NULLS_P:
                case PostgreSQLParser.OBJECT_P:
                case PostgreSQLParser.OF:
                case PostgreSQLParser.OFF:
                case PostgreSQLParser.OIDS:
                case PostgreSQLParser.OPERATOR:
                case PostgreSQLParser.OPTION:
                case PostgreSQLParser.OPTIONS:
                case PostgreSQLParser.OWNED:
                case PostgreSQLParser.OWNER:
                case PostgreSQLParser.PARSER:
                case PostgreSQLParser.PARTIAL:
                case PostgreSQLParser.PARTITION:
                case PostgreSQLParser.PASSING:
                case PostgreSQLParser.PASSWORD:
                case PostgreSQLParser.PLANS:
                case PostgreSQLParser.PRECEDING:
                case PostgreSQLParser.PREPARE:
                case PostgreSQLParser.PREPARED:
                case PostgreSQLParser.PRESERVE:
                case PostgreSQLParser.PRIOR:
                case PostgreSQLParser.PRIVILEGES:
                case PostgreSQLParser.PROCEDURAL:
                case PostgreSQLParser.PROCEDURE:
                case PostgreSQLParser.PROGRAM:
                case PostgreSQLParser.QUOTE:
                case PostgreSQLParser.RANGE:
                case PostgreSQLParser.READ:
                case PostgreSQLParser.REASSIGN:
                case PostgreSQLParser.RECURSIVE:
                case PostgreSQLParser.REF:
                case PostgreSQLParser.REFRESH:
                case PostgreSQLParser.REINDEX:
                case PostgreSQLParser.RELATIVE_P:
                case PostgreSQLParser.RELEASE:
                case PostgreSQLParser.RENAME:
                case PostgreSQLParser.REPEATABLE:
                case PostgreSQLParser.REPLACE:
                case PostgreSQLParser.REPLICA:
                case PostgreSQLParser.RESET:
                case PostgreSQLParser.RESTART:
                case PostgreSQLParser.RESTRICT:
                case PostgreSQLParser.RETURNS:
                case PostgreSQLParser.REVOKE:
                case PostgreSQLParser.ROLE:
                case PostgreSQLParser.ROLLBACK:
                case PostgreSQLParser.ROWS:
                case PostgreSQLParser.RULE:
                case PostgreSQLParser.SAVEPOINT:
                case PostgreSQLParser.SCHEMA:
                case PostgreSQLParser.SCROLL:
                case PostgreSQLParser.SEARCH:
                case PostgreSQLParser.SECURITY:
                case PostgreSQLParser.SEQUENCE:
                case PostgreSQLParser.SEQUENCES:
                case PostgreSQLParser.SERIALIZABLE:
                case PostgreSQLParser.SERVER:
                case PostgreSQLParser.SESSION:
                case PostgreSQLParser.SET:
                case PostgreSQLParser.SHARE:
                case PostgreSQLParser.SHOW:
                case PostgreSQLParser.SIMPLE:
                case PostgreSQLParser.SNAPSHOT:
                case PostgreSQLParser.STABLE:
                case PostgreSQLParser.STANDALONE_P:
                case PostgreSQLParser.START:
                case PostgreSQLParser.STATEMENT:
                case PostgreSQLParser.STATISTICS:
                case PostgreSQLParser.STDIN:
                case PostgreSQLParser.STDOUT:
                case PostgreSQLParser.STORAGE:
                case PostgreSQLParser.STRICT_P:
                case PostgreSQLParser.STRIP_P:
                case PostgreSQLParser.SYSID:
                case PostgreSQLParser.SYSTEM_P:
                case PostgreSQLParser.TABLES:
                case PostgreSQLParser.TABLESPACE:
                case PostgreSQLParser.TEMP:
                case PostgreSQLParser.TEMPLATE:
                case PostgreSQLParser.TEMPORARY:
                case PostgreSQLParser.TEXT_P:
                case PostgreSQLParser.TRANSACTION:
                case PostgreSQLParser.TRIGGER:
                case PostgreSQLParser.TRUNCATE:
                case PostgreSQLParser.TRUSTED:
                case PostgreSQLParser.TYPE_P:
                case PostgreSQLParser.TYPES_P:
                case PostgreSQLParser.UNBOUNDED:
                case PostgreSQLParser.UNCOMMITTED:
                case PostgreSQLParser.UNENCRYPTED:
                case PostgreSQLParser.UNKNOWN:
                case PostgreSQLParser.UNLISTEN:
                case PostgreSQLParser.UNLOGGED:
                case PostgreSQLParser.UNTIL:
                case PostgreSQLParser.UPDATE:
                case PostgreSQLParser.VACUUM:
                case PostgreSQLParser.VALID:
                case PostgreSQLParser.VALIDATE:
                case PostgreSQLParser.VALIDATOR:
                case PostgreSQLParser.VERSION_P:
                case PostgreSQLParser.VIEW:
                case PostgreSQLParser.VOLATILE:
                case PostgreSQLParser.WHITESPACE_P:
                case PostgreSQLParser.WORK:
                case PostgreSQLParser.WRAPPER:
                case PostgreSQLParser.WRITE:
                case PostgreSQLParser.XML_P:
                case PostgreSQLParser.YES_P:
                case PostgreSQLParser.ZONE:
                case PostgreSQLParser.BETWEEN:
                case PostgreSQLParser.BIGINT:
                case PostgreSQLParser.BIT:
                case PostgreSQLParser.BOOLEAN_P:
                case PostgreSQLParser.COALESCE:
                case PostgreSQLParser.DEC:
                case PostgreSQLParser.DECIMAL_P:
                case PostgreSQLParser.EXISTS:
                case PostgreSQLParser.EXTRACT:
                case PostgreSQLParser.FLOAT_P:
                case PostgreSQLParser.GREATEST:
                case PostgreSQLParser.INOUT:
                case PostgreSQLParser.INT_P:
                case PostgreSQLParser.INTEGER:
                case PostgreSQLParser.INTERVAL:
                case PostgreSQLParser.LEAST:
                case PostgreSQLParser.NATIONAL:
                case PostgreSQLParser.NCHAR:
                case PostgreSQLParser.NONE:
                case PostgreSQLParser.NULLIF:
                case PostgreSQLParser.NUMERIC:
                case PostgreSQLParser.OVERLAY:
                case PostgreSQLParser.POSITION:
                case PostgreSQLParser.REAL:
                case PostgreSQLParser.ROW:
                case PostgreSQLParser.SETOF:
                case PostgreSQLParser.SMALLINT:
                case PostgreSQLParser.SUBSTRING:
                case PostgreSQLParser.TIME:
                case PostgreSQLParser.TIMESTAMP:
                case PostgreSQLParser.TREAT:
                case PostgreSQLParser.TRIM:
                case PostgreSQLParser.VALUES:
                case PostgreSQLParser.VARCHAR:
                case PostgreSQLParser.XMLATTRIBUTES:
                case PostgreSQLParser.XMLCONCAT:
                case PostgreSQLParser.XMLELEMENT:
                case PostgreSQLParser.XMLEXISTS:
                case PostgreSQLParser.XMLFOREST:
                case PostgreSQLParser.XMLPARSE:
                case PostgreSQLParser.XMLPI:
                case PostgreSQLParser.XMLROOT:
                case PostgreSQLParser.XMLSERIALIZE:
                case PostgreSQLParser.CALL:
                case PostgreSQLParser.CURRENT_P:
                case PostgreSQLParser.ATTACH:
                case PostgreSQLParser.DETACH:
                case PostgreSQLParser.EXPRESSION:
                case PostgreSQLParser.GENERATED:
                case PostgreSQLParser.LOGGED:
                case PostgreSQLParser.STORED:
                case PostgreSQLParser.INCLUDE:
                case PostgreSQLParser.ROUTINE:
                case PostgreSQLParser.TRANSFORM:
                case PostgreSQLParser.IMPORT_P:
                case PostgreSQLParser.POLICY:
                case PostgreSQLParser.METHOD:
                case PostgreSQLParser.REFERENCING:
                case PostgreSQLParser.NEW:
                case PostgreSQLParser.OLD:
                case PostgreSQLParser.VALUE_P:
                case PostgreSQLParser.SUBSCRIPTION:
                case PostgreSQLParser.PUBLICATION:
                case PostgreSQLParser.OUT_P:
                case PostgreSQLParser.END_P:
                case PostgreSQLParser.ROUTINES:
                case PostgreSQLParser.SCHEMAS:
                case PostgreSQLParser.PROCEDURES:
                case PostgreSQLParser.INPUT_P:
                case PostgreSQLParser.SUPPORT:
                case PostgreSQLParser.PARALLEL:
                case PostgreSQLParser.SQL_P:
                case PostgreSQLParser.DEPENDS:
                case PostgreSQLParser.OVERRIDING:
                case PostgreSQLParser.CONFLICT:
                case PostgreSQLParser.SKIP_P:
                case PostgreSQLParser.LOCKED:
                case PostgreSQLParser.TIES:
                case PostgreSQLParser.ROLLUP:
                case PostgreSQLParser.CUBE:
                case PostgreSQLParser.GROUPING:
                case PostgreSQLParser.SETS:
                case PostgreSQLParser.TABLESAMPLE:
                case PostgreSQLParser.ORDINALITY:
                case PostgreSQLParser.XMLTABLE:
                case PostgreSQLParser.COLUMNS:
                case PostgreSQLParser.XMLNAMESPACES:
                case PostgreSQLParser.NORMALIZED:
                case PostgreSQLParser.GROUPS:
                case PostgreSQLParser.OTHERS:
                case PostgreSQLParser.NFC:
                case PostgreSQLParser.NFD:
                case PostgreSQLParser.NFKC:
                case PostgreSQLParser.NFKD:
                case PostgreSQLParser.UESCAPE:
                case PostgreSQLParser.VIEWS:
                case PostgreSQLParser.NORMALIZE:
                case PostgreSQLParser.ERROR:
                case PostgreSQLParser.RETURN:
                case PostgreSQLParser.FORMAT:
                case PostgreSQLParser.Identifier:
                case PostgreSQLParser.QuotedIdentifier:
                case PostgreSQLParser.UnicodeQuotedIdentifier:
                case PostgreSQLParser.PLSQLVARIABLENAME:
                    {
                    this.state = 10264;
                    this.bareColLabel();
                    }
                    break;
                case PostgreSQLParser.EOF:
                case PostgreSQLParser.CLOSE_PAREN:
                case PostgreSQLParser.COMMA:
                case PostgreSQLParser.SEMI:
                case PostgreSQLParser.FORMAT_LA:
                case PostgreSQLParser.CREATE:
                case PostgreSQLParser.EXCEPT:
                case PostgreSQLParser.FETCH:
                case PostgreSQLParser.FOR:
                case PostgreSQLParser.FROM:
                case PostgreSQLParser.GRANT:
                case PostgreSQLParser.GROUP_P:
                case PostgreSQLParser.HAVING:
                case PostgreSQLParser.INTERSECT:
                case PostgreSQLParser.INTO:
                case PostgreSQLParser.LIMIT:
                case PostgreSQLParser.OFFSET:
                case PostgreSQLParser.ON:
                case PostgreSQLParser.ORDER:
                case PostgreSQLParser.RETURNING:
                case PostgreSQLParser.UNION:
                case PostgreSQLParser.WHERE:
                case PostgreSQLParser.WINDOW:
                case PostgreSQLParser.WITH:
                    // tslint:disable-next-line:no-empty
                    {
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case PostgreSQLParser.STAR:
                localContext = new Target_starContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10268;
                this.match(PostgreSQLParser.STAR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualified_name_list(): Qualified_name_listContext {
        let localContext = new Qualified_name_listContext(this.context, this.state);
        this.enterRule(localContext, 1376, PostgreSQLParser.RULE_qualified_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10271;
            this.qualified_name();
            this.state = 10276;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 10272;
                this.match(PostgreSQLParser.COMMA);
                this.state = 10273;
                this.qualified_name();
                }
                }
                this.state = 10278;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualified_name(): Qualified_nameContext {
        let localContext = new Qualified_nameContext(this.context, this.state);
        this.enterRule(localContext, 1378, PostgreSQLParser.RULE_qualified_name);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10279;
            this.colid();
            this.state = 10281;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 4 || _la === 11) {
                {
                this.state = 10280;
                this.indirection();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public name_list(): Name_listContext {
        let localContext = new Name_listContext(this.context, this.state);
        this.enterRule(localContext, 1380, PostgreSQLParser.RULE_name_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10283;
            this.name();
            this.state = 10288;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 10284;
                this.match(PostgreSQLParser.COMMA);
                this.state = 10285;
                this.name();
                }
                }
                this.state = 10290;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public name(): NameContext {
        let localContext = new NameContext(this.context, this.state);
        this.enterRule(localContext, 1382, PostgreSQLParser.RULE_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10291;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attr_name(): Attr_nameContext {
        let localContext = new Attr_nameContext(this.context, this.state);
        this.enterRule(localContext, 1384, PostgreSQLParser.RULE_attr_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10293;
            this.colLabel();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public file_name(): File_nameContext {
        let localContext = new File_nameContext(this.context, this.state);
        this.enterRule(localContext, 1386, PostgreSQLParser.RULE_file_name);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10295;
            this.sconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public func_name(): Func_nameContext {
        let localContext = new Func_nameContext(this.context, this.state);
        this.enterRule(localContext, 1388, PostgreSQLParser.RULE_func_name);
        try {
            this.state = 10301;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1026, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10297;
                this.type_function_name();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10298;
                this.colid();
                this.state = 10299;
                this.indirection();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aexprconst(): AexprconstContext {
        let localContext = new AexprconstContext(this.context, this.state);
        this.enterRule(localContext, 1390, PostgreSQLParser.RULE_aexprconst);
        let _la: number;
        try {
            this.state = 10338;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1031, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10303;
                this.iconst();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10304;
                this.fconst();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10305;
                this.sconst();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10306;
                this.bconst();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 10307;
                this.xconst();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 10308;
                this.func_name();
                this.state = 10318;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.StringConstant:
                case PostgreSQLParser.UnicodeEscapeStringConstant:
                case PostgreSQLParser.BeginDollarStringConstant:
                case PostgreSQLParser.EscapeStringConstant:
                    {
                    this.state = 10309;
                    this.sconst();
                    }
                    break;
                case PostgreSQLParser.OPEN_PAREN:
                    {
                    this.state = 10310;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 10311;
                    this.func_arg_list();
                    this.state = 10313;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 121) {
                        {
                        this.state = 10312;
                        this.sort_clause_();
                        }
                    }

                    this.state = 10315;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    this.state = 10316;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 10320;
                this.consttypename();
                this.state = 10321;
                this.sconst();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 10323;
                this.constinterval();
                this.state = 10333;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case PostgreSQLParser.StringConstant:
                case PostgreSQLParser.UnicodeEscapeStringConstant:
                case PostgreSQLParser.BeginDollarStringConstant:
                case PostgreSQLParser.EscapeStringConstant:
                    {
                    this.state = 10324;
                    this.sconst();
                    this.state = 10326;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 1029, this.context) ) {
                    case 1:
                        {
                        this.state = 10325;
                        this.interval_();
                        }
                        break;
                    }
                    }
                    break;
                case PostgreSQLParser.OPEN_PAREN:
                    {
                    this.state = 10328;
                    this.match(PostgreSQLParser.OPEN_PAREN);
                    this.state = 10329;
                    this.iconst();
                    this.state = 10330;
                    this.match(PostgreSQLParser.CLOSE_PAREN);
                    this.state = 10331;
                    this.sconst();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 10335;
                this.match(PostgreSQLParser.TRUE_P);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 10336;
                this.match(PostgreSQLParser.FALSE_P);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 10337;
                this.match(PostgreSQLParser.NULL_P);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public xconst(): XconstContext {
        let localContext = new XconstContext(this.context, this.state);
        this.enterRule(localContext, 1392, PostgreSQLParser.RULE_xconst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10340;
            this.match(PostgreSQLParser.HexadecimalStringConstant);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bconst(): BconstContext {
        let localContext = new BconstContext(this.context, this.state);
        this.enterRule(localContext, 1394, PostgreSQLParser.RULE_bconst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10342;
            this.match(PostgreSQLParser.BinaryStringConstant);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fconst(): FconstContext {
        let localContext = new FconstContext(this.context, this.state);
        this.enterRule(localContext, 1396, PostgreSQLParser.RULE_fconst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10344;
            this.match(PostgreSQLParser.Numeric);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public iconst(): IconstContext {
        let localContext = new IconstContext(this.context, this.state);
        this.enterRule(localContext, 1398, PostgreSQLParser.RULE_iconst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10346;
            this.match(PostgreSQLParser.Integral);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sconst(): SconstContext {
        let localContext = new SconstContext(this.context, this.state);
        this.enterRule(localContext, 1400, PostgreSQLParser.RULE_sconst);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10348;
            this.anysconst();
            this.state = 10350;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1032, this.context) ) {
            case 1:
                {
                this.state = 10349;
                this.uescape_();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public anysconst(): AnysconstContext {
        let localContext = new AnysconstContext(this.context, this.state);
        this.enterRule(localContext, 1402, PostgreSQLParser.RULE_anysconst);
        let _la: number;
        try {
            this.state = 10363;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.StringConstant:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10352;
                this.match(PostgreSQLParser.StringConstant);
                }
                break;
            case PostgreSQLParser.UnicodeEscapeStringConstant:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10353;
                this.match(PostgreSQLParser.UnicodeEscapeStringConstant);
                }
                break;
            case PostgreSQLParser.BeginDollarStringConstant:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10354;
                this.match(PostgreSQLParser.BeginDollarStringConstant);
                this.state = 10358;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 593) {
                    {
                    {
                    this.state = 10355;
                    this.match(PostgreSQLParser.DollarText);
                    }
                    }
                    this.state = 10360;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 10361;
                this.match(PostgreSQLParser.EndDollarStringConstant);
                }
                break;
            case PostgreSQLParser.EscapeStringConstant:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10362;
                this.match(PostgreSQLParser.EscapeStringConstant);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uescape_(): Uescape_Context {
        let localContext = new Uescape_Context(this.context, this.state);
        this.enterRule(localContext, 1404, PostgreSQLParser.RULE_uescape_);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10365;
            this.match(PostgreSQLParser.UESCAPE);
            this.state = 10366;
            this.anysconst();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public signediconst(): SignediconstContext {
        let localContext = new SignediconstContext(this.context, this.state);
        this.enterRule(localContext, 1406, PostgreSQLParser.RULE_signediconst);
        try {
            this.state = 10373;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Integral:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10368;
                this.iconst();
                }
                break;
            case PostgreSQLParser.PLUS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10369;
                this.match(PostgreSQLParser.PLUS);
                this.state = 10370;
                this.iconst();
                }
                break;
            case PostgreSQLParser.MINUS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10371;
                this.match(PostgreSQLParser.MINUS);
                this.state = 10372;
                this.iconst();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleid(): RoleidContext {
        let localContext = new RoleidContext(this.context, this.state);
        this.enterRule(localContext, 1408, PostgreSQLParser.RULE_roleid);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10375;
            this.rolespec();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rolespec(): RolespecContext {
        let localContext = new RolespecContext(this.context, this.state);
        this.enterRule(localContext, 1410, PostgreSQLParser.RULE_rolespec);
        try {
            this.state = 10380;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10377;
                this.nonreservedword();
                }
                break;
            case PostgreSQLParser.CURRENT_USER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10378;
                this.match(PostgreSQLParser.CURRENT_USER);
                }
                break;
            case PostgreSQLParser.SESSION_USER:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10379;
                this.match(PostgreSQLParser.SESSION_USER);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public role_list(): Role_listContext {
        let localContext = new Role_listContext(this.context, this.state);
        this.enterRule(localContext, 1412, PostgreSQLParser.RULE_role_list);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10382;
            this.rolespec();
            this.state = 10387;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 10383;
                this.match(PostgreSQLParser.COMMA);
                this.state = 10384;
                this.rolespec();
                }
                }
                this.state = 10389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colid(): ColidContext {
        let localContext = new ColidContext(this.context, this.state);
        this.enterRule(localContext, 1414, PostgreSQLParser.RULE_colid);
        try {
            this.state = 10393;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10390;
                this.identifier();
                }
                break;
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10391;
                this.unreserved_keyword();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10392;
                this.col_name_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_function_name(): Type_function_nameContext {
        let localContext = new Type_function_nameContext(this.context, this.state);
        this.enterRule(localContext, 1416, PostgreSQLParser.RULE_type_function_name);
        try {
            this.state = 10398;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10395;
                this.identifier();
                }
                break;
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10396;
                this.unreserved_keyword();
                }
                break;
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.TABLESAMPLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10397;
                this.type_func_name_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public nonreservedword(): NonreservedwordContext {
        let localContext = new NonreservedwordContext(this.context, this.state);
        this.enterRule(localContext, 1418, PostgreSQLParser.RULE_nonreservedword);
        try {
            this.state = 10404;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10400;
                this.identifier();
                }
                break;
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10401;
                this.unreserved_keyword();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10402;
                this.col_name_keyword();
                }
                break;
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.TABLESAMPLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10403;
                this.type_func_name_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public colLabel(): ColLabelContext {
        let localContext = new ColLabelContext(this.context, this.state);
        this.enterRule(localContext, 1420, PostgreSQLParser.RULE_colLabel);
        try {
            this.state = 10412;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10406;
                this.identifier();
                }
                break;
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.OVER:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DAY_P:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.HOUR_P:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINUTE_P:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MONTH_P:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECOND_P:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VARYING:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WITHOUT:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YEAR_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.WITHIN:
            case PostgreSQLParser.FILTER:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10407;
                this.unreserved_keyword();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.CHAR_P:
            case PostgreSQLParser.CHARACTER:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.PRECISION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10408;
                this.col_name_keyword();
                }
                break;
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.ISNULL:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.NOTNULL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.OVERLAPS:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.TABLESAMPLE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10409;
                this.type_func_name_keyword();
                }
                break;
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ALL:
            case PostgreSQLParser.ANALYSE:
            case PostgreSQLParser.ANALYZE:
            case PostgreSQLParser.AND:
            case PostgreSQLParser.ANY:
            case PostgreSQLParser.ARRAY:
            case PostgreSQLParser.AS:
            case PostgreSQLParser.ASC:
            case PostgreSQLParser.ASYMMETRIC:
            case PostgreSQLParser.BOTH:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CHECK:
            case PostgreSQLParser.COLLATE:
            case PostgreSQLParser.COLUMN:
            case PostgreSQLParser.CONSTRAINT:
            case PostgreSQLParser.CREATE:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.DEFERRABLE:
            case PostgreSQLParser.DESC:
            case PostgreSQLParser.DISTINCT:
            case PostgreSQLParser.DO:
            case PostgreSQLParser.ELSE:
            case PostgreSQLParser.EXCEPT:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.FETCH:
            case PostgreSQLParser.FOR:
            case PostgreSQLParser.FOREIGN:
            case PostgreSQLParser.FROM:
            case PostgreSQLParser.GRANT:
            case PostgreSQLParser.GROUP_P:
            case PostgreSQLParser.HAVING:
            case PostgreSQLParser.IN_P:
            case PostgreSQLParser.INITIALLY:
            case PostgreSQLParser.INTERSECT:
            case PostgreSQLParser.INTO:
            case PostgreSQLParser.LATERAL_P:
            case PostgreSQLParser.LEADING:
            case PostgreSQLParser.LIMIT:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.OFFSET:
            case PostgreSQLParser.ON:
            case PostgreSQLParser.ONLY:
            case PostgreSQLParser.OR:
            case PostgreSQLParser.ORDER:
            case PostgreSQLParser.PLACING:
            case PostgreSQLParser.PRIMARY:
            case PostgreSQLParser.REFERENCES:
            case PostgreSQLParser.RETURNING:
            case PostgreSQLParser.SELECT:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.SOME:
            case PostgreSQLParser.SYMMETRIC:
            case PostgreSQLParser.TABLE:
            case PostgreSQLParser.THEN:
            case PostgreSQLParser.TO:
            case PostgreSQLParser.TRAILING:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNION:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.USING:
            case PostgreSQLParser.VARIADIC:
            case PostgreSQLParser.WHEN:
            case PostgreSQLParser.WHERE:
            case PostgreSQLParser.WINDOW:
            case PostgreSQLParser.WITH:
            case PostgreSQLParser.END_P:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 10410;
                this.reserved_keyword();
                }
                break;
            case PostgreSQLParser.EXIT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 10411;
                this.match(PostgreSQLParser.EXIT);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bareColLabel(): BareColLabelContext {
        let localContext = new BareColLabelContext(this.context, this.state);
        this.enterRule(localContext, 1422, PostgreSQLParser.RULE_bareColLabel);
        try {
            this.state = 10416;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
            case PostgreSQLParser.QuotedIdentifier:
            case PostgreSQLParser.UnicodeQuotedIdentifier:
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10414;
                this.identifier();
                }
                break;
            case PostgreSQLParser.JSON:
            case PostgreSQLParser.JSON_ARRAY:
            case PostgreSQLParser.JSON_ARRAYAGG:
            case PostgreSQLParser.JSON_EXISTS:
            case PostgreSQLParser.JSON_OBJECT:
            case PostgreSQLParser.JSON_OBJECTAGG:
            case PostgreSQLParser.JSON_QUERY:
            case PostgreSQLParser.JSON_SCALAR:
            case PostgreSQLParser.JSON_SERIALIZE:
            case PostgreSQLParser.JSON_TABLE:
            case PostgreSQLParser.JSON_VALUE:
            case PostgreSQLParser.MERGE_ACTION:
            case PostgreSQLParser.SYSTEM_USER:
            case PostgreSQLParser.ABSENT:
            case PostgreSQLParser.ASENSITIVE:
            case PostgreSQLParser.ATOMIC:
            case PostgreSQLParser.BREADTH:
            case PostgreSQLParser.COMPRESSION:
            case PostgreSQLParser.CONDITIONAL:
            case PostgreSQLParser.DEPTH:
            case PostgreSQLParser.EMPTY_P:
            case PostgreSQLParser.FINALIZE:
            case PostgreSQLParser.INDENT:
            case PostgreSQLParser.KEEP:
            case PostgreSQLParser.KEYS:
            case PostgreSQLParser.NESTED:
            case PostgreSQLParser.OMIT:
            case PostgreSQLParser.PARAMETER:
            case PostgreSQLParser.PATH:
            case PostgreSQLParser.PLAN:
            case PostgreSQLParser.QUOTES:
            case PostgreSQLParser.SCALAR:
            case PostgreSQLParser.SOURCE:
            case PostgreSQLParser.STRING_P:
            case PostgreSQLParser.TARGET:
            case PostgreSQLParser.UNCONDITIONAL:
            case PostgreSQLParser.PERIOD:
            case PostgreSQLParser.ALL:
            case PostgreSQLParser.ANALYSE:
            case PostgreSQLParser.ANALYZE:
            case PostgreSQLParser.AND:
            case PostgreSQLParser.ANY:
            case PostgreSQLParser.ASC:
            case PostgreSQLParser.ASYMMETRIC:
            case PostgreSQLParser.BOTH:
            case PostgreSQLParser.CASE:
            case PostgreSQLParser.CAST:
            case PostgreSQLParser.CHECK:
            case PostgreSQLParser.COLLATE:
            case PostgreSQLParser.COLUMN:
            case PostgreSQLParser.CONSTRAINT:
            case PostgreSQLParser.CURRENT_CATALOG:
            case PostgreSQLParser.CURRENT_DATE:
            case PostgreSQLParser.CURRENT_ROLE:
            case PostgreSQLParser.CURRENT_TIME:
            case PostgreSQLParser.CURRENT_TIMESTAMP:
            case PostgreSQLParser.CURRENT_USER:
            case PostgreSQLParser.DEFAULT:
            case PostgreSQLParser.DEFERRABLE:
            case PostgreSQLParser.DESC:
            case PostgreSQLParser.DISTINCT:
            case PostgreSQLParser.DO:
            case PostgreSQLParser.ELSE:
            case PostgreSQLParser.FALSE_P:
            case PostgreSQLParser.FOREIGN:
            case PostgreSQLParser.IN_P:
            case PostgreSQLParser.INITIALLY:
            case PostgreSQLParser.LATERAL_P:
            case PostgreSQLParser.LEADING:
            case PostgreSQLParser.LOCALTIME:
            case PostgreSQLParser.LOCALTIMESTAMP:
            case PostgreSQLParser.NOT:
            case PostgreSQLParser.NULL_P:
            case PostgreSQLParser.ONLY:
            case PostgreSQLParser.OR:
            case PostgreSQLParser.PLACING:
            case PostgreSQLParser.PRIMARY:
            case PostgreSQLParser.REFERENCES:
            case PostgreSQLParser.SELECT:
            case PostgreSQLParser.SESSION_USER:
            case PostgreSQLParser.SOME:
            case PostgreSQLParser.SYMMETRIC:
            case PostgreSQLParser.TABLE:
            case PostgreSQLParser.THEN:
            case PostgreSQLParser.TRAILING:
            case PostgreSQLParser.TRUE_P:
            case PostgreSQLParser.UNIQUE:
            case PostgreSQLParser.USER:
            case PostgreSQLParser.USING:
            case PostgreSQLParser.VARIADIC:
            case PostgreSQLParser.WHEN:
            case PostgreSQLParser.AUTHORIZATION:
            case PostgreSQLParser.BINARY:
            case PostgreSQLParser.COLLATION:
            case PostgreSQLParser.CONCURRENTLY:
            case PostgreSQLParser.CROSS:
            case PostgreSQLParser.CURRENT_SCHEMA:
            case PostgreSQLParser.FREEZE:
            case PostgreSQLParser.FULL:
            case PostgreSQLParser.ILIKE:
            case PostgreSQLParser.INNER_P:
            case PostgreSQLParser.IS:
            case PostgreSQLParser.JOIN:
            case PostgreSQLParser.LEFT:
            case PostgreSQLParser.LIKE:
            case PostgreSQLParser.NATURAL:
            case PostgreSQLParser.OUTER_P:
            case PostgreSQLParser.RIGHT:
            case PostgreSQLParser.SIMILAR:
            case PostgreSQLParser.VERBOSE:
            case PostgreSQLParser.ABORT_P:
            case PostgreSQLParser.ABSOLUTE_P:
            case PostgreSQLParser.ACCESS:
            case PostgreSQLParser.ACTION:
            case PostgreSQLParser.ADD_P:
            case PostgreSQLParser.ADMIN:
            case PostgreSQLParser.AFTER:
            case PostgreSQLParser.AGGREGATE:
            case PostgreSQLParser.ALSO:
            case PostgreSQLParser.ALTER:
            case PostgreSQLParser.ALWAYS:
            case PostgreSQLParser.ASSERTION:
            case PostgreSQLParser.ASSIGNMENT:
            case PostgreSQLParser.AT:
            case PostgreSQLParser.ATTRIBUTE:
            case PostgreSQLParser.BACKWARD:
            case PostgreSQLParser.BEFORE:
            case PostgreSQLParser.BEGIN_P:
            case PostgreSQLParser.BY:
            case PostgreSQLParser.CACHE:
            case PostgreSQLParser.CALLED:
            case PostgreSQLParser.CASCADE:
            case PostgreSQLParser.CASCADED:
            case PostgreSQLParser.CATALOG:
            case PostgreSQLParser.CHAIN:
            case PostgreSQLParser.CHARACTERISTICS:
            case PostgreSQLParser.CHECKPOINT:
            case PostgreSQLParser.CLASS:
            case PostgreSQLParser.CLOSE:
            case PostgreSQLParser.CLUSTER:
            case PostgreSQLParser.COMMENT:
            case PostgreSQLParser.COMMENTS:
            case PostgreSQLParser.COMMIT:
            case PostgreSQLParser.COMMITTED:
            case PostgreSQLParser.CONFIGURATION:
            case PostgreSQLParser.CONNECTION:
            case PostgreSQLParser.CONSTRAINTS:
            case PostgreSQLParser.CONTENT_P:
            case PostgreSQLParser.CONTINUE_P:
            case PostgreSQLParser.CONVERSION_P:
            case PostgreSQLParser.COPY:
            case PostgreSQLParser.COST:
            case PostgreSQLParser.CSV:
            case PostgreSQLParser.CURSOR:
            case PostgreSQLParser.CYCLE:
            case PostgreSQLParser.DATA_P:
            case PostgreSQLParser.DATABASE:
            case PostgreSQLParser.DEALLOCATE:
            case PostgreSQLParser.DECLARE:
            case PostgreSQLParser.DEFAULTS:
            case PostgreSQLParser.DEFERRED:
            case PostgreSQLParser.DEFINER:
            case PostgreSQLParser.DELETE_P:
            case PostgreSQLParser.DELIMITER:
            case PostgreSQLParser.DELIMITERS:
            case PostgreSQLParser.DICTIONARY:
            case PostgreSQLParser.DISABLE_P:
            case PostgreSQLParser.DISCARD:
            case PostgreSQLParser.DOCUMENT_P:
            case PostgreSQLParser.DOMAIN_P:
            case PostgreSQLParser.DOUBLE_P:
            case PostgreSQLParser.DROP:
            case PostgreSQLParser.EACH:
            case PostgreSQLParser.ENABLE_P:
            case PostgreSQLParser.ENCODING:
            case PostgreSQLParser.ENCRYPTED:
            case PostgreSQLParser.ENUM_P:
            case PostgreSQLParser.ESCAPE:
            case PostgreSQLParser.EVENT:
            case PostgreSQLParser.EXCLUDE:
            case PostgreSQLParser.EXCLUDING:
            case PostgreSQLParser.EXCLUSIVE:
            case PostgreSQLParser.EXECUTE:
            case PostgreSQLParser.EXPLAIN:
            case PostgreSQLParser.EXTENSION:
            case PostgreSQLParser.EXTERNAL:
            case PostgreSQLParser.FAMILY:
            case PostgreSQLParser.FIRST_P:
            case PostgreSQLParser.FOLLOWING:
            case PostgreSQLParser.FORCE:
            case PostgreSQLParser.FORWARD:
            case PostgreSQLParser.FUNCTION:
            case PostgreSQLParser.FUNCTIONS:
            case PostgreSQLParser.GLOBAL:
            case PostgreSQLParser.GRANTED:
            case PostgreSQLParser.HANDLER:
            case PostgreSQLParser.HEADER_P:
            case PostgreSQLParser.HOLD:
            case PostgreSQLParser.IDENTITY_P:
            case PostgreSQLParser.IF_P:
            case PostgreSQLParser.IMMEDIATE:
            case PostgreSQLParser.IMMUTABLE:
            case PostgreSQLParser.IMPLICIT_P:
            case PostgreSQLParser.INCLUDING:
            case PostgreSQLParser.INCREMENT:
            case PostgreSQLParser.INDEX:
            case PostgreSQLParser.INDEXES:
            case PostgreSQLParser.INHERIT:
            case PostgreSQLParser.INHERITS:
            case PostgreSQLParser.INLINE_P:
            case PostgreSQLParser.INSENSITIVE:
            case PostgreSQLParser.INSERT:
            case PostgreSQLParser.INSTEAD:
            case PostgreSQLParser.INVOKER:
            case PostgreSQLParser.ISOLATION:
            case PostgreSQLParser.KEY:
            case PostgreSQLParser.LABEL:
            case PostgreSQLParser.LANGUAGE:
            case PostgreSQLParser.LARGE_P:
            case PostgreSQLParser.LAST_P:
            case PostgreSQLParser.LEAKPROOF:
            case PostgreSQLParser.LEVEL:
            case PostgreSQLParser.LISTEN:
            case PostgreSQLParser.LOAD:
            case PostgreSQLParser.LOCAL:
            case PostgreSQLParser.LOCATION:
            case PostgreSQLParser.LOCK_P:
            case PostgreSQLParser.MAPPING:
            case PostgreSQLParser.MATCH:
            case PostgreSQLParser.MATCHED:
            case PostgreSQLParser.MATERIALIZED:
            case PostgreSQLParser.MAXVALUE:
            case PostgreSQLParser.MERGE:
            case PostgreSQLParser.MINVALUE:
            case PostgreSQLParser.MODE:
            case PostgreSQLParser.MOVE:
            case PostgreSQLParser.NAME_P:
            case PostgreSQLParser.NAMES:
            case PostgreSQLParser.NEXT:
            case PostgreSQLParser.NO:
            case PostgreSQLParser.NOTHING:
            case PostgreSQLParser.NOTIFY:
            case PostgreSQLParser.NOWAIT:
            case PostgreSQLParser.NULLS_P:
            case PostgreSQLParser.OBJECT_P:
            case PostgreSQLParser.OF:
            case PostgreSQLParser.OFF:
            case PostgreSQLParser.OIDS:
            case PostgreSQLParser.OPERATOR:
            case PostgreSQLParser.OPTION:
            case PostgreSQLParser.OPTIONS:
            case PostgreSQLParser.OWNED:
            case PostgreSQLParser.OWNER:
            case PostgreSQLParser.PARSER:
            case PostgreSQLParser.PARTIAL:
            case PostgreSQLParser.PARTITION:
            case PostgreSQLParser.PASSING:
            case PostgreSQLParser.PASSWORD:
            case PostgreSQLParser.PLANS:
            case PostgreSQLParser.PRECEDING:
            case PostgreSQLParser.PREPARE:
            case PostgreSQLParser.PREPARED:
            case PostgreSQLParser.PRESERVE:
            case PostgreSQLParser.PRIOR:
            case PostgreSQLParser.PRIVILEGES:
            case PostgreSQLParser.PROCEDURAL:
            case PostgreSQLParser.PROCEDURE:
            case PostgreSQLParser.PROGRAM:
            case PostgreSQLParser.QUOTE:
            case PostgreSQLParser.RANGE:
            case PostgreSQLParser.READ:
            case PostgreSQLParser.REASSIGN:
            case PostgreSQLParser.RECURSIVE:
            case PostgreSQLParser.REF:
            case PostgreSQLParser.REFRESH:
            case PostgreSQLParser.REINDEX:
            case PostgreSQLParser.RELATIVE_P:
            case PostgreSQLParser.RELEASE:
            case PostgreSQLParser.RENAME:
            case PostgreSQLParser.REPEATABLE:
            case PostgreSQLParser.REPLACE:
            case PostgreSQLParser.REPLICA:
            case PostgreSQLParser.RESET:
            case PostgreSQLParser.RESTART:
            case PostgreSQLParser.RESTRICT:
            case PostgreSQLParser.RETURNS:
            case PostgreSQLParser.REVOKE:
            case PostgreSQLParser.ROLE:
            case PostgreSQLParser.ROLLBACK:
            case PostgreSQLParser.ROWS:
            case PostgreSQLParser.RULE:
            case PostgreSQLParser.SAVEPOINT:
            case PostgreSQLParser.SCHEMA:
            case PostgreSQLParser.SCROLL:
            case PostgreSQLParser.SEARCH:
            case PostgreSQLParser.SECURITY:
            case PostgreSQLParser.SEQUENCE:
            case PostgreSQLParser.SEQUENCES:
            case PostgreSQLParser.SERIALIZABLE:
            case PostgreSQLParser.SERVER:
            case PostgreSQLParser.SESSION:
            case PostgreSQLParser.SET:
            case PostgreSQLParser.SHARE:
            case PostgreSQLParser.SHOW:
            case PostgreSQLParser.SIMPLE:
            case PostgreSQLParser.SNAPSHOT:
            case PostgreSQLParser.STABLE:
            case PostgreSQLParser.STANDALONE_P:
            case PostgreSQLParser.START:
            case PostgreSQLParser.STATEMENT:
            case PostgreSQLParser.STATISTICS:
            case PostgreSQLParser.STDIN:
            case PostgreSQLParser.STDOUT:
            case PostgreSQLParser.STORAGE:
            case PostgreSQLParser.STRICT_P:
            case PostgreSQLParser.STRIP_P:
            case PostgreSQLParser.SYSID:
            case PostgreSQLParser.SYSTEM_P:
            case PostgreSQLParser.TABLES:
            case PostgreSQLParser.TABLESPACE:
            case PostgreSQLParser.TEMP:
            case PostgreSQLParser.TEMPLATE:
            case PostgreSQLParser.TEMPORARY:
            case PostgreSQLParser.TEXT_P:
            case PostgreSQLParser.TRANSACTION:
            case PostgreSQLParser.TRIGGER:
            case PostgreSQLParser.TRUNCATE:
            case PostgreSQLParser.TRUSTED:
            case PostgreSQLParser.TYPE_P:
            case PostgreSQLParser.TYPES_P:
            case PostgreSQLParser.UNBOUNDED:
            case PostgreSQLParser.UNCOMMITTED:
            case PostgreSQLParser.UNENCRYPTED:
            case PostgreSQLParser.UNKNOWN:
            case PostgreSQLParser.UNLISTEN:
            case PostgreSQLParser.UNLOGGED:
            case PostgreSQLParser.UNTIL:
            case PostgreSQLParser.UPDATE:
            case PostgreSQLParser.VACUUM:
            case PostgreSQLParser.VALID:
            case PostgreSQLParser.VALIDATE:
            case PostgreSQLParser.VALIDATOR:
            case PostgreSQLParser.VERSION_P:
            case PostgreSQLParser.VIEW:
            case PostgreSQLParser.VOLATILE:
            case PostgreSQLParser.WHITESPACE_P:
            case PostgreSQLParser.WORK:
            case PostgreSQLParser.WRAPPER:
            case PostgreSQLParser.WRITE:
            case PostgreSQLParser.XML_P:
            case PostgreSQLParser.YES_P:
            case PostgreSQLParser.ZONE:
            case PostgreSQLParser.BETWEEN:
            case PostgreSQLParser.BIGINT:
            case PostgreSQLParser.BIT:
            case PostgreSQLParser.BOOLEAN_P:
            case PostgreSQLParser.COALESCE:
            case PostgreSQLParser.DEC:
            case PostgreSQLParser.DECIMAL_P:
            case PostgreSQLParser.EXISTS:
            case PostgreSQLParser.EXTRACT:
            case PostgreSQLParser.FLOAT_P:
            case PostgreSQLParser.GREATEST:
            case PostgreSQLParser.INOUT:
            case PostgreSQLParser.INT_P:
            case PostgreSQLParser.INTEGER:
            case PostgreSQLParser.INTERVAL:
            case PostgreSQLParser.LEAST:
            case PostgreSQLParser.NATIONAL:
            case PostgreSQLParser.NCHAR:
            case PostgreSQLParser.NONE:
            case PostgreSQLParser.NULLIF:
            case PostgreSQLParser.NUMERIC:
            case PostgreSQLParser.OVERLAY:
            case PostgreSQLParser.POSITION:
            case PostgreSQLParser.REAL:
            case PostgreSQLParser.ROW:
            case PostgreSQLParser.SETOF:
            case PostgreSQLParser.SMALLINT:
            case PostgreSQLParser.SUBSTRING:
            case PostgreSQLParser.TIME:
            case PostgreSQLParser.TIMESTAMP:
            case PostgreSQLParser.TREAT:
            case PostgreSQLParser.TRIM:
            case PostgreSQLParser.VALUES:
            case PostgreSQLParser.VARCHAR:
            case PostgreSQLParser.XMLATTRIBUTES:
            case PostgreSQLParser.XMLCONCAT:
            case PostgreSQLParser.XMLELEMENT:
            case PostgreSQLParser.XMLEXISTS:
            case PostgreSQLParser.XMLFOREST:
            case PostgreSQLParser.XMLPARSE:
            case PostgreSQLParser.XMLPI:
            case PostgreSQLParser.XMLROOT:
            case PostgreSQLParser.XMLSERIALIZE:
            case PostgreSQLParser.CALL:
            case PostgreSQLParser.CURRENT_P:
            case PostgreSQLParser.ATTACH:
            case PostgreSQLParser.DETACH:
            case PostgreSQLParser.EXPRESSION:
            case PostgreSQLParser.GENERATED:
            case PostgreSQLParser.LOGGED:
            case PostgreSQLParser.STORED:
            case PostgreSQLParser.INCLUDE:
            case PostgreSQLParser.ROUTINE:
            case PostgreSQLParser.TRANSFORM:
            case PostgreSQLParser.IMPORT_P:
            case PostgreSQLParser.POLICY:
            case PostgreSQLParser.METHOD:
            case PostgreSQLParser.REFERENCING:
            case PostgreSQLParser.NEW:
            case PostgreSQLParser.OLD:
            case PostgreSQLParser.VALUE_P:
            case PostgreSQLParser.SUBSCRIPTION:
            case PostgreSQLParser.PUBLICATION:
            case PostgreSQLParser.OUT_P:
            case PostgreSQLParser.END_P:
            case PostgreSQLParser.ROUTINES:
            case PostgreSQLParser.SCHEMAS:
            case PostgreSQLParser.PROCEDURES:
            case PostgreSQLParser.INPUT_P:
            case PostgreSQLParser.SUPPORT:
            case PostgreSQLParser.PARALLEL:
            case PostgreSQLParser.SQL_P:
            case PostgreSQLParser.DEPENDS:
            case PostgreSQLParser.OVERRIDING:
            case PostgreSQLParser.CONFLICT:
            case PostgreSQLParser.SKIP_P:
            case PostgreSQLParser.LOCKED:
            case PostgreSQLParser.TIES:
            case PostgreSQLParser.ROLLUP:
            case PostgreSQLParser.CUBE:
            case PostgreSQLParser.GROUPING:
            case PostgreSQLParser.SETS:
            case PostgreSQLParser.TABLESAMPLE:
            case PostgreSQLParser.ORDINALITY:
            case PostgreSQLParser.XMLTABLE:
            case PostgreSQLParser.COLUMNS:
            case PostgreSQLParser.XMLNAMESPACES:
            case PostgreSQLParser.NORMALIZED:
            case PostgreSQLParser.GROUPS:
            case PostgreSQLParser.OTHERS:
            case PostgreSQLParser.NFC:
            case PostgreSQLParser.NFD:
            case PostgreSQLParser.NFKC:
            case PostgreSQLParser.NFKD:
            case PostgreSQLParser.UESCAPE:
            case PostgreSQLParser.VIEWS:
            case PostgreSQLParser.NORMALIZE:
            case PostgreSQLParser.ERROR:
            case PostgreSQLParser.RETURN:
            case PostgreSQLParser.FORMAT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10415;
                this.bare_label_keyword();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public unreserved_keyword(): Unreserved_keywordContext {
        let localContext = new Unreserved_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1424, PostgreSQLParser.RULE_unreserved_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10418;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 43)) & ~0x1F) === 0 && ((1 << (_la - 43)) & 16777215) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & 4294967265) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & 4294967295) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 4294967295) !== 0) || ((((_la - 258)) & ~0x1F) === 0 && ((1 << (_la - 258)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & 4294967295) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & 4294965247) !== 0) || ((((_la - 354)) & ~0x1F) === 0 && ((1 << (_la - 354)) & 4294967295) !== 0) || ((((_la - 386)) & ~0x1F) === 0 && ((1 << (_la - 386)) & 4294967295) !== 0) || ((((_la - 471)) & ~0x1F) === 0 && ((1 << (_la - 471)) & 4291821567) !== 0) || ((((_la - 503)) & ~0x1F) === 0 && ((1 << (_la - 503)) & 83879263) !== 0) || _la === 542 || _la === 553)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public col_name_keyword(): Col_name_keywordContext {
        let localContext = new Col_name_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1426, PostgreSQLParser.RULE_col_name_keyword);
        try {
            this.state = 10483;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1043, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10420;
                this.match(PostgreSQLParser.BETWEEN);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10421;
                this.match(PostgreSQLParser.BIGINT);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10422;
                this.match(PostgreSQLParser.BIT);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10423;
                this.match(PostgreSQLParser.BOOLEAN_P);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 10424;
                this.match(PostgreSQLParser.CHAR_P);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 10425;
                this.character();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 10426;
                this.match(PostgreSQLParser.COALESCE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 10427;
                this.match(PostgreSQLParser.DEC);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 10428;
                this.match(PostgreSQLParser.DECIMAL_P);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 10429;
                this.match(PostgreSQLParser.EXISTS);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 10430;
                this.match(PostgreSQLParser.EXTRACT);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 10431;
                this.match(PostgreSQLParser.FLOAT_P);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 10432;
                this.match(PostgreSQLParser.GREATEST);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 10433;
                this.match(PostgreSQLParser.GROUPING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 10434;
                this.match(PostgreSQLParser.INOUT);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 10435;
                this.match(PostgreSQLParser.INT_P);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 10436;
                this.match(PostgreSQLParser.INTEGER);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 10437;
                this.match(PostgreSQLParser.INTERVAL);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 10438;
                this.match(PostgreSQLParser.JSON);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 10439;
                this.match(PostgreSQLParser.JSON_ARRAY);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 10440;
                this.match(PostgreSQLParser.JSON_ARRAYAGG);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 10441;
                this.match(PostgreSQLParser.JSON_EXISTS);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 10442;
                this.match(PostgreSQLParser.JSON_OBJECT);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 10443;
                this.match(PostgreSQLParser.JSON_OBJECTAGG);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 10444;
                this.match(PostgreSQLParser.JSON_QUERY);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 10445;
                this.match(PostgreSQLParser.JSON_SCALAR);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 10446;
                this.match(PostgreSQLParser.JSON_SERIALIZE);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 10447;
                this.match(PostgreSQLParser.JSON_TABLE);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 10448;
                this.match(PostgreSQLParser.JSON_VALUE);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 10449;
                this.match(PostgreSQLParser.LEAST);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 10450;
                this.match(PostgreSQLParser.MERGE_ACTION);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 10451;
                this.match(PostgreSQLParser.NATIONAL);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 10452;
                this.match(PostgreSQLParser.NCHAR);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 10453;
                this.match(PostgreSQLParser.NONE);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 10454;
                this.match(PostgreSQLParser.NORMALIZE);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 10455;
                this.match(PostgreSQLParser.NULLIF);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 10456;
                this.match(PostgreSQLParser.NUMERIC);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 10457;
                this.match(PostgreSQLParser.OUT_P);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 10458;
                this.match(PostgreSQLParser.OVERLAY);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 10459;
                this.match(PostgreSQLParser.POSITION);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 10460;
                this.match(PostgreSQLParser.PRECISION);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 10461;
                this.match(PostgreSQLParser.REAL);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 10462;
                this.match(PostgreSQLParser.ROW);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 10463;
                this.match(PostgreSQLParser.SETOF);
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 10464;
                this.match(PostgreSQLParser.SMALLINT);
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 10465;
                this.match(PostgreSQLParser.SUBSTRING);
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 10466;
                this.match(PostgreSQLParser.TIME);
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 10467;
                this.match(PostgreSQLParser.TIMESTAMP);
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 10468;
                this.match(PostgreSQLParser.TREAT);
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 10469;
                this.match(PostgreSQLParser.TRIM);
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 10470;
                this.match(PostgreSQLParser.VALUES);
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 10471;
                this.match(PostgreSQLParser.VARCHAR);
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 10472;
                this.match(PostgreSQLParser.XMLATTRIBUTES);
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 10473;
                this.match(PostgreSQLParser.XMLCONCAT);
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 10474;
                this.match(PostgreSQLParser.XMLELEMENT);
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 10475;
                this.match(PostgreSQLParser.XMLEXISTS);
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 10476;
                this.match(PostgreSQLParser.XMLFOREST);
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 10477;
                this.match(PostgreSQLParser.XMLNAMESPACES);
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 10478;
                this.match(PostgreSQLParser.XMLPARSE);
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 10479;
                this.match(PostgreSQLParser.XMLPI);
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 10480;
                this.match(PostgreSQLParser.XMLROOT);
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 10481;
                this.match(PostgreSQLParser.XMLSERIALIZE);
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 10482;
                this.match(PostgreSQLParser.XMLTABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public type_func_name_keyword(): Type_func_name_keywordContext {
        let localContext = new Type_func_name_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1428, PostgreSQLParser.RULE_type_func_name_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10485;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & 8126463) !== 0) || _la === 510)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reserved_keyword(): Reserved_keywordContext {
        let localContext = new Reserved_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1430, PostgreSQLParser.RULE_reserved_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10487;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & 4227858433) !== 0) || ((((_la - 74)) & ~0x1F) === 0 && ((1 << (_la - 74)) & 4294967295) !== 0) || ((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & 4294967295) !== 0) || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & 63) !== 0) || _la === 492)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bare_label_keyword(): Bare_label_keywordContext {
        let localContext = new Bare_label_keywordContext(this.context, this.state);
        this.enterRule(localContext, 1432, PostgreSQLParser.RULE_bare_label_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10489;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & 4294967295) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & 4290766815) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & 1987784855) !== 0) || ((((_la - 126)) & ~0x1F) === 0 && ((1 << (_la - 126)) & 3757866431) !== 0) || ((((_la - 158)) & ~0x1F) === 0 && ((1 << (_la - 158)) & 4294967243) !== 0) || ((((_la - 190)) & ~0x1F) === 0 && ((1 << (_la - 190)) & 4278190079) !== 0) || ((((_la - 222)) & ~0x1F) === 0 && ((1 << (_la - 222)) & 4294967295) !== 0) || ((((_la - 254)) & ~0x1F) === 0 && ((1 << (_la - 254)) & 4294967291) !== 0) || ((((_la - 286)) & ~0x1F) === 0 && ((1 << (_la - 286)) & 4294966719) !== 0) || ((((_la - 318)) & ~0x1F) === 0 && ((1 << (_la - 318)) & 4294934527) !== 0) || ((((_la - 350)) & ~0x1F) === 0 && ((1 << (_la - 350)) & 4294967167) !== 0) || ((((_la - 382)) & ~0x1F) === 0 && ((1 << (_la - 382)) & 4018143231) !== 0) || ((((_la - 414)) & ~0x1F) === 0 && ((1 << (_la - 414)) & 3758095613) !== 0) || ((((_la - 446)) & ~0x1F) === 0 && ((1 << (_la - 446)) & 4294837247) !== 0) || ((((_la - 478)) & ~0x1F) === 0 && ((1 << (_la - 478)) & 4294967295) !== 0) || ((((_la - 510)) & ~0x1F) === 0 && ((1 << (_la - 510)) & 786015) !== 0) || _la === 542 || _la === 553)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public any_identifier(): Any_identifierContext {
        let localContext = new Any_identifierContext(this.context, this.state);
        this.enterRule(localContext, 1434, PostgreSQLParser.RULE_any_identifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 10491;
            this.colid();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 1436, PostgreSQLParser.RULE_identifier);
        try {
            this.state = 10500;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case PostgreSQLParser.Identifier:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 10493;
                this.match(PostgreSQLParser.Identifier);
                this.state = 10495;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 1044, this.context) ) {
                case 1:
                    {
                    this.state = 10494;
                    this.uescape_();
                    }
                    break;
                }
                }
                break;
            case PostgreSQLParser.QuotedIdentifier:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 10497;
                this.match(PostgreSQLParser.QuotedIdentifier);
                }
                break;
            case PostgreSQLParser.UnicodeQuotedIdentifier:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 10498;
                this.match(PostgreSQLParser.UnicodeQuotedIdentifier);
                }
                break;
            case PostgreSQLParser.PLSQLVARIABLENAME:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 10499;
                this.match(PostgreSQLParser.PLSQLVARIABLENAME);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 582:
            return this.a_expr_qual_sempred(localContext as A_expr_qualContext, predIndex);
        case 602:
            return this.b_expr_sempred(localContext as B_exprContext, predIndex);
        case 665:
            return this.json_arguments_sempred(localContext as Json_argumentsContext, predIndex);
        case 678:
            return this.json_name_and_value_list_sempred(localContext as Json_name_and_value_listContext, predIndex);
        case 682:
            return this.json_value_expr_list_sempred(localContext as Json_value_expr_listContext, predIndex);
        }
        return true;
    }
    private a_expr_qual_sempred(localContext: A_expr_qualContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.OnlyAcceptableOps();
        }
        return true;
    }
    private b_expr_sempred(localContext: B_exprContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 1:
            return this.precpred(this.context, 8);
        case 2:
            return this.precpred(this.context, 7);
        case 3:
            return this.precpred(this.context, 6);
        case 4:
            return this.precpred(this.context, 5);
        case 5:
            return this.precpred(this.context, 4);
        case 6:
            return this.precpred(this.context, 10);
        case 7:
            return this.precpred(this.context, 2);
        case 8:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private json_arguments_sempred(localContext: Json_argumentsContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 9:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private json_name_and_value_list_sempred(localContext: Json_name_and_value_listContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return this.precpred(this.context, 1);
        }
        return true;
    }
    private json_value_expr_list_sempred(localContext: Json_value_expr_listContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 11:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,596,10503,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
        2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
        7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,
        2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
        7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,
        2,373,7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,
        7,378,2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,
        2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,
        7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,
        2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,
        7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
        2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,
        7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
        2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
        7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,
        2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
        7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,
        2,439,7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,
        7,444,2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,
        2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,
        7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,
        2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,
        7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
        2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,
        7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
        2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
        7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,
        2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
        7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,
        2,505,7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,
        7,510,2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,
        2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,
        7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,
        2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,
        7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
        2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,
        7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
        2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
        7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,
        2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
        7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,
        2,571,7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,
        7,576,2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,
        2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,
        7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,
        2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,
        7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
        2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,
        7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
        2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,
        7,620,2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,
        2,626,7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,
        7,631,2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,
        2,637,7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,
        7,642,2,643,7,643,2,644,7,644,2,645,7,645,2,646,7,646,2,647,7,647,
        2,648,7,648,2,649,7,649,2,650,7,650,2,651,7,651,2,652,7,652,2,653,
        7,653,2,654,7,654,2,655,7,655,2,656,7,656,2,657,7,657,2,658,7,658,
        2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,2,663,7,663,2,664,
        7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,2,669,7,669,
        2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,2,675,
        7,675,2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,
        2,681,7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,
        7,686,2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,
        2,692,7,692,2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,
        7,697,2,698,7,698,2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,
        2,703,7,703,2,704,7,704,2,705,7,705,2,706,7,706,2,707,7,707,2,708,
        7,708,2,709,7,709,2,710,7,710,2,711,7,711,2,712,7,712,2,713,7,713,
        2,714,7,714,2,715,7,715,2,716,7,716,2,717,7,717,2,718,7,718,1,0,
        1,0,1,0,1,1,1,1,1,2,3,2,1445,8,2,1,2,1,2,3,2,1449,8,2,5,2,1451,8,
        2,10,2,12,2,1454,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,3,3,1580,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,1589,8,5,1,5,1,
        5,1,6,1,6,1,7,5,7,1596,8,7,10,7,12,7,1599,9,7,1,8,5,8,1602,8,8,10,
        8,12,8,1605,9,8,1,9,1,9,1,9,3,9,1610,8,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,1625,8,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,3,10,1637,8,10,1,11,1,11,1,11,1,11,3,11,
        1643,8,11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,1651,8,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1662,8,14,1,14,1,14,3,14,
        1666,8,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,1674,8,15,1,15,1,15,
        1,16,1,16,1,16,1,16,3,16,1682,8,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,1700,8,19,
        1,19,3,19,1703,8,19,1,19,1,19,1,19,3,19,1708,8,19,1,19,1,19,1,20,
        1,20,1,21,5,21,1715,8,21,10,21,12,21,1718,9,21,1,22,1,22,1,22,1,
        22,1,22,1,22,3,22,1726,8,22,1,23,1,23,3,23,1730,8,23,1,23,1,23,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,1742,8,24,1,25,1,25,1,
        25,1,25,3,25,1748,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,3,26,1764,8,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1777,8,26,1,27,1,27,1,27,5,
        27,1782,8,27,10,27,12,27,1785,9,27,1,28,1,28,1,28,5,28,1790,8,28,
        10,28,12,28,1793,9,28,1,29,1,29,3,29,1797,8,29,1,30,1,30,1,30,1,
        30,1,30,3,30,1804,8,30,1,31,1,31,1,31,1,31,3,31,1810,8,31,1,32,1,
        32,1,32,1,32,1,32,3,32,1817,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,3,32,1828,8,32,1,33,1,33,3,33,1832,8,33,1,34,1,34,3,
        34,1836,8,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,3,36,1849,8,36,1,37,1,37,3,37,1853,8,37,1,38,1,38,1,38,3,38,1858,
        8,38,1,39,1,39,1,39,3,39,1863,8,39,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,1,40,1,40,3,40,1875,8,40,1,41,1,41,1,41,1,41,1,41,1,42,
        1,42,3,42,1884,8,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,3,46,1897,8,46,1,46,1,46,1,46,3,46,1902,8,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1913,8,46,1,46,1,46,1,46,
        1,46,3,46,1919,8,46,1,46,1,46,1,46,1,46,3,46,1925,8,46,1,46,1,46,
        1,46,3,46,1930,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        3,46,1941,8,46,1,46,1,46,1,46,1,46,3,46,1947,8,46,1,46,1,46,1,46,
        1,46,3,46,1953,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1962,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1972,8,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
        1987,8,46,1,46,1,46,1,46,1,46,3,46,1993,8,46,1,46,1,46,1,46,1,46,
        1,46,3,46,2000,8,46,1,46,1,46,1,46,3,46,2005,8,46,1,47,1,47,1,47,
        5,47,2010,8,47,10,47,12,47,2013,9,47,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,3,48,2023,8,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,3,50,2047,8,50,1,50,1,50,1,50,1,50,1,50,3,50,2054,8,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2063,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,3,50,2072,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,2080,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2090,8,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2099,8,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,3,50,2108,8,50,1,50,1,50,1,50,1,50,1,50,1,
        50,3,50,2116,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2124,8,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2133,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,3,50,2142,8,50,1,50,1,50,3,50,2146,8,50,1,50,1,
        50,1,50,1,50,1,50,3,50,2153,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,
        50,2161,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2171,8,
        50,1,50,1,50,1,50,1,50,3,50,2177,8,50,1,50,1,50,3,50,2181,8,50,1,
        50,1,50,3,50,2185,8,50,1,50,1,50,3,50,2189,8,50,1,50,1,50,3,50,2193,
        8,50,1,50,1,50,1,50,3,50,2198,8,50,1,50,3,50,2201,8,50,1,50,1,50,
        3,50,2205,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2226,8,50,1,50,
        1,50,1,50,1,50,3,50,2232,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,2327,8,50,1,51,1,51,
        1,51,1,51,1,51,3,51,2334,8,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
        1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,2350,8,55,1,56,1,56,1,56,
        1,56,1,57,1,57,1,57,1,58,1,58,1,58,5,58,2362,8,58,10,58,12,58,2365,
        9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2374,8,59,3,59,2376,
        8,59,1,60,4,60,2379,8,60,11,60,12,60,2380,1,61,1,61,3,61,2385,8,
        61,1,61,3,61,2388,8,61,1,61,1,61,1,61,1,61,3,61,2394,8,61,3,61,2396,
        8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,3,62,2424,8,62,1,63,1,63,1,63,1,64,1,64,1,64,5,64,2432,8,64,
        10,64,12,64,2435,9,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,5,
        66,2445,8,66,10,66,12,66,2448,9,66,1,67,1,67,1,67,1,67,3,67,2454,
        8,67,1,67,1,67,1,67,1,67,3,67,2460,8,67,1,67,1,67,3,67,2464,8,67,
        1,67,1,67,1,67,1,67,3,67,2470,8,67,1,67,1,67,1,67,3,67,2475,8,67,
        1,67,3,67,2478,8,67,3,67,2480,8,67,1,68,1,68,1,68,3,68,2485,8,68,
        1,69,1,69,3,69,2489,8,69,1,69,1,69,3,69,2493,8,69,1,69,1,69,3,69,
        2497,8,69,1,69,1,69,3,69,2501,8,69,1,69,3,69,2504,8,69,1,69,1,69,
        3,69,2508,8,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2516,8,69,1,69,
        1,69,3,69,2520,8,69,1,69,1,69,3,69,2524,8,69,1,70,1,70,1,71,1,71,
        1,72,1,72,1,72,3,72,2533,8,72,1,73,1,73,1,73,1,73,1,73,3,73,2540,
        8,73,1,74,5,74,2543,8,74,10,74,12,74,2546,9,74,1,75,1,75,1,75,1,
        75,3,75,2552,8,75,1,75,1,75,1,75,3,75,2557,8,75,1,75,1,75,1,75,1,
        75,1,75,3,75,2564,8,75,1,75,1,75,1,75,3,75,2569,8,75,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
        75,3,75,2587,8,75,1,76,1,76,1,77,3,77,2592,8,77,1,77,1,77,1,77,1,
        78,1,78,1,79,1,79,1,79,5,79,2602,8,79,10,79,12,79,2605,9,79,1,80,
        1,80,3,80,2609,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,2618,
        8,81,1,82,1,82,1,82,5,82,2623,8,82,10,82,12,82,2626,9,82,1,83,1,
        83,1,84,1,84,3,84,2632,8,84,1,84,1,84,1,84,1,84,3,84,2638,8,84,1,
        84,1,84,1,84,3,84,2643,8,84,1,84,1,84,3,84,2647,8,84,1,84,3,84,2650,
        8,84,1,84,3,84,2653,8,84,1,84,3,84,2656,8,84,1,84,3,84,2659,8,84,
        1,84,3,84,2662,8,84,1,84,1,84,1,84,3,84,2667,8,84,1,84,3,84,2670,
        8,84,1,84,3,84,2673,8,84,1,84,3,84,2676,8,84,1,84,3,84,2679,8,84,
        1,84,3,84,2682,8,84,1,84,1,84,1,84,1,84,3,84,2688,8,84,1,84,1,84,
        3,84,2692,8,84,1,84,3,84,2695,8,84,1,84,3,84,2698,8,84,1,84,3,84,
        2701,8,84,1,84,3,84,2704,8,84,3,84,2706,8,84,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,3,85,2715,8,85,1,86,1,86,1,87,1,87,1,87,1,87,1,88,
        1,88,1,88,5,88,2726,8,88,10,88,12,88,2729,9,88,1,89,1,89,1,89,5,
        89,2734,8,89,10,89,12,89,2737,9,89,1,90,1,90,1,90,3,90,2742,8,90,
        1,91,1,91,3,91,2746,8,91,1,92,1,92,1,92,3,92,2751,8,92,1,92,1,92,
        1,93,1,93,1,93,3,93,2758,8,93,1,93,1,93,1,94,5,94,2763,8,94,10,94,
        12,94,2766,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2776,
        8,95,1,96,1,96,1,96,1,96,1,96,3,96,2783,8,96,1,96,3,96,2786,8,96,
        1,96,1,96,1,96,3,96,2791,8,96,1,96,3,96,2794,8,96,1,96,1,96,1,96,
        1,96,1,96,3,96,2801,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,
        2810,8,96,1,96,1,96,1,96,1,96,1,96,3,96,2817,8,96,1,96,1,96,1,96,
        3,96,2822,8,96,1,96,3,96,2825,8,96,1,96,3,96,2828,8,96,3,96,2830,
        8,96,1,97,1,97,1,97,3,97,2835,8,97,1,98,1,98,1,98,1,98,1,98,3,98,
        2842,8,98,1,99,1,99,1,99,1,99,1,100,1,100,5,100,2850,8,100,10,100,
        12,100,2853,9,100,1,101,1,101,1,102,1,102,1,102,1,102,1,102,3,102,
        2862,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
        1,103,1,103,3,103,2875,8,103,1,103,3,103,2878,8,103,1,103,3,103,
        2881,8,103,1,103,1,103,1,103,1,103,1,103,3,103,2888,8,103,1,103,
        1,103,1,103,1,103,1,103,1,103,3,103,2896,8,103,1,103,3,103,2899,
        8,103,1,103,3,103,2902,8,103,1,103,1,103,1,103,1,103,1,103,3,103,
        2909,8,103,1,103,1,103,3,103,2913,8,103,1,103,1,103,1,103,1,103,
        3,103,2919,8,103,1,103,3,103,2922,8,103,1,103,3,103,2925,8,103,1,
        103,3,103,2928,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
        103,1,103,1,103,3,103,2940,8,103,1,103,3,103,2943,8,103,1,103,3,
        103,2946,8,103,1,103,1,103,3,103,2950,8,103,1,104,1,104,1,104,1,
        105,1,105,1,105,1,105,1,106,1,106,1,106,5,106,2962,8,106,10,106,
        12,106,2965,9,106,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,109,
        1,109,1,109,1,110,1,110,1,110,5,110,2980,8,110,10,110,12,110,2983,
        9,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,2993,
        8,111,1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,3,113,3008,8,113,1,114,1,114,1,114,1,114,1,115,
        1,115,1,115,1,115,1,116,1,116,1,116,1,116,1,116,1,116,3,116,3024,
        8,116,1,117,1,117,1,117,1,117,1,117,1,118,1,118,1,119,1,119,1,119,
        1,119,1,119,1,119,1,119,1,120,1,120,1,120,5,120,3043,8,120,10,120,
        12,120,3046,9,120,1,121,1,121,3,121,3050,8,121,1,121,3,121,3053,
        8,121,1,121,1,121,3,121,3057,8,121,1,121,3,121,3060,8,121,1,121,
        1,121,1,121,1,121,3,121,3066,8,121,1,121,3,121,3069,8,121,3,121,
        3071,8,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,3,123,3080,
        8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3089,8,124,
        1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,1,127,1,127,1,127,
        1,127,1,128,1,128,1,128,1,128,1,128,3,128,3108,8,128,1,128,1,128,
        3,128,3112,8,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,
        1,129,3,129,3123,8,129,1,129,1,129,1,129,1,129,1,129,1,130,1,130,
        3,130,3132,8,130,1,130,1,130,1,130,1,130,3,130,3138,8,130,1,130,
        1,130,1,130,1,130,3,130,3144,8,130,1,131,1,131,3,131,3148,8,131,
        1,131,3,131,3151,8,131,1,131,3,131,3154,8,131,1,131,3,131,3157,8,
        131,1,131,3,131,3160,8,131,1,132,1,132,1,132,1,132,3,132,3166,8,
        132,1,133,1,133,3,133,3170,8,133,1,133,1,133,1,133,1,133,1,133,3,
        133,3177,8,133,1,133,1,133,1,133,1,133,3,133,3183,8,133,1,134,1,
        134,3,134,3187,8,134,1,134,3,134,3190,8,134,1,134,3,134,3193,8,134,
        1,134,3,134,3196,8,134,1,135,1,135,1,136,1,136,1,136,1,136,3,136,
        3204,8,136,1,136,1,136,3,136,3208,8,136,1,137,1,137,3,137,3212,8,
        137,1,137,1,137,1,137,1,137,3,137,3218,8,137,1,137,1,137,3,137,3222,
        8,137,1,138,1,138,1,138,1,138,3,138,3228,8,138,1,138,1,138,1,138,
        1,139,1,139,1,140,1,140,1,140,1,140,1,141,4,141,3240,8,141,11,141,
        12,141,3241,1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,3251,
        8,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,3,142,3268,8,142,1,142,1,142,1,142,
        3,142,3273,8,142,1,142,3,142,3276,8,142,3,142,3278,8,142,1,143,1,
        143,1,144,1,144,1,144,1,144,1,144,1,144,3,144,3288,8,144,1,145,1,
        145,1,145,5,145,3293,8,145,10,145,12,145,3296,9,145,1,146,1,146,
        3,146,3300,8,146,1,146,3,146,3303,8,146,1,146,3,146,3306,8,146,1,
        146,1,146,1,146,1,146,1,146,3,146,3313,8,146,1,146,3,146,3316,8,
        146,3,146,3318,8,146,1,147,1,147,1,148,1,148,3,148,3324,8,148,1,
        149,1,149,1,149,1,150,1,150,1,150,1,150,3,150,3333,8,150,1,151,1,
        151,1,152,1,152,1,153,1,153,1,153,1,153,3,153,3343,8,153,1,153,1,
        153,1,153,3,153,3348,8,153,1,154,1,154,1,154,1,155,1,155,1,155,1,
        155,3,155,3357,8,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,3,
        156,3366,8,156,1,156,1,156,3,156,3370,8,156,1,156,1,156,1,157,5,
        157,3375,8,157,10,157,12,157,3378,9,157,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,3,158,3387,8,158,1,159,1,159,1,159,1,159,1,159,
        1,159,1,160,5,160,3396,8,160,10,160,12,160,3399,9,160,1,161,1,161,
        1,161,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,1,162,
        1,162,1,162,1,162,1,162,1,162,1,162,3,162,3508,8,162,1,163,1,163,
        1,163,1,163,1,163,1,163,3,163,3516,8,163,1,163,3,163,3519,8,163,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,3529,8,164,
        1,165,4,165,3532,8,165,11,165,12,165,3533,1,166,1,166,1,167,1,167,
        1,167,1,167,1,167,1,167,3,167,3544,8,167,1,167,1,167,1,167,1,167,
        1,167,1,167,1,167,1,167,1,167,3,167,3555,8,167,1,168,1,168,1,168,
        1,168,1,168,1,169,1,169,1,169,5,169,3565,8,169,10,169,12,169,3568,
        9,169,1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,5,171,3578,
        8,171,10,171,12,171,3581,9,171,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,3,172,3590,8,172,1,173,1,173,1,173,1,174,1,174,1,175,1,175,
        1,176,1,176,1,176,1,176,3,176,3603,8,176,1,176,3,176,3606,8,176,
        1,176,1,176,1,176,1,176,1,176,3,176,3613,8,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,3,176,3622,8,176,1,176,3,176,3625,8,176,
        1,176,1,176,1,176,1,176,1,176,3,176,3632,8,176,3,176,3634,8,176,
        1,177,1,177,1,177,1,178,1,178,1,178,3,178,3642,8,178,1,179,1,179,
        1,180,1,180,1,180,1,180,1,180,1,180,3,180,3652,8,180,3,180,3654,
        8,180,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3662,8,181,1,181,
        1,181,3,181,3666,8,181,1,181,1,181,1,181,3,181,3671,8,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3682,8,181,
        1,181,1,181,3,181,3686,8,181,1,181,1,181,1,181,3,181,3691,8,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3701,8,181,
        1,181,1,181,1,181,1,181,3,181,3707,8,181,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,3720,8,181,1,181,
        1,181,1,181,1,181,3,181,3726,8,181,3,181,3728,8,181,1,182,1,182,
        1,182,1,182,1,182,3,182,3735,8,182,1,182,1,182,1,182,1,182,1,182,
        1,182,3,182,3743,8,182,1,183,1,183,1,183,3,183,3748,8,183,1,184,
        1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,3,185,3763,8,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,3,185,3776,8,185,3,185,3778,8,185,1,186,
        1,186,3,186,3782,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
        3,187,3802,8,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,1,189,1,189,1,189,1,189,1,189,1,189,3,189,3819,8,189,1,189,
        3,189,3822,8,189,1,189,3,189,3825,8,189,1,189,3,189,3828,8,189,1,
        189,3,189,3831,8,189,1,190,1,190,1,190,1,190,1,190,1,190,3,190,3839,
        8,190,1,190,3,190,3842,8,190,1,190,3,190,3845,8,190,1,191,1,191,
        1,191,1,191,1,191,1,192,1,192,1,192,1,192,1,192,1,192,1,193,1,193,
        1,193,1,194,1,194,1,194,1,195,1,195,1,195,1,196,1,196,1,196,1,197,
        1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,199,
        1,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,3891,
        8,200,1,200,3,200,3894,8,200,1,200,3,200,3897,8,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,3,200,3915,8,200,1,200,1,200,1,200,1,200,1,200,
        3,200,3922,8,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,
        3931,8,200,1,201,1,201,1,201,1,201,3,201,3937,8,201,1,202,1,202,
        1,202,5,202,3942,8,202,10,202,12,202,3945,9,202,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,3,203,3954,8,203,1,204,1,204,1,204,1,205,
        4,205,3960,8,205,11,205,12,205,3961,1,206,1,206,1,206,3,206,3967,
        8,206,1,206,1,206,1,207,1,207,1,208,1,208,1,209,1,209,1,210,1,210,
        3,210,3979,8,210,1,210,1,210,1,211,1,211,1,212,1,212,1,213,1,213,
        1,213,1,213,1,213,1,214,1,214,1,215,1,215,3,215,3996,8,215,1,215,
        1,215,5,215,4000,8,215,10,215,12,215,4003,9,215,1,216,1,216,1,216,
        1,216,3,216,4009,8,216,1,217,1,217,1,217,1,218,5,218,4015,8,218,
        10,218,12,218,4018,9,218,1,219,1,219,1,219,1,219,1,219,1,219,1,219,
        1,219,1,219,1,219,1,219,3,219,4031,8,219,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,
        3,220,4059,8,220,1,221,1,221,1,221,5,221,4064,8,221,10,221,12,221,
        4067,9,221,1,222,1,222,1,222,1,222,1,222,1,222,1,223,1,223,1,223,
        5,223,4078,8,223,10,223,12,223,4081,9,223,1,224,1,224,1,224,1,224,
        1,224,1,224,1,225,1,225,1,225,1,225,1,225,1,225,3,225,4095,8,225,
        1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,227,1,227,
        3,227,4108,8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,
        4117,8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,3,227,4142,8,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,3,227,4153,8,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,3,227,4220,8,227,1,228,1,228,
        1,228,1,228,1,229,1,229,1,229,5,229,4229,8,229,10,229,12,229,4232,
        9,229,1,230,1,230,1,230,3,230,4237,8,230,1,231,1,231,1,231,1,231,
        1,231,1,231,3,231,4245,8,231,1,232,1,232,1,232,1,232,1,233,1,233,
        1,233,5,233,4254,8,233,10,233,12,233,4257,9,233,1,234,1,234,1,234,
        1,234,1,235,1,235,1,236,1,236,1,236,5,236,4268,8,236,10,236,12,236,
        4271,9,236,1,237,1,237,1,237,1,237,1,237,1,237,3,237,4279,8,237,
        1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,4289,8,237,
        1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,
        4301,8,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
        1,237,1,237,1,237,1,237,3,237,4316,8,237,1,238,1,238,1,238,1,238,
        1,239,1,239,1,239,1,239,1,239,3,239,4327,8,239,1,239,1,239,1,239,
        1,239,1,239,1,239,3,239,4335,8,239,1,239,1,239,1,239,1,240,1,240,
        1,240,5,240,4343,8,240,10,240,12,240,4346,9,240,1,241,1,241,1,241,
        1,241,3,241,4352,8,241,1,241,3,241,4355,8,241,1,241,1,241,1,241,
        1,241,3,241,4361,8,241,1,241,3,241,4364,8,241,1,241,1,241,1,241,
        1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,1,241,3,241,
        4379,8,241,1,242,1,242,1,243,1,243,1,243,1,244,1,244,1,244,1,244,
        1,244,1,244,3,244,4392,8,244,1,245,1,245,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
        1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,
        4421,8,247,1,248,1,248,1,248,5,248,4426,8,248,10,248,12,248,4429,
        9,248,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,
        1,249,1,249,3,249,4443,8,249,1,250,1,250,1,250,1,250,1,250,1,250,
        1,250,3,250,4452,8,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,
        1,250,1,250,3,250,4463,8,250,3,250,4465,8,250,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,3,251,4474,8,251,1,251,1,251,1,251,1,251,
        1,251,1,251,1,251,1,251,1,251,3,251,4485,8,251,3,251,4487,8,251,
        1,252,1,252,1,252,1,252,1,252,3,252,4494,8,252,1,253,1,253,1,253,
        1,253,1,253,1,253,1,253,1,254,1,254,1,254,1,254,1,254,1,254,3,254,
        4509,8,254,1,254,1,254,1,254,1,254,3,254,4515,8,254,1,254,1,254,
        1,254,1,254,1,254,1,254,3,254,4523,8,254,1,254,1,254,1,254,1,254,
        3,254,4529,8,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4537,
        8,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4547,
        8,254,1,254,1,254,1,254,1,254,3,254,4553,8,254,1,254,1,254,1,254,
        1,254,1,254,1,254,3,254,4561,8,254,1,254,1,254,1,254,1,254,3,254,
        4567,8,254,1,254,1,254,1,254,1,254,1,254,1,254,3,254,4575,8,254,
        1,254,1,254,1,254,1,254,1,254,3,254,4582,8,254,1,254,1,254,1,254,
        1,254,1,254,1,254,1,254,3,254,4591,8,254,3,254,4593,8,254,1,255,
        1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
        1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
        3,255,4618,8,255,1,256,1,256,1,256,1,256,1,256,3,256,4625,8,256,
        1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,257,3,257,4636,
        8,257,1,257,1,257,1,257,1,257,3,257,4642,8,257,1,258,1,258,1,259,
        1,259,1,259,5,259,4649,8,259,10,259,12,259,4652,9,259,1,260,1,260,
        3,260,4656,8,260,1,261,1,261,4,261,4660,8,261,11,261,12,261,4661,
        1,262,1,262,1,262,5,262,4667,8,262,10,262,12,262,4670,9,262,1,263,
        1,263,3,263,4674,8,263,1,263,1,263,3,263,4678,8,263,1,263,3,263,
        4681,8,263,1,264,1,264,1,264,1,264,3,264,4687,8,264,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        1,265,1,265,3,265,4836,8,265,1,266,1,266,3,266,4840,8,266,1,267,
        1,267,1,267,3,267,4845,8,267,1,267,1,267,1,267,1,267,1,267,1,267,
        1,267,1,267,1,267,3,267,4856,8,267,1,267,1,267,1,267,1,267,1,267,
        1,267,1,267,1,267,1,267,3,267,4867,8,267,1,267,1,267,1,267,1,267,
        1,267,1,267,1,267,1,267,1,267,3,267,4878,8,267,1,267,1,267,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,3,267,4889,8,267,1,267,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4900,8,267,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4911,8,267,
        1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,4922,
        8,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
        3,267,4934,8,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,
        1,267,3,267,4945,8,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,
        4953,8,267,1,268,1,268,1,268,1,269,1,269,3,269,4960,8,269,1,270,
        1,270,1,270,1,270,3,270,4966,8,270,1,271,1,271,1,271,1,271,1,271,
        1,271,3,271,4974,8,271,1,271,1,271,1,271,3,271,4979,8,271,1,271,
        1,271,1,271,3,271,4984,8,271,1,271,1,271,1,271,3,271,4989,8,271,
        1,271,1,271,1,271,1,271,3,271,4995,8,271,1,271,1,271,1,271,1,271,
        1,271,3,271,5002,8,271,1,271,1,271,1,271,1,271,3,271,5008,8,271,
        1,271,1,271,1,271,1,271,3,271,5014,8,271,1,271,1,271,1,271,3,271,
        5019,8,271,1,271,1,271,1,271,1,271,3,271,5025,8,271,1,271,1,271,
        1,271,1,271,1,271,3,271,5032,8,271,1,271,1,271,1,271,3,271,5037,
        8,271,1,271,1,271,1,271,1,271,3,271,5043,8,271,1,271,1,271,1,271,
        1,271,1,271,3,271,5050,8,271,1,271,3,271,5053,8,271,1,272,1,272,
        1,273,1,273,1,274,1,274,1,274,1,274,1,274,1,274,1,274,3,274,5066,
        8,274,1,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,5075,8,275,
        1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,
        5087,8,275,3,275,5089,8,275,1,276,1,276,1,276,1,276,1,276,1,276,
        1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,1,276,3,276,5106,
        8,276,1,277,1,277,1,277,5,277,5111,8,277,10,277,12,277,5114,9,277,
        1,278,1,278,3,278,5118,8,278,1,278,1,278,3,278,5122,8,278,1,278,
        1,278,3,278,5126,8,278,1,278,1,278,3,278,5130,8,278,3,278,5132,8,
        278,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,3,279,5192,8,279,1,280,1,280,1,280,5,280,
        5197,8,280,10,280,12,280,5200,9,280,1,281,1,281,1,281,3,281,5205,
        8,281,1,282,1,282,1,282,1,282,1,283,1,283,1,283,1,283,1,283,3,283,
        5216,8,283,1,283,3,283,5219,8,283,1,284,1,284,1,284,1,284,1,284,
        3,284,5226,8,284,1,284,3,284,5229,8,284,1,284,1,284,1,284,1,284,
        1,284,1,284,1,284,1,284,3,284,5239,8,284,1,284,3,284,5242,8,284,
        3,284,5244,8,284,1,285,1,285,1,285,1,285,1,286,1,286,1,286,1,286,
        1,287,1,287,1,287,1,287,1,287,1,287,1,288,5,288,5261,8,288,10,288,
        12,288,5264,9,288,1,289,1,289,1,289,1,289,1,289,1,289,1,289,1,289,
        1,289,3,289,5275,8,289,1,290,1,290,1,290,1,290,1,290,1,290,1,290,
        3,290,5284,8,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,3,290,
        5293,8,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,1,290,
        1,290,3,290,5305,8,290,3,290,5307,8,290,1,291,1,291,1,292,1,292,
        3,292,5313,8,292,1,292,1,292,3,292,5317,8,292,1,292,3,292,5320,8,
        292,1,292,1,292,1,292,3,292,5325,8,292,1,292,1,292,1,292,1,292,3,
        292,5331,8,292,1,292,3,292,5334,8,292,1,292,3,292,5337,8,292,1,292,
        3,292,5340,8,292,1,292,1,292,3,292,5344,8,292,1,292,1,292,3,292,
        5348,8,292,1,292,1,292,1,292,1,292,1,292,1,292,1,292,3,292,5357,
        8,292,1,292,1,292,1,292,1,292,3,292,5363,8,292,1,292,3,292,5366,
        8,292,1,292,3,292,5369,8,292,1,292,3,292,5372,8,292,3,292,5374,8,
        292,1,293,1,293,1,294,1,294,1,295,1,295,1,296,1,296,1,297,1,297,
        1,297,1,298,1,298,1,298,5,298,5390,8,298,10,298,12,298,5393,9,298,
        1,299,3,299,5396,8,299,1,299,3,299,5399,8,299,1,299,3,299,5402,8,
        299,1,299,3,299,5405,8,299,1,299,3,299,5408,8,299,1,299,1,299,1,
        299,3,299,5413,8,299,1,299,3,299,5416,8,299,3,299,5418,8,299,1,300,
        1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,1,300,3,300,
        5431,8,300,1,301,1,301,1,301,1,301,1,301,1,302,1,302,1,302,5,302,
        5441,8,302,10,302,12,302,5444,9,302,1,303,1,303,1,303,1,304,1,304,
        1,305,1,305,1,306,1,306,1,306,1,306,3,306,5457,8,306,1,307,1,307,
        3,307,5461,8,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,
        1,307,1,307,3,307,5473,8,307,3,307,5475,8,307,1,307,1,307,1,308,
        1,308,1,308,1,309,1,309,3,309,5484,8,309,1,309,1,309,1,310,1,310,
        1,310,5,310,5491,8,310,10,310,12,310,5494,9,310,1,311,1,311,1,311,
        5,311,5499,8,311,10,311,12,311,5502,9,311,1,312,1,312,1,312,1,312,
        1,312,1,312,3,312,5510,8,312,3,312,5512,8,312,1,313,1,313,3,313,
        5516,8,313,1,313,1,313,1,314,1,314,1,314,5,314,5523,8,314,10,314,
        12,314,5526,9,314,1,315,1,315,3,315,5530,8,315,1,315,1,315,1,315,
        1,315,3,315,5536,8,315,1,315,1,315,1,315,3,315,5541,8,315,1,316,
        1,316,3,316,5545,8,316,1,316,1,316,1,316,3,316,5550,8,316,1,317,
        1,317,1,318,1,318,1,319,1,319,3,319,5558,8,319,1,319,1,319,1,319,
        1,319,1,319,3,319,5565,8,319,1,320,1,320,1,320,3,320,5570,8,320,
        1,321,1,321,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,
        1,322,1,322,3,322,5585,8,322,1,322,1,322,1,323,1,323,1,323,5,323,
        5592,8,323,10,323,12,323,5595,9,323,1,324,1,324,1,324,1,325,1,325,
        1,325,5,325,5603,8,325,10,325,12,325,5606,9,325,1,326,4,326,5609,
        8,326,11,326,12,326,5610,1,326,1,326,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,
        1,327,1,327,1,327,1,327,1,327,1,327,1,327,1,327,3,327,5650,8,327,
        1,328,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,5660,8,328,
        1,329,1,329,1,329,1,329,1,329,3,329,5667,8,329,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,5,330,5676,8,330,10,330,12,330,5679,9,330,
        1,331,1,331,1,331,1,332,1,332,1,332,1,333,1,333,1,333,5,333,5690,
        8,333,10,333,12,333,5693,9,333,1,334,1,334,1,334,1,334,1,334,3,334,
        5700,8,334,1,335,4,335,5703,8,335,11,335,12,335,5704,1,336,1,336,
        1,337,1,337,1,337,1,337,3,337,5713,8,337,1,337,1,337,1,337,1,337,
        1,337,1,337,3,337,5721,8,337,1,337,1,337,1,337,1,337,3,337,5727,
        8,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,5735,8,337,1,337,
        1,337,1,337,1,337,3,337,5741,8,337,1,337,1,337,1,337,1,337,1,337,
        1,337,3,337,5749,8,337,3,337,5751,8,337,1,338,1,338,1,338,1,338,
        3,338,5757,8,338,1,338,1,338,1,338,1,338,1,338,1,338,3,338,5765,
        8,338,3,338,5767,8,338,1,339,1,339,1,339,1,339,3,339,5773,8,339,
        1,339,1,339,1,339,1,339,1,339,1,339,3,339,5781,8,339,3,339,5783,
        8,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,
        1,340,3,340,5807,8,340,1,341,1,341,1,341,5,341,5812,8,341,10,341,
        12,341,5815,9,341,1,341,1,341,1,342,1,342,1,342,5,342,5822,8,342,
        10,342,12,342,5825,9,342,1,343,1,343,1,343,1,344,1,344,1,344,1,345,
        4,345,5834,8,345,11,345,12,345,5835,1,346,1,346,1,346,3,346,5841,
        8,346,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
        1,347,3,347,5854,8,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,3,347,5866,8,347,1,347,1,347,1,347,1,347,1,347,
        1,347,1,347,1,347,1,347,1,347,3,347,5878,8,347,3,347,5880,8,347,
        1,348,1,348,1,348,1,348,3,348,5886,8,348,1,349,1,349,1,349,3,349,
        5891,8,349,1,349,1,349,1,349,1,349,1,349,1,349,3,349,5899,8,349,
        1,350,1,350,1,350,1,351,1,351,3,351,5906,8,351,1,351,1,351,1,351,
        1,351,1,351,1,351,1,351,1,351,1,351,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
        1,352,1,352,1,352,1,352,1,352,1,352,1,352,3,352,5951,8,352,1,353,
        1,353,1,353,3,353,5956,8,353,1,353,1,353,1,353,1,353,1,353,3,353,
        5963,8,353,1,354,1,354,3,354,5967,8,354,1,354,1,354,3,354,5971,8,
        354,1,354,1,354,1,354,1,354,3,354,5977,8,354,1,354,1,354,3,354,5981,
        8,354,1,354,1,354,1,354,3,354,5986,8,354,1,354,1,354,3,354,5990,
        8,354,1,354,3,354,5993,8,354,3,354,5995,8,354,1,355,1,355,1,356,
        1,356,1,357,1,357,1,357,1,357,1,358,1,358,1,358,1,358,1,358,1,358,
        1,358,1,358,1,358,1,358,1,358,1,358,3,358,6017,8,358,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,3,359,6088,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,
        6283,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,3,359,6296,8,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,3,359,6307,8,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,3,359,6320,8,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6332,8,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,3,359,6346,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,3,359,6378,8,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,3,359,6392,8,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
        1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6504,8,359,
        3,359,6506,8,359,1,360,1,360,1,361,1,361,1,361,1,362,1,362,1,362,
        1,362,3,362,6517,8,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,3,362,6528,8,362,1,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,3,362,6539,8,362,1,362,1,362,1,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,3,362,6552,8,362,1,362,1,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,6564,8,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,6575,
        8,362,1,362,1,362,1,362,1,362,1,362,3,362,6582,8,362,1,363,1,363,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,
        1,364,1,364,1,364,1,364,1,364,1,364,1,364,1,364,3,364,6803,8,364,
        1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,365,1,366,1,366,1,366,
        5,366,6816,8,366,10,366,12,366,6819,9,366,1,367,1,367,1,367,1,367,
        1,367,1,367,1,367,1,367,3,367,6829,8,367,1,368,1,368,1,368,1,368,
        1,368,3,368,6836,8,368,1,369,1,369,1,369,1,369,1,369,1,369,1,369,
        1,369,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,3,370,6890,8,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,1,370,
        3,370,7031,8,370,1,371,1,371,1,371,1,371,3,371,7037,8,371,1,371,
        3,371,7040,8,371,1,372,1,372,1,373,1,373,1,373,1,373,1,373,1,373,
        3,373,7050,8,373,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,
        1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,
        1,374,1,374,1,374,1,374,1,374,1,374,1,374,1,374,3,374,7079,8,374,
        1,375,1,375,1,375,1,375,1,375,1,375,1,375,1,375,3,375,7089,8,375,
        1,376,1,376,1,376,5,376,7094,8,376,10,376,12,376,7097,9,376,1,377,
        1,377,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,
        1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,3,378,7119,8,378,
        1,378,1,378,1,378,1,378,1,378,1,378,1,378,3,378,7128,8,378,1,378,
        1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,1,378,3,378,7140,
        8,378,1,379,1,379,1,379,1,379,3,379,7146,8,379,1,379,1,379,1,379,
        1,379,1,379,1,379,3,379,7154,8,379,3,379,7156,8,379,1,380,1,380,
        3,380,7160,8,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,1,380,
        3,380,7170,8,380,1,380,1,380,3,380,7174,8,380,1,380,1,380,1,381,
        1,381,1,381,1,381,1,381,1,381,3,381,7184,8,381,1,382,3,382,7187,
        8,382,1,382,1,382,3,382,7191,8,382,5,382,7193,8,382,10,382,12,382,
        7196,9,382,1,383,1,383,1,383,1,383,1,383,3,383,7203,8,383,1,384,
        1,384,1,385,1,385,1,386,1,386,1,387,1,387,1,387,3,387,7214,8,387,
        1,388,1,388,1,388,1,389,1,389,1,389,1,390,1,390,1,390,1,390,3,390,
        7226,8,390,1,391,1,391,3,391,7230,8,391,1,391,3,391,7233,8,391,1,
        391,1,391,3,391,7237,8,391,1,391,3,391,7240,8,391,1,391,1,391,1,
        391,3,391,7245,8,391,1,391,1,391,3,391,7249,8,391,1,391,3,391,7252,
        8,391,1,391,1,391,3,391,7256,8,391,1,391,3,391,7259,8,391,1,391,
        1,391,3,391,7263,8,391,1,391,3,391,7266,8,391,1,391,1,391,1,391,
        1,391,1,391,1,391,1,391,1,391,1,391,3,391,7277,8,391,1,391,1,391,
        1,391,1,391,1,391,3,391,7284,8,391,1,391,1,391,1,391,1,391,1,391,
        1,391,1,391,1,391,1,391,1,391,1,391,3,391,7297,8,391,1,392,1,392,
        1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,1,393,3,393,
        7311,8,393,1,394,1,394,3,394,7315,8,394,1,394,5,394,7318,8,394,10,
        394,12,394,7321,9,394,1,395,1,395,1,396,1,396,3,396,7327,8,396,1,
        396,1,396,1,397,1,397,1,397,3,397,7334,8,397,1,397,3,397,7337,8,
        397,1,397,1,397,1,397,3,397,7342,8,397,1,397,3,397,7345,8,397,1,
        397,1,397,1,397,1,397,1,397,1,397,1,397,3,397,7354,8,397,3,397,7356,
        8,397,1,397,1,397,1,397,3,397,7361,8,397,1,398,1,398,3,398,7365,
        8,398,1,398,1,398,1,398,1,399,1,399,1,399,1,400,1,400,1,400,1,400,
        3,400,7377,8,400,1,400,3,400,7380,8,400,1,401,1,401,1,402,4,402,
        7385,8,402,11,402,12,402,7386,1,403,1,403,3,403,7391,8,403,1,403,
        1,403,1,403,3,403,7396,8,403,1,404,1,404,1,404,1,404,1,404,1,404,
        1,404,1,404,3,404,7406,8,404,1,405,1,405,1,406,1,406,1,406,1,406,
        1,406,3,406,7415,8,406,1,406,3,406,7418,8,406,1,406,1,406,1,406,
        3,406,7423,8,406,1,407,1,407,1,407,1,407,1,407,1,408,1,408,1,408,
        1,408,3,408,7434,8,408,1,408,1,408,3,408,7438,8,408,1,408,1,408,
        1,408,1,408,3,408,7444,8,408,1,409,1,409,1,409,5,409,7449,8,409,
        10,409,12,409,7452,9,409,1,410,1,410,1,411,1,411,1,411,1,411,1,411,
        1,411,1,412,1,412,1,412,1,412,1,412,1,413,1,413,1,413,1,413,3,413,
        7471,8,413,1,413,1,413,1,413,1,414,1,414,1,414,1,414,1,414,1,414,
        1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,1,414,3,414,
        7492,8,414,1,414,1,414,3,414,7496,8,414,1,414,1,414,1,414,3,414,
        7501,8,414,1,415,1,415,1,416,1,416,1,416,1,416,1,416,1,416,1,416,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,1,417,
        1,417,1,417,1,417,1,417,1,417,1,417,3,417,7584,8,417,1,418,1,418,
        1,419,1,419,3,419,7590,8,419,1,419,1,419,1,419,1,419,1,419,1,419,
        1,419,1,419,1,419,1,420,1,420,3,420,7603,8,420,1,420,1,420,3,420,
        7607,8,420,1,420,1,420,3,420,7611,8,420,1,420,1,420,3,420,7615,8,
        420,1,420,1,420,1,420,1,420,3,420,7621,8,420,1,421,1,421,1,421,1,
        422,1,422,3,422,7628,8,422,1,422,3,422,7631,8,422,1,422,3,422,7634,
        8,422,1,422,3,422,7637,8,422,1,422,3,422,7640,8,422,1,422,1,422,
        1,422,1,422,1,422,3,422,7647,8,422,3,422,7649,8,422,1,423,1,423,
        3,423,7653,8,423,1,423,3,423,7656,8,423,1,423,1,423,1,423,1,423,
        1,423,3,423,7663,8,423,3,423,7665,8,423,1,424,1,424,1,424,5,424,
        7670,8,424,10,424,12,424,7673,9,424,1,425,1,425,1,425,5,425,7678,
        8,425,10,425,12,425,7681,9,425,1,426,1,426,1,427,1,427,3,427,7687,
        8,427,1,428,1,428,1,428,3,428,7692,8,428,1,429,1,429,3,429,7696,
        8,429,1,430,1,430,3,430,7700,8,430,1,431,1,431,3,431,7704,8,431,
        1,432,1,432,3,432,7708,8,432,1,433,1,433,1,434,1,434,1,435,1,435,
        1,436,1,436,1,437,1,437,1,437,1,437,1,438,1,438,3,438,7724,8,438,
        1,439,1,439,1,439,5,439,7729,8,439,10,439,12,439,7732,9,439,1,440,
        1,440,1,441,1,441,1,441,1,441,1,441,3,441,7741,8,441,1,441,1,441,
        1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,3,441,7754,
        8,441,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,1,442,3,442,
        7765,8,442,1,443,1,443,1,443,5,443,7770,8,443,10,443,12,443,7773,
        9,443,1,444,1,444,3,444,7777,8,444,1,445,1,445,3,445,7781,8,445,
        1,446,1,446,3,446,7785,8,446,1,447,1,447,1,447,3,447,7790,8,447,
        1,447,1,447,1,447,1,448,1,448,1,448,1,448,1,449,1,449,1,449,1,449,
        3,449,7803,8,449,1,450,1,450,1,450,3,450,7808,8,450,1,450,1,450,
        3,450,7812,8,450,1,450,1,450,1,450,1,450,1,450,1,450,3,450,7820,
        8,450,1,450,3,450,7823,8,450,1,450,1,450,3,450,7827,8,450,1,450,
        1,450,1,450,1,450,1,450,1,450,1,450,1,450,1,450,3,450,7838,8,450,
        1,450,3,450,7841,8,450,3,450,7843,8,450,1,451,1,451,1,451,1,451,
        1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,1,452,3,452,
        7859,8,452,1,453,3,453,7862,8,453,1,453,1,453,1,453,1,453,1,453,
        3,453,7869,8,453,1,453,3,453,7872,8,453,1,454,1,454,1,454,3,454,
        7877,8,454,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,
        1,455,1,455,1,455,1,455,3,455,7892,8,455,1,455,1,455,1,455,1,455,
        3,455,7898,8,455,1,456,1,456,1,457,1,457,1,457,5,457,7905,8,457,
        10,457,12,457,7908,9,457,1,458,1,458,1,458,1,459,1,459,1,459,3,459,
        7916,8,459,1,459,1,459,1,459,1,459,1,459,3,459,7923,8,459,1,459,
        3,459,7926,8,459,1,460,1,460,1,460,1,460,3,460,7932,8,460,1,460,
        1,460,1,460,3,460,7937,8,460,1,461,1,461,1,461,1,462,1,462,3,462,
        7944,8,462,1,462,1,462,3,462,7948,8,462,1,462,1,462,1,462,3,462,
        7953,8,462,1,462,3,462,7956,8,462,1,462,1,462,1,462,1,462,3,462,
        7962,8,462,1,462,1,462,3,462,7966,8,462,3,462,7968,8,462,1,462,3,
        462,7971,8,462,1,463,1,463,1,463,1,463,1,463,3,463,7978,8,463,1,
        463,3,463,7981,8,463,1,463,1,463,1,463,1,463,1,463,3,463,7988,8,
        463,1,463,1,463,1,464,1,464,1,464,1,464,3,464,7996,8,464,1,464,3,
        464,7999,8,464,1,464,1,464,1,464,1,464,1,465,1,465,1,465,3,465,8008,
        8,465,1,465,1,465,1,466,3,466,8013,8,466,1,466,1,466,1,466,1,466,
        3,466,8019,8,466,1,466,3,466,8022,8,466,1,466,3,466,8025,8,466,1,
        467,1,467,1,467,1,468,1,468,3,468,8032,8,468,1,468,1,468,3,468,8036,
        8,468,1,468,3,468,8039,8,468,1,469,1,469,1,469,1,469,1,470,1,470,
        1,470,1,470,1,470,1,470,1,470,1,470,1,470,3,470,8054,8,470,1,470,
        3,470,8057,8,470,1,471,1,471,1,472,1,472,1,472,3,472,8064,8,472,
        1,473,3,473,8067,8,473,1,473,1,473,1,473,1,473,1,473,3,473,8074,
        8,473,1,473,3,473,8077,8,473,1,473,3,473,8080,8,473,1,474,1,474,
        1,474,5,474,8085,8,474,10,474,12,474,8088,9,474,1,475,1,475,1,475,
        1,475,1,475,1,475,1,475,1,475,1,475,1,475,3,475,8100,8,475,1,476,
        1,476,1,476,1,477,1,477,1,477,5,477,8108,8,477,10,477,12,477,8111,
        9,477,1,478,1,478,1,478,1,478,1,478,3,478,8118,8,478,1,478,1,478,
        1,478,1,479,1,479,1,480,1,480,1,480,1,480,1,480,5,480,8130,8,480,
        10,480,12,480,8133,9,480,1,481,1,481,1,481,1,481,3,481,8139,8,481,
        1,482,1,482,3,482,8143,8,482,1,483,1,483,1,483,1,483,1,483,1,483,
        1,483,1,483,3,483,8153,8,483,1,484,1,484,3,484,8157,8,484,1,484,
        1,484,3,484,8161,8,484,1,484,1,484,3,484,8165,8,484,3,484,8167,8,
        484,1,484,1,484,1,484,3,484,8172,8,484,1,484,1,484,3,484,8176,8,
        484,1,484,1,484,3,484,8180,8,484,3,484,8182,8,484,3,484,8184,8,484,
        1,485,1,485,1,485,3,485,8189,8,485,1,485,5,485,8192,8,485,10,485,
        12,485,8195,9,485,1,486,1,486,1,486,3,486,8200,8,486,1,486,5,486,
        8203,8,486,10,486,12,486,8206,9,486,1,487,1,487,3,487,8210,8,487,
        1,487,3,487,8213,8,487,1,487,3,487,8216,8,487,1,487,3,487,8219,8,
        487,1,487,3,487,8222,8,487,1,487,3,487,8225,8,487,1,487,3,487,8228,
        8,487,1,487,3,487,8231,8,487,1,487,1,487,1,487,3,487,8236,8,487,
        1,487,3,487,8239,8,487,1,487,3,487,8242,8,487,1,487,3,487,8245,8,
        487,1,487,3,487,8248,8,487,1,487,3,487,8251,8,487,3,487,8253,8,487,
        1,487,1,487,1,487,1,487,3,487,8259,8,487,1,488,1,488,3,488,8263,
        8,488,1,488,1,488,1,489,1,489,1,489,5,489,8270,8,489,10,489,12,489,
        8273,9,489,1,490,1,490,3,490,8277,8,490,1,490,1,490,3,490,8281,8,
        490,1,490,1,490,1,490,1,490,1,491,1,491,1,491,3,491,8290,8,491,1,
        492,1,492,1,493,1,493,1,493,1,494,1,494,1,495,3,495,8300,8,495,1,
        495,1,495,3,495,8304,8,495,1,495,1,495,1,495,3,495,8309,8,495,1,
        495,1,495,1,495,1,495,3,495,8315,8,495,1,496,1,496,1,497,1,497,1,
        498,1,498,1,498,1,498,1,498,1,498,3,498,8327,8,498,1,499,1,499,1,
        500,1,500,1,501,1,501,1,501,1,501,1,502,1,502,1,502,5,502,8340,8,
        502,10,502,12,502,8343,9,502,1,503,1,503,1,503,1,503,3,503,8349,
        8,503,3,503,8351,8,503,1,503,3,503,8354,8,503,1,504,1,504,3,504,
        8358,8,504,1,504,1,504,3,504,8362,8,504,3,504,8364,8,504,1,505,1,
        505,1,506,1,506,1,506,1,506,3,506,8372,8,506,1,506,1,506,1,506,1,
        506,1,506,1,506,1,506,3,506,8381,8,506,1,506,1,506,1,506,1,506,3,
        506,8387,8,506,3,506,8389,8,506,3,506,8391,8,506,1,507,1,507,1,507,
        1,507,1,507,3,507,8398,8,507,1,508,1,508,3,508,8402,8,508,1,509,
        1,509,1,510,1,510,1,510,1,510,1,510,3,510,8411,8,510,1,511,1,511,
        3,511,8415,8,511,1,512,1,512,1,513,1,513,1,514,1,514,1,514,1,514,
        1,515,1,515,1,515,5,515,8428,8,515,10,515,12,515,8431,9,515,1,516,
        1,516,1,516,1,516,1,516,3,516,8438,8,516,1,517,1,517,1,517,1,518,
        1,518,1,518,1,518,1,518,1,519,1,519,1,519,1,519,1,519,1,520,1,520,
        1,520,1,520,1,520,1,520,1,521,1,521,1,521,1,522,1,522,1,522,1,522,
        3,522,8466,8,522,1,523,1,523,1,524,4,524,8471,8,524,11,524,12,524,
        8472,1,525,1,525,3,525,8477,8,525,1,525,3,525,8480,8,525,1,526,1,
        526,1,526,3,526,8485,8,526,1,526,1,526,3,526,8489,8,526,1,526,3,
        526,8492,8,526,1,527,1,527,1,527,1,528,1,528,1,528,1,528,1,528,1,
        528,1,528,1,528,1,528,5,528,8506,8,528,10,528,12,528,8509,9,528,
        1,529,1,529,1,529,1,530,1,530,1,530,5,530,8517,8,530,10,530,12,530,
        8520,9,530,1,531,1,531,3,531,8524,8,531,1,531,3,531,8527,8,531,1,
        531,1,531,3,531,8531,8,531,1,531,1,531,3,531,8535,8,531,1,531,1,
        531,3,531,8539,8,531,1,531,1,531,1,531,3,531,8544,8,531,1,531,1,
        531,3,531,8548,8,531,1,531,1,531,3,531,8552,8,531,3,531,8554,8,531,
        1,531,1,531,1,531,1,531,1,531,1,531,1,531,3,531,8563,8,531,1,531,
        1,531,1,531,3,531,8568,8,531,1,531,1,531,1,531,1,531,3,531,8574,
        8,531,1,531,1,531,3,531,8578,8,531,3,531,8580,8,531,1,531,1,531,
        1,531,1,531,1,531,3,531,8587,8,531,1,531,1,531,1,531,3,531,8592,
        8,531,1,531,1,531,1,531,1,531,5,531,8598,8,531,10,531,12,531,8601,
        9,531,1,532,3,532,8604,8,532,1,532,1,532,1,532,1,532,1,532,3,532,
        8611,8,532,1,533,1,533,1,533,3,533,8616,8,533,1,533,3,533,8619,8,
        533,1,533,1,533,1,533,1,533,3,533,8625,8,533,1,534,1,534,3,534,8629,
        8,534,1,535,1,535,1,535,1,535,1,535,1,535,1,535,3,535,8638,8,535,
        1,536,1,536,3,536,8642,8,536,1,536,1,536,1,536,1,536,1,536,1,536,
        3,536,8650,8,536,3,536,8652,8,536,1,537,1,537,1,537,5,537,8657,8,
        537,10,537,12,537,8660,9,537,1,538,1,538,3,538,8664,8,538,1,538,
        3,538,8667,8,538,1,539,1,539,1,539,1,539,1,539,1,539,3,539,8675,
        8,539,1,540,1,540,1,540,1,540,1,540,1,541,1,541,3,541,8684,8,541,
        1,541,1,541,1,541,1,541,1,541,1,541,3,541,8692,8,541,3,541,8694,
        8,541,1,542,1,542,3,542,8698,8,542,1,543,1,543,1,543,5,543,8703,
        8,543,10,543,12,543,8706,9,543,1,544,1,544,1,544,1,544,1,544,1,545,
        1,545,1,545,1,546,1,546,1,546,1,547,1,547,1,547,1,547,1,547,3,547,
        8724,8,547,1,548,1,548,1,549,1,549,1,549,5,549,8731,8,549,10,549,
        12,549,8734,9,549,1,550,1,550,1,550,3,550,8739,8,550,1,551,1,551,
        1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,1,551,
        1,551,1,551,1,551,1,551,3,551,8758,8,551,1,551,1,551,1,552,1,552,
        1,552,5,552,8765,8,552,10,552,12,552,8768,9,552,1,553,1,553,1,553,
        3,553,8773,8,553,1,553,1,553,3,553,8777,8,553,1,554,4,554,8780,8,
        554,11,554,12,554,8781,1,555,1,555,1,555,1,555,1,555,1,555,1,555,
        1,555,3,555,8792,8,555,1,556,1,556,1,556,5,556,8797,8,556,10,556,
        12,556,8800,9,556,1,557,1,557,1,557,1,557,1,557,1,557,3,557,8808,
        8,557,1,558,3,558,8811,8,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,3,558,8820,8,558,3,558,8822,8,558,1,559,1,559,3,559,8826,8,
        559,1,559,5,559,8829,8,559,10,559,12,559,8832,9,559,1,560,1,560,
        1,560,1,560,1,560,1,560,1,560,3,560,8841,8,560,1,560,1,560,1,560,
        1,560,3,560,8847,8,560,1,560,3,560,8850,8,560,1,561,1,561,1,561,
        1,561,1,561,3,561,8857,8,561,1,562,1,562,3,562,8861,8,562,1,562,
        3,562,8864,8,562,1,563,1,563,1,563,1,563,1,564,1,564,1,564,1,564,
        1,564,1,564,1,564,3,564,8877,8,564,1,564,1,564,1,564,1,564,3,564,
        8883,8,564,1,564,1,564,3,564,8887,8,564,1,564,1,564,3,564,8891,8,
        564,1,564,3,564,8894,8,564,1,565,1,565,1,565,1,565,1,566,1,566,3,
        566,8902,8,566,1,567,1,567,3,567,8906,8,567,1,568,1,568,3,568,8910,
        8,568,1,568,1,568,1,568,1,568,1,569,1,569,3,569,8918,8,569,1,570,
        1,570,1,570,1,570,1,570,3,570,8925,8,570,1,571,1,571,1,571,1,571,
        1,571,3,571,8932,8,571,1,572,1,572,3,572,8936,8,572,1,572,1,572,
        1,572,1,572,3,572,8942,8,572,3,572,8944,8,572,1,573,1,573,1,574,
        1,574,1,574,1,574,1,574,3,574,8953,8,574,1,574,3,574,8956,8,574,
        1,575,1,575,1,576,1,576,1,576,1,576,1,576,1,576,3,576,8966,8,576,
        1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,1,577,
        1,577,1,577,1,577,3,577,8982,8,577,1,577,1,577,1,577,1,577,3,577,
        8988,8,577,1,577,1,577,1,577,3,577,8993,8,577,1,578,1,578,1,578,
        1,578,1,578,3,578,9000,8,578,1,579,1,579,1,580,1,580,1,580,1,581,
        1,581,1,582,1,582,1,582,1,582,3,582,9013,8,582,1,583,1,583,1,583,
        5,583,9018,8,583,10,583,12,583,9021,9,583,1,584,1,584,1,584,5,584,
        9026,8,584,10,584,12,584,9029,9,584,1,585,1,585,1,585,5,585,9034,
        8,585,10,585,12,585,9037,9,585,1,586,1,586,3,586,9041,8,586,1,586,
        1,586,3,586,9045,8,586,1,586,1,586,1,586,1,586,3,586,9051,8,586,
        1,587,1,587,3,587,9055,8,587,1,587,1,587,3,587,9059,8,587,1,588,
        3,588,9062,8,588,1,588,1,588,1,589,1,589,3,589,9068,8,589,1,590,
        1,590,1,590,3,590,9073,8,590,1,590,1,590,1,590,1,590,1,590,1,590,
        1,590,1,590,1,590,1,590,1,590,1,590,1,590,1,590,3,590,9089,8,590,
        1,590,3,590,9092,8,590,3,590,9094,8,590,1,591,1,591,1,591,1,591,
        1,591,1,591,1,591,1,591,1,591,1,591,3,591,9106,8,591,3,591,9108,
        8,591,1,592,1,592,3,592,9112,8,592,1,592,1,592,1,592,1,592,3,592,
        9118,8,592,1,592,1,592,3,592,9122,8,592,3,592,9124,8,592,1,593,1,
        593,1,593,1,593,5,593,9130,8,593,10,593,12,593,9133,9,593,1,594,
        3,594,9136,8,594,1,594,1,594,1,595,1,595,1,595,5,595,9143,8,595,
        10,595,12,595,9146,9,595,1,596,1,596,1,596,5,596,9151,8,596,10,596,
        12,596,9154,9,596,1,597,1,597,1,597,3,597,9159,8,597,1,598,3,598,
        9162,8,598,1,598,1,598,1,599,1,599,1,599,1,599,1,599,3,599,9171,
        8,599,1,600,1,600,1,600,3,600,9176,8,600,1,601,1,601,1,601,5,601,
        9181,8,601,10,601,12,601,9184,9,601,1,602,1,602,1,602,1,602,1,602,
        1,602,1,602,3,602,9193,8,602,1,602,1,602,1,602,1,602,1,602,1,602,
        1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,
        1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,9219,8,602,1,602,
        1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,9230,8,602,
        5,602,9232,8,602,10,602,12,602,9235,9,602,1,603,1,603,1,603,1,603,
        1,603,3,603,9242,8,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
        1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,1,603,
        1,603,1,603,3,603,9264,8,603,1,603,1,603,1,603,1,603,1,603,1,603,
        1,603,3,603,9273,8,603,1,604,1,604,1,605,1,605,1,605,1,605,1,605,
        1,605,3,605,9283,8,605,1,605,3,605,9286,8,605,1,605,1,605,1,605,
        3,605,9291,8,605,1,605,1,605,1,605,3,605,9296,8,605,1,605,1,605,
        3,605,9300,8,605,1,605,1,605,1,606,1,606,3,606,9306,8,606,1,606,
        3,606,9309,8,606,1,606,3,606,9312,8,606,1,606,3,606,9315,8,606,1,
        607,1,607,3,607,9319,8,607,1,608,1,608,1,608,1,608,1,608,1,608,1,
        608,1,608,1,608,1,608,1,608,1,608,3,608,9333,8,608,1,608,1,608,1,
        608,1,608,1,608,3,608,9340,8,608,1,608,1,608,1,608,1,608,1,608,3,
        608,9347,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9354,8,608,1,
        608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,3,608,9373,8,608,1,608,1,608,
        1,608,1,608,1,608,1,608,3,608,9381,8,608,1,608,1,608,1,608,1,608,
        1,608,1,608,3,608,9389,8,608,3,608,9391,8,608,1,608,1,608,1,608,
        1,608,3,608,9397,8,608,1,608,1,608,1,608,1,608,1,608,3,608,9404,
        8,608,3,608,9406,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,3,608,9419,8,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        3,608,9458,8,608,3,608,9460,8,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,3,608,9480,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,3,608,9490,8,608,1,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,3,608,9501,8,608,1,608,1,608,1,608,1,608,1,608,
        1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,
        9518,8,608,1,608,3,608,9521,8,608,1,608,3,608,9524,8,608,1,608,3,
        608,9527,8,608,3,608,9529,8,608,1,608,1,608,1,608,1,608,1,608,3,
        608,9536,8,608,1,608,3,608,9539,8,608,1,608,1,608,3,608,9543,8,608,
        1,608,3,608,9546,8,608,1,608,3,608,9549,8,608,3,608,9551,8,608,1,
        608,1,608,1,608,1,608,1,608,3,608,9558,8,608,1,608,1,608,1,608,1,
        608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,3,608,9571,8,608,1,
        608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
        3,608,9584,8,608,1,608,3,608,9587,8,608,1,608,1,608,3,608,9591,8,
        608,1,608,3,608,9594,8,608,1,608,1,608,1,608,1,608,1,608,1,608,1,
        608,1,608,3,608,9604,8,608,1,608,3,608,9607,8,608,1,608,1,608,1,
        608,1,608,1,608,1,608,1,608,1,608,3,608,9617,8,608,1,608,3,608,9620,
        8,608,1,608,3,608,9623,8,608,1,608,1,608,3,608,9627,8,608,1,609,
        1,609,1,609,1,609,1,609,3,609,9634,8,609,1,610,1,610,1,610,1,610,
        1,610,1,610,1,610,1,610,1,610,1,610,3,610,9646,8,610,1,611,1,611,
        1,611,1,611,1,611,1,612,1,612,1,612,5,612,9656,8,612,10,612,12,612,
        9659,9,612,1,613,1,613,1,613,3,613,9664,8,613,1,614,1,614,1,615,
        1,615,1,615,1,615,3,615,9672,8,615,1,616,1,616,1,616,1,616,1,616,
        1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,1,616,3,616,
        9689,8,616,1,617,1,617,1,617,1,618,1,618,1,618,1,618,1,618,1,618,
        1,619,1,619,1,619,1,619,1,619,1,619,1,620,1,620,1,620,1,621,1,621,
        1,621,5,621,9712,8,621,10,621,12,621,9715,9,621,1,622,1,622,1,622,
        1,622,1,623,1,623,1,623,3,623,9724,8,623,1,624,1,624,3,624,9728,
        8,624,1,624,3,624,9731,8,624,1,624,3,624,9734,8,624,1,624,3,624,
        9737,8,624,1,624,1,624,1,625,1,625,1,626,1,626,1,626,1,626,1,627,
        1,627,1,627,3,627,9750,8,627,1,627,1,627,1,627,3,627,9755,8,627,
        1,627,1,627,1,627,3,627,9760,8,627,3,627,9762,8,627,1,628,1,628,
        1,628,1,628,1,628,1,628,3,628,9770,8,628,1,629,1,629,1,629,1,629,
        1,629,1,629,1,629,3,629,9779,8,629,1,630,1,630,1,630,1,630,1,630,
        1,630,1,630,3,630,9788,8,630,1,631,1,631,1,631,3,631,9793,8,631,
        1,631,1,631,1,631,1,631,1,631,1,631,1,631,3,631,9802,8,631,1,632,
        1,632,1,632,3,632,9807,8,632,1,632,1,632,1,633,1,633,1,633,1,633,
        1,633,1,633,1,634,1,634,1,635,1,635,3,635,9821,8,635,1,636,1,636,
        1,637,1,637,1,637,1,637,1,637,1,637,3,637,9831,8,637,1,638,1,638,
        1,638,1,638,1,638,1,638,3,638,9839,8,638,1,639,1,639,1,639,1,639,
        1,639,1,639,1,639,1,639,1,639,1,639,1,639,1,639,3,639,9853,8,639,
        1,640,1,640,1,640,5,640,9858,8,640,10,640,12,640,9861,9,640,1,641,
        1,641,1,641,5,641,9866,8,641,10,641,12,641,9869,9,641,1,642,1,642,
        1,642,1,642,1,642,3,642,9876,8,642,1,643,1,643,1,643,5,643,9881,
        8,643,10,643,12,643,9884,9,643,1,644,1,644,1,644,3,644,9889,8,644,
        1,644,1,644,1,645,1,645,1,645,5,645,9896,8,645,10,645,12,645,9899,
        9,645,1,646,1,646,1,646,1,646,1,647,1,647,1,647,1,647,1,647,1,647,
        1,647,1,647,3,647,9913,8,647,1,648,1,648,1,649,1,649,1,649,1,649,
        1,649,1,649,1,649,3,649,9924,8,649,1,650,1,650,1,650,1,650,1,651,
        1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
        1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
        1,651,1,651,1,651,3,651,9956,8,651,1,652,1,652,1,652,1,652,1,652,
        1,652,1,652,3,652,9965,8,652,1,653,1,653,1,653,1,653,1,653,3,653,
        9972,8,653,1,654,1,654,3,654,9976,8,654,1,654,1,654,3,654,9980,8,
        654,1,654,1,654,1,655,4,655,9985,8,655,11,655,12,655,9986,1,656,
        1,656,1,656,1,656,1,656,1,657,1,657,1,657,1,658,1,658,1,659,1,659,
        3,659,10001,8,659,1,660,1,660,1,660,3,660,10006,8,660,1,660,1,660,
        1,660,3,660,10011,8,660,1,660,1,660,3,660,10015,8,660,3,660,10017,
        8,660,1,660,3,660,10020,8,660,1,661,1,661,1,662,4,662,10025,8,662,
        11,662,12,662,10026,1,663,5,663,10030,8,663,10,663,12,663,10033,
        9,663,1,664,1,664,1,664,1,665,1,665,1,665,1,665,1,665,1,665,5,665,
        10044,8,665,10,665,12,665,10047,9,665,1,666,1,666,1,666,1,666,1,
        667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
        1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,1,667,
        1,667,1,667,1,667,3,667,10078,8,667,1,668,1,668,1,668,3,668,10083,
        8,668,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,1,669,
        3,669,10095,8,669,1,670,1,670,1,670,1,670,1,670,1,670,1,670,1,670,
        1,670,1,670,1,670,1,670,1,670,1,670,1,670,3,670,10112,8,670,1,671,
        1,671,1,671,1,671,1,672,1,672,3,672,10120,8,672,1,673,1,673,1,673,
        1,673,1,673,1,673,3,673,10128,8,673,1,674,1,674,1,674,1,674,1,674,
        1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,1,674,3,674,10144,
        8,674,1,675,1,675,1,675,3,675,10149,8,675,1,676,1,676,1,676,1,676,
        1,676,1,676,1,676,1,676,1,676,3,676,10160,8,676,1,677,1,677,1,677,
        1,677,1,677,1,677,1,677,1,677,1,677,1,677,3,677,10172,8,677,1,678,
        1,678,1,678,1,678,1,678,1,678,5,678,10180,8,678,10,678,12,678,10183,
        9,678,1,679,1,679,1,679,1,679,1,679,1,679,1,679,1,679,3,679,10193,
        8,679,1,680,1,680,1,680,1,680,1,680,1,680,3,680,10201,8,680,1,681,
        1,681,1,681,1,681,1,681,1,681,3,681,10209,8,681,1,682,1,682,1,682,
        1,682,1,682,1,682,5,682,10217,8,682,10,682,12,682,10220,9,682,1,
        683,1,683,1,683,1,683,3,683,10226,8,683,1,683,3,683,10229,8,683,
        1,683,1,683,1,683,1,683,1,683,1,683,1,683,3,683,10238,8,683,1,683,
        3,683,10241,8,683,1,683,1,683,1,683,3,683,10246,8,683,1,684,1,684,
        1,684,1,684,1,685,1,685,1,686,1,686,1,686,5,686,10257,8,686,10,686,
        12,686,10260,9,686,1,687,1,687,1,687,1,687,1,687,3,687,10267,8,687,
        1,687,3,687,10270,8,687,1,688,1,688,1,688,5,688,10275,8,688,10,688,
        12,688,10278,9,688,1,689,1,689,3,689,10282,8,689,1,690,1,690,1,690,
        5,690,10287,8,690,10,690,12,690,10290,9,690,1,691,1,691,1,692,1,
        692,1,693,1,693,1,694,1,694,1,694,1,694,3,694,10302,8,694,1,695,
        1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,1,695,3,695,10314,
        8,695,1,695,1,695,1,695,3,695,10319,8,695,1,695,1,695,1,695,1,695,
        1,695,1,695,3,695,10327,8,695,1,695,1,695,1,695,1,695,1,695,3,695,
        10334,8,695,1,695,1,695,1,695,3,695,10339,8,695,1,696,1,696,1,697,
        1,697,1,698,1,698,1,699,1,699,1,700,1,700,3,700,10351,8,700,1,701,
        1,701,1,701,1,701,5,701,10357,8,701,10,701,12,701,10360,9,701,1,
        701,1,701,3,701,10364,8,701,1,702,1,702,1,702,1,703,1,703,1,703,
        1,703,1,703,3,703,10374,8,703,1,704,1,704,1,705,1,705,1,705,3,705,
        10381,8,705,1,706,1,706,1,706,5,706,10386,8,706,10,706,12,706,10389,
        9,706,1,707,1,707,1,707,3,707,10394,8,707,1,708,1,708,1,708,3,708,
        10399,8,708,1,709,1,709,1,709,1,709,3,709,10405,8,709,1,710,1,710,
        1,710,1,710,1,710,1,710,3,710,10413,8,710,1,711,1,711,3,711,10417,
        8,711,1,712,1,712,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,1,713,
        3,713,10484,8,713,1,714,1,714,1,715,1,715,1,716,1,716,1,717,1,717,
        1,718,1,718,3,718,10496,8,718,1,718,1,718,1,718,3,718,10501,8,718,
        1,718,0,4,1204,1330,1356,1364,719,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,
        300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,
        332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
        364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
        396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
        428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
        460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,
        492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,
        524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,
        556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,
        588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,
        620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
        652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,
        684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
        716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,
        748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,
        780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,
        812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,
        844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,
        876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,
        908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,
        940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,
        972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,
        1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,
        1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,
        1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,
        1082,1084,1086,1088,1090,1092,1094,1096,1098,1100,1102,1104,1106,
        1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,
        1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,
        1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,
        1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,1210,
        1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,
        1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,
        1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,
        1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,
        1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,
        1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,
        1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,
        1394,1396,1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,1418,
        1420,1422,1424,1426,1428,1430,1432,1434,1436,0,65,2,0,233,233,395,
        395,2,0,104,104,349,349,2,0,137,137,349,349,3,0,104,104,137,137,
        349,349,2,0,171,171,229,229,2,0,283,283,363,363,2,0,10,10,132,132,
        2,0,200,200,394,394,2,0,218,218,259,259,5,0,68,68,319,319,360,360,
        383,383,385,385,2,0,188,188,346,346,2,0,102,102,132,132,2,0,383,
        383,385,385,2,0,238,238,262,262,9,0,68,68,198,198,203,203,217,217,
        257,257,265,265,373,373,376,376,476,476,3,0,151,151,315,315,367,
        367,2,0,91,91,116,116,3,0,211,211,290,290,293,293,5,0,68,68,126,
        126,220,220,270,270,400,400,2,0,130,130,264,264,1,0,486,487,2,0,
        130,130,445,445,2,0,372,372,445,445,2,0,249,249,327,327,3,0,352,
        352,388,388,483,483,2,0,102,102,106,106,5,0,250,250,360,360,381,
        381,392,392,493,494,2,0,75,75,93,93,2,0,10,10,91,91,3,0,249,249,
        327,327,480,480,2,0,213,213,380,380,4,0,126,126,220,220,270,270,
        400,400,2,0,175,175,271,271,2,0,387,387,411,411,2,0,189,189,283,
        283,2,0,344,344,364,364,1,0,69,70,2,0,137,137,380,380,2,0,239,239,
        365,365,2,0,97,97,135,135,2,0,251,251,283,283,2,0,68,68,94,94,2,
        0,351,351,445,445,2,0,245,245,299,299,4,0,151,151,153,153,157,157,
        164,164,2,0,422,423,437,437,1,0,422,423,1,0,449,450,1,0,18,19,2,
        0,155,155,160,160,5,0,10,10,16,17,21,21,23,23,25,25,1,0,12,13,3,
        0,9,9,14,14,27,27,3,0,77,77,111,111,133,133,2,0,204,204,226,226,
        2,0,335,335,488,488,2,0,246,246,320,320,3,0,68,68,72,72,128,128,
        6,0,9,10,12,17,21,21,23,23,25,25,27,27,2,0,20,20,22,22,1,0,521,524,
        13,0,43,66,162,162,167,332,334,417,471,490,493,507,509,509,511,511,
        513,513,516,526,529,529,542,542,553,553,3,0,144,161,163,166,510,
        510,3,0,42,42,68,143,492,492,35,0,30,66,68,72,75,83,85,96,98,98,
        101,101,106,107,110,111,113,116,119,120,122,124,126,131,133,134,
        136,140,144,154,156,159,161,161,164,213,215,255,257,291,293,294,
        296,332,334,356,358,404,406,409,411,414,416,421,424,442,444,455,
        463,514,516,516,519,527,529,529,542,542,553,553,11703,0,1438,1,0,
        0,0,2,1441,1,0,0,0,4,1444,1,0,0,0,6,1579,1,0,0,0,8,1581,1,0,0,0,
        10,1584,1,0,0,0,12,1592,1,0,0,0,14,1597,1,0,0,0,16,1603,1,0,0,0,
        18,1624,1,0,0,0,20,1636,1,0,0,0,22,1638,1,0,0,0,24,1646,1,0,0,0,
        26,1654,1,0,0,0,28,1658,1,0,0,0,30,1669,1,0,0,0,32,1677,1,0,0,0,
        34,1685,1,0,0,0,36,1692,1,0,0,0,38,1694,1,0,0,0,40,1711,1,0,0,0,
        42,1716,1,0,0,0,44,1725,1,0,0,0,46,1727,1,0,0,0,48,1741,1,0,0,0,
        50,1743,1,0,0,0,52,1776,1,0,0,0,54,1778,1,0,0,0,56,1786,1,0,0,0,
        58,1796,1,0,0,0,60,1803,1,0,0,0,62,1809,1,0,0,0,64,1827,1,0,0,0,
        66,1831,1,0,0,0,68,1835,1,0,0,0,70,1837,1,0,0,0,72,1848,1,0,0,0,
        74,1852,1,0,0,0,76,1857,1,0,0,0,78,1862,1,0,0,0,80,1864,1,0,0,0,
        82,1876,1,0,0,0,84,1883,1,0,0,0,86,1885,1,0,0,0,88,1887,1,0,0,0,
        90,1889,1,0,0,0,92,2004,1,0,0,0,94,2006,1,0,0,0,96,2022,1,0,0,0,
        98,2024,1,0,0,0,100,2326,1,0,0,0,102,2333,1,0,0,0,104,2335,1,0,0,
        0,106,2337,1,0,0,0,108,2340,1,0,0,0,110,2349,1,0,0,0,112,2351,1,
        0,0,0,114,2355,1,0,0,0,116,2358,1,0,0,0,118,2366,1,0,0,0,120,2378,
        1,0,0,0,122,2395,1,0,0,0,124,2423,1,0,0,0,126,2425,1,0,0,0,128,2428,
        1,0,0,0,130,2436,1,0,0,0,132,2441,1,0,0,0,134,2479,1,0,0,0,136,2481,
        1,0,0,0,138,2523,1,0,0,0,140,2525,1,0,0,0,142,2527,1,0,0,0,144,2532,
        1,0,0,0,146,2539,1,0,0,0,148,2544,1,0,0,0,150,2586,1,0,0,0,152,2588,
        1,0,0,0,154,2591,1,0,0,0,156,2596,1,0,0,0,158,2598,1,0,0,0,160,2606,
        1,0,0,0,162,2617,1,0,0,0,164,2619,1,0,0,0,166,2627,1,0,0,0,168,2629,
        1,0,0,0,170,2714,1,0,0,0,172,2716,1,0,0,0,174,2718,1,0,0,0,176,2722,
        1,0,0,0,178,2730,1,0,0,0,180,2741,1,0,0,0,182,2745,1,0,0,0,184,2747,
        1,0,0,0,186,2754,1,0,0,0,188,2764,1,0,0,0,190,2775,1,0,0,0,192,2829,
        1,0,0,0,194,2834,1,0,0,0,196,2841,1,0,0,0,198,2843,1,0,0,0,200,2851,
        1,0,0,0,202,2854,1,0,0,0,204,2861,1,0,0,0,206,2949,1,0,0,0,208,2951,
        1,0,0,0,210,2954,1,0,0,0,212,2958,1,0,0,0,214,2966,1,0,0,0,216,2968,
        1,0,0,0,218,2973,1,0,0,0,220,2976,1,0,0,0,222,2984,1,0,0,0,224,2994,
        1,0,0,0,226,3007,1,0,0,0,228,3009,1,0,0,0,230,3013,1,0,0,0,232,3023,
        1,0,0,0,234,3025,1,0,0,0,236,3030,1,0,0,0,238,3032,1,0,0,0,240,3039,
        1,0,0,0,242,3070,1,0,0,0,244,3072,1,0,0,0,246,3079,1,0,0,0,248,3081,
        1,0,0,0,250,3090,1,0,0,0,252,3093,1,0,0,0,254,3098,1,0,0,0,256,3102,
        1,0,0,0,258,3118,1,0,0,0,260,3129,1,0,0,0,262,3145,1,0,0,0,264,3161,
        1,0,0,0,266,3167,1,0,0,0,268,3184,1,0,0,0,270,3197,1,0,0,0,272,3199,
        1,0,0,0,274,3209,1,0,0,0,276,3223,1,0,0,0,278,3232,1,0,0,0,280,3234,
        1,0,0,0,282,3239,1,0,0,0,284,3277,1,0,0,0,286,3279,1,0,0,0,288,3287,
        1,0,0,0,290,3289,1,0,0,0,292,3297,1,0,0,0,294,3319,1,0,0,0,296,3321,
        1,0,0,0,298,3325,1,0,0,0,300,3332,1,0,0,0,302,3334,1,0,0,0,304,3336,
        1,0,0,0,306,3338,1,0,0,0,308,3349,1,0,0,0,310,3352,1,0,0,0,312,3360,
        1,0,0,0,314,3376,1,0,0,0,316,3386,1,0,0,0,318,3388,1,0,0,0,320,3397,
        1,0,0,0,322,3400,1,0,0,0,324,3507,1,0,0,0,326,3509,1,0,0,0,328,3528,
        1,0,0,0,330,3531,1,0,0,0,332,3535,1,0,0,0,334,3554,1,0,0,0,336,3556,
        1,0,0,0,338,3561,1,0,0,0,340,3569,1,0,0,0,342,3574,1,0,0,0,344,3589,
        1,0,0,0,346,3591,1,0,0,0,348,3594,1,0,0,0,350,3596,1,0,0,0,352,3633,
        1,0,0,0,354,3635,1,0,0,0,356,3638,1,0,0,0,358,3643,1,0,0,0,360,3645,
        1,0,0,0,362,3727,1,0,0,0,364,3729,1,0,0,0,366,3747,1,0,0,0,368,3749,
        1,0,0,0,370,3777,1,0,0,0,372,3781,1,0,0,0,374,3801,1,0,0,0,376,3803,
        1,0,0,0,378,3812,1,0,0,0,380,3832,1,0,0,0,382,3846,1,0,0,0,384,3851,
        1,0,0,0,386,3857,1,0,0,0,388,3860,1,0,0,0,390,3863,1,0,0,0,392,3866,
        1,0,0,0,394,3869,1,0,0,0,396,3871,1,0,0,0,398,3880,1,0,0,0,400,3930,
        1,0,0,0,402,3936,1,0,0,0,404,3938,1,0,0,0,406,3953,1,0,0,0,408,3955,
        1,0,0,0,410,3959,1,0,0,0,412,3963,1,0,0,0,414,3970,1,0,0,0,416,3972,
        1,0,0,0,418,3974,1,0,0,0,420,3976,1,0,0,0,422,3982,1,0,0,0,424,3984,
        1,0,0,0,426,3986,1,0,0,0,428,3991,1,0,0,0,430,3995,1,0,0,0,432,4008,
        1,0,0,0,434,4010,1,0,0,0,436,4016,1,0,0,0,438,4030,1,0,0,0,440,4058,
        1,0,0,0,442,4060,1,0,0,0,444,4068,1,0,0,0,446,4074,1,0,0,0,448,4082,
        1,0,0,0,450,4094,1,0,0,0,452,4096,1,0,0,0,454,4219,1,0,0,0,456,4221,
        1,0,0,0,458,4225,1,0,0,0,460,4233,1,0,0,0,462,4244,1,0,0,0,464,4246,
        1,0,0,0,466,4250,1,0,0,0,468,4258,1,0,0,0,470,4262,1,0,0,0,472,4264,
        1,0,0,0,474,4315,1,0,0,0,476,4317,1,0,0,0,478,4321,1,0,0,0,480,4339,
        1,0,0,0,482,4378,1,0,0,0,484,4380,1,0,0,0,486,4382,1,0,0,0,488,4391,
        1,0,0,0,490,4393,1,0,0,0,492,4395,1,0,0,0,494,4420,1,0,0,0,496,4422,
        1,0,0,0,498,4442,1,0,0,0,500,4464,1,0,0,0,502,4486,1,0,0,0,504,4488,
        1,0,0,0,506,4495,1,0,0,0,508,4592,1,0,0,0,510,4617,1,0,0,0,512,4624,
        1,0,0,0,514,4641,1,0,0,0,516,4643,1,0,0,0,518,4645,1,0,0,0,520,4653,
        1,0,0,0,522,4659,1,0,0,0,524,4663,1,0,0,0,526,4671,1,0,0,0,528,4686,
        1,0,0,0,530,4835,1,0,0,0,532,4839,1,0,0,0,534,4952,1,0,0,0,536,4954,
        1,0,0,0,538,4959,1,0,0,0,540,4965,1,0,0,0,542,5052,1,0,0,0,544,5054,
        1,0,0,0,546,5056,1,0,0,0,548,5058,1,0,0,0,550,5088,1,0,0,0,552,5105,
        1,0,0,0,554,5107,1,0,0,0,556,5131,1,0,0,0,558,5191,1,0,0,0,560,5193,
        1,0,0,0,562,5204,1,0,0,0,564,5206,1,0,0,0,566,5210,1,0,0,0,568,5243,
        1,0,0,0,570,5245,1,0,0,0,572,5249,1,0,0,0,574,5253,1,0,0,0,576,5262,
        1,0,0,0,578,5274,1,0,0,0,580,5306,1,0,0,0,582,5308,1,0,0,0,584,5373,
        1,0,0,0,586,5375,1,0,0,0,588,5377,1,0,0,0,590,5379,1,0,0,0,592,5381,
        1,0,0,0,594,5383,1,0,0,0,596,5386,1,0,0,0,598,5417,1,0,0,0,600,5430,
        1,0,0,0,602,5432,1,0,0,0,604,5437,1,0,0,0,606,5445,1,0,0,0,608,5448,
        1,0,0,0,610,5450,1,0,0,0,612,5456,1,0,0,0,614,5458,1,0,0,0,616,5478,
        1,0,0,0,618,5481,1,0,0,0,620,5487,1,0,0,0,622,5495,1,0,0,0,624,5511,
        1,0,0,0,626,5513,1,0,0,0,628,5519,1,0,0,0,630,5540,1,0,0,0,632,5549,
        1,0,0,0,634,5551,1,0,0,0,636,5553,1,0,0,0,638,5564,1,0,0,0,640,5566,
        1,0,0,0,642,5571,1,0,0,0,644,5573,1,0,0,0,646,5588,1,0,0,0,648,5596,
        1,0,0,0,650,5599,1,0,0,0,652,5608,1,0,0,0,654,5649,1,0,0,0,656,5659,
        1,0,0,0,658,5666,1,0,0,0,660,5668,1,0,0,0,662,5680,1,0,0,0,664,5683,
        1,0,0,0,666,5686,1,0,0,0,668,5694,1,0,0,0,670,5702,1,0,0,0,672,5706,
        1,0,0,0,674,5750,1,0,0,0,676,5766,1,0,0,0,678,5782,1,0,0,0,680,5806,
        1,0,0,0,682,5813,1,0,0,0,684,5818,1,0,0,0,686,5826,1,0,0,0,688,5829,
        1,0,0,0,690,5833,1,0,0,0,692,5840,1,0,0,0,694,5879,1,0,0,0,696,5885,
        1,0,0,0,698,5887,1,0,0,0,700,5900,1,0,0,0,702,5903,1,0,0,0,704,5950,
        1,0,0,0,706,5952,1,0,0,0,708,5994,1,0,0,0,710,5996,1,0,0,0,712,5998,
        1,0,0,0,714,6000,1,0,0,0,716,6016,1,0,0,0,718,6505,1,0,0,0,720,6507,
        1,0,0,0,722,6509,1,0,0,0,724,6581,1,0,0,0,726,6583,1,0,0,0,728,6802,
        1,0,0,0,730,6804,1,0,0,0,732,6812,1,0,0,0,734,6828,1,0,0,0,736,6835,
        1,0,0,0,738,6837,1,0,0,0,740,7030,1,0,0,0,742,7032,1,0,0,0,744,7041,
        1,0,0,0,746,7049,1,0,0,0,748,7078,1,0,0,0,750,7080,1,0,0,0,752,7090,
        1,0,0,0,754,7098,1,0,0,0,756,7139,1,0,0,0,758,7155,1,0,0,0,760,7157,
        1,0,0,0,762,7183,1,0,0,0,764,7186,1,0,0,0,766,7202,1,0,0,0,768,7204,
        1,0,0,0,770,7206,1,0,0,0,772,7208,1,0,0,0,774,7210,1,0,0,0,776,7215,
        1,0,0,0,778,7218,1,0,0,0,780,7225,1,0,0,0,782,7296,1,0,0,0,784,7298,
        1,0,0,0,786,7310,1,0,0,0,788,7312,1,0,0,0,790,7322,1,0,0,0,792,7324,
        1,0,0,0,794,7330,1,0,0,0,796,7362,1,0,0,0,798,7369,1,0,0,0,800,7372,
        1,0,0,0,802,7381,1,0,0,0,804,7384,1,0,0,0,806,7388,1,0,0,0,808,7405,
        1,0,0,0,810,7407,1,0,0,0,812,7409,1,0,0,0,814,7424,1,0,0,0,816,7429,
        1,0,0,0,818,7445,1,0,0,0,820,7453,1,0,0,0,822,7455,1,0,0,0,824,7461,
        1,0,0,0,826,7466,1,0,0,0,828,7475,1,0,0,0,830,7502,1,0,0,0,832,7504,
        1,0,0,0,834,7583,1,0,0,0,836,7585,1,0,0,0,838,7587,1,0,0,0,840,7620,
        1,0,0,0,842,7622,1,0,0,0,844,7648,1,0,0,0,846,7664,1,0,0,0,848,7666,
        1,0,0,0,850,7674,1,0,0,0,852,7682,1,0,0,0,854,7684,1,0,0,0,856,7691,
        1,0,0,0,858,7695,1,0,0,0,860,7697,1,0,0,0,862,7703,1,0,0,0,864,7707,
        1,0,0,0,866,7709,1,0,0,0,868,7711,1,0,0,0,870,7713,1,0,0,0,872,7715,
        1,0,0,0,874,7717,1,0,0,0,876,7721,1,0,0,0,878,7725,1,0,0,0,880,7733,
        1,0,0,0,882,7753,1,0,0,0,884,7764,1,0,0,0,886,7766,1,0,0,0,888,7774,
        1,0,0,0,890,7780,1,0,0,0,892,7784,1,0,0,0,894,7786,1,0,0,0,896,7794,
        1,0,0,0,898,7802,1,0,0,0,900,7842,1,0,0,0,902,7844,1,0,0,0,904,7858,
        1,0,0,0,906,7861,1,0,0,0,908,7873,1,0,0,0,910,7897,1,0,0,0,912,7899,
        1,0,0,0,914,7901,1,0,0,0,916,7909,1,0,0,0,918,7912,1,0,0,0,920,7936,
        1,0,0,0,922,7938,1,0,0,0,924,7941,1,0,0,0,926,7972,1,0,0,0,928,7991,
        1,0,0,0,930,8004,1,0,0,0,932,8012,1,0,0,0,934,8026,1,0,0,0,936,8029,
        1,0,0,0,938,8040,1,0,0,0,940,8056,1,0,0,0,942,8058,1,0,0,0,944,8063,
        1,0,0,0,946,8066,1,0,0,0,948,8081,1,0,0,0,950,8099,1,0,0,0,952,8101,
        1,0,0,0,954,8104,1,0,0,0,956,8112,1,0,0,0,958,8122,1,0,0,0,960,8131,
        1,0,0,0,962,8138,1,0,0,0,964,8142,1,0,0,0,966,8152,1,0,0,0,968,8183,
        1,0,0,0,970,8185,1,0,0,0,972,8196,1,0,0,0,974,8258,1,0,0,0,976,8260,
        1,0,0,0,978,8266,1,0,0,0,980,8274,1,0,0,0,982,8289,1,0,0,0,984,8291,
        1,0,0,0,986,8293,1,0,0,0,988,8296,1,0,0,0,990,8314,1,0,0,0,992,8316,
        1,0,0,0,994,8318,1,0,0,0,996,8320,1,0,0,0,998,8328,1,0,0,0,1000,
        8330,1,0,0,0,1002,8332,1,0,0,0,1004,8336,1,0,0,0,1006,8344,1,0,0,
        0,1008,8363,1,0,0,0,1010,8365,1,0,0,0,1012,8390,1,0,0,0,1014,8392,
        1,0,0,0,1016,8401,1,0,0,0,1018,8403,1,0,0,0,1020,8410,1,0,0,0,1022,
        8414,1,0,0,0,1024,8416,1,0,0,0,1026,8418,1,0,0,0,1028,8420,1,0,0,
        0,1030,8424,1,0,0,0,1032,8437,1,0,0,0,1034,8439,1,0,0,0,1036,8442,
        1,0,0,0,1038,8447,1,0,0,0,1040,8452,1,0,0,0,1042,8458,1,0,0,0,1044,
        8465,1,0,0,0,1046,8467,1,0,0,0,1048,8470,1,0,0,0,1050,8474,1,0,0,
        0,1052,8481,1,0,0,0,1054,8493,1,0,0,0,1056,8496,1,0,0,0,1058,8510,
        1,0,0,0,1060,8513,1,0,0,0,1062,8579,1,0,0,0,1064,8603,1,0,0,0,1066,
        8624,1,0,0,0,1068,8626,1,0,0,0,1070,8637,1,0,0,0,1072,8651,1,0,0,
        0,1074,8653,1,0,0,0,1076,8661,1,0,0,0,1078,8668,1,0,0,0,1080,8676,
        1,0,0,0,1082,8693,1,0,0,0,1084,8695,1,0,0,0,1086,8699,1,0,0,0,1088,
        8707,1,0,0,0,1090,8712,1,0,0,0,1092,8715,1,0,0,0,1094,8718,1,0,0,
        0,1096,8725,1,0,0,0,1098,8727,1,0,0,0,1100,8735,1,0,0,0,1102,8740,
        1,0,0,0,1104,8761,1,0,0,0,1106,8769,1,0,0,0,1108,8779,1,0,0,0,1110,
        8791,1,0,0,0,1112,8793,1,0,0,0,1114,8807,1,0,0,0,1116,8810,1,0,0,
        0,1118,8830,1,0,0,0,1120,8849,1,0,0,0,1122,8856,1,0,0,0,1124,8858,
        1,0,0,0,1126,8865,1,0,0,0,1128,8893,1,0,0,0,1130,8895,1,0,0,0,1132,
        8901,1,0,0,0,1134,8905,1,0,0,0,1136,8907,1,0,0,0,1138,8915,1,0,0,
        0,1140,8919,1,0,0,0,1142,8926,1,0,0,0,1144,8943,1,0,0,0,1146,8945,
        1,0,0,0,1148,8947,1,0,0,0,1150,8957,1,0,0,0,1152,8965,1,0,0,0,1154,
        8992,1,0,0,0,1156,8994,1,0,0,0,1158,9001,1,0,0,0,1160,9003,1,0,0,
        0,1162,9006,1,0,0,0,1164,9008,1,0,0,0,1166,9014,1,0,0,0,1168,9022,
        1,0,0,0,1170,9030,1,0,0,0,1172,9038,1,0,0,0,1174,9052,1,0,0,0,1176,
        9061,1,0,0,0,1178,9065,1,0,0,0,1180,9069,1,0,0,0,1182,9095,1,0,0,
        0,1184,9109,1,0,0,0,1186,9125,1,0,0,0,1188,9135,1,0,0,0,1190,9139,
        1,0,0,0,1192,9147,1,0,0,0,1194,9155,1,0,0,0,1196,9161,1,0,0,0,1198,
        9165,1,0,0,0,1200,9172,1,0,0,0,1202,9177,1,0,0,0,1204,9192,1,0,0,
        0,1206,9272,1,0,0,0,1208,9274,1,0,0,0,1210,9276,1,0,0,0,1212,9314,
        1,0,0,0,1214,9318,1,0,0,0,1216,9626,1,0,0,0,1218,9633,1,0,0,0,1220,
        9645,1,0,0,0,1222,9647,1,0,0,0,1224,9652,1,0,0,0,1226,9660,1,0,0,
        0,1228,9665,1,0,0,0,1230,9671,1,0,0,0,1232,9688,1,0,0,0,1234,9690,
        1,0,0,0,1236,9693,1,0,0,0,1238,9699,1,0,0,0,1240,9705,1,0,0,0,1242,
        9708,1,0,0,0,1244,9716,1,0,0,0,1246,9720,1,0,0,0,1248,9725,1,0,0,
        0,1250,9740,1,0,0,0,1252,9742,1,0,0,0,1254,9761,1,0,0,0,1256,9769,
        1,0,0,0,1258,9778,1,0,0,0,1260,9780,1,0,0,0,1262,9801,1,0,0,0,1264,
        9803,1,0,0,0,1266,9810,1,0,0,0,1268,9816,1,0,0,0,1270,9820,1,0,0,
        0,1272,9822,1,0,0,0,1274,9830,1,0,0,0,1276,9838,1,0,0,0,1278,9852,
        1,0,0,0,1280,9854,1,0,0,0,1282,9862,1,0,0,0,1284,9875,1,0,0,0,1286,
        9877,1,0,0,0,1288,9885,1,0,0,0,1290,9892,1,0,0,0,1292,9900,1,0,0,
        0,1294,9912,1,0,0,0,1296,9914,1,0,0,0,1298,9916,1,0,0,0,1300,9925,
        1,0,0,0,1302,9955,1,0,0,0,1304,9964,1,0,0,0,1306,9971,1,0,0,0,1308,
        9973,1,0,0,0,1310,9984,1,0,0,0,1312,9988,1,0,0,0,1314,9993,1,0,0,
        0,1316,9996,1,0,0,0,1318,9998,1,0,0,0,1320,10019,1,0,0,0,1322,10021,
        1,0,0,0,1324,10024,1,0,0,0,1326,10031,1,0,0,0,1328,10034,1,0,0,0,
        1330,10037,1,0,0,0,1332,10048,1,0,0,0,1334,10077,1,0,0,0,1336,10082,
        1,0,0,0,1338,10094,1,0,0,0,1340,10111,1,0,0,0,1342,10113,1,0,0,0,
        1344,10117,1,0,0,0,1346,10127,1,0,0,0,1348,10143,1,0,0,0,1350,10145,
        1,0,0,0,1352,10159,1,0,0,0,1354,10171,1,0,0,0,1356,10173,1,0,0,0,
        1358,10192,1,0,0,0,1360,10200,1,0,0,0,1362,10208,1,0,0,0,1364,10210,
        1,0,0,0,1366,10245,1,0,0,0,1368,10247,1,0,0,0,1370,10251,1,0,0,0,
        1372,10253,1,0,0,0,1374,10269,1,0,0,0,1376,10271,1,0,0,0,1378,10279,
        1,0,0,0,1380,10283,1,0,0,0,1382,10291,1,0,0,0,1384,10293,1,0,0,0,
        1386,10295,1,0,0,0,1388,10301,1,0,0,0,1390,10338,1,0,0,0,1392,10340,
        1,0,0,0,1394,10342,1,0,0,0,1396,10344,1,0,0,0,1398,10346,1,0,0,0,
        1400,10348,1,0,0,0,1402,10363,1,0,0,0,1404,10365,1,0,0,0,1406,10373,
        1,0,0,0,1408,10375,1,0,0,0,1410,10380,1,0,0,0,1412,10382,1,0,0,0,
        1414,10393,1,0,0,0,1416,10398,1,0,0,0,1418,10404,1,0,0,0,1420,10412,
        1,0,0,0,1422,10416,1,0,0,0,1424,10418,1,0,0,0,1426,10483,1,0,0,0,
        1428,10485,1,0,0,0,1430,10487,1,0,0,0,1432,10489,1,0,0,0,1434,10491,
        1,0,0,0,1436,10500,1,0,0,0,1438,1439,3,2,1,0,1439,1440,5,0,0,1,1440,
        1,1,0,0,0,1441,1442,3,4,2,0,1442,3,1,0,0,0,1443,1445,3,6,3,0,1444,
        1443,1,0,0,0,1444,1445,1,0,0,0,1445,1452,1,0,0,0,1446,1448,5,7,0,
        0,1447,1449,3,6,3,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1451,
        1,0,0,0,1450,1446,1,0,0,0,1451,1454,1,0,0,0,1452,1450,1,0,0,0,1452,
        1453,1,0,0,0,1453,5,1,0,0,0,1454,1452,1,0,0,0,1455,1580,3,448,224,
        0,1456,1580,3,822,411,0,1457,1580,3,812,406,0,1458,1580,3,814,407,
        0,1459,1580,3,574,287,0,1460,1580,3,828,414,0,1461,1580,3,474,237,
        0,1462,1580,3,318,159,0,1463,1580,3,324,162,0,1464,1580,3,334,167,
        0,1465,1580,3,360,180,0,1466,1580,3,668,334,0,1467,1580,3,34,17,
        0,1468,1580,3,724,362,0,1469,1580,3,728,364,0,1470,1580,3,740,370,
        0,1471,1580,3,730,365,0,1472,1580,3,738,369,0,1473,1580,3,380,190,
        0,1474,1580,3,276,138,0,1475,1580,3,824,412,0,1476,1580,3,92,46,
        0,1477,1580,3,716,358,0,1478,1580,3,130,65,0,1479,1580,3,748,374,
        0,1480,1580,3,28,14,0,1481,1580,3,24,12,0,1482,1580,3,756,378,0,
        1483,1580,3,258,129,0,1484,1580,3,834,417,0,1485,1580,3,832,416,
        0,1486,1580,3,376,188,0,1487,1580,3,846,423,0,1488,1580,3,8,4,0,
        1489,1580,3,88,44,0,1490,1580,3,136,68,0,1491,1580,3,840,420,0,1492,
        1580,3,530,265,0,1493,1580,3,82,41,0,1494,1580,3,138,69,0,1495,1580,
        3,396,198,0,1496,1580,3,260,130,0,1497,1580,3,452,226,0,1498,1580,
        3,694,347,0,1499,1580,3,838,419,0,1500,1580,3,826,413,0,1501,1580,
        3,312,156,0,1502,1580,3,326,163,0,1503,1580,3,352,176,0,1504,1580,
        3,362,181,0,1505,1580,3,614,307,0,1506,1580,3,32,16,0,1507,1580,
        3,266,133,0,1508,1580,3,478,239,0,1509,1580,3,492,246,0,1510,1580,
        3,742,371,0,1511,1580,3,494,247,0,1512,1580,3,378,189,0,1513,1580,
        3,292,146,0,1514,1580,3,38,19,0,1515,1580,3,274,137,0,1516,1580,
        3,168,84,0,1517,1580,3,750,375,0,1518,1580,3,256,128,0,1519,1580,
        3,306,153,0,1520,1580,3,702,351,0,1521,1580,3,400,200,0,1522,1580,
        3,440,220,0,1523,1580,3,10,5,0,1524,1580,3,22,11,0,1525,1580,3,370,
        185,0,1526,1580,3,800,400,0,1527,1580,3,904,452,0,1528,1580,3,956,
        478,0,1529,1580,3,454,227,0,1530,1580,3,932,466,0,1531,1580,3,90,
        45,0,1532,1580,3,688,344,0,1533,1580,3,698,349,0,1534,1580,3,500,
        250,0,1535,1580,3,502,251,0,1536,1580,3,504,252,0,1537,1580,3,508,
        254,0,1538,1580,3,758,379,0,1539,1580,3,310,155,0,1540,1580,3,706,
        353,0,1541,1580,3,30,15,0,1542,1580,3,374,187,0,1543,1580,3,816,
        408,0,1544,1580,3,900,450,0,1545,1580,3,882,441,0,1546,1580,3,540,
        270,0,1547,1580,3,548,274,0,1548,1580,3,566,283,0,1549,1580,3,364,
        182,0,1550,1580,3,584,292,0,1551,1580,3,906,453,0,1552,1580,3,924,
        462,0,1553,1580,3,778,389,0,1554,1580,3,272,136,0,1555,1580,3,798,
        399,0,1556,1580,3,936,468,0,1557,1580,3,774,387,0,1558,1580,3,894,
        447,0,1559,1580,3,506,253,0,1560,1580,3,708,354,0,1561,1580,3,676,
        338,0,1562,1580,3,674,337,0,1563,1580,3,678,339,0,1564,1580,3,718,
        359,0,1565,1580,3,550,275,0,1566,1580,3,568,284,0,1567,1580,3,760,
        380,0,1568,1580,3,534,267,0,1569,1580,3,964,482,0,1570,1580,3,782,
        391,0,1571,1580,3,526,263,0,1572,1580,3,780,390,0,1573,1580,3,946,
        473,0,1574,1580,3,844,422,0,1575,1580,3,70,35,0,1576,1580,3,46,23,
        0,1577,1580,3,80,40,0,1578,1580,3,794,397,0,1579,1455,1,0,0,0,1579,
        1456,1,0,0,0,1579,1457,1,0,0,0,1579,1458,1,0,0,0,1579,1459,1,0,0,
        0,1579,1460,1,0,0,0,1579,1461,1,0,0,0,1579,1462,1,0,0,0,1579,1463,
        1,0,0,0,1579,1464,1,0,0,0,1579,1465,1,0,0,0,1579,1466,1,0,0,0,1579,
        1467,1,0,0,0,1579,1468,1,0,0,0,1579,1469,1,0,0,0,1579,1470,1,0,0,
        0,1579,1471,1,0,0,0,1579,1472,1,0,0,0,1579,1473,1,0,0,0,1579,1474,
        1,0,0,0,1579,1475,1,0,0,0,1579,1476,1,0,0,0,1579,1477,1,0,0,0,1579,
        1478,1,0,0,0,1579,1479,1,0,0,0,1579,1480,1,0,0,0,1579,1481,1,0,0,
        0,1579,1482,1,0,0,0,1579,1483,1,0,0,0,1579,1484,1,0,0,0,1579,1485,
        1,0,0,0,1579,1486,1,0,0,0,1579,1487,1,0,0,0,1579,1488,1,0,0,0,1579,
        1489,1,0,0,0,1579,1490,1,0,0,0,1579,1491,1,0,0,0,1579,1492,1,0,0,
        0,1579,1493,1,0,0,0,1579,1494,1,0,0,0,1579,1495,1,0,0,0,1579,1496,
        1,0,0,0,1579,1497,1,0,0,0,1579,1498,1,0,0,0,1579,1499,1,0,0,0,1579,
        1500,1,0,0,0,1579,1501,1,0,0,0,1579,1502,1,0,0,0,1579,1503,1,0,0,
        0,1579,1504,1,0,0,0,1579,1505,1,0,0,0,1579,1506,1,0,0,0,1579,1507,
        1,0,0,0,1579,1508,1,0,0,0,1579,1509,1,0,0,0,1579,1510,1,0,0,0,1579,
        1511,1,0,0,0,1579,1512,1,0,0,0,1579,1513,1,0,0,0,1579,1514,1,0,0,
        0,1579,1515,1,0,0,0,1579,1516,1,0,0,0,1579,1517,1,0,0,0,1579,1518,
        1,0,0,0,1579,1519,1,0,0,0,1579,1520,1,0,0,0,1579,1521,1,0,0,0,1579,
        1522,1,0,0,0,1579,1523,1,0,0,0,1579,1524,1,0,0,0,1579,1525,1,0,0,
        0,1579,1526,1,0,0,0,1579,1527,1,0,0,0,1579,1528,1,0,0,0,1579,1529,
        1,0,0,0,1579,1530,1,0,0,0,1579,1531,1,0,0,0,1579,1532,1,0,0,0,1579,
        1533,1,0,0,0,1579,1534,1,0,0,0,1579,1535,1,0,0,0,1579,1536,1,0,0,
        0,1579,1537,1,0,0,0,1579,1538,1,0,0,0,1579,1539,1,0,0,0,1579,1540,
        1,0,0,0,1579,1541,1,0,0,0,1579,1542,1,0,0,0,1579,1543,1,0,0,0,1579,
        1544,1,0,0,0,1579,1545,1,0,0,0,1579,1546,1,0,0,0,1579,1547,1,0,0,
        0,1579,1548,1,0,0,0,1579,1549,1,0,0,0,1579,1550,1,0,0,0,1579,1551,
        1,0,0,0,1579,1552,1,0,0,0,1579,1553,1,0,0,0,1579,1554,1,0,0,0,1579,
        1555,1,0,0,0,1579,1556,1,0,0,0,1579,1557,1,0,0,0,1579,1558,1,0,0,
        0,1579,1559,1,0,0,0,1579,1560,1,0,0,0,1579,1561,1,0,0,0,1579,1562,
        1,0,0,0,1579,1563,1,0,0,0,1579,1564,1,0,0,0,1579,1565,1,0,0,0,1579,
        1566,1,0,0,0,1579,1567,1,0,0,0,1579,1568,1,0,0,0,1579,1569,1,0,0,
        0,1579,1570,1,0,0,0,1579,1571,1,0,0,0,1579,1572,1,0,0,0,1579,1573,
        1,0,0,0,1579,1574,1,0,0,0,1579,1575,1,0,0,0,1579,1576,1,0,0,0,1579,
        1577,1,0,0,0,1579,1578,1,0,0,0,1580,7,1,0,0,0,1581,1582,5,471,0,
        0,1582,1583,3,1210,605,0,1583,9,1,0,0,0,1584,1585,5,84,0,0,1585,
        1586,5,349,0,0,1586,1588,3,1408,704,0,1587,1589,3,12,6,0,1588,1587,
        1,0,0,0,1588,1589,1,0,0,0,1589,1590,1,0,0,0,1590,1591,3,14,7,0,1591,
        11,1,0,0,0,1592,1593,5,143,0,0,1593,13,1,0,0,0,1594,1596,3,20,10,
        0,1595,1594,1,0,0,0,1596,1599,1,0,0,0,1597,1595,1,0,0,0,1597,1598,
        1,0,0,0,1598,15,1,0,0,0,1599,1597,1,0,0,0,1600,1602,3,18,9,0,1601,
        1600,1,0,0,0,1602,1605,1,0,0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,
        0,1604,17,1,0,0,0,1605,1603,1,0,0,0,1606,1609,5,318,0,0,1607,1610,
        3,1400,700,0,1608,1610,5,116,0,0,1609,1607,1,0,0,0,1609,1608,1,0,
        0,0,1610,1625,1,0,0,0,1611,1612,7,0,0,0,1612,1613,5,318,0,0,1613,
        1625,3,1400,700,0,1614,1625,5,266,0,0,1615,1616,5,202,0,0,1616,1617,
        5,112,0,0,1617,1625,3,1406,703,0,1618,1619,5,402,0,0,1619,1620,5,
        399,0,0,1620,1625,3,1400,700,0,1621,1622,5,137,0,0,1622,1625,3,1412,
        706,0,1623,1625,3,1436,718,0,1624,1606,1,0,0,0,1624,1611,1,0,0,0,
        1624,1614,1,0,0,0,1624,1615,1,0,0,0,1624,1618,1,0,0,0,1624,1621,
        1,0,0,0,1624,1623,1,0,0,0,1625,19,1,0,0,0,1626,1637,3,18,9,0,1627,
        1628,5,379,0,0,1628,1637,3,1398,699,0,1629,1630,5,172,0,0,1630,1637,
        3,1412,706,0,1631,1632,5,349,0,0,1632,1637,3,1412,706,0,1633,1634,
        5,106,0,0,1634,1635,7,1,0,0,1635,1637,3,1412,706,0,1636,1626,1,0,
        0,0,1636,1627,1,0,0,0,1636,1629,1,0,0,0,1636,1631,1,0,0,0,1636,1633,
        1,0,0,0,1637,21,1,0,0,0,1638,1639,5,84,0,0,1639,1640,5,137,0,0,1640,
        1642,3,1408,704,0,1641,1643,3,12,6,0,1642,1641,1,0,0,0,1642,1643,
        1,0,0,0,1643,1644,1,0,0,0,1644,1645,3,14,7,0,1645,23,1,0,0,0,1646,
        1647,5,176,0,0,1647,1648,7,2,0,0,1648,1650,3,1410,705,0,1649,1651,
        3,12,6,0,1650,1649,1,0,0,0,1650,1651,1,0,0,0,1651,1652,1,0,0,0,1652,
        1653,3,16,8,0,1653,25,1,0,0,0,1654,1655,5,106,0,0,1655,1656,5,213,
        0,0,1656,1657,3,1382,691,0,1657,27,1,0,0,0,1658,1659,5,176,0,0,1659,
        1661,7,2,0,0,1660,1662,5,68,0,0,1661,1660,1,0,0,0,1661,1662,1,0,
        0,0,1662,1663,1,0,0,0,1663,1665,3,1410,705,0,1664,1666,3,26,13,0,
        1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1668,
        3,76,38,0,1668,29,1,0,0,0,1669,1670,5,229,0,0,1670,1673,7,3,0,0,
        1671,1672,5,258,0,0,1672,1674,5,427,0,0,1673,1671,1,0,0,0,1673,1674,
        1,0,0,0,1674,1675,1,0,0,0,1675,1676,3,1412,706,0,1676,31,1,0,0,0,
        1677,1678,5,84,0,0,1678,1679,5,104,0,0,1679,1681,3,1408,704,0,1680,
        1682,3,12,6,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,
        0,0,1683,1684,3,14,7,0,1684,33,1,0,0,0,1685,1686,5,176,0,0,1686,
        1687,5,104,0,0,1687,1688,3,1410,705,0,1688,1689,3,36,18,0,1689,1690,
        5,137,0,0,1690,1691,3,1412,706,0,1691,35,1,0,0,0,1692,1693,7,4,0,
        0,1693,37,1,0,0,0,1694,1695,5,84,0,0,1695,1699,5,354,0,0,1696,1697,
        5,258,0,0,1697,1698,5,115,0,0,1698,1700,5,427,0,0,1699,1696,1,0,
        0,0,1699,1700,1,0,0,0,1700,1707,1,0,0,0,1701,1703,3,40,20,0,1702,
        1701,1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,1705,5,144,
        0,0,1705,1708,3,1410,705,0,1706,1708,3,1414,707,0,1707,1702,1,0,
        0,0,1707,1706,1,0,0,0,1708,1709,1,0,0,0,1709,1710,3,42,21,0,1710,
        39,1,0,0,0,1711,1712,3,1414,707,0,1712,41,1,0,0,0,1713,1715,3,44,
        22,0,1714,1713,1,0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,
        1717,1,0,0,0,1717,43,1,0,0,0,1718,1716,1,0,0,0,1719,1726,3,168,84,
        0,1720,1726,3,584,292,0,1721,1726,3,274,137,0,1722,1726,3,400,200,
        0,1723,1726,3,548,274,0,1724,1726,3,794,397,0,1725,1719,1,0,0,0,
        1725,1720,1,0,0,0,1725,1721,1,0,0,0,1725,1722,1,0,0,0,1725,1723,
        1,0,0,0,1725,1724,1,0,0,0,1726,45,1,0,0,0,1727,1729,5,364,0,0,1728,
        1730,7,5,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,
        0,1731,1732,3,48,24,0,1732,47,1,0,0,0,1733,1734,5,387,0,0,1734,1742,
        3,788,394,0,1735,1736,5,363,0,0,1736,1737,5,192,0,0,1737,1738,5,
        74,0,0,1738,1739,5,387,0,0,1739,1742,3,788,394,0,1740,1742,3,52,
        26,0,1741,1733,1,0,0,0,1741,1735,1,0,0,0,1741,1740,1,0,0,0,1742,
        49,1,0,0,0,1743,1744,3,54,27,0,1744,1747,7,6,0,0,1745,1748,3,56,
        28,0,1746,1748,5,91,0,0,1747,1745,1,0,0,0,1747,1746,1,0,0,0,1748,
        51,1,0,0,0,1749,1777,3,50,25,0,1750,1751,3,54,27,0,1751,1752,5,102,
        0,0,1752,1753,5,472,0,0,1753,1777,1,0,0,0,1754,1755,5,449,0,0,1755,
        1756,5,417,0,0,1756,1777,3,64,32,0,1757,1758,5,190,0,0,1758,1777,
        3,1400,700,0,1759,1760,5,354,0,0,1760,1777,3,1400,700,0,1761,1763,
        5,298,0,0,1762,1764,3,66,33,0,1763,1762,1,0,0,0,1763,1764,1,0,0,
        0,1764,1777,1,0,0,0,1765,1766,5,349,0,0,1766,1777,3,68,34,0,1767,
        1768,5,363,0,0,1768,1769,5,144,0,0,1769,1777,3,68,34,0,1770,1771,
        5,414,0,0,1771,1772,5,310,0,0,1772,1777,3,1228,614,0,1773,1774,5,
        387,0,0,1774,1775,5,368,0,0,1775,1777,3,1400,700,0,1776,1749,1,0,
        0,0,1776,1750,1,0,0,0,1776,1754,1,0,0,0,1776,1757,1,0,0,0,1776,1759,
        1,0,0,0,1776,1761,1,0,0,0,1776,1765,1,0,0,0,1776,1767,1,0,0,0,1776,
        1770,1,0,0,0,1776,1773,1,0,0,0,1777,53,1,0,0,0,1778,1783,3,1414,
        707,0,1779,1780,5,11,0,0,1780,1782,3,1414,707,0,1781,1779,1,0,0,
        0,1782,1785,1,0,0,0,1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,55,
        1,0,0,0,1785,1783,1,0,0,0,1786,1791,3,58,29,0,1787,1788,5,6,0,0,
        1788,1790,3,58,29,0,1789,1787,1,0,0,0,1790,1793,1,0,0,0,1791,1789,
        1,0,0,0,1791,1792,1,0,0,0,1792,57,1,0,0,0,1793,1791,1,0,0,0,1794,
        1797,3,62,31,0,1795,1797,3,288,144,0,1796,1794,1,0,0,0,1796,1795,
        1,0,0,0,1797,59,1,0,0,0,1798,1799,5,331,0,0,1799,1804,7,7,0,0,1800,
        1801,5,341,0,0,1801,1804,5,331,0,0,1802,1804,5,361,0,0,1803,1798,
        1,0,0,0,1803,1800,1,0,0,0,1803,1802,1,0,0,0,1804,61,1,0,0,0,1805,
        1810,5,134,0,0,1806,1810,5,98,0,0,1807,1810,5,118,0,0,1808,1810,
        3,68,34,0,1809,1805,1,0,0,0,1809,1806,1,0,0,0,1809,1807,1,0,0,0,
        1809,1808,1,0,0,0,1810,63,1,0,0,0,1811,1828,3,1400,700,0,1812,1828,
        3,1436,718,0,1813,1814,3,1150,575,0,1814,1816,3,1400,700,0,1815,
        1817,3,1154,577,0,1816,1815,1,0,0,0,1816,1817,1,0,0,0,1817,1828,
        1,0,0,0,1818,1819,3,1150,575,0,1819,1820,5,2,0,0,1820,1821,3,1398,
        699,0,1821,1822,5,3,0,0,1822,1823,3,1400,700,0,1823,1828,1,0,0,0,
        1824,1828,3,288,144,0,1825,1828,5,91,0,0,1826,1828,5,283,0,0,1827,
        1811,1,0,0,0,1827,1812,1,0,0,0,1827,1813,1,0,0,0,1827,1818,1,0,0,
        0,1827,1824,1,0,0,0,1827,1825,1,0,0,0,1827,1826,1,0,0,0,1828,65,
        1,0,0,0,1829,1832,3,1400,700,0,1830,1832,5,91,0,0,1831,1829,1,0,
        0,0,1831,1830,1,0,0,0,1832,67,1,0,0,0,1833,1836,3,1418,709,0,1834,
        1836,3,1400,700,0,1835,1833,1,0,0,0,1835,1834,1,0,0,0,1836,69,1,
        0,0,0,1837,1838,5,344,0,0,1838,1839,3,72,36,0,1839,71,1,0,0,0,1840,
        1849,3,74,37,0,1841,1842,5,449,0,0,1842,1849,5,417,0,0,1843,1844,
        5,387,0,0,1844,1845,5,273,0,0,1845,1849,5,280,0,0,1846,1847,5,363,
        0,0,1847,1849,5,144,0,0,1848,1840,1,0,0,0,1848,1841,1,0,0,0,1848,
        1843,1,0,0,0,1848,1846,1,0,0,0,1849,73,1,0,0,0,1850,1853,3,54,27,
        0,1851,1853,5,68,0,0,1852,1850,1,0,0,0,1852,1851,1,0,0,0,1853,75,
        1,0,0,0,1854,1855,5,364,0,0,1855,1858,3,48,24,0,1856,1858,3,70,35,
        0,1857,1854,1,0,0,0,1857,1856,1,0,0,0,1858,77,1,0,0,0,1859,1860,
        5,364,0,0,1860,1863,3,52,26,0,1861,1863,3,70,35,0,1862,1859,1,0,
        0,0,1862,1861,1,0,0,0,1863,79,1,0,0,0,1864,1874,5,366,0,0,1865,1875,
        3,54,27,0,1866,1867,5,449,0,0,1867,1875,5,417,0,0,1868,1869,5,387,
        0,0,1869,1870,5,273,0,0,1870,1875,5,280,0,0,1871,1872,5,363,0,0,
        1872,1875,5,144,0,0,1873,1875,5,68,0,0,1874,1865,1,0,0,0,1874,1866,
        1,0,0,0,1874,1868,1,0,0,0,1874,1871,1,0,0,0,1874,1873,1,0,0,0,1875,
        81,1,0,0,0,1876,1877,5,364,0,0,1877,1878,5,203,0,0,1878,1879,3,84,
        42,0,1879,1880,3,86,43,0,1880,83,1,0,0,0,1881,1884,5,68,0,0,1882,
        1884,3,1376,688,0,1883,1881,1,0,0,0,1883,1882,1,0,0,0,1884,85,1,
        0,0,0,1885,1886,7,8,0,0,1886,87,1,0,0,0,1887,1888,5,193,0,0,1888,
        89,1,0,0,0,1889,1890,5,225,0,0,1890,1891,7,9,0,0,1891,91,1,0,0,0,
        1892,1893,5,176,0,0,1893,1896,5,130,0,0,1894,1895,5,258,0,0,1895,
        1897,5,427,0,0,1896,1894,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,0,
        0,0,1898,1901,3,1072,536,0,1899,1902,3,94,47,0,1900,1902,3,96,48,
        0,1901,1899,1,0,0,0,1901,1900,1,0,0,0,1902,2005,1,0,0,0,1903,1904,
        5,176,0,0,1904,1905,5,130,0,0,1905,1906,5,68,0,0,1906,1907,5,106,
        0,0,1907,1908,5,382,0,0,1908,1912,3,1382,691,0,1909,1910,5,312,0,
        0,1910,1911,5,185,0,0,1911,1913,3,1412,706,0,1912,1909,1,0,0,0,1912,
        1913,1,0,0,0,1913,1914,1,0,0,0,1914,1915,5,364,0,0,1915,1916,5,382,
        0,0,1916,1918,3,1382,691,0,1917,1919,3,942,471,0,1918,1917,1,0,0,
        0,1918,1919,1,0,0,0,1919,2005,1,0,0,0,1920,1921,5,176,0,0,1921,1924,
        5,264,0,0,1922,1923,5,258,0,0,1923,1925,5,427,0,0,1924,1922,1,0,
        0,0,1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1929,3,1378,689,0,1927,
        1930,3,94,47,0,1928,1930,3,98,49,0,1929,1927,1,0,0,0,1929,1928,1,
        0,0,0,1930,2005,1,0,0,0,1931,1932,5,176,0,0,1932,1933,5,264,0,0,
        1933,1934,5,68,0,0,1934,1935,5,106,0,0,1935,1936,5,382,0,0,1936,
        1940,3,1382,691,0,1937,1938,5,312,0,0,1938,1939,5,185,0,0,1939,1941,
        3,1412,706,0,1940,1937,1,0,0,0,1940,1941,1,0,0,0,1941,1942,1,0,0,
        0,1942,1943,5,364,0,0,1943,1944,5,382,0,0,1944,1946,3,1382,691,0,
        1945,1947,3,942,471,0,1946,1945,1,0,0,0,1946,1947,1,0,0,0,1947,2005,
        1,0,0,0,1948,1949,5,176,0,0,1949,1952,5,359,0,0,1950,1951,5,258,
        0,0,1951,1953,5,427,0,0,1952,1950,1,0,0,0,1952,1953,1,0,0,0,1953,
        1954,1,0,0,0,1954,1955,3,1378,689,0,1955,1956,3,94,47,0,1956,2005,
        1,0,0,0,1957,1958,5,176,0,0,1958,1961,5,407,0,0,1959,1960,5,258,
        0,0,1960,1962,5,427,0,0,1961,1959,1,0,0,0,1961,1962,1,0,0,0,1962,
        1963,1,0,0,0,1963,1964,3,1378,689,0,1964,1965,3,94,47,0,1965,2005,
        1,0,0,0,1966,1967,5,176,0,0,1967,1968,5,289,0,0,1968,1971,5,407,
        0,0,1969,1970,5,258,0,0,1970,1972,5,427,0,0,1971,1969,1,0,0,0,1971,
        1972,1,0,0,0,1972,1973,1,0,0,0,1973,1974,3,1378,689,0,1974,1975,
        3,94,47,0,1975,2005,1,0,0,0,1976,1977,5,176,0,0,1977,1978,5,289,
        0,0,1978,1979,5,407,0,0,1979,1980,5,68,0,0,1980,1981,5,106,0,0,1981,
        1982,5,382,0,0,1982,1986,3,1382,691,0,1983,1984,5,312,0,0,1984,1985,
        5,185,0,0,1985,1987,3,1412,706,0,1986,1983,1,0,0,0,1986,1987,1,0,
        0,0,1987,1988,1,0,0,0,1988,1989,5,364,0,0,1989,1990,5,382,0,0,1990,
        1992,3,1382,691,0,1991,1993,3,942,471,0,1992,1991,1,0,0,0,1992,1993,
        1,0,0,0,1993,2005,1,0,0,0,1994,1995,5,176,0,0,1995,1996,5,101,0,
        0,1996,1999,5,130,0,0,1997,1998,5,258,0,0,1998,2000,5,427,0,0,1999,
        1997,1,0,0,0,1999,2000,1,0,0,0,2000,2001,1,0,0,0,2001,2002,3,1072,
        536,0,2002,2003,3,94,47,0,2003,2005,1,0,0,0,2004,1892,1,0,0,0,2004,
        1903,1,0,0,0,2004,1920,1,0,0,0,2004,1931,1,0,0,0,2004,1948,1,0,0,
        0,2004,1957,1,0,0,0,2004,1966,1,0,0,0,2004,1976,1,0,0,0,2004,1994,
        1,0,0,0,2005,93,1,0,0,0,2006,2011,3,100,50,0,2007,2008,5,6,0,0,2008,
        2010,3,100,50,0,2009,2007,1,0,0,0,2010,2013,1,0,0,0,2011,2009,1,
        0,0,0,2011,2012,1,0,0,0,2012,95,1,0,0,0,2013,2011,1,0,0,0,2014,2015,
        5,473,0,0,2015,2016,5,316,0,0,2016,2017,3,1378,689,0,2017,2018,3,
        124,62,0,2018,2023,1,0,0,0,2019,2020,5,474,0,0,2020,2021,5,316,0,
        0,2021,2023,3,1378,689,0,2022,2014,1,0,0,0,2022,2019,1,0,0,0,2023,
        97,1,0,0,0,2024,2025,5,473,0,0,2025,2026,5,316,0,0,2026,2027,3,1378,
        689,0,2027,99,1,0,0,0,2028,2029,5,171,0,0,2029,2327,3,184,92,0,2030,
        2031,5,171,0,0,2031,2032,5,258,0,0,2032,2033,5,115,0,0,2033,2034,
        5,427,0,0,2034,2327,3,184,92,0,2035,2036,5,171,0,0,2036,2037,5,82,
        0,0,2037,2327,3,184,92,0,2038,2039,5,171,0,0,2039,2040,5,82,0,0,
        2040,2041,5,258,0,0,2041,2042,5,115,0,0,2042,2043,5,427,0,0,2043,
        2327,3,184,92,0,2044,2046,5,176,0,0,2045,2047,3,720,360,0,2046,2045,
        1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2049,3,1414,707,
        0,2049,2050,3,102,51,0,2050,2327,1,0,0,0,2051,2053,5,176,0,0,2052,
        2054,3,720,360,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2055,1,
        0,0,0,2055,2056,3,1414,707,0,2056,2057,5,229,0,0,2057,2058,5,115,
        0,0,2058,2059,5,116,0,0,2059,2327,1,0,0,0,2060,2062,5,176,0,0,2061,
        2063,3,720,360,0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,2063,2064,1,
        0,0,0,2064,2065,3,1414,707,0,2065,2066,5,364,0,0,2066,2067,5,115,
        0,0,2067,2068,5,116,0,0,2068,2327,1,0,0,0,2069,2071,5,176,0,0,2070,
        2072,3,720,360,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,2073,1,
        0,0,0,2073,2074,3,1414,707,0,2074,2075,5,229,0,0,2075,2076,5,475,
        0,0,2076,2327,1,0,0,0,2077,2079,5,176,0,0,2078,2080,3,720,360,0,
        2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,0,0,0,2081,2082,
        3,1414,707,0,2082,2083,5,229,0,0,2083,2084,5,475,0,0,2084,2085,5,
        258,0,0,2085,2086,5,427,0,0,2086,2327,1,0,0,0,2087,2089,5,176,0,
        0,2088,2090,3,720,360,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,
        2091,1,0,0,0,2091,2092,3,1414,707,0,2092,2093,5,364,0,0,2093,2094,
        5,373,0,0,2094,2095,3,1406,703,0,2095,2327,1,0,0,0,2096,2098,5,176,
        0,0,2097,2099,3,720,360,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,
        2100,1,0,0,0,2100,2101,3,1398,699,0,2101,2102,5,364,0,0,2102,2103,
        5,373,0,0,2103,2104,3,1406,703,0,2104,2327,1,0,0,0,2105,2107,5,176,
        0,0,2106,2108,3,720,360,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,
        2109,1,0,0,0,2109,2110,3,1414,707,0,2110,2111,5,364,0,0,2111,2112,
        3,112,56,0,2112,2327,1,0,0,0,2113,2115,5,176,0,0,2114,2116,3,720,
        360,0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,
        2118,3,1414,707,0,2118,2119,5,344,0,0,2119,2120,3,112,56,0,2120,
        2327,1,0,0,0,2121,2123,5,176,0,0,2122,2124,3,720,360,0,2123,2122,
        1,0,0,0,2123,2124,1,0,0,0,2124,2125,1,0,0,0,2125,2126,3,1414,707,
        0,2126,2127,5,364,0,0,2127,2128,5,376,0,0,2128,2129,3,1414,707,0,
        2129,2327,1,0,0,0,2130,2132,5,176,0,0,2131,2133,3,720,360,0,2132,
        2131,1,0,0,0,2132,2133,1,0,0,0,2133,2134,1,0,0,0,2134,2135,3,1414,
        707,0,2135,2136,5,171,0,0,2136,2137,5,476,0,0,2137,2138,3,194,97,
        0,2138,2139,5,74,0,0,2139,2141,5,257,0,0,2140,2142,3,280,140,0,2141,
        2140,1,0,0,0,2141,2142,1,0,0,0,2142,2327,1,0,0,0,2143,2145,5,176,
        0,0,2144,2146,3,720,360,0,2145,2144,1,0,0,0,2145,2146,1,0,0,0,2146,
        2147,1,0,0,0,2147,2148,3,1414,707,0,2148,2149,3,120,60,0,2149,2327,
        1,0,0,0,2150,2152,5,176,0,0,2151,2153,3,720,360,0,2152,2151,1,0,
        0,0,2152,2153,1,0,0,0,2153,2154,1,0,0,0,2154,2155,3,1414,707,0,2155,
        2156,5,229,0,0,2156,2157,5,257,0,0,2157,2327,1,0,0,0,2158,2160,5,
        176,0,0,2159,2161,3,720,360,0,2160,2159,1,0,0,0,2160,2161,1,0,0,
        0,2161,2162,1,0,0,0,2162,2163,3,1414,707,0,2163,2164,5,229,0,0,2164,
        2165,5,257,0,0,2165,2166,5,258,0,0,2166,2167,5,427,0,0,2167,2327,
        1,0,0,0,2168,2170,5,229,0,0,2169,2171,3,720,360,0,2170,2169,1,0,
        0,0,2170,2171,1,0,0,0,2171,2172,1,0,0,0,2172,2173,5,258,0,0,2173,
        2174,5,427,0,0,2174,2176,3,1414,707,0,2175,2177,3,104,52,0,2176,
        2175,1,0,0,0,2176,2177,1,0,0,0,2177,2327,1,0,0,0,2178,2180,5,229,
        0,0,2179,2181,3,720,360,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,
        2182,1,0,0,0,2182,2184,3,1414,707,0,2183,2185,3,104,52,0,2184,2183,
        1,0,0,0,2184,2185,1,0,0,0,2185,2327,1,0,0,0,2186,2188,5,176,0,0,
        2187,2189,3,720,360,0,2188,2187,1,0,0,0,2188,2189,1,0,0,0,2189,2190,
        1,0,0,0,2190,2192,3,1414,707,0,2191,2193,3,722,361,0,2192,2191,1,
        0,0,0,2192,2193,1,0,0,0,2193,2194,1,0,0,0,2194,2195,5,391,0,0,2195,
        2197,3,1116,558,0,2196,2198,3,106,53,0,2197,2196,1,0,0,0,2197,2198,
        1,0,0,0,2198,2200,1,0,0,0,2199,2201,3,108,54,0,2200,2199,1,0,0,0,
        2200,2201,1,0,0,0,2201,2327,1,0,0,0,2202,2204,5,176,0,0,2203,2205,
        3,720,360,0,2204,2203,1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,
        0,2206,2207,3,1414,707,0,2207,2208,3,340,170,0,2208,2327,1,0,0,0,
        2209,2210,5,171,0,0,2210,2327,3,204,102,0,2211,2212,5,176,0,0,2212,
        2213,5,83,0,0,2213,2214,3,1382,691,0,2214,2215,3,436,218,0,2215,
        2327,1,0,0,0,2216,2217,5,403,0,0,2217,2218,5,83,0,0,2218,2327,3,
        1382,691,0,2219,2220,5,229,0,0,2220,2221,5,83,0,0,2221,2222,5,258,
        0,0,2222,2223,5,427,0,0,2223,2225,3,1382,691,0,2224,2226,3,104,52,
        0,2225,2224,1,0,0,0,2225,2226,1,0,0,0,2226,2327,1,0,0,0,2227,2228,
        5,229,0,0,2228,2229,5,83,0,0,2229,2231,3,1382,691,0,2230,2232,3,
        104,52,0,2231,2230,1,0,0,0,2231,2232,1,0,0,0,2232,2327,1,0,0,0,2233,
        2234,5,364,0,0,2234,2235,5,410,0,0,2235,2327,5,308,0,0,2236,2237,
        5,196,0,0,2237,2238,5,118,0,0,2238,2327,3,1382,691,0,2239,2240,5,
        364,0,0,2240,2241,5,410,0,0,2241,2327,5,196,0,0,2242,2243,5,364,
        0,0,2243,2327,5,477,0,0,2244,2245,5,364,0,0,2245,2327,5,398,0,0,
        2246,2247,5,231,0,0,2247,2248,5,388,0,0,2248,2327,3,1382,691,0,2249,
        2250,5,231,0,0,2250,2251,5,177,0,0,2251,2252,5,388,0,0,2252,2327,
        3,1382,691,0,2253,2254,5,231,0,0,2254,2255,5,343,0,0,2255,2256,5,
        388,0,0,2256,2327,3,1382,691,0,2257,2258,5,231,0,0,2258,2259,5,388,
        0,0,2259,2327,5,68,0,0,2260,2261,5,231,0,0,2261,2262,5,388,0,0,2262,
        2327,5,137,0,0,2263,2264,5,224,0,0,2264,2265,5,388,0,0,2265,2327,
        3,1382,691,0,2266,2267,5,224,0,0,2267,2268,5,388,0,0,2268,2327,5,
        68,0,0,2269,2270,5,224,0,0,2270,2271,5,388,0,0,2271,2327,5,137,0,
        0,2272,2273,5,231,0,0,2273,2274,5,352,0,0,2274,2327,3,1382,691,0,
        2275,2276,5,231,0,0,2276,2277,5,177,0,0,2277,2278,5,352,0,0,2278,
        2327,3,1382,691,0,2279,2280,5,231,0,0,2280,2281,5,343,0,0,2281,2282,
        5,352,0,0,2282,2327,3,1382,691,0,2283,2284,5,224,0,0,2284,2285,5,
        352,0,0,2285,2327,3,1382,691,0,2286,2287,5,266,0,0,2287,2327,3,1378,
        689,0,2288,2289,5,300,0,0,2289,2290,5,266,0,0,2290,2327,3,1378,689,
        0,2291,2292,5,306,0,0,2292,2327,3,520,260,0,2293,2294,5,115,0,0,
        2294,2327,5,306,0,0,2295,2296,5,313,0,0,2296,2297,5,132,0,0,2297,
        2327,3,1410,705,0,2298,2299,5,364,0,0,2299,2300,5,382,0,0,2300,2327,
        3,1382,691,0,2301,2302,5,364,0,0,2302,2327,3,112,56,0,2303,2304,
        5,344,0,0,2304,2327,3,112,56,0,2305,2306,5,343,0,0,2306,2307,5,257,
        0,0,2307,2327,3,110,55,0,2308,2309,5,231,0,0,2309,2310,5,445,0,0,
        2310,2311,5,280,0,0,2311,2327,5,358,0,0,2312,2313,5,224,0,0,2313,
        2314,5,445,0,0,2314,2315,5,280,0,0,2315,2327,5,358,0,0,2316,2317,
        5,247,0,0,2317,2318,5,445,0,0,2318,2319,5,280,0,0,2319,2327,5,358,
        0,0,2320,2321,5,300,0,0,2321,2322,5,247,0,0,2322,2323,5,445,0,0,
        2323,2324,5,280,0,0,2324,2327,5,358,0,0,2325,2327,3,340,170,0,2326,
        2028,1,0,0,0,2326,2030,1,0,0,0,2326,2035,1,0,0,0,2326,2038,1,0,0,
        0,2326,2044,1,0,0,0,2326,2051,1,0,0,0,2326,2060,1,0,0,0,2326,2069,
        1,0,0,0,2326,2077,1,0,0,0,2326,2087,1,0,0,0,2326,2096,1,0,0,0,2326,
        2105,1,0,0,0,2326,2113,1,0,0,0,2326,2121,1,0,0,0,2326,2130,1,0,0,
        0,2326,2143,1,0,0,0,2326,2150,1,0,0,0,2326,2158,1,0,0,0,2326,2168,
        1,0,0,0,2326,2178,1,0,0,0,2326,2186,1,0,0,0,2326,2202,1,0,0,0,2326,
        2209,1,0,0,0,2326,2211,1,0,0,0,2326,2216,1,0,0,0,2326,2219,1,0,0,
        0,2326,2227,1,0,0,0,2326,2233,1,0,0,0,2326,2236,1,0,0,0,2326,2239,
        1,0,0,0,2326,2242,1,0,0,0,2326,2244,1,0,0,0,2326,2246,1,0,0,0,2326,
        2249,1,0,0,0,2326,2253,1,0,0,0,2326,2257,1,0,0,0,2326,2260,1,0,0,
        0,2326,2263,1,0,0,0,2326,2266,1,0,0,0,2326,2269,1,0,0,0,2326,2272,
        1,0,0,0,2326,2275,1,0,0,0,2326,2279,1,0,0,0,2326,2283,1,0,0,0,2326,
        2286,1,0,0,0,2326,2288,1,0,0,0,2326,2291,1,0,0,0,2326,2293,1,0,0,
        0,2326,2295,1,0,0,0,2326,2298,1,0,0,0,2326,2301,1,0,0,0,2326,2303,
        1,0,0,0,2326,2305,1,0,0,0,2326,2308,1,0,0,0,2326,2312,1,0,0,0,2326,
        2316,1,0,0,0,2326,2320,1,0,0,0,2326,2325,1,0,0,0,2327,101,1,0,0,
        0,2328,2329,5,364,0,0,2329,2330,5,91,0,0,2330,2334,3,1162,581,0,
        2331,2332,5,229,0,0,2332,2334,5,91,0,0,2333,2328,1,0,0,0,2333,2331,
        1,0,0,0,2334,103,1,0,0,0,2335,2336,7,10,0,0,2336,105,1,0,0,0,2337,
        2338,5,81,0,0,2338,2339,3,520,260,0,2339,107,1,0,0,0,2340,2341,5,
        138,0,0,2341,2342,3,1162,581,0,2342,109,1,0,0,0,2343,2350,5,301,
        0,0,2344,2350,5,151,0,0,2345,2350,5,91,0,0,2346,2347,5,138,0,0,2347,
        2348,5,264,0,0,2348,2350,3,1382,691,0,2349,2343,1,0,0,0,2349,2344,
        1,0,0,0,2349,2345,1,0,0,0,2349,2346,1,0,0,0,2350,111,1,0,0,0,2351,
        2352,5,2,0,0,2352,2353,3,116,58,0,2353,2354,5,3,0,0,2354,113,1,0,
        0,0,2355,2356,5,143,0,0,2356,2357,3,112,56,0,2357,115,1,0,0,0,2358,
        2363,3,118,59,0,2359,2360,5,6,0,0,2360,2362,3,118,59,0,2361,2359,
        1,0,0,0,2362,2365,1,0,0,0,2363,2361,1,0,0,0,2363,2364,1,0,0,0,2364,
        117,1,0,0,0,2365,2363,1,0,0,0,2366,2375,3,1420,710,0,2367,2368,5,
        10,0,0,2368,2376,3,462,231,0,2369,2370,5,11,0,0,2370,2373,3,1420,
        710,0,2371,2372,5,10,0,0,2372,2374,3,462,231,0,2373,2371,1,0,0,0,
        2373,2374,1,0,0,0,2374,2376,1,0,0,0,2375,2367,1,0,0,0,2375,2369,
        1,0,0,0,2375,2376,1,0,0,0,2376,119,1,0,0,0,2377,2379,3,122,61,0,
        2378,2377,1,0,0,0,2379,2380,1,0,0,0,2380,2378,1,0,0,0,2380,2381,
        1,0,0,0,2381,121,1,0,0,0,2382,2387,5,345,0,0,2383,2385,3,12,6,0,
        2384,2383,1,0,0,0,2384,2385,1,0,0,0,2385,2386,1,0,0,0,2386,2388,
        3,288,144,0,2387,2384,1,0,0,0,2387,2388,1,0,0,0,2388,2396,1,0,0,
        0,2389,2393,5,364,0,0,2390,2394,3,284,142,0,2391,2392,5,476,0,0,
        2392,2394,3,194,97,0,2393,2390,1,0,0,0,2393,2391,1,0,0,0,2394,2396,
        1,0,0,0,2395,2382,1,0,0,0,2395,2389,1,0,0,0,2396,123,1,0,0,0,2397,
        2398,5,100,0,0,2398,2399,5,453,0,0,2399,2400,5,143,0,0,2400,2401,
        5,2,0,0,2401,2402,3,128,64,0,2402,2403,5,3,0,0,2403,2424,1,0,0,0,
        2404,2405,5,100,0,0,2405,2406,5,453,0,0,2406,2407,5,106,0,0,2407,
        2408,5,2,0,0,2408,2409,3,1280,640,0,2409,2410,5,3,0,0,2410,2424,
        1,0,0,0,2411,2412,5,100,0,0,2412,2413,5,453,0,0,2413,2414,5,102,
        0,0,2414,2415,5,2,0,0,2415,2416,3,1280,640,0,2416,2417,5,3,0,0,2417,
        2418,5,132,0,0,2418,2419,5,2,0,0,2419,2420,3,1280,640,0,2420,2421,
        5,3,0,0,2421,2424,1,0,0,0,2422,2424,5,91,0,0,2423,2397,1,0,0,0,2423,
        2404,1,0,0,0,2423,2411,1,0,0,0,2423,2422,1,0,0,0,2424,125,1,0,0,
        0,2425,2426,3,1418,709,0,2426,2427,3,1398,699,0,2427,127,1,0,0,0,
        2428,2433,3,126,63,0,2429,2430,5,6,0,0,2430,2432,3,126,63,0,2431,
        2429,1,0,0,0,2432,2435,1,0,0,0,2433,2431,1,0,0,0,2433,2434,1,0,0,
        0,2434,129,1,0,0,0,2435,2433,1,0,0,0,2436,2437,5,176,0,0,2437,2438,
        5,391,0,0,2438,2439,3,520,260,0,2439,2440,3,132,66,0,2440,131,1,
        0,0,0,2441,2446,3,134,67,0,2442,2443,5,6,0,0,2443,2445,3,134,67,
        0,2444,2442,1,0,0,0,2445,2448,1,0,0,0,2446,2444,1,0,0,0,2446,2447,
        1,0,0,0,2447,133,1,0,0,0,2448,2446,1,0,0,0,2449,2450,5,171,0,0,2450,
        2451,5,181,0,0,2451,2453,3,1100,550,0,2452,2454,3,104,52,0,2453,
        2452,1,0,0,0,2453,2454,1,0,0,0,2454,2480,1,0,0,0,2455,2456,5,229,
        0,0,2456,2459,5,181,0,0,2457,2458,5,258,0,0,2458,2460,5,427,0,0,
        2459,2457,1,0,0,0,2459,2460,1,0,0,0,2460,2461,1,0,0,0,2461,2463,
        3,1414,707,0,2462,2464,3,104,52,0,2463,2462,1,0,0,0,2463,2464,1,
        0,0,0,2464,2480,1,0,0,0,2465,2466,5,176,0,0,2466,2467,5,181,0,0,
        2467,2469,3,1414,707,0,2468,2470,3,722,361,0,2469,2468,1,0,0,0,2469,
        2470,1,0,0,0,2470,2471,1,0,0,0,2471,2472,5,391,0,0,2472,2474,3,1116,
        558,0,2473,2475,3,106,53,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,
        2477,1,0,0,0,2476,2478,3,104,52,0,2477,2476,1,0,0,0,2477,2478,1,
        0,0,0,2478,2480,1,0,0,0,2479,2449,1,0,0,0,2479,2455,1,0,0,0,2479,
        2465,1,0,0,0,2480,135,1,0,0,0,2481,2484,5,195,0,0,2482,2485,3,958,
        479,0,2483,2485,5,68,0,0,2484,2482,1,0,0,0,2484,2483,1,0,0,0,2485,
        137,1,0,0,0,2486,2488,5,207,0,0,2487,2489,3,152,76,0,2488,2487,1,
        0,0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2492,3,1378,689,0,
        2491,2493,3,210,105,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2494,
        1,0,0,0,2494,2496,3,140,70,0,2495,2497,3,142,71,0,2496,2495,1,0,
        0,0,2496,2497,1,0,0,0,2497,2498,1,0,0,0,2498,2500,3,144,72,0,2499,
        2501,3,154,77,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2503,1,
        0,0,0,2502,2504,3,12,6,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,
        2505,1,0,0,0,2505,2507,3,146,73,0,2506,2508,3,1092,546,0,2507,2506,
        1,0,0,0,2507,2508,1,0,0,0,2508,2524,1,0,0,0,2509,2510,5,207,0,0,
        2510,2511,5,2,0,0,2511,2512,3,898,449,0,2512,2513,5,3,0,0,2513,2515,
        5,132,0,0,2514,2516,3,142,71,0,2515,2514,1,0,0,0,2515,2516,1,0,0,
        0,2516,2517,1,0,0,0,2517,2519,3,144,72,0,2518,2520,3,12,6,0,2519,
        2518,1,0,0,0,2519,2520,1,0,0,0,2520,2521,1,0,0,0,2521,2522,3,146,
        73,0,2522,2524,1,0,0,0,2523,2486,1,0,0,0,2523,2509,1,0,0,0,2524,
        139,1,0,0,0,2525,2526,7,11,0,0,2526,141,1,0,0,0,2527,2528,5,328,
        0,0,2528,143,1,0,0,0,2529,2533,3,1400,700,0,2530,2533,5,374,0,0,
        2531,2533,5,375,0,0,2532,2529,1,0,0,0,2532,2530,1,0,0,0,2532,2531,
        1,0,0,0,2533,145,1,0,0,0,2534,2540,3,148,74,0,2535,2536,5,2,0,0,
        2536,2537,3,158,79,0,2537,2538,5,3,0,0,2538,2540,1,0,0,0,2539,2534,
        1,0,0,0,2539,2535,1,0,0,0,2540,147,1,0,0,0,2541,2543,3,150,75,0,
        2542,2541,1,0,0,0,2543,2546,1,0,0,0,2544,2542,1,0,0,0,2544,2545,
        1,0,0,0,2545,149,1,0,0,0,2546,2544,1,0,0,0,2547,2587,5,145,0,0,2548,
        2587,5,150,0,0,2549,2551,5,221,0,0,2550,2552,3,830,415,0,2551,2550,
        1,0,0,0,2551,2552,1,0,0,0,2552,2553,1,0,0,0,2553,2587,3,1400,700,
        0,2554,2556,5,116,0,0,2555,2557,3,830,415,0,2556,2555,1,0,0,0,2556,
        2557,1,0,0,0,2557,2558,1,0,0,0,2558,2587,3,1400,700,0,2559,2587,
        5,209,0,0,2560,2587,5,254,0,0,2561,2563,5,329,0,0,2562,2564,3,830,
        415,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,2565,
        2587,3,1400,700,0,2566,2568,5,235,0,0,2567,2569,3,830,415,0,2568,
        2567,1,0,0,0,2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,2587,3,1400,
        700,0,2571,2572,5,247,0,0,2572,2573,5,329,0,0,2573,2587,3,212,106,
        0,2574,2575,5,247,0,0,2575,2576,5,329,0,0,2576,2587,5,9,0,0,2577,
        2578,5,247,0,0,2578,2579,5,115,0,0,2579,2580,5,116,0,0,2580,2587,
        3,212,106,0,2581,2582,5,247,0,0,2582,2583,5,116,0,0,2583,2587,3,
        212,106,0,2584,2585,5,232,0,0,2585,2587,3,1400,700,0,2586,2547,1,
        0,0,0,2586,2548,1,0,0,0,2586,2549,1,0,0,0,2586,2554,1,0,0,0,2586,
        2559,1,0,0,0,2586,2560,1,0,0,0,2586,2561,1,0,0,0,2586,2566,1,0,0,
        0,2586,2571,1,0,0,0,2586,2574,1,0,0,0,2586,2577,1,0,0,0,2586,2581,
        1,0,0,0,2586,2584,1,0,0,0,2587,151,1,0,0,0,2588,2589,5,145,0,0,2589,
        153,1,0,0,0,2590,2592,3,156,78,0,2591,2590,1,0,0,0,2591,2592,1,0,
        0,0,2592,2593,1,0,0,0,2593,2594,5,222,0,0,2594,2595,3,1400,700,0,
        2595,155,1,0,0,0,2596,2597,5,138,0,0,2597,157,1,0,0,0,2598,2603,
        3,160,80,0,2599,2600,5,6,0,0,2600,2602,3,160,80,0,2601,2599,1,0,
        0,0,2602,2605,1,0,0,0,2603,2601,1,0,0,0,2603,2604,1,0,0,0,2604,159,
        1,0,0,0,2605,2603,1,0,0,0,2606,2608,3,1420,710,0,2607,2609,3,162,
        81,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,161,1,0,0,0,2610,2618,
        3,62,31,0,2611,2618,3,288,144,0,2612,2618,5,9,0,0,2613,2614,5,2,
        0,0,2614,2615,3,164,82,0,2615,2616,5,3,0,0,2616,2618,1,0,0,0,2617,
        2610,1,0,0,0,2617,2611,1,0,0,0,2617,2612,1,0,0,0,2617,2613,1,0,0,
        0,2618,163,1,0,0,0,2619,2624,3,166,83,0,2620,2621,5,6,0,0,2621,2623,
        3,166,83,0,2622,2620,1,0,0,0,2623,2626,1,0,0,0,2624,2622,1,0,0,0,
        2624,2625,1,0,0,0,2625,165,1,0,0,0,2626,2624,1,0,0,0,2627,2628,3,
        62,31,0,2628,167,1,0,0,0,2629,2631,5,84,0,0,2630,2632,3,170,85,0,
        2631,2630,1,0,0,0,2631,2632,1,0,0,0,2632,2633,1,0,0,0,2633,2637,
        5,130,0,0,2634,2635,5,258,0,0,2635,2636,5,115,0,0,2636,2638,5,427,
        0,0,2637,2634,1,0,0,0,2637,2638,1,0,0,0,2638,2639,1,0,0,0,2639,2705,
        3,1378,689,0,2640,2642,5,2,0,0,2641,2643,3,172,86,0,2642,2641,1,
        0,0,0,2642,2643,1,0,0,0,2643,2644,1,0,0,0,2644,2646,5,3,0,0,2645,
        2647,3,234,117,0,2646,2645,1,0,0,0,2646,2647,1,0,0,0,2647,2649,1,
        0,0,0,2648,2650,3,236,118,0,2649,2648,1,0,0,0,2649,2650,1,0,0,0,
        2650,2652,1,0,0,0,2651,2653,3,244,122,0,2652,2651,1,0,0,0,2652,2653,
        1,0,0,0,2653,2655,1,0,0,0,2654,2656,3,246,123,0,2655,2654,1,0,0,
        0,2655,2656,1,0,0,0,2656,2658,1,0,0,0,2657,2659,3,248,124,0,2658,
        2657,1,0,0,0,2658,2659,1,0,0,0,2659,2661,1,0,0,0,2660,2662,3,250,
        125,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,2706,1,0,0,0,2663,
        2664,5,306,0,0,2664,2666,3,520,260,0,2665,2667,3,174,87,0,2666,2665,
        1,0,0,0,2666,2667,1,0,0,0,2667,2669,1,0,0,0,2668,2670,3,236,118,
        0,2669,2668,1,0,0,0,2669,2670,1,0,0,0,2670,2672,1,0,0,0,2671,2673,
        3,244,122,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2675,1,0,0,
        0,2674,2676,3,246,123,0,2675,2674,1,0,0,0,2675,2676,1,0,0,0,2676,
        2678,1,0,0,0,2677,2679,3,248,124,0,2678,2677,1,0,0,0,2678,2679,1,
        0,0,0,2679,2681,1,0,0,0,2680,2682,3,250,125,0,2681,2680,1,0,0,0,
        2681,2682,1,0,0,0,2682,2706,1,0,0,0,2683,2684,5,316,0,0,2684,2685,
        5,306,0,0,2685,2687,3,1378,689,0,2686,2688,3,174,87,0,2687,2686,
        1,0,0,0,2687,2688,1,0,0,0,2688,2689,1,0,0,0,2689,2691,3,124,62,0,
        2690,2692,3,236,118,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,2694,
        1,0,0,0,2693,2695,3,244,122,0,2694,2693,1,0,0,0,2694,2695,1,0,0,
        0,2695,2697,1,0,0,0,2696,2698,3,246,123,0,2697,2696,1,0,0,0,2697,
        2698,1,0,0,0,2698,2700,1,0,0,0,2699,2701,3,248,124,0,2700,2699,1,
        0,0,0,2700,2701,1,0,0,0,2701,2703,1,0,0,0,2702,2704,3,250,125,0,
        2703,2702,1,0,0,0,2703,2704,1,0,0,0,2704,2706,1,0,0,0,2705,2640,
        1,0,0,0,2705,2663,1,0,0,0,2705,2683,1,0,0,0,2706,169,1,0,0,0,2707,
        2715,5,385,0,0,2708,2715,5,383,0,0,2709,2710,5,283,0,0,2710,2715,
        7,12,0,0,2711,2712,5,251,0,0,2712,2715,7,12,0,0,2713,2715,5,398,
        0,0,2714,2707,1,0,0,0,2714,2708,1,0,0,0,2714,2709,1,0,0,0,2714,2711,
        1,0,0,0,2714,2713,1,0,0,0,2715,171,1,0,0,0,2716,2717,3,176,88,0,
        2717,173,1,0,0,0,2718,2719,5,2,0,0,2719,2720,3,178,89,0,2720,2721,
        5,3,0,0,2721,175,1,0,0,0,2722,2727,3,180,90,0,2723,2724,5,6,0,0,
        2724,2726,3,180,90,0,2725,2723,1,0,0,0,2726,2729,1,0,0,0,2727,2725,
        1,0,0,0,2727,2728,1,0,0,0,2728,177,1,0,0,0,2729,2727,1,0,0,0,2730,
        2735,3,182,91,0,2731,2732,5,6,0,0,2732,2734,3,182,91,0,2733,2731,
        1,0,0,0,2734,2737,1,0,0,0,2735,2733,1,0,0,0,2735,2736,1,0,0,0,2736,
        179,1,0,0,0,2737,2735,1,0,0,0,2738,2742,3,204,102,0,2739,2742,3,
        198,99,0,2740,2742,3,184,92,0,2741,2738,1,0,0,0,2741,2739,1,0,0,
        0,2741,2740,1,0,0,0,2742,181,1,0,0,0,2743,2746,3,186,93,0,2744,2746,
        3,204,102,0,2745,2743,1,0,0,0,2745,2744,1,0,0,0,2746,183,1,0,0,0,
        2747,2748,3,1414,707,0,2748,2750,3,1116,558,0,2749,2751,3,336,168,
        0,2750,2749,1,0,0,0,2750,2751,1,0,0,0,2751,2752,1,0,0,0,2752,2753,
        3,188,94,0,2753,185,1,0,0,0,2754,2757,3,1414,707,0,2755,2756,5,143,
        0,0,2756,2758,5,311,0,0,2757,2755,1,0,0,0,2757,2758,1,0,0,0,2758,
        2759,1,0,0,0,2759,2760,3,188,94,0,2760,187,1,0,0,0,2761,2763,3,190,
        95,0,2762,2761,1,0,0,0,2763,2766,1,0,0,0,2764,2762,1,0,0,0,2764,
        2765,1,0,0,0,2765,189,1,0,0,0,2766,2764,1,0,0,0,2767,2768,5,83,0,
        0,2768,2769,3,1382,691,0,2769,2770,3,192,96,0,2770,2776,1,0,0,0,
        2771,2776,3,192,96,0,2772,2776,3,196,98,0,2773,2774,5,81,0,0,2774,
        2776,3,520,260,0,2775,2767,1,0,0,0,2775,2771,1,0,0,0,2775,2772,1,
        0,0,0,2775,2773,1,0,0,0,2776,191,1,0,0,0,2777,2778,5,115,0,0,2778,
        2830,5,116,0,0,2779,2830,5,116,0,0,2780,2782,5,136,0,0,2781,2783,
        3,662,331,0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2785,1,0,0,
        0,2784,2786,3,252,126,0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,
        2830,1,0,0,0,2787,2788,5,123,0,0,2788,2790,5,274,0,0,2789,2791,3,
        662,331,0,2790,2789,1,0,0,0,2790,2791,1,0,0,0,2791,2793,1,0,0,0,
        2792,2794,3,252,126,0,2793,2792,1,0,0,0,2793,2794,1,0,0,0,2794,2830,
        1,0,0,0,2795,2796,5,80,0,0,2796,2797,5,2,0,0,2797,2798,3,1162,581,
        0,2798,2800,5,3,0,0,2799,2801,3,208,104,0,2800,2799,1,0,0,0,2800,
        2801,1,0,0,0,2801,2830,1,0,0,0,2802,2803,5,91,0,0,2803,2830,3,1204,
        602,0,2804,2805,5,476,0,0,2805,2806,3,194,97,0,2806,2816,5,74,0,
        0,2807,2809,5,257,0,0,2808,2810,3,280,140,0,2809,2808,1,0,0,0,2809,
        2810,1,0,0,0,2810,2817,1,0,0,0,2811,2812,5,2,0,0,2812,2813,3,1162,
        581,0,2813,2814,5,3,0,0,2814,2815,5,478,0,0,2815,2817,1,0,0,0,2816,
        2807,1,0,0,0,2816,2811,1,0,0,0,2817,2830,1,0,0,0,2818,2819,5,124,
        0,0,2819,2821,3,1378,689,0,2820,2822,3,210,105,0,2821,2820,1,0,0,
        0,2821,2822,1,0,0,0,2822,2824,1,0,0,0,2823,2825,3,218,109,0,2824,
        2823,1,0,0,0,2824,2825,1,0,0,0,2825,2827,1,0,0,0,2826,2828,3,226,
        113,0,2827,2826,1,0,0,0,2827,2828,1,0,0,0,2828,2830,1,0,0,0,2829,
        2777,1,0,0,0,2829,2779,1,0,0,0,2829,2780,1,0,0,0,2829,2787,1,0,0,
        0,2829,2795,1,0,0,0,2829,2802,1,0,0,0,2829,2804,1,0,0,0,2829,2818,
        1,0,0,0,2830,193,1,0,0,0,2831,2835,5,177,0,0,2832,2833,5,185,0,0,
        2833,2835,5,91,0,0,2834,2831,1,0,0,0,2834,2832,1,0,0,0,2835,195,
        1,0,0,0,2836,2842,5,92,0,0,2837,2838,5,115,0,0,2838,2842,5,92,0,
        0,2839,2840,5,107,0,0,2840,2842,7,8,0,0,2841,2836,1,0,0,0,2841,2837,
        1,0,0,0,2841,2839,1,0,0,0,2842,197,1,0,0,0,2843,2844,5,158,0,0,2844,
        2845,3,1378,689,0,2845,2846,3,200,100,0,2846,199,1,0,0,0,2847,2848,
        7,13,0,0,2848,2850,3,202,101,0,2849,2847,1,0,0,0,2850,2853,1,0,0,
        0,2851,2849,1,0,0,0,2851,2852,1,0,0,0,2852,201,1,0,0,0,2853,2851,
        1,0,0,0,2854,2855,7,14,0,0,2855,203,1,0,0,0,2856,2857,5,83,0,0,2857,
        2858,3,1382,691,0,2858,2859,3,206,103,0,2859,2862,1,0,0,0,2860,2862,
        3,206,103,0,2861,2856,1,0,0,0,2861,2860,1,0,0,0,2862,205,1,0,0,0,
        2863,2864,5,80,0,0,2864,2865,5,2,0,0,2865,2866,3,1162,581,0,2866,
        2867,5,3,0,0,2867,2868,3,436,218,0,2868,2950,1,0,0,0,2869,2887,5,
        136,0,0,2870,2871,5,2,0,0,2871,2872,3,212,106,0,2872,2874,5,3,0,
        0,2873,2875,3,216,108,0,2874,2873,1,0,0,0,2874,2875,1,0,0,0,2875,
        2877,1,0,0,0,2876,2878,3,662,331,0,2877,2876,1,0,0,0,2877,2878,1,
        0,0,0,2878,2880,1,0,0,0,2879,2881,3,252,126,0,2880,2879,1,0,0,0,
        2880,2881,1,0,0,0,2881,2882,1,0,0,0,2882,2883,3,436,218,0,2883,2888,
        1,0,0,0,2884,2885,3,254,127,0,2885,2886,3,436,218,0,2886,2888,1,
        0,0,0,2887,2870,1,0,0,0,2887,2884,1,0,0,0,2888,2950,1,0,0,0,2889,
        2890,5,123,0,0,2890,2908,5,274,0,0,2891,2892,5,2,0,0,2892,2893,3,
        212,106,0,2893,2895,5,3,0,0,2894,2896,3,216,108,0,2895,2894,1,0,
        0,0,2895,2896,1,0,0,0,2896,2898,1,0,0,0,2897,2899,3,662,331,0,2898,
        2897,1,0,0,0,2898,2899,1,0,0,0,2899,2901,1,0,0,0,2900,2902,3,252,
        126,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,2903,1,0,0,0,2903,
        2904,3,436,218,0,2904,2909,1,0,0,0,2905,2906,3,254,127,0,2906,2907,
        3,436,218,0,2907,2909,1,0,0,0,2908,2891,1,0,0,0,2908,2905,1,0,0,
        0,2909,2950,1,0,0,0,2910,2912,5,237,0,0,2911,2913,3,594,297,0,2912,
        2911,1,0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2915,5,2,0,
        0,2915,2916,3,220,110,0,2916,2918,5,3,0,0,2917,2919,3,216,108,0,
        2918,2917,1,0,0,0,2918,2919,1,0,0,0,2919,2921,1,0,0,0,2920,2922,
        3,662,331,0,2921,2920,1,0,0,0,2921,2922,1,0,0,0,2922,2924,1,0,0,
        0,2923,2925,3,252,126,0,2924,2923,1,0,0,0,2924,2925,1,0,0,0,2925,
        2927,1,0,0,0,2926,2928,3,224,112,0,2927,2926,1,0,0,0,2927,2928,1,
        0,0,0,2928,2929,1,0,0,0,2929,2930,3,436,218,0,2930,2950,1,0,0,0,
        2931,2932,5,101,0,0,2932,2933,5,274,0,0,2933,2934,5,2,0,0,2934,2935,
        3,212,106,0,2935,2936,5,3,0,0,2936,2937,5,124,0,0,2937,2939,3,1378,
        689,0,2938,2940,3,210,105,0,2939,2938,1,0,0,0,2939,2940,1,0,0,0,
        2940,2942,1,0,0,0,2941,2943,3,218,109,0,2942,2941,1,0,0,0,2942,2943,
        1,0,0,0,2943,2945,1,0,0,0,2944,2946,3,226,113,0,2945,2944,1,0,0,
        0,2945,2946,1,0,0,0,2946,2947,1,0,0,0,2947,2948,3,436,218,0,2948,
        2950,1,0,0,0,2949,2863,1,0,0,0,2949,2869,1,0,0,0,2949,2889,1,0,0,
        0,2949,2910,1,0,0,0,2949,2931,1,0,0,0,2950,207,1,0,0,0,2951,2952,
        5,300,0,0,2952,2953,5,266,0,0,2953,209,1,0,0,0,2954,2955,5,2,0,0,
        2955,2956,3,212,106,0,2956,2957,5,3,0,0,2957,211,1,0,0,0,2958,2963,
        3,214,107,0,2959,2960,5,6,0,0,2960,2962,3,214,107,0,2961,2959,1,
        0,0,0,2962,2965,1,0,0,0,2963,2961,1,0,0,0,2963,2964,1,0,0,0,2964,
        213,1,0,0,0,2965,2963,1,0,0,0,2966,2967,3,1414,707,0,2967,215,1,
        0,0,0,2968,2969,5,479,0,0,2969,2970,5,2,0,0,2970,2971,3,212,106,
        0,2971,2972,5,3,0,0,2972,217,1,0,0,0,2973,2974,5,287,0,0,2974,2975,
        7,15,0,0,2975,219,1,0,0,0,2976,2981,3,222,111,0,2977,2978,5,6,0,
        0,2978,2980,3,222,111,0,2979,2977,1,0,0,0,2980,2983,1,0,0,0,2981,
        2979,1,0,0,0,2981,2982,1,0,0,0,2982,221,1,0,0,0,2983,2981,1,0,0,
        0,2984,2985,3,600,300,0,2985,2992,5,143,0,0,2986,2993,3,682,341,
        0,2987,2988,5,309,0,0,2988,2989,5,2,0,0,2989,2990,3,682,341,0,2990,
        2991,5,3,0,0,2991,2993,1,0,0,0,2992,2986,1,0,0,0,2992,2987,1,0,0,
        0,2993,223,1,0,0,0,2994,2995,5,141,0,0,2995,2996,5,2,0,0,2996,2997,
        3,1162,581,0,2997,2998,5,3,0,0,2998,225,1,0,0,0,2999,3008,3,228,
        114,0,3000,3008,3,230,115,0,3001,3002,3,228,114,0,3002,3003,3,230,
        115,0,3003,3008,1,0,0,0,3004,3005,3,230,115,0,3005,3006,3,228,114,
        0,3006,3008,1,0,0,0,3007,2999,1,0,0,0,3007,3000,1,0,0,0,3007,3001,
        1,0,0,0,3007,3004,1,0,0,0,3008,227,1,0,0,0,3009,3010,5,118,0,0,3010,
        3011,5,400,0,0,3011,3012,3,232,116,0,3012,229,1,0,0,0,3013,3014,
        5,118,0,0,3014,3015,5,220,0,0,3015,3016,3,232,116,0,3016,231,1,0,
        0,0,3017,3018,5,300,0,0,3018,3024,5,170,0,0,3019,3024,5,346,0,0,
        3020,3024,5,188,0,0,3021,3022,5,364,0,0,3022,3024,7,16,0,0,3023,
        3017,1,0,0,0,3023,3019,1,0,0,0,3023,3020,1,0,0,0,3023,3021,1,0,0,
        0,3024,233,1,0,0,0,3025,3026,5,267,0,0,3026,3027,5,2,0,0,3027,3028,
        3,1376,688,0,3028,3029,5,3,0,0,3029,235,1,0,0,0,3030,3031,3,238,
        119,0,3031,237,1,0,0,0,3032,3033,5,316,0,0,3033,3034,5,185,0,0,3034,
        3035,3,1414,707,0,3035,3036,5,2,0,0,3036,3037,3,240,120,0,3037,3038,
        5,3,0,0,3038,239,1,0,0,0,3039,3044,3,242,121,0,3040,3041,5,6,0,0,
        3041,3043,3,242,121,0,3042,3040,1,0,0,0,3043,3046,1,0,0,0,3044,3042,
        1,0,0,0,3044,3045,1,0,0,0,3045,241,1,0,0,0,3046,3044,1,0,0,0,3047,
        3049,3,1414,707,0,3048,3050,3,606,303,0,3049,3048,1,0,0,0,3049,3050,
        1,0,0,0,3050,3052,1,0,0,0,3051,3053,3,608,304,0,3052,3051,1,0,0,
        0,3052,3053,1,0,0,0,3053,3071,1,0,0,0,3054,3056,3,1214,607,0,3055,
        3057,3,606,303,0,3056,3055,1,0,0,0,3056,3057,1,0,0,0,3057,3059,1,
        0,0,0,3058,3060,3,608,304,0,3059,3058,1,0,0,0,3059,3060,1,0,0,0,
        3060,3071,1,0,0,0,3061,3062,5,2,0,0,3062,3063,3,1162,581,0,3063,
        3065,5,3,0,0,3064,3066,3,606,303,0,3065,3064,1,0,0,0,3065,3066,1,
        0,0,0,3066,3068,1,0,0,0,3067,3069,3,608,304,0,3068,3067,1,0,0,0,
        3068,3069,1,0,0,0,3069,3071,1,0,0,0,3070,3047,1,0,0,0,3070,3054,
        1,0,0,0,3070,3061,1,0,0,0,3071,243,1,0,0,0,3072,3073,5,138,0,0,3073,
        3074,3,1382,691,0,3074,245,1,0,0,0,3075,3076,5,143,0,0,3076,3080,
        3,112,56,0,3077,3078,5,410,0,0,3078,3080,5,308,0,0,3079,3075,1,0,
        0,0,3079,3077,1,0,0,0,3080,247,1,0,0,0,3081,3082,5,118,0,0,3082,
        3088,5,199,0,0,3083,3089,5,229,0,0,3084,3085,5,220,0,0,3085,3089,
        5,351,0,0,3086,3087,5,323,0,0,3087,3089,5,351,0,0,3088,3083,1,0,
        0,0,3088,3084,1,0,0,0,3088,3086,1,0,0,0,3089,249,1,0,0,0,3090,3091,
        5,382,0,0,3091,3092,3,1382,691,0,3092,251,1,0,0,0,3093,3094,5,138,
        0,0,3094,3095,5,264,0,0,3095,3096,5,382,0,0,3096,3097,3,1382,691,
        0,3097,253,1,0,0,0,3098,3099,5,138,0,0,3099,3100,5,264,0,0,3100,
        3101,3,1382,691,0,3101,255,1,0,0,0,3102,3103,5,84,0,0,3103,3107,
        5,373,0,0,3104,3105,5,258,0,0,3105,3106,5,115,0,0,3106,3108,5,427,
        0,0,3107,3104,1,0,0,0,3107,3108,1,0,0,0,3108,3109,1,0,0,0,3109,3111,
        3,520,260,0,3110,3112,3,874,437,0,3111,3110,1,0,0,0,3111,3112,1,
        0,0,0,3112,3113,1,0,0,0,3113,3114,5,118,0,0,3114,3115,3,1280,640,
        0,3115,3116,5,102,0,0,3116,3117,3,1060,530,0,3117,257,1,0,0,0,3118,
        3119,5,176,0,0,3119,3122,5,373,0,0,3120,3121,5,258,0,0,3121,3123,
        5,427,0,0,3122,3120,1,0,0,0,3122,3123,1,0,0,0,3123,3124,1,0,0,0,
        3124,3125,3,520,260,0,3125,3126,5,364,0,0,3126,3127,5,373,0,0,3127,
        3128,3,1406,703,0,3128,259,1,0,0,0,3129,3131,5,84,0,0,3130,3132,
        3,170,85,0,3131,3130,1,0,0,0,3131,3132,1,0,0,0,3132,3133,1,0,0,0,
        3133,3137,5,130,0,0,3134,3135,5,258,0,0,3135,3136,5,115,0,0,3136,
        3138,5,427,0,0,3137,3134,1,0,0,0,3137,3138,1,0,0,0,3138,3139,1,0,
        0,0,3139,3140,3,262,131,0,3140,3141,5,74,0,0,3141,3143,3,964,482,
        0,3142,3144,3,264,132,0,3143,3142,1,0,0,0,3143,3144,1,0,0,0,3144,
        261,1,0,0,0,3145,3147,3,1378,689,0,3146,3148,3,210,105,0,3147,3146,
        1,0,0,0,3147,3148,1,0,0,0,3148,3150,1,0,0,0,3149,3151,3,244,122,
        0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,3151,3153,1,0,0,0,3152,3154,
        3,246,123,0,3153,3152,1,0,0,0,3153,3154,1,0,0,0,3154,3156,1,0,0,
        0,3155,3157,3,248,124,0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,3157,
        3159,1,0,0,0,3158,3160,3,250,125,0,3159,3158,1,0,0,0,3159,3160,1,
        0,0,0,3160,263,1,0,0,0,3161,3165,5,143,0,0,3162,3166,5,212,0,0,3163,
        3164,5,300,0,0,3164,3166,5,212,0,0,3165,3162,1,0,0,0,3165,3163,1,
        0,0,0,3166,265,1,0,0,0,3167,3169,5,84,0,0,3168,3170,3,270,135,0,
        3169,3168,1,0,0,0,3169,3170,1,0,0,0,3170,3171,1,0,0,0,3171,3172,
        5,289,0,0,3172,3176,5,407,0,0,3173,3174,5,258,0,0,3174,3175,5,115,
        0,0,3175,3177,5,427,0,0,3176,3173,1,0,0,0,3176,3177,1,0,0,0,3177,
        3178,1,0,0,0,3178,3179,3,268,134,0,3179,3180,5,74,0,0,3180,3182,
        3,964,482,0,3181,3183,3,264,132,0,3182,3181,1,0,0,0,3182,3183,1,
        0,0,0,3183,267,1,0,0,0,3184,3186,3,1378,689,0,3185,3187,3,210,105,
        0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,3189,1,0,0,0,3188,3190,
        3,244,122,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3192,1,0,0,
        0,3191,3193,3,114,57,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,3193,
        3195,1,0,0,0,3194,3196,3,250,125,0,3195,3194,1,0,0,0,3195,3196,1,
        0,0,0,3196,269,1,0,0,0,3197,3198,5,398,0,0,3198,271,1,0,0,0,3199,
        3200,5,336,0,0,3200,3201,5,289,0,0,3201,3203,5,407,0,0,3202,3204,
        3,590,295,0,3203,3202,1,0,0,0,3203,3204,1,0,0,0,3204,3205,1,0,0,
        0,3205,3207,3,1378,689,0,3206,3208,3,264,132,0,3207,3206,1,0,0,0,
        3207,3208,1,0,0,0,3208,273,1,0,0,0,3209,3211,5,84,0,0,3210,3212,
        3,170,85,0,3211,3210,1,0,0,0,3211,3212,1,0,0,0,3212,3213,1,0,0,0,
        3213,3217,5,359,0,0,3214,3215,5,258,0,0,3215,3216,5,115,0,0,3216,
        3218,5,427,0,0,3217,3214,1,0,0,0,3217,3218,1,0,0,0,3218,3219,1,0,
        0,0,3219,3221,3,1378,689,0,3220,3222,3,278,139,0,3221,3220,1,0,0,
        0,3221,3222,1,0,0,0,3222,275,1,0,0,0,3223,3224,5,176,0,0,3224,3227,
        5,359,0,0,3225,3226,5,258,0,0,3226,3228,5,427,0,0,3227,3225,1,0,
        0,0,3227,3228,1,0,0,0,3228,3229,1,0,0,0,3229,3230,3,1378,689,0,3230,
        3231,3,282,141,0,3231,277,1,0,0,0,3232,3233,3,282,141,0,3233,279,
        1,0,0,0,3234,3235,5,2,0,0,3235,3236,3,282,141,0,3236,3237,5,3,0,
        0,3237,281,1,0,0,0,3238,3240,3,284,142,0,3239,3238,1,0,0,0,3240,
        3241,1,0,0,0,3241,3239,1,0,0,0,3241,3242,1,0,0,0,3242,283,1,0,0,
        0,3243,3244,5,74,0,0,3244,3278,3,1120,560,0,3245,3246,5,186,0,0,
        3246,3278,3,288,144,0,3247,3278,5,211,0,0,3248,3250,5,263,0,0,3249,
        3251,3,286,143,0,3250,3249,1,0,0,0,3250,3251,1,0,0,0,3251,3252,1,
        0,0,0,3252,3278,3,288,144,0,3253,3254,5,290,0,0,3254,3278,3,288,
        144,0,3255,3256,5,293,0,0,3256,3278,3,288,144,0,3257,3258,5,300,
        0,0,3258,3278,7,17,0,0,3259,3260,5,312,0,0,3260,3261,5,185,0,0,3261,
        3278,3,520,260,0,3262,3263,5,359,0,0,3263,3264,5,297,0,0,3264,3278,
        3,520,260,0,3265,3267,5,371,0,0,3266,3268,3,12,6,0,3267,3266,1,0,
        0,0,3267,3268,1,0,0,0,3268,3269,1,0,0,0,3269,3278,3,288,144,0,3270,
        3272,5,345,0,0,3271,3273,3,12,6,0,3272,3271,1,0,0,0,3272,3273,1,
        0,0,0,3273,3275,1,0,0,0,3274,3276,3,288,144,0,3275,3274,1,0,0,0,
        3275,3276,1,0,0,0,3276,3278,1,0,0,0,3277,3243,1,0,0,0,3277,3245,
        1,0,0,0,3277,3247,1,0,0,0,3277,3248,1,0,0,0,3277,3253,1,0,0,0,3277,
        3255,1,0,0,0,3277,3257,1,0,0,0,3277,3259,1,0,0,0,3277,3262,1,0,0,
        0,3277,3265,1,0,0,0,3277,3270,1,0,0,0,3278,285,1,0,0,0,3279,3280,
        5,185,0,0,3280,287,1,0,0,0,3281,3288,3,1396,698,0,3282,3283,5,12,
        0,0,3283,3288,3,1396,698,0,3284,3285,5,13,0,0,3285,3288,3,1396,698,
        0,3286,3288,3,1406,703,0,3287,3281,1,0,0,0,3287,3282,1,0,0,0,3287,
        3284,1,0,0,0,3287,3286,1,0,0,0,3288,289,1,0,0,0,3289,3294,3,288,
        144,0,3290,3291,5,6,0,0,3291,3293,3,288,144,0,3292,3290,1,0,0,0,
        3293,3296,1,0,0,0,3294,3292,1,0,0,0,3294,3295,1,0,0,0,3295,291,1,
        0,0,0,3296,3294,1,0,0,0,3297,3299,5,84,0,0,3298,3300,3,616,308,0,
        3299,3298,1,0,0,0,3299,3300,1,0,0,0,3300,3302,1,0,0,0,3301,3303,
        3,294,147,0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,3303,3305,1,0,0,
        0,3304,3306,3,304,152,0,3305,3304,1,0,0,0,3305,3306,1,0,0,0,3306,
        3307,1,0,0,0,3307,3308,5,276,0,0,3308,3317,3,1382,691,0,3309,3310,
        5,253,0,0,3310,3312,3,296,148,0,3311,3313,3,298,149,0,3312,3311,
        1,0,0,0,3312,3313,1,0,0,0,3313,3315,1,0,0,0,3314,3316,3,302,151,
        0,3315,3314,1,0,0,0,3315,3316,1,0,0,0,3316,3318,1,0,0,0,3317,3309,
        1,0,0,0,3317,3318,1,0,0,0,3318,293,1,0,0,0,3319,3320,5,390,0,0,3320,
        295,1,0,0,0,3321,3323,3,1382,691,0,3322,3324,3,522,261,0,3323,3322,
        1,0,0,0,3323,3324,1,0,0,0,3324,297,1,0,0,0,3325,3326,5,268,0,0,3326,
        3327,3,296,148,0,3327,299,1,0,0,0,3328,3329,5,404,0,0,3329,3333,
        3,296,148,0,3330,3331,5,300,0,0,3331,3333,5,404,0,0,3332,3328,1,
        0,0,0,3332,3330,1,0,0,0,3333,301,1,0,0,0,3334,3335,3,300,150,0,3335,
        303,1,0,0,0,3336,3337,5,326,0,0,3337,305,1,0,0,0,3338,3339,5,84,
        0,0,3339,3340,5,382,0,0,3340,3342,3,1382,691,0,3341,3343,3,308,154,
        0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,3344,1,0,0,0,3344,3345,
        5,284,0,0,3345,3347,3,1400,700,0,3346,3348,3,114,57,0,3347,3346,
        1,0,0,0,3347,3348,1,0,0,0,3348,307,1,0,0,0,3349,3350,5,313,0,0,3350,
        3351,3,1410,705,0,3351,309,1,0,0,0,3352,3353,5,229,0,0,3353,3356,
        5,382,0,0,3354,3355,5,258,0,0,3355,3357,5,427,0,0,3356,3354,1,0,
        0,0,3356,3357,1,0,0,0,3357,3358,1,0,0,0,3358,3359,3,1382,691,0,3359,
        311,1,0,0,0,3360,3361,5,84,0,0,3361,3365,5,242,0,0,3362,3363,5,258,
        0,0,3363,3364,5,115,0,0,3364,3366,5,427,0,0,3365,3362,1,0,0,0,3365,
        3366,1,0,0,0,3366,3367,1,0,0,0,3367,3369,3,1382,691,0,3368,3370,
        3,12,6,0,3369,3368,1,0,0,0,3369,3370,1,0,0,0,3370,3371,1,0,0,0,3371,
        3372,3,314,157,0,3372,313,1,0,0,0,3373,3375,3,316,158,0,3374,3373,
        1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,0,0,0,3376,3377,1,0,0,0,3377,
        315,1,0,0,0,3378,3376,1,0,0,0,3379,3380,5,354,0,0,3380,3387,3,1382,
        691,0,3381,3382,5,406,0,0,3382,3387,3,68,34,0,3383,3384,5,102,0,
        0,3384,3387,3,68,34,0,3385,3387,5,188,0,0,3386,3379,1,0,0,0,3386,
        3381,1,0,0,0,3386,3383,1,0,0,0,3386,3385,1,0,0,0,3387,317,1,0,0,
        0,3388,3389,5,176,0,0,3389,3390,5,242,0,0,3390,3391,3,1382,691,0,
        3391,3392,5,400,0,0,3392,3393,3,320,160,0,3393,319,1,0,0,0,3394,
        3396,3,322,161,0,3395,3394,1,0,0,0,3396,3399,1,0,0,0,3397,3395,1,
        0,0,0,3397,3398,1,0,0,0,3398,321,1,0,0,0,3399,3397,1,0,0,0,3400,
        3401,5,132,0,0,3401,3402,3,68,34,0,3402,323,1,0,0,0,3403,3404,5,
        176,0,0,3404,3405,5,242,0,0,3405,3406,3,1382,691,0,3406,3407,3,36,
        18,0,3407,3408,3,512,256,0,3408,3409,3,1382,691,0,3409,3508,1,0,
        0,0,3410,3411,5,176,0,0,3411,3412,5,242,0,0,3412,3413,3,1382,691,
        0,3413,3414,3,36,18,0,3414,3415,3,510,255,0,3415,3416,3,520,260,
        0,3416,3508,1,0,0,0,3417,3418,5,176,0,0,3418,3419,5,242,0,0,3419,
        3420,3,1382,691,0,3420,3421,3,36,18,0,3421,3422,5,174,0,0,3422,3423,
        3,648,324,0,3423,3508,1,0,0,0,3424,3425,5,176,0,0,3425,3426,5,242,
        0,0,3426,3427,3,1382,691,0,3427,3428,3,36,18,0,3428,3429,5,79,0,
        0,3429,3430,5,2,0,0,3430,3431,3,1116,558,0,3431,3432,5,74,0,0,3432,
        3433,3,1116,558,0,3433,3434,5,3,0,0,3434,3508,1,0,0,0,3435,3436,
        5,176,0,0,3436,3437,5,242,0,0,3437,3438,3,1382,691,0,3438,3439,3,
        36,18,0,3439,3440,5,227,0,0,3440,3441,3,1116,558,0,3441,3508,1,0,
        0,0,3442,3443,5,176,0,0,3443,3444,5,242,0,0,3444,3445,3,1382,691,
        0,3445,3446,3,36,18,0,3446,3447,5,249,0,0,3447,3448,3,624,312,0,
        3448,3508,1,0,0,0,3449,3450,5,176,0,0,3450,3451,5,242,0,0,3451,3452,
        3,1382,691,0,3452,3453,3,36,18,0,3453,3454,5,309,0,0,3454,3455,3,
        686,343,0,3455,3508,1,0,0,0,3456,3457,5,176,0,0,3457,3458,5,242,
        0,0,3458,3459,3,1382,691,0,3459,3460,3,36,18,0,3460,3461,5,309,0,
        0,3461,3462,5,194,0,0,3462,3463,3,520,260,0,3463,3464,5,138,0,0,
        3464,3465,3,1382,691,0,3465,3508,1,0,0,0,3466,3467,5,176,0,0,3467,
        3468,5,242,0,0,3468,3469,3,1382,691,0,3469,3470,3,36,18,0,3470,3471,
        5,309,0,0,3471,3472,5,244,0,0,3472,3473,3,520,260,0,3473,3474,5,
        138,0,0,3474,3475,3,1382,691,0,3475,3508,1,0,0,0,3476,3477,5,176,
        0,0,3477,3478,5,242,0,0,3478,3479,3,1382,691,0,3479,3480,3,36,18,
        0,3480,3481,5,327,0,0,3481,3482,3,624,312,0,3482,3508,1,0,0,0,3483,
        3484,5,176,0,0,3484,3485,5,242,0,0,3485,3486,3,1382,691,0,3486,3487,
        3,36,18,0,3487,3488,5,480,0,0,3488,3489,3,624,312,0,3489,3508,1,
        0,0,0,3490,3491,5,176,0,0,3491,3492,5,242,0,0,3492,3493,3,1382,691,
        0,3493,3494,3,36,18,0,3494,3495,5,481,0,0,3495,3496,5,100,0,0,3496,
        3497,3,1116,558,0,3497,3498,5,276,0,0,3498,3499,3,1382,691,0,3499,
        3508,1,0,0,0,3500,3501,5,176,0,0,3501,3502,5,242,0,0,3502,3503,3,
        1382,691,0,3503,3504,3,36,18,0,3504,3505,5,391,0,0,3505,3506,3,1116,
        558,0,3506,3508,1,0,0,0,3507,3403,1,0,0,0,3507,3410,1,0,0,0,3507,
        3417,1,0,0,0,3507,3424,1,0,0,0,3507,3435,1,0,0,0,3507,3442,1,0,0,
        0,3507,3449,1,0,0,0,3507,3456,1,0,0,0,3507,3466,1,0,0,0,3507,3476,
        1,0,0,0,3507,3483,1,0,0,0,3507,3490,1,0,0,0,3507,3500,1,0,0,0,3508,
        325,1,0,0,0,3509,3510,5,84,0,0,3510,3511,5,101,0,0,3511,3512,5,212,
        0,0,3512,3513,5,412,0,0,3513,3515,3,1382,691,0,3514,3516,3,332,166,
        0,3515,3514,1,0,0,0,3515,3516,1,0,0,0,3516,3518,1,0,0,0,3517,3519,
        3,336,168,0,3518,3517,1,0,0,0,3518,3519,1,0,0,0,3519,327,1,0,0,0,
        3520,3521,5,253,0,0,3521,3529,3,296,148,0,3522,3523,5,300,0,0,3523,
        3529,5,253,0,0,3524,3525,5,404,0,0,3525,3529,3,296,148,0,3526,3527,
        5,300,0,0,3527,3529,5,404,0,0,3528,3520,1,0,0,0,3528,3522,1,0,0,
        0,3528,3524,1,0,0,0,3528,3526,1,0,0,0,3529,329,1,0,0,0,3530,3532,
        3,328,164,0,3531,3530,1,0,0,0,3532,3533,1,0,0,0,3533,3531,1,0,0,
        0,3533,3534,1,0,0,0,3534,331,1,0,0,0,3535,3536,3,330,165,0,3536,
        333,1,0,0,0,3537,3538,5,176,0,0,3538,3539,5,101,0,0,3539,3540,5,
        212,0,0,3540,3541,5,412,0,0,3541,3543,3,1382,691,0,3542,3544,3,332,
        166,0,3543,3542,1,0,0,0,3543,3544,1,0,0,0,3544,3545,1,0,0,0,3545,
        3546,3,340,170,0,3546,3555,1,0,0,0,3547,3548,5,176,0,0,3548,3549,
        5,101,0,0,3549,3550,5,212,0,0,3550,3551,5,412,0,0,3551,3552,3,1382,
        691,0,3552,3553,3,330,165,0,3553,3555,1,0,0,0,3554,3537,1,0,0,0,
        3554,3547,1,0,0,0,3555,335,1,0,0,0,3556,3557,5,311,0,0,3557,3558,
        5,2,0,0,3558,3559,3,338,169,0,3559,3560,5,3,0,0,3560,337,1,0,0,0,
        3561,3566,3,346,173,0,3562,3563,5,6,0,0,3563,3565,3,346,173,0,3564,
        3562,1,0,0,0,3565,3568,1,0,0,0,3566,3564,1,0,0,0,3566,3567,1,0,0,
        0,3567,339,1,0,0,0,3568,3566,1,0,0,0,3569,3570,5,311,0,0,3570,3571,
        5,2,0,0,3571,3572,3,342,171,0,3572,3573,5,3,0,0,3573,341,1,0,0,0,
        3574,3579,3,344,172,0,3575,3576,5,6,0,0,3576,3578,3,344,172,0,3577,
        3575,1,0,0,0,3578,3581,1,0,0,0,3579,3577,1,0,0,0,3579,3580,1,0,0,
        0,3580,343,1,0,0,0,3581,3579,1,0,0,0,3582,3590,3,346,173,0,3583,
        3584,5,364,0,0,3584,3590,3,346,173,0,3585,3586,5,171,0,0,3586,3590,
        3,346,173,0,3587,3588,5,229,0,0,3588,3590,3,348,174,0,3589,3582,
        1,0,0,0,3589,3583,1,0,0,0,3589,3585,1,0,0,0,3589,3587,1,0,0,0,3590,
        345,1,0,0,0,3591,3592,3,348,174,0,3592,3593,3,350,175,0,3593,347,
        1,0,0,0,3594,3595,3,1420,710,0,3595,349,1,0,0,0,3596,3597,3,1400,
        700,0,3597,351,1,0,0,0,3598,3599,5,84,0,0,3599,3600,5,362,0,0,3600,
        3602,3,1382,691,0,3601,3603,3,354,177,0,3602,3601,1,0,0,0,3602,3603,
        1,0,0,0,3603,3605,1,0,0,0,3604,3606,3,358,179,0,3605,3604,1,0,0,
        0,3605,3606,1,0,0,0,3606,3607,1,0,0,0,3607,3608,5,101,0,0,3608,3609,
        5,212,0,0,3609,3610,5,412,0,0,3610,3612,3,1382,691,0,3611,3613,3,
        336,168,0,3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3634,1,0,0,0,
        3614,3615,5,84,0,0,3615,3616,5,362,0,0,3616,3617,5,258,0,0,3617,
        3618,5,115,0,0,3618,3619,5,427,0,0,3619,3621,3,1382,691,0,3620,3622,
        3,354,177,0,3621,3620,1,0,0,0,3621,3622,1,0,0,0,3622,3624,1,0,0,
        0,3623,3625,3,358,179,0,3624,3623,1,0,0,0,3624,3625,1,0,0,0,3625,
        3626,1,0,0,0,3626,3627,5,101,0,0,3627,3628,5,212,0,0,3628,3629,5,
        412,0,0,3629,3631,3,1382,691,0,3630,3632,3,336,168,0,3631,3630,1,
        0,0,0,3631,3632,1,0,0,0,3632,3634,1,0,0,0,3633,3598,1,0,0,0,3633,
        3614,1,0,0,0,3634,353,1,0,0,0,3635,3636,5,391,0,0,3636,3637,3,1400,
        700,0,3637,355,1,0,0,0,3638,3641,5,406,0,0,3639,3642,3,1400,700,
        0,3640,3642,5,116,0,0,3641,3639,1,0,0,0,3641,3640,1,0,0,0,3642,357,
        1,0,0,0,3643,3644,3,356,178,0,3644,359,1,0,0,0,3645,3646,5,176,0,
        0,3646,3647,5,362,0,0,3647,3653,3,1382,691,0,3648,3654,3,340,170,
        0,3649,3651,3,356,178,0,3650,3652,3,340,170,0,3651,3650,1,0,0,0,
        3651,3652,1,0,0,0,3652,3654,1,0,0,0,3653,3648,1,0,0,0,3653,3649,
        1,0,0,0,3654,361,1,0,0,0,3655,3656,5,84,0,0,3656,3657,5,101,0,0,
        3657,3658,5,130,0,0,3658,3659,3,1378,689,0,3659,3661,5,2,0,0,3660,
        3662,3,172,86,0,3661,3660,1,0,0,0,3661,3662,1,0,0,0,3662,3663,1,
        0,0,0,3663,3665,5,3,0,0,3664,3666,3,234,117,0,3665,3664,1,0,0,0,
        3665,3666,1,0,0,0,3666,3667,1,0,0,0,3667,3668,5,362,0,0,3668,3670,
        3,1382,691,0,3669,3671,3,336,168,0,3670,3669,1,0,0,0,3670,3671,1,
        0,0,0,3671,3728,1,0,0,0,3672,3673,5,84,0,0,3673,3674,5,101,0,0,3674,
        3675,5,130,0,0,3675,3676,5,258,0,0,3676,3677,5,115,0,0,3677,3678,
        5,427,0,0,3678,3679,3,1378,689,0,3679,3681,5,2,0,0,3680,3682,3,172,
        86,0,3681,3680,1,0,0,0,3681,3682,1,0,0,0,3682,3683,1,0,0,0,3683,
        3685,5,3,0,0,3684,3686,3,234,117,0,3685,3684,1,0,0,0,3685,3686,1,
        0,0,0,3686,3687,1,0,0,0,3687,3688,5,362,0,0,3688,3690,3,1382,691,
        0,3689,3691,3,336,168,0,3690,3689,1,0,0,0,3690,3691,1,0,0,0,3691,
        3728,1,0,0,0,3692,3693,5,84,0,0,3693,3694,5,101,0,0,3694,3695,5,
        130,0,0,3695,3696,3,1378,689,0,3696,3697,5,316,0,0,3697,3698,5,306,
        0,0,3698,3700,3,1378,689,0,3699,3701,3,174,87,0,3700,3699,1,0,0,
        0,3700,3701,1,0,0,0,3701,3702,1,0,0,0,3702,3703,3,124,62,0,3703,
        3704,5,362,0,0,3704,3706,3,1382,691,0,3705,3707,3,336,168,0,3706,
        3705,1,0,0,0,3706,3707,1,0,0,0,3707,3728,1,0,0,0,3708,3709,5,84,
        0,0,3709,3710,5,101,0,0,3710,3711,5,130,0,0,3711,3712,5,258,0,0,
        3712,3713,5,115,0,0,3713,3714,5,427,0,0,3714,3715,3,1378,689,0,3715,
        3716,5,316,0,0,3716,3717,5,306,0,0,3717,3719,3,1378,689,0,3718,3720,
        3,174,87,0,3719,3718,1,0,0,0,3719,3720,1,0,0,0,3720,3721,1,0,0,0,
        3721,3722,3,124,62,0,3722,3723,5,362,0,0,3723,3725,3,1382,691,0,
        3724,3726,3,336,168,0,3725,3724,1,0,0,0,3725,3726,1,0,0,0,3726,3728,
        1,0,0,0,3727,3655,1,0,0,0,3727,3672,1,0,0,0,3727,3692,1,0,0,0,3727,
        3708,1,0,0,0,3728,363,1,0,0,0,3729,3730,5,482,0,0,3730,3731,5,101,
        0,0,3731,3732,5,354,0,0,3732,3734,3,1382,691,0,3733,3735,3,368,184,
        0,3734,3733,1,0,0,0,3734,3735,1,0,0,0,3735,3736,1,0,0,0,3736,3737,
        5,102,0,0,3737,3738,5,362,0,0,3738,3739,3,1382,691,0,3739,3740,5,
        109,0,0,3740,3742,3,1382,691,0,3741,3743,3,336,168,0,3742,3741,1,
        0,0,0,3742,3743,1,0,0,0,3743,365,1,0,0,0,3744,3745,5,112,0,0,3745,
        3748,5,132,0,0,3746,3748,5,97,0,0,3747,3744,1,0,0,0,3747,3746,1,
        0,0,0,3748,367,1,0,0,0,3749,3750,3,366,183,0,3750,3751,5,2,0,0,3751,
        3752,3,1074,537,0,3752,3753,5,3,0,0,3753,369,1,0,0,0,3754,3755,5,
        84,0,0,3755,3756,5,137,0,0,3756,3757,5,286,0,0,3757,3758,5,100,0,
        0,3758,3759,3,372,186,0,3759,3760,5,362,0,0,3760,3762,3,1382,691,
        0,3761,3763,3,336,168,0,3762,3761,1,0,0,0,3762,3763,1,0,0,0,3763,
        3778,1,0,0,0,3764,3765,5,84,0,0,3765,3766,5,137,0,0,3766,3767,5,
        286,0,0,3767,3768,5,258,0,0,3768,3769,5,115,0,0,3769,3770,5,427,
        0,0,3770,3771,5,100,0,0,3771,3772,3,372,186,0,3772,3773,5,362,0,
        0,3773,3775,3,1382,691,0,3774,3776,3,336,168,0,3775,3774,1,0,0,0,
        3775,3776,1,0,0,0,3776,3778,1,0,0,0,3777,3754,1,0,0,0,3777,3764,
        1,0,0,0,3778,371,1,0,0,0,3779,3782,3,1410,705,0,3780,3782,5,137,
        0,0,3781,3779,1,0,0,0,3781,3780,1,0,0,0,3782,373,1,0,0,0,3783,3784,
        5,229,0,0,3784,3785,5,137,0,0,3785,3786,5,286,0,0,3786,3787,5,100,
        0,0,3787,3788,3,372,186,0,3788,3789,5,362,0,0,3789,3790,3,1382,691,
        0,3790,3802,1,0,0,0,3791,3792,5,229,0,0,3792,3793,5,137,0,0,3793,
        3794,5,286,0,0,3794,3795,5,258,0,0,3795,3796,5,427,0,0,3796,3797,
        5,100,0,0,3797,3798,3,372,186,0,3798,3799,5,362,0,0,3799,3800,3,
        1382,691,0,3800,3802,1,0,0,0,3801,3783,1,0,0,0,3801,3791,1,0,0,0,
        3802,375,1,0,0,0,3803,3804,5,176,0,0,3804,3805,5,137,0,0,3805,3806,
        5,286,0,0,3806,3807,5,100,0,0,3807,3808,3,372,186,0,3808,3809,5,
        362,0,0,3809,3810,3,1382,691,0,3810,3811,3,340,170,0,3811,377,1,
        0,0,0,3812,3813,5,84,0,0,3813,3814,5,483,0,0,3814,3815,3,1382,691,
        0,3815,3816,5,118,0,0,3816,3818,3,1378,689,0,3817,3819,3,390,195,
        0,3818,3817,1,0,0,0,3818,3819,1,0,0,0,3819,3821,1,0,0,0,3820,3822,
        3,392,196,0,3821,3820,1,0,0,0,3821,3822,1,0,0,0,3822,3824,1,0,0,
        0,3823,3825,3,386,193,0,3824,3823,1,0,0,0,3824,3825,1,0,0,0,3825,
        3827,1,0,0,0,3826,3828,3,382,191,0,3827,3826,1,0,0,0,3827,3828,1,
        0,0,0,3828,3830,1,0,0,0,3829,3831,3,384,192,0,3830,3829,1,0,0,0,
        3830,3831,1,0,0,0,3831,379,1,0,0,0,3832,3833,5,176,0,0,3833,3834,
        5,483,0,0,3834,3835,3,1382,691,0,3835,3836,5,118,0,0,3836,3838,3,
        1378,689,0,3837,3839,3,388,194,0,3838,3837,1,0,0,0,3838,3839,1,0,
        0,0,3839,3841,1,0,0,0,3840,3842,3,382,191,0,3841,3840,1,0,0,0,3841,
        3842,1,0,0,0,3842,3844,1,0,0,0,3843,3845,3,384,192,0,3844,3843,1,
        0,0,0,3844,3845,1,0,0,0,3845,381,1,0,0,0,3846,3847,5,138,0,0,3847,
        3848,5,2,0,0,3848,3849,3,1162,581,0,3849,3850,5,3,0,0,3850,383,1,
        0,0,0,3851,3852,5,143,0,0,3852,3853,5,80,0,0,3853,3854,5,2,0,0,3854,
        3855,3,1162,581,0,3855,3856,5,3,0,0,3856,385,1,0,0,0,3857,3858,5,
        132,0,0,3858,3859,3,1412,706,0,3859,387,1,0,0,0,3860,3861,5,132,
        0,0,3861,3862,3,1412,706,0,3862,389,1,0,0,0,3863,3864,5,74,0,0,3864,
        3865,3,1436,718,0,3865,391,1,0,0,0,3866,3867,5,100,0,0,3867,3868,
        3,394,197,0,3868,393,1,0,0,0,3869,3870,7,18,0,0,3870,395,1,0,0,0,
        3871,3872,5,84,0,0,3872,3873,5,169,0,0,3873,3874,5,484,0,0,3874,
        3875,3,1382,691,0,3875,3876,5,391,0,0,3876,3877,3,398,199,0,3877,
        3878,5,253,0,0,3878,3879,3,296,148,0,3879,397,1,0,0,0,3880,3881,
        7,19,0,0,3881,399,1,0,0,0,3882,3883,5,84,0,0,3883,3884,5,388,0,0,
        3884,3885,3,1382,691,0,3885,3886,3,402,201,0,3886,3887,3,404,202,
        0,3887,3888,5,118,0,0,3888,3890,3,1378,689,0,3889,3891,3,408,204,
        0,3890,3889,1,0,0,0,3890,3891,1,0,0,0,3891,3893,1,0,0,0,3892,3894,
        3,420,210,0,3893,3892,1,0,0,0,3893,3894,1,0,0,0,3894,3896,1,0,0,
        0,3895,3897,3,426,213,0,3896,3895,1,0,0,0,3896,3897,1,0,0,0,3897,
        3898,1,0,0,0,3898,3899,5,240,0,0,3899,3900,3,428,214,0,3900,3901,
        3,1388,694,0,3901,3902,5,2,0,0,3902,3903,3,430,215,0,3903,3904,5,
        3,0,0,3904,3931,1,0,0,0,3905,3906,5,84,0,0,3906,3907,5,83,0,0,3907,
        3908,5,388,0,0,3908,3909,3,1382,691,0,3909,3910,5,173,0,0,3910,3911,
        3,404,202,0,3911,3912,5,118,0,0,3912,3914,3,1378,689,0,3913,3915,
        3,434,217,0,3914,3913,1,0,0,0,3914,3915,1,0,0,0,3915,3916,1,0,0,
        0,3916,3917,3,436,218,0,3917,3918,5,100,0,0,3918,3919,5,230,0,0,
        3919,3921,5,445,0,0,3920,3922,3,426,213,0,3921,3920,1,0,0,0,3921,
        3922,1,0,0,0,3922,3923,1,0,0,0,3923,3924,5,240,0,0,3924,3925,3,428,
        214,0,3925,3926,3,1388,694,0,3926,3927,5,2,0,0,3927,3928,3,430,215,
        0,3928,3929,5,3,0,0,3929,3931,1,0,0,0,3930,3882,1,0,0,0,3930,3905,
        1,0,0,0,3931,401,1,0,0,0,3932,3937,5,183,0,0,3933,3937,5,173,0,0,
        3934,3935,5,271,0,0,3935,3937,5,306,0,0,3936,3932,1,0,0,0,3936,3933,
        1,0,0,0,3936,3934,1,0,0,0,3937,403,1,0,0,0,3938,3943,3,406,203,0,
        3939,3940,5,120,0,0,3940,3942,3,406,203,0,3941,3939,1,0,0,0,3942,
        3945,1,0,0,0,3943,3941,1,0,0,0,3943,3944,1,0,0,0,3944,405,1,0,0,
        0,3945,3943,1,0,0,0,3946,3954,5,270,0,0,3947,3954,5,220,0,0,3948,
        3954,5,400,0,0,3949,3950,5,400,0,0,3950,3951,5,306,0,0,3951,3954,
        3,212,106,0,3952,3954,5,389,0,0,3953,3946,1,0,0,0,3953,3947,1,0,
        0,0,3953,3948,1,0,0,0,3953,3949,1,0,0,0,3953,3952,1,0,0,0,3954,407,
        1,0,0,0,3955,3956,5,485,0,0,3956,3957,3,410,205,0,3957,409,1,0,0,
        0,3958,3960,3,412,206,0,3959,3958,1,0,0,0,3960,3961,1,0,0,0,3961,
        3959,1,0,0,0,3961,3962,1,0,0,0,3962,411,1,0,0,0,3963,3964,3,414,
        207,0,3964,3966,3,416,208,0,3965,3967,3,830,415,0,3966,3965,1,0,
        0,0,3966,3967,1,0,0,0,3967,3968,1,0,0,0,3968,3969,3,418,209,0,3969,
        413,1,0,0,0,3970,3971,7,20,0,0,3971,415,1,0,0,0,3972,3973,7,21,0,
        0,3973,417,1,0,0,0,3974,3975,3,1414,707,0,3975,419,1,0,0,0,3976,
        3978,5,100,0,0,3977,3979,3,422,211,0,3978,3977,1,0,0,0,3978,3979,
        1,0,0,0,3979,3980,1,0,0,0,3980,3981,3,424,212,0,3981,421,1,0,0,0,
        3982,3983,5,230,0,0,3983,423,1,0,0,0,3984,3985,7,22,0,0,3985,425,
        1,0,0,0,3986,3987,5,140,0,0,3987,3988,5,2,0,0,3988,3989,3,1162,581,
        0,3989,3990,5,3,0,0,3990,427,1,0,0,0,3991,3992,7,23,0,0,3992,429,
        1,0,0,0,3993,3996,3,432,216,0,3994,3996,1,0,0,0,3995,3993,1,0,0,
        0,3995,3994,1,0,0,0,3996,4001,1,0,0,0,3997,3998,5,6,0,0,3998,4000,
        3,432,216,0,3999,3997,1,0,0,0,4000,4003,1,0,0,0,4001,3999,1,0,0,
        0,4001,4002,1,0,0,0,4002,431,1,0,0,0,4003,4001,1,0,0,0,4004,4009,
        3,1398,699,0,4005,4009,3,1396,698,0,4006,4009,3,1400,700,0,4007,
        4009,3,1420,710,0,4008,4004,1,0,0,0,4008,4005,1,0,0,0,4008,4006,
        1,0,0,0,4008,4007,1,0,0,0,4009,433,1,0,0,0,4010,4011,5,102,0,0,4011,
        4012,3,1378,689,0,4012,435,1,0,0,0,4013,4015,3,438,219,0,4014,4013,
        1,0,0,0,4015,4018,1,0,0,0,4016,4014,1,0,0,0,4016,4017,1,0,0,0,4017,
        437,1,0,0,0,4018,4016,1,0,0,0,4019,4020,5,115,0,0,4020,4031,5,92,
        0,0,4021,4031,5,92,0,0,4022,4023,5,107,0,0,4023,4031,5,259,0,0,4024,
        4025,5,107,0,0,4025,4031,5,218,0,0,4026,4027,5,115,0,0,4027,4031,
        5,402,0,0,4028,4029,5,300,0,0,4029,4031,5,266,0,0,4030,4019,1,0,
        0,0,4030,4021,1,0,0,0,4030,4022,1,0,0,0,4030,4024,1,0,0,0,4030,4026,
        1,0,0,0,4030,4028,1,0,0,0,4031,439,1,0,0,0,4032,4033,5,84,0,0,4033,
        4034,5,236,0,0,4034,4035,5,388,0,0,4035,4036,3,1382,691,0,4036,4037,
        5,118,0,0,4037,4038,3,1420,710,0,4038,4039,5,240,0,0,4039,4040,3,
        428,214,0,4040,4041,3,1388,694,0,4041,4042,5,2,0,0,4042,4043,5,3,
        0,0,4043,4059,1,0,0,0,4044,4045,5,84,0,0,4045,4046,5,236,0,0,4046,
        4047,5,388,0,0,4047,4048,3,1382,691,0,4048,4049,5,118,0,0,4049,4050,
        3,1420,710,0,4050,4051,5,140,0,0,4051,4052,3,442,221,0,4052,4053,
        5,240,0,0,4053,4054,3,428,214,0,4054,4055,3,1388,694,0,4055,4056,
        5,2,0,0,4056,4057,5,3,0,0,4057,4059,1,0,0,0,4058,4032,1,0,0,0,4058,
        4044,1,0,0,0,4059,441,1,0,0,0,4060,4065,3,444,222,0,4061,4062,5,
        71,0,0,4062,4064,3,444,222,0,4063,4061,1,0,0,0,4064,4067,1,0,0,0,
        4065,4063,1,0,0,0,4065,4066,1,0,0,0,4066,443,1,0,0,0,4067,4065,1,
        0,0,0,4068,4069,3,1414,707,0,4069,4070,5,106,0,0,4070,4071,5,2,0,
        0,4071,4072,3,446,223,0,4072,4073,5,3,0,0,4073,445,1,0,0,0,4074,
        4079,3,1400,700,0,4075,4076,5,6,0,0,4076,4078,3,1400,700,0,4077,
        4075,1,0,0,0,4078,4081,1,0,0,0,4079,4077,1,0,0,0,4079,4080,1,0,0,
        0,4080,447,1,0,0,0,4081,4079,1,0,0,0,4082,4083,5,176,0,0,4083,4084,
        5,236,0,0,4084,4085,5,388,0,0,4085,4086,3,1382,691,0,4086,4087,3,
        450,225,0,4087,449,1,0,0,0,4088,4095,5,231,0,0,4089,4090,5,231,0,
        0,4090,4095,5,343,0,0,4091,4092,5,231,0,0,4092,4095,5,177,0,0,4093,
        4095,5,224,0,0,4094,4088,1,0,0,0,4094,4089,1,0,0,0,4094,4091,1,0,
        0,0,4094,4093,1,0,0,0,4095,451,1,0,0,0,4096,4097,5,84,0,0,4097,4098,
        5,178,0,0,4098,4099,3,520,260,0,4099,4100,5,80,0,0,4100,4101,5,2,
        0,0,4101,4102,3,1162,581,0,4102,4103,5,3,0,0,4103,4104,3,436,218,
        0,4104,453,1,0,0,0,4105,4107,5,84,0,0,4106,4108,3,616,308,0,4107,
        4106,1,0,0,0,4107,4108,1,0,0,0,4108,4109,1,0,0,0,4109,4110,5,174,
        0,0,4110,4111,3,1388,694,0,4111,4112,3,644,322,0,4112,4113,3,456,
        228,0,4113,4220,1,0,0,0,4114,4116,5,84,0,0,4115,4117,3,616,308,0,
        4116,4115,1,0,0,0,4116,4117,1,0,0,0,4117,4118,1,0,0,0,4118,4119,
        5,174,0,0,4119,4120,3,1388,694,0,4120,4121,3,464,232,0,4121,4220,
        1,0,0,0,4122,4123,5,84,0,0,4123,4124,5,309,0,0,4124,4125,3,682,341,
        0,4125,4126,3,456,228,0,4126,4220,1,0,0,0,4127,4128,5,84,0,0,4128,
        4129,5,391,0,0,4129,4130,3,520,260,0,4130,4131,3,456,228,0,4131,
        4220,1,0,0,0,4132,4133,5,84,0,0,4133,4134,5,391,0,0,4134,4220,3,
        520,260,0,4135,4136,5,84,0,0,4136,4137,5,391,0,0,4137,4138,3,520,
        260,0,4138,4139,5,74,0,0,4139,4141,5,2,0,0,4140,4142,3,1096,548,
        0,4141,4140,1,0,0,0,4141,4142,1,0,0,0,4142,4143,1,0,0,0,4143,4144,
        5,3,0,0,4144,4220,1,0,0,0,4145,4146,5,84,0,0,4146,4147,5,391,0,0,
        4147,4148,3,520,260,0,4148,4149,5,74,0,0,4149,4150,5,234,0,0,4150,
        4152,5,2,0,0,4151,4153,3,470,235,0,4152,4151,1,0,0,0,4152,4153,1,
        0,0,0,4153,4154,1,0,0,0,4154,4155,5,3,0,0,4155,4220,1,0,0,0,4156,
        4157,5,84,0,0,4157,4158,5,391,0,0,4158,4159,3,520,260,0,4159,4160,
        5,74,0,0,4160,4161,5,330,0,0,4161,4162,3,456,228,0,4162,4220,1,0,
        0,0,4163,4164,5,84,0,0,4164,4165,5,386,0,0,4165,4166,5,356,0,0,4166,
        4167,5,314,0,0,4167,4168,3,520,260,0,4168,4169,3,456,228,0,4169,
        4220,1,0,0,0,4170,4171,5,84,0,0,4171,4172,5,386,0,0,4172,4173,5,
        356,0,0,4173,4174,5,223,0,0,4174,4175,3,520,260,0,4175,4176,3,456,
        228,0,4176,4220,1,0,0,0,4177,4178,5,84,0,0,4178,4179,5,386,0,0,4179,
        4180,5,356,0,0,4180,4181,5,384,0,0,4181,4182,3,520,260,0,4182,4183,
        3,456,228,0,4183,4220,1,0,0,0,4184,4185,5,84,0,0,4185,4186,5,386,
        0,0,4186,4187,5,356,0,0,4187,4188,5,201,0,0,4188,4189,3,520,260,
        0,4189,4190,3,456,228,0,4190,4220,1,0,0,0,4191,4192,5,84,0,0,4192,
        4193,5,146,0,0,4193,4194,3,520,260,0,4194,4195,3,456,228,0,4195,
        4220,1,0,0,0,4196,4197,5,84,0,0,4197,4198,5,146,0,0,4198,4199,5,
        258,0,0,4199,4200,5,115,0,0,4200,4201,5,427,0,0,4201,4202,3,520,
        260,0,4202,4203,3,456,228,0,4203,4220,1,0,0,0,4204,4205,5,84,0,0,
        4205,4206,5,146,0,0,4206,4207,3,520,260,0,4207,4208,5,102,0,0,4208,
        4209,3,520,260,0,4209,4220,1,0,0,0,4210,4211,5,84,0,0,4211,4212,
        5,146,0,0,4212,4213,5,258,0,0,4213,4214,5,115,0,0,4214,4215,5,427,
        0,0,4215,4216,3,520,260,0,4216,4217,5,102,0,0,4217,4218,3,520,260,
        0,4218,4220,1,0,0,0,4219,4105,1,0,0,0,4219,4114,1,0,0,0,4219,4122,
        1,0,0,0,4219,4127,1,0,0,0,4219,4132,1,0,0,0,4219,4135,1,0,0,0,4219,
        4145,1,0,0,0,4219,4156,1,0,0,0,4219,4163,1,0,0,0,4219,4170,1,0,0,
        0,4219,4177,1,0,0,0,4219,4184,1,0,0,0,4219,4191,1,0,0,0,4219,4196,
        1,0,0,0,4219,4204,1,0,0,0,4219,4210,1,0,0,0,4220,455,1,0,0,0,4221,
        4222,5,2,0,0,4222,4223,3,458,229,0,4223,4224,5,3,0,0,4224,457,1,
        0,0,0,4225,4230,3,460,230,0,4226,4227,5,6,0,0,4227,4229,3,460,230,
        0,4228,4226,1,0,0,0,4229,4232,1,0,0,0,4230,4228,1,0,0,0,4230,4231,
        1,0,0,0,4231,459,1,0,0,0,4232,4230,1,0,0,0,4233,4236,3,1420,710,
        0,4234,4235,5,10,0,0,4235,4237,3,462,231,0,4236,4234,1,0,0,0,4236,
        4237,1,0,0,0,4237,461,1,0,0,0,4238,4245,3,638,319,0,4239,4245,3,
        1430,715,0,4240,4245,3,1276,638,0,4241,4245,3,288,144,0,4242,4245,
        3,1400,700,0,4243,4245,5,438,0,0,4244,4238,1,0,0,0,4244,4239,1,0,
        0,0,4244,4240,1,0,0,0,4244,4241,1,0,0,0,4244,4242,1,0,0,0,4244,4243,
        1,0,0,0,4245,463,1,0,0,0,4246,4247,5,2,0,0,4247,4248,3,466,233,0,
        4248,4249,5,3,0,0,4249,465,1,0,0,0,4250,4255,3,468,234,0,4251,4252,
        5,6,0,0,4252,4254,3,468,234,0,4253,4251,1,0,0,0,4254,4257,1,0,0,
        0,4255,4253,1,0,0,0,4255,4256,1,0,0,0,4256,467,1,0,0,0,4257,4255,
        1,0,0,0,4258,4259,3,1436,718,0,4259,4260,5,10,0,0,4260,4261,3,462,
        231,0,4261,469,1,0,0,0,4262,4263,3,472,236,0,4263,471,1,0,0,0,4264,
        4269,3,1400,700,0,4265,4266,5,6,0,0,4266,4268,3,1400,700,0,4267,
        4265,1,0,0,0,4268,4271,1,0,0,0,4269,4267,1,0,0,0,4269,4270,1,0,0,
        0,4270,473,1,0,0,0,4271,4269,1,0,0,0,4272,4273,5,176,0,0,4273,4274,
        5,391,0,0,4274,4275,3,520,260,0,4275,4276,5,171,0,0,4276,4278,5,
        488,0,0,4277,4279,3,476,238,0,4278,4277,1,0,0,0,4278,4279,1,0,0,
        0,4279,4280,1,0,0,0,4280,4281,3,1400,700,0,4281,4316,1,0,0,0,4282,
        4283,5,176,0,0,4283,4284,5,391,0,0,4284,4285,3,520,260,0,4285,4286,
        5,171,0,0,4286,4288,5,488,0,0,4287,4289,3,476,238,0,4288,4287,1,
        0,0,0,4288,4289,1,0,0,0,4289,4290,1,0,0,0,4290,4291,3,1400,700,0,
        4291,4292,5,183,0,0,4292,4293,3,1400,700,0,4293,4316,1,0,0,0,4294,
        4295,5,176,0,0,4295,4296,5,391,0,0,4296,4297,3,520,260,0,4297,4298,
        5,171,0,0,4298,4300,5,488,0,0,4299,4301,3,476,238,0,4300,4299,1,
        0,0,0,4300,4301,1,0,0,0,4301,4302,1,0,0,0,4302,4303,3,1400,700,0,
        4303,4304,5,173,0,0,4304,4305,3,1400,700,0,4305,4316,1,0,0,0,4306,
        4307,5,176,0,0,4307,4308,5,391,0,0,4308,4309,3,520,260,0,4309,4310,
        5,340,0,0,4310,4311,5,488,0,0,4311,4312,3,1400,700,0,4312,4313,5,
        132,0,0,4313,4314,3,1400,700,0,4314,4316,1,0,0,0,4315,4272,1,0,0,
        0,4315,4282,1,0,0,0,4315,4294,1,0,0,0,4315,4306,1,0,0,0,4316,475,
        1,0,0,0,4317,4318,5,258,0,0,4318,4319,5,115,0,0,4319,4320,5,427,
        0,0,4320,477,1,0,0,0,4321,4322,5,84,0,0,4322,4323,5,309,0,0,4323,
        4324,5,194,0,0,4324,4326,3,520,260,0,4325,4327,3,484,242,0,4326,
        4325,1,0,0,0,4326,4327,1,0,0,0,4327,4328,1,0,0,0,4328,4329,5,100,
        0,0,4329,4330,5,391,0,0,4330,4331,3,1116,558,0,4331,4332,5,138,0,
        0,4332,4334,3,1382,691,0,4333,4335,3,486,243,0,4334,4333,1,0,0,0,
        4334,4335,1,0,0,0,4335,4336,1,0,0,0,4336,4337,5,74,0,0,4337,4338,
        3,480,240,0,4338,479,1,0,0,0,4339,4344,3,482,241,0,4340,4341,5,6,
        0,0,4341,4343,3,482,241,0,4342,4340,1,0,0,0,4343,4346,1,0,0,0,4344,
        4342,1,0,0,0,4344,4345,1,0,0,0,4345,481,1,0,0,0,4346,4344,1,0,0,
        0,4347,4348,5,309,0,0,4348,4349,3,1398,699,0,4349,4351,3,682,341,
        0,4350,4352,3,488,244,0,4351,4350,1,0,0,0,4351,4352,1,0,0,0,4352,
        4354,1,0,0,0,4353,4355,3,490,245,0,4354,4353,1,0,0,0,4354,4355,1,
        0,0,0,4355,4379,1,0,0,0,4356,4357,5,309,0,0,4357,4358,3,1398,699,
        0,4358,4360,3,686,343,0,4359,4361,3,488,244,0,4360,4359,1,0,0,0,
        4360,4361,1,0,0,0,4361,4363,1,0,0,0,4362,4364,3,490,245,0,4363,4362,
        1,0,0,0,4363,4364,1,0,0,0,4364,4379,1,0,0,0,4365,4366,5,249,0,0,
        4366,4367,3,1398,699,0,4367,4368,3,624,312,0,4368,4379,1,0,0,0,4369,
        4370,5,249,0,0,4370,4371,3,1398,699,0,4371,4372,5,2,0,0,4372,4373,
        3,1286,643,0,4373,4374,5,3,0,0,4374,4375,3,624,312,0,4375,4379,1,
        0,0,0,4376,4377,5,376,0,0,4377,4379,3,1116,558,0,4378,4347,1,0,0,
        0,4378,4356,1,0,0,0,4378,4365,1,0,0,0,4378,4369,1,0,0,0,4378,4376,
        1,0,0,0,4379,483,1,0,0,0,4380,4381,5,91,0,0,4381,485,1,0,0,0,4382,
        4383,5,244,0,0,4383,4384,3,520,260,0,4384,487,1,0,0,0,4385,4386,
        5,100,0,0,4386,4392,5,356,0,0,4387,4388,5,100,0,0,4388,4389,5,121,
        0,0,4389,4390,5,185,0,0,4390,4392,3,520,260,0,4391,4385,1,0,0,0,
        4391,4387,1,0,0,0,4392,489,1,0,0,0,4393,4394,5,333,0,0,4394,491,
        1,0,0,0,4395,4396,5,84,0,0,4396,4397,5,309,0,0,4397,4398,5,244,0,
        0,4398,4399,3,520,260,0,4399,4400,5,138,0,0,4400,4401,3,1382,691,
        0,4401,493,1,0,0,0,4402,4403,5,176,0,0,4403,4404,5,309,0,0,4404,
        4405,5,244,0,0,4405,4406,3,520,260,0,4406,4407,5,138,0,0,4407,4408,
        3,1382,691,0,4408,4409,5,171,0,0,4409,4410,3,480,240,0,4410,4421,
        1,0,0,0,4411,4412,5,176,0,0,4412,4413,5,309,0,0,4413,4414,5,244,
        0,0,4414,4415,3,520,260,0,4415,4416,5,138,0,0,4416,4417,3,1382,691,
        0,4417,4418,5,229,0,0,4418,4419,3,496,248,0,4419,4421,1,0,0,0,4420,
        4402,1,0,0,0,4420,4411,1,0,0,0,4421,495,1,0,0,0,4422,4427,3,498,
        249,0,4423,4424,5,6,0,0,4424,4426,3,498,249,0,4425,4423,1,0,0,0,
        4426,4429,1,0,0,0,4427,4425,1,0,0,0,4427,4428,1,0,0,0,4428,497,1,
        0,0,0,4429,4427,1,0,0,0,4430,4431,5,309,0,0,4431,4432,3,1398,699,
        0,4432,4433,5,2,0,0,4433,4434,3,1286,643,0,4434,4435,5,3,0,0,4435,
        4443,1,0,0,0,4436,4437,5,249,0,0,4437,4438,3,1398,699,0,4438,4439,
        5,2,0,0,4439,4440,3,1286,643,0,4440,4441,5,3,0,0,4441,4443,1,0,0,
        0,4442,4430,1,0,0,0,4442,4436,1,0,0,0,4443,499,1,0,0,0,4444,4445,
        5,229,0,0,4445,4446,5,309,0,0,4446,4447,5,194,0,0,4447,4448,3,520,
        260,0,4448,4449,5,138,0,0,4449,4451,3,1382,691,0,4450,4452,3,104,
        52,0,4451,4450,1,0,0,0,4451,4452,1,0,0,0,4452,4465,1,0,0,0,4453,
        4454,5,229,0,0,4454,4455,5,309,0,0,4455,4456,5,194,0,0,4456,4457,
        5,258,0,0,4457,4458,5,427,0,0,4458,4459,3,520,260,0,4459,4460,5,
        138,0,0,4460,4462,3,1382,691,0,4461,4463,3,104,52,0,4462,4461,1,
        0,0,0,4462,4463,1,0,0,0,4463,4465,1,0,0,0,4464,4444,1,0,0,0,4464,
        4453,1,0,0,0,4465,501,1,0,0,0,4466,4467,5,229,0,0,4467,4468,5,309,
        0,0,4468,4469,5,244,0,0,4469,4470,3,520,260,0,4470,4471,5,138,0,
        0,4471,4473,3,1382,691,0,4472,4474,3,104,52,0,4473,4472,1,0,0,0,
        4473,4474,1,0,0,0,4474,4487,1,0,0,0,4475,4476,5,229,0,0,4476,4477,
        5,309,0,0,4477,4478,5,244,0,0,4478,4479,5,258,0,0,4479,4480,5,427,
        0,0,4480,4481,3,520,260,0,4481,4482,5,138,0,0,4482,4484,3,1382,691,
        0,4483,4485,3,104,52,0,4484,4483,1,0,0,0,4484,4485,1,0,0,0,4485,
        4487,1,0,0,0,4486,4466,1,0,0,0,4486,4475,1,0,0,0,4487,503,1,0,0,
        0,4488,4489,5,229,0,0,4489,4490,5,312,0,0,4490,4491,5,185,0,0,4491,
        4493,3,1412,706,0,4492,4494,3,104,52,0,4493,4492,1,0,0,0,4493,4494,
        1,0,0,0,4494,505,1,0,0,0,4495,4496,5,332,0,0,4496,4497,5,312,0,0,
        4497,4498,5,185,0,0,4498,4499,3,1412,706,0,4499,4500,5,132,0,0,4500,
        4501,3,1410,705,0,4501,507,1,0,0,0,4502,4503,5,229,0,0,4503,4504,
        3,510,255,0,4504,4505,5,258,0,0,4505,4506,5,427,0,0,4506,4508,3,
        518,259,0,4507,4509,3,104,52,0,4508,4507,1,0,0,0,4508,4509,1,0,0,
        0,4509,4593,1,0,0,0,4510,4511,5,229,0,0,4511,4512,3,510,255,0,4512,
        4514,3,518,259,0,4513,4515,3,104,52,0,4514,4513,1,0,0,0,4514,4515,
        1,0,0,0,4515,4593,1,0,0,0,4516,4517,5,229,0,0,4517,4518,3,514,257,
        0,4518,4519,5,258,0,0,4519,4520,5,427,0,0,4520,4522,3,1380,690,0,
        4521,4523,3,104,52,0,4522,4521,1,0,0,0,4522,4523,1,0,0,0,4523,4593,
        1,0,0,0,4524,4525,5,229,0,0,4525,4526,3,514,257,0,4526,4528,3,1380,
        690,0,4527,4529,3,104,52,0,4528,4527,1,0,0,0,4528,4529,1,0,0,0,4529,
        4593,1,0,0,0,4530,4531,5,229,0,0,4531,4532,3,516,258,0,4532,4533,
        3,1382,691,0,4533,4534,5,118,0,0,4534,4536,3,520,260,0,4535,4537,
        3,104,52,0,4536,4535,1,0,0,0,4536,4537,1,0,0,0,4537,4593,1,0,0,0,
        4538,4539,5,229,0,0,4539,4540,3,516,258,0,4540,4541,5,258,0,0,4541,
        4542,5,427,0,0,4542,4543,3,1382,691,0,4543,4544,5,118,0,0,4544,4546,
        3,520,260,0,4545,4547,3,104,52,0,4546,4545,1,0,0,0,4546,4547,1,0,
        0,0,4547,4593,1,0,0,0,4548,4549,5,229,0,0,4549,4550,5,391,0,0,4550,
        4552,3,524,262,0,4551,4553,3,104,52,0,4552,4551,1,0,0,0,4552,4553,
        1,0,0,0,4553,4593,1,0,0,0,4554,4555,5,229,0,0,4555,4556,5,391,0,
        0,4556,4557,5,258,0,0,4557,4558,5,427,0,0,4558,4560,3,524,262,0,
        4559,4561,3,104,52,0,4560,4559,1,0,0,0,4560,4561,1,0,0,0,4561,4593,
        1,0,0,0,4562,4563,5,229,0,0,4563,4564,5,227,0,0,4564,4566,3,524,
        262,0,4565,4567,3,104,52,0,4566,4565,1,0,0,0,4566,4567,1,0,0,0,4567,
        4593,1,0,0,0,4568,4569,5,229,0,0,4569,4570,5,227,0,0,4570,4571,5,
        258,0,0,4571,4572,5,427,0,0,4572,4574,3,524,262,0,4573,4575,3,104,
        52,0,4574,4573,1,0,0,0,4574,4575,1,0,0,0,4575,4593,1,0,0,0,4576,
        4577,5,229,0,0,4577,4578,5,264,0,0,4578,4579,5,147,0,0,4579,4581,
        3,518,259,0,4580,4582,3,104,52,0,4581,4580,1,0,0,0,4581,4582,1,0,
        0,0,4582,4593,1,0,0,0,4583,4584,5,229,0,0,4584,4585,5,264,0,0,4585,
        4586,5,147,0,0,4586,4587,5,258,0,0,4587,4588,5,427,0,0,4588,4590,
        3,518,259,0,4589,4591,3,104,52,0,4590,4589,1,0,0,0,4590,4591,1,0,
        0,0,4591,4593,1,0,0,0,4592,4502,1,0,0,0,4592,4510,1,0,0,0,4592,4516,
        1,0,0,0,4592,4524,1,0,0,0,4592,4530,1,0,0,0,4592,4538,1,0,0,0,4592,
        4548,1,0,0,0,4592,4554,1,0,0,0,4592,4562,1,0,0,0,4592,4568,1,0,0,
        0,4592,4576,1,0,0,0,4592,4583,1,0,0,0,4593,509,1,0,0,0,4594,4618,
        5,130,0,0,4595,4618,5,359,0,0,4596,4618,5,407,0,0,4597,4598,5,289,
        0,0,4598,4618,5,407,0,0,4599,4618,5,264,0,0,4600,4601,5,101,0,0,
        4601,4618,5,130,0,0,4602,4618,5,146,0,0,4603,4618,5,206,0,0,4604,
        4618,5,373,0,0,4605,4606,5,386,0,0,4606,4607,5,356,0,0,4607,4618,
        5,314,0,0,4608,4609,5,386,0,0,4609,4610,5,356,0,0,4610,4618,5,223,
        0,0,4611,4612,5,386,0,0,4612,4613,5,356,0,0,4613,4618,5,384,0,0,
        4614,4615,5,386,0,0,4615,4616,5,356,0,0,4616,4618,5,201,0,0,4617,
        4594,1,0,0,0,4617,4595,1,0,0,0,4617,4596,1,0,0,0,4617,4597,1,0,0,
        0,4617,4599,1,0,0,0,4617,4600,1,0,0,0,4617,4602,1,0,0,0,4617,4603,
        1,0,0,0,4617,4604,1,0,0,0,4617,4605,1,0,0,0,4617,4608,1,0,0,0,4617,
        4611,1,0,0,0,4617,4614,1,0,0,0,4618,511,1,0,0,0,4619,4625,3,514,
        257,0,4620,4625,5,213,0,0,4621,4625,5,349,0,0,4622,4625,5,489,0,
        0,4623,4625,5,382,0,0,4624,4619,1,0,0,0,4624,4620,1,0,0,0,4624,4621,
        1,0,0,0,4624,4622,1,0,0,0,4624,4623,1,0,0,0,4625,513,1,0,0,0,4626,
        4627,5,169,0,0,4627,4642,5,484,0,0,4628,4629,5,236,0,0,4629,4642,
        5,388,0,0,4630,4642,5,242,0,0,4631,4632,5,101,0,0,4632,4633,5,212,
        0,0,4633,4642,5,412,0,0,4634,4636,3,304,152,0,4635,4634,1,0,0,0,
        4635,4636,1,0,0,0,4636,4637,1,0,0,0,4637,4642,5,276,0,0,4638,4642,
        5,490,0,0,4639,4642,5,354,0,0,4640,4642,5,362,0,0,4641,4626,1,0,
        0,0,4641,4628,1,0,0,0,4641,4630,1,0,0,0,4641,4631,1,0,0,0,4641,4635,
        1,0,0,0,4641,4638,1,0,0,0,4641,4639,1,0,0,0,4641,4640,1,0,0,0,4642,
        515,1,0,0,0,4643,4644,7,24,0,0,4644,517,1,0,0,0,4645,4650,3,520,
        260,0,4646,4647,5,6,0,0,4647,4649,3,520,260,0,4648,4646,1,0,0,0,
        4649,4652,1,0,0,0,4650,4648,1,0,0,0,4650,4651,1,0,0,0,4651,519,1,
        0,0,0,4652,4650,1,0,0,0,4653,4655,3,1414,707,0,4654,4656,3,522,261,
        0,4655,4654,1,0,0,0,4655,4656,1,0,0,0,4656,521,1,0,0,0,4657,4658,
        5,11,0,0,4658,4660,3,1384,692,0,4659,4657,1,0,0,0,4660,4661,1,0,
        0,0,4661,4659,1,0,0,0,4661,4662,1,0,0,0,4662,523,1,0,0,0,4663,4668,
        3,1116,558,0,4664,4665,5,6,0,0,4665,4667,3,1116,558,0,4666,4664,
        1,0,0,0,4667,4670,1,0,0,0,4668,4666,1,0,0,0,4668,4669,1,0,0,0,4669,
        525,1,0,0,0,4670,4668,1,0,0,0,4671,4673,5,389,0,0,4672,4674,3,992,
        496,0,4673,4672,1,0,0,0,4673,4674,1,0,0,0,4674,4675,1,0,0,0,4675,
        4677,3,1074,537,0,4676,4678,3,528,264,0,4677,4676,1,0,0,0,4677,4678,
        1,0,0,0,4678,4680,1,0,0,0,4679,4681,3,104,52,0,4680,4679,1,0,0,0,
        4680,4681,1,0,0,0,4681,527,1,0,0,0,4682,4683,5,205,0,0,4683,4687,
        5,257,0,0,4684,4685,5,345,0,0,4685,4687,5,257,0,0,4686,4682,1,0,
        0,0,4686,4684,1,0,0,0,4687,529,1,0,0,0,4688,4689,5,197,0,0,4689,
        4690,5,118,0,0,4690,4691,3,510,255,0,4691,4692,3,520,260,0,4692,
        4693,5,154,0,0,4693,4694,3,532,266,0,4694,4836,1,0,0,0,4695,4696,
        5,197,0,0,4696,4697,5,118,0,0,4697,4698,5,82,0,0,4698,4699,3,520,
        260,0,4699,4700,5,154,0,0,4700,4701,3,532,266,0,4701,4836,1,0,0,
        0,4702,4703,5,197,0,0,4703,4704,5,118,0,0,4704,4705,3,512,256,0,
        4705,4706,3,1382,691,0,4706,4707,5,154,0,0,4707,4708,3,532,266,0,
        4708,4836,1,0,0,0,4709,4710,5,197,0,0,4710,4711,5,118,0,0,4711,4712,
        5,391,0,0,4712,4713,3,1116,558,0,4713,4714,5,154,0,0,4714,4715,3,
        532,266,0,4715,4836,1,0,0,0,4716,4717,5,197,0,0,4717,4718,5,118,
        0,0,4718,4719,5,227,0,0,4719,4720,3,1116,558,0,4720,4721,5,154,0,
        0,4721,4722,3,532,266,0,4722,4836,1,0,0,0,4723,4724,5,197,0,0,4724,
        4725,5,118,0,0,4725,4726,5,174,0,0,4726,4727,3,648,324,0,4727,4728,
        5,154,0,0,4728,4729,3,532,266,0,4729,4836,1,0,0,0,4730,4731,5,197,
        0,0,4731,4732,5,118,0,0,4732,4733,5,249,0,0,4733,4734,3,624,312,
        0,4734,4735,5,154,0,0,4735,4736,3,532,266,0,4736,4836,1,0,0,0,4737,
        4738,5,197,0,0,4738,4739,5,118,0,0,4739,4740,5,309,0,0,4740,4741,
        3,686,343,0,4741,4742,5,154,0,0,4742,4743,3,532,266,0,4743,4836,
        1,0,0,0,4744,4745,5,197,0,0,4745,4746,5,118,0,0,4746,4747,5,83,0,
        0,4747,4748,3,1382,691,0,4748,4749,5,118,0,0,4749,4750,3,520,260,
        0,4750,4751,5,154,0,0,4751,4752,3,532,266,0,4752,4836,1,0,0,0,4753,
        4754,5,197,0,0,4754,4755,5,118,0,0,4755,4756,5,83,0,0,4756,4757,
        3,1382,691,0,4757,4758,5,118,0,0,4758,4759,5,227,0,0,4759,4760,3,
        520,260,0,4760,4761,5,154,0,0,4761,4762,3,532,266,0,4762,4836,1,
        0,0,0,4763,4764,5,197,0,0,4764,4765,5,118,0,0,4765,4766,3,516,258,
        0,4766,4767,3,1382,691,0,4767,4768,5,118,0,0,4768,4769,3,520,260,
        0,4769,4770,5,154,0,0,4770,4771,3,532,266,0,4771,4836,1,0,0,0,4772,
        4773,5,197,0,0,4773,4774,5,118,0,0,4774,4775,5,327,0,0,4775,4776,
        3,624,312,0,4776,4777,5,154,0,0,4777,4778,3,532,266,0,4778,4836,
        1,0,0,0,4779,4780,5,197,0,0,4780,4781,5,118,0,0,4781,4782,5,480,
        0,0,4782,4783,3,624,312,0,4783,4784,5,154,0,0,4784,4785,3,532,266,
        0,4785,4836,1,0,0,0,4786,4787,5,197,0,0,4787,4788,5,118,0,0,4788,
        4789,5,481,0,0,4789,4790,5,100,0,0,4790,4791,3,1116,558,0,4791,4792,
        5,276,0,0,4792,4793,3,1382,691,0,4793,4794,5,154,0,0,4794,4795,3,
        532,266,0,4795,4836,1,0,0,0,4796,4797,5,197,0,0,4797,4798,5,118,
        0,0,4798,4799,5,309,0,0,4799,4800,5,194,0,0,4800,4801,3,520,260,
        0,4801,4802,5,138,0,0,4802,4803,3,1382,691,0,4803,4804,5,154,0,0,
        4804,4805,3,532,266,0,4805,4836,1,0,0,0,4806,4807,5,197,0,0,4807,
        4808,5,118,0,0,4808,4809,5,309,0,0,4809,4810,5,244,0,0,4810,4811,
        3,520,260,0,4811,4812,5,138,0,0,4812,4813,3,1382,691,0,4813,4814,
        5,154,0,0,4814,4815,3,532,266,0,4815,4836,1,0,0,0,4816,4817,5,197,
        0,0,4817,4818,5,118,0,0,4818,4819,5,277,0,0,4819,4820,5,305,0,0,
        4820,4821,3,288,144,0,4821,4822,5,154,0,0,4822,4823,3,532,266,0,
        4823,4836,1,0,0,0,4824,4825,5,197,0,0,4825,4826,5,118,0,0,4826,4827,
        5,79,0,0,4827,4828,5,2,0,0,4828,4829,3,1116,558,0,4829,4830,5,74,
        0,0,4830,4831,3,1116,558,0,4831,4832,5,3,0,0,4832,4833,5,154,0,0,
        4833,4834,3,532,266,0,4834,4836,1,0,0,0,4835,4688,1,0,0,0,4835,4695,
        1,0,0,0,4835,4702,1,0,0,0,4835,4709,1,0,0,0,4835,4716,1,0,0,0,4835,
        4723,1,0,0,0,4835,4730,1,0,0,0,4835,4737,1,0,0,0,4835,4744,1,0,0,
        0,4835,4753,1,0,0,0,4835,4763,1,0,0,0,4835,4772,1,0,0,0,4835,4779,
        1,0,0,0,4835,4786,1,0,0,0,4835,4796,1,0,0,0,4835,4806,1,0,0,0,4835,
        4816,1,0,0,0,4835,4824,1,0,0,0,4836,531,1,0,0,0,4837,4840,3,1400,
        700,0,4838,4840,5,116,0,0,4839,4837,1,0,0,0,4839,4838,1,0,0,0,4840,
        533,1,0,0,0,4841,4842,5,358,0,0,4842,4844,5,275,0,0,4843,4845,3,
        536,268,0,4844,4843,1,0,0,0,4844,4845,1,0,0,0,4845,4846,1,0,0,0,
        4846,4847,5,118,0,0,4847,4848,3,510,255,0,4848,4849,3,520,260,0,
        4849,4850,5,154,0,0,4850,4851,3,538,269,0,4851,4953,1,0,0,0,4852,
        4853,5,358,0,0,4853,4855,5,275,0,0,4854,4856,3,536,268,0,4855,4854,
        1,0,0,0,4855,4856,1,0,0,0,4856,4857,1,0,0,0,4857,4858,5,118,0,0,
        4858,4859,5,82,0,0,4859,4860,3,520,260,0,4860,4861,5,154,0,0,4861,
        4862,3,538,269,0,4862,4953,1,0,0,0,4863,4864,5,358,0,0,4864,4866,
        5,275,0,0,4865,4867,3,536,268,0,4866,4865,1,0,0,0,4866,4867,1,0,
        0,0,4867,4868,1,0,0,0,4868,4869,5,118,0,0,4869,4870,3,512,256,0,
        4870,4871,3,1382,691,0,4871,4872,5,154,0,0,4872,4873,3,538,269,0,
        4873,4953,1,0,0,0,4874,4875,5,358,0,0,4875,4877,5,275,0,0,4876,4878,
        3,536,268,0,4877,4876,1,0,0,0,4877,4878,1,0,0,0,4878,4879,1,0,0,
        0,4879,4880,5,118,0,0,4880,4881,5,391,0,0,4881,4882,3,1116,558,0,
        4882,4883,5,154,0,0,4883,4884,3,538,269,0,4884,4953,1,0,0,0,4885,
        4886,5,358,0,0,4886,4888,5,275,0,0,4887,4889,3,536,268,0,4888,4887,
        1,0,0,0,4888,4889,1,0,0,0,4889,4890,1,0,0,0,4890,4891,5,118,0,0,
        4891,4892,5,227,0,0,4892,4893,3,1116,558,0,4893,4894,5,154,0,0,4894,
        4895,3,538,269,0,4895,4953,1,0,0,0,4896,4897,5,358,0,0,4897,4899,
        5,275,0,0,4898,4900,3,536,268,0,4899,4898,1,0,0,0,4899,4900,1,0,
        0,0,4900,4901,1,0,0,0,4901,4902,5,118,0,0,4902,4903,5,174,0,0,4903,
        4904,3,648,324,0,4904,4905,5,154,0,0,4905,4906,3,538,269,0,4906,
        4953,1,0,0,0,4907,4908,5,358,0,0,4908,4910,5,275,0,0,4909,4911,3,
        536,268,0,4910,4909,1,0,0,0,4910,4911,1,0,0,0,4911,4912,1,0,0,0,
        4912,4913,5,118,0,0,4913,4914,5,249,0,0,4914,4915,3,624,312,0,4915,
        4916,5,154,0,0,4916,4917,3,538,269,0,4917,4953,1,0,0,0,4918,4919,
        5,358,0,0,4919,4921,5,275,0,0,4920,4922,3,536,268,0,4921,4920,1,
        0,0,0,4921,4922,1,0,0,0,4922,4923,1,0,0,0,4923,4924,5,118,0,0,4924,
        4925,5,277,0,0,4925,4926,5,305,0,0,4926,4927,3,288,144,0,4927,4928,
        5,154,0,0,4928,4929,3,538,269,0,4929,4953,1,0,0,0,4930,4931,5,358,
        0,0,4931,4933,5,275,0,0,4932,4934,3,536,268,0,4933,4932,1,0,0,0,
        4933,4934,1,0,0,0,4934,4935,1,0,0,0,4935,4936,5,118,0,0,4936,4937,
        5,327,0,0,4937,4938,3,624,312,0,4938,4939,5,154,0,0,4939,4940,3,
        538,269,0,4940,4953,1,0,0,0,4941,4942,5,358,0,0,4942,4944,5,275,
        0,0,4943,4945,3,536,268,0,4944,4943,1,0,0,0,4944,4945,1,0,0,0,4945,
        4946,1,0,0,0,4946,4947,5,118,0,0,4947,4948,5,480,0,0,4948,4949,3,
        624,312,0,4949,4950,5,154,0,0,4950,4951,3,538,269,0,4951,4953,1,
        0,0,0,4952,4841,1,0,0,0,4952,4852,1,0,0,0,4952,4863,1,0,0,0,4952,
        4874,1,0,0,0,4952,4885,1,0,0,0,4952,4896,1,0,0,0,4952,4907,1,0,0,
        0,4952,4918,1,0,0,0,4952,4930,1,0,0,0,4952,4941,1,0,0,0,4953,535,
        1,0,0,0,4954,4955,5,100,0,0,4955,4956,3,68,34,0,4956,537,1,0,0,0,
        4957,4960,3,1400,700,0,4958,4960,5,116,0,0,4959,4957,1,0,0,0,4959,
        4958,1,0,0,0,4960,539,1,0,0,0,4961,4962,5,99,0,0,4962,4966,3,542,
        271,0,4963,4964,5,296,0,0,4964,4966,3,542,271,0,4965,4961,1,0,0,
        0,4965,4963,1,0,0,0,4966,541,1,0,0,0,4967,5053,3,958,479,0,4968,
        4969,3,544,272,0,4969,4970,3,958,479,0,4970,5053,1,0,0,0,4971,4973,
        5,299,0,0,4972,4974,3,546,273,0,4973,4972,1,0,0,0,4973,4974,1,0,
        0,0,4974,4975,1,0,0,0,4975,5053,3,958,479,0,4976,4978,5,324,0,0,
        4977,4979,3,546,273,0,4978,4977,1,0,0,0,4978,4979,1,0,0,0,4979,4980,
        1,0,0,0,4980,5053,3,958,479,0,4981,4983,5,245,0,0,4982,4984,3,546,
        273,0,4983,4982,1,0,0,0,4983,4984,1,0,0,0,4984,4985,1,0,0,0,4985,
        5053,3,958,479,0,4986,4988,5,278,0,0,4987,4989,3,546,273,0,4988,
        4987,1,0,0,0,4988,4989,1,0,0,0,4989,4990,1,0,0,0,4990,5053,3,958,
        479,0,4991,4992,5,168,0,0,4992,4994,3,1406,703,0,4993,4995,3,546,
        273,0,4994,4993,1,0,0,0,4994,4995,1,0,0,0,4995,4996,1,0,0,0,4996,
        4997,3,958,479,0,4997,5053,1,0,0,0,4998,4999,5,338,0,0,4999,5001,
        3,1406,703,0,5000,5002,3,546,273,0,5001,5000,1,0,0,0,5001,5002,1,
        0,0,0,5002,5003,1,0,0,0,5003,5004,3,958,479,0,5004,5053,1,0,0,0,
        5005,5007,3,1406,703,0,5006,5008,3,546,273,0,5007,5006,1,0,0,0,5007,
        5008,1,0,0,0,5008,5009,1,0,0,0,5009,5010,3,958,479,0,5010,5053,1,
        0,0,0,5011,5013,5,68,0,0,5012,5014,3,546,273,0,5013,5012,1,0,0,0,
        5013,5014,1,0,0,0,5014,5015,1,0,0,0,5015,5053,3,958,479,0,5016,5018,
        5,248,0,0,5017,5019,3,546,273,0,5018,5017,1,0,0,0,5018,5019,1,0,
        0,0,5019,5020,1,0,0,0,5020,5053,3,958,479,0,5021,5022,5,248,0,0,
        5022,5024,3,1406,703,0,5023,5025,3,546,273,0,5024,5023,1,0,0,0,5024,
        5025,1,0,0,0,5025,5026,1,0,0,0,5026,5027,3,958,479,0,5027,5053,1,
        0,0,0,5028,5029,5,248,0,0,5029,5031,5,68,0,0,5030,5032,3,546,273,
        0,5031,5030,1,0,0,0,5031,5032,1,0,0,0,5032,5033,1,0,0,0,5033,5053,
        3,958,479,0,5034,5036,5,182,0,0,5035,5037,3,546,273,0,5036,5035,
        1,0,0,0,5036,5037,1,0,0,0,5037,5038,1,0,0,0,5038,5053,3,958,479,
        0,5039,5040,5,182,0,0,5040,5042,3,1406,703,0,5041,5043,3,546,273,
        0,5042,5041,1,0,0,0,5042,5043,1,0,0,0,5043,5044,1,0,0,0,5044,5045,
        3,958,479,0,5045,5053,1,0,0,0,5046,5047,5,182,0,0,5047,5049,5,68,
        0,0,5048,5050,3,546,273,0,5049,5048,1,0,0,0,5049,5050,1,0,0,0,5050,
        5051,1,0,0,0,5051,5053,3,958,479,0,5052,4967,1,0,0,0,5052,4968,1,
        0,0,0,5052,4971,1,0,0,0,5052,4976,1,0,0,0,5052,4981,1,0,0,0,5052,
        4986,1,0,0,0,5052,4991,1,0,0,0,5052,4998,1,0,0,0,5052,5005,1,0,0,
        0,5052,5011,1,0,0,0,5052,5016,1,0,0,0,5052,5021,1,0,0,0,5052,5028,
        1,0,0,0,5052,5034,1,0,0,0,5052,5039,1,0,0,0,5052,5046,1,0,0,0,5053,
        543,1,0,0,0,5054,5055,7,25,0,0,5055,545,1,0,0,0,5056,5057,3,544,
        272,0,5057,547,1,0,0,0,5058,5059,5,103,0,0,5059,5060,3,552,276,0,
        5060,5061,5,118,0,0,5061,5062,3,558,279,0,5062,5063,5,132,0,0,5063,
        5065,3,560,280,0,5064,5066,3,564,282,0,5065,5064,1,0,0,0,5065,5066,
        1,0,0,0,5066,549,1,0,0,0,5067,5068,5,348,0,0,5068,5069,3,552,276,
        0,5069,5070,5,118,0,0,5070,5071,3,558,279,0,5071,5072,5,102,0,0,
        5072,5074,3,560,280,0,5073,5075,3,104,52,0,5074,5073,1,0,0,0,5074,
        5075,1,0,0,0,5075,5089,1,0,0,0,5076,5077,5,348,0,0,5077,5078,5,103,
        0,0,5078,5079,5,310,0,0,5079,5080,5,100,0,0,5080,5081,3,552,276,
        0,5081,5082,5,118,0,0,5082,5083,3,558,279,0,5083,5084,5,102,0,0,
        5084,5086,3,560,280,0,5085,5087,3,104,52,0,5086,5085,1,0,0,0,5086,
        5087,1,0,0,0,5087,5089,1,0,0,0,5088,5067,1,0,0,0,5088,5076,1,0,0,
        0,5089,551,1,0,0,0,5090,5106,3,554,277,0,5091,5106,5,68,0,0,5092,
        5093,5,68,0,0,5093,5106,5,325,0,0,5094,5095,5,68,0,0,5095,5096,5,
        2,0,0,5096,5097,3,212,106,0,5097,5098,5,3,0,0,5098,5106,1,0,0,0,
        5099,5100,5,68,0,0,5100,5101,5,325,0,0,5101,5102,5,2,0,0,5102,5103,
        3,212,106,0,5103,5104,5,3,0,0,5104,5106,1,0,0,0,5105,5090,1,0,0,
        0,5105,5091,1,0,0,0,5105,5092,1,0,0,0,5105,5094,1,0,0,0,5105,5099,
        1,0,0,0,5106,553,1,0,0,0,5107,5112,3,556,278,0,5108,5109,5,6,0,0,
        5109,5111,3,556,278,0,5110,5108,1,0,0,0,5111,5114,1,0,0,0,5112,5110,
        1,0,0,0,5112,5113,1,0,0,0,5113,555,1,0,0,0,5114,5112,1,0,0,0,5115,
        5117,5,126,0,0,5116,5118,3,210,105,0,5117,5116,1,0,0,0,5117,5118,
        1,0,0,0,5118,5132,1,0,0,0,5119,5121,5,124,0,0,5120,5122,3,210,105,
        0,5121,5120,1,0,0,0,5121,5122,1,0,0,0,5122,5132,1,0,0,0,5123,5125,
        5,84,0,0,5124,5126,3,210,105,0,5125,5124,1,0,0,0,5125,5126,1,0,0,
        0,5126,5132,1,0,0,0,5127,5129,3,1414,707,0,5128,5130,3,210,105,0,
        5129,5128,1,0,0,0,5129,5130,1,0,0,0,5130,5132,1,0,0,0,5131,5115,
        1,0,0,0,5131,5119,1,0,0,0,5131,5123,1,0,0,0,5131,5127,1,0,0,0,5132,
        557,1,0,0,0,5133,5192,3,1376,688,0,5134,5135,5,130,0,0,5135,5192,
        3,1376,688,0,5136,5137,5,359,0,0,5137,5192,3,1376,688,0,5138,5139,
        5,101,0,0,5139,5140,5,212,0,0,5140,5141,5,412,0,0,5141,5192,3,1380,
        690,0,5142,5143,5,101,0,0,5143,5144,5,362,0,0,5144,5192,3,1380,690,
        0,5145,5146,5,249,0,0,5146,5192,3,622,311,0,5147,5148,5,327,0,0,
        5148,5192,3,622,311,0,5149,5150,5,480,0,0,5150,5192,3,622,311,0,
        5151,5152,5,213,0,0,5152,5192,3,1380,690,0,5153,5154,5,227,0,0,5154,
        5192,3,518,259,0,5155,5156,5,276,0,0,5156,5192,3,1380,690,0,5157,
        5158,5,277,0,0,5158,5159,5,305,0,0,5159,5192,3,290,145,0,5160,5161,
        5,354,0,0,5161,5192,3,1380,690,0,5162,5163,5,382,0,0,5163,5192,3,
        1380,690,0,5164,5165,5,391,0,0,5165,5192,3,518,259,0,5166,5167,5,
        68,0,0,5167,5168,5,381,0,0,5168,5169,5,106,0,0,5169,5170,5,354,0,
        0,5170,5192,3,1380,690,0,5171,5172,5,68,0,0,5172,5173,5,360,0,0,
        5173,5174,5,106,0,0,5174,5175,5,354,0,0,5175,5192,3,1380,690,0,5176,
        5177,5,68,0,0,5177,5178,5,250,0,0,5178,5179,5,106,0,0,5179,5180,
        5,354,0,0,5180,5192,3,1380,690,0,5181,5182,5,68,0,0,5182,5183,5,
        495,0,0,5183,5184,5,106,0,0,5184,5185,5,354,0,0,5185,5192,3,1380,
        690,0,5186,5187,5,68,0,0,5187,5188,5,493,0,0,5188,5189,5,106,0,0,
        5189,5190,5,354,0,0,5190,5192,3,1380,690,0,5191,5133,1,0,0,0,5191,
        5134,1,0,0,0,5191,5136,1,0,0,0,5191,5138,1,0,0,0,5191,5142,1,0,0,
        0,5191,5145,1,0,0,0,5191,5147,1,0,0,0,5191,5149,1,0,0,0,5191,5151,
        1,0,0,0,5191,5153,1,0,0,0,5191,5155,1,0,0,0,5191,5157,1,0,0,0,5191,
        5160,1,0,0,0,5191,5162,1,0,0,0,5191,5164,1,0,0,0,5191,5166,1,0,0,
        0,5191,5171,1,0,0,0,5191,5176,1,0,0,0,5191,5181,1,0,0,0,5191,5186,
        1,0,0,0,5192,559,1,0,0,0,5193,5198,3,562,281,0,5194,5195,5,6,0,0,
        5195,5197,3,562,281,0,5196,5194,1,0,0,0,5197,5200,1,0,0,0,5198,5196,
        1,0,0,0,5198,5199,1,0,0,0,5199,561,1,0,0,0,5200,5198,1,0,0,0,5201,
        5205,3,1410,705,0,5202,5203,5,104,0,0,5203,5205,3,1410,705,0,5204,
        5201,1,0,0,0,5204,5202,1,0,0,0,5205,563,1,0,0,0,5206,5207,5,143,
        0,0,5207,5208,5,103,0,0,5208,5209,5,310,0,0,5209,565,1,0,0,0,5210,
        5211,5,103,0,0,5211,5212,3,554,277,0,5212,5213,5,132,0,0,5213,5215,
        3,1412,706,0,5214,5216,3,570,285,0,5215,5214,1,0,0,0,5215,5216,1,
        0,0,0,5216,5218,1,0,0,0,5217,5219,3,572,286,0,5218,5217,1,0,0,0,
        5218,5219,1,0,0,0,5219,567,1,0,0,0,5220,5221,5,348,0,0,5221,5222,
        3,554,277,0,5222,5223,5,102,0,0,5223,5225,3,1412,706,0,5224,5226,
        3,572,286,0,5225,5224,1,0,0,0,5225,5226,1,0,0,0,5226,5228,1,0,0,
        0,5227,5229,3,104,52,0,5228,5227,1,0,0,0,5228,5229,1,0,0,0,5229,
        5244,1,0,0,0,5230,5231,5,348,0,0,5231,5232,5,172,0,0,5232,5233,5,
        310,0,0,5233,5234,5,100,0,0,5234,5235,3,554,277,0,5235,5236,5,102,
        0,0,5236,5238,3,1412,706,0,5237,5239,3,572,286,0,5238,5237,1,0,0,
        0,5238,5239,1,0,0,0,5239,5241,1,0,0,0,5240,5242,3,104,52,0,5241,
        5240,1,0,0,0,5241,5242,1,0,0,0,5242,5244,1,0,0,0,5243,5220,1,0,0,
        0,5243,5230,1,0,0,0,5244,569,1,0,0,0,5245,5246,5,143,0,0,5246,5247,
        5,172,0,0,5247,5248,5,310,0,0,5248,571,1,0,0,0,5249,5250,5,252,0,
        0,5250,5251,5,185,0,0,5251,5252,3,1410,705,0,5252,573,1,0,0,0,5253,
        5254,5,176,0,0,5254,5255,5,91,0,0,5255,5256,5,325,0,0,5256,5257,
        3,576,288,0,5257,5258,3,580,290,0,5258,575,1,0,0,0,5259,5261,3,578,
        289,0,5260,5259,1,0,0,0,5261,5264,1,0,0,0,5262,5260,1,0,0,0,5262,
        5263,1,0,0,0,5263,577,1,0,0,0,5264,5262,1,0,0,0,5265,5266,5,106,
        0,0,5266,5267,5,354,0,0,5267,5275,3,1380,690,0,5268,5269,5,100,0,
        0,5269,5270,5,349,0,0,5270,5275,3,1412,706,0,5271,5272,5,100,0,0,
        5272,5273,5,137,0,0,5273,5275,3,1412,706,0,5274,5265,1,0,0,0,5274,
        5268,1,0,0,0,5274,5271,1,0,0,0,5275,579,1,0,0,0,5276,5277,5,103,
        0,0,5277,5278,3,552,276,0,5278,5279,5,118,0,0,5279,5280,3,582,291,
        0,5280,5281,5,132,0,0,5281,5283,3,560,280,0,5282,5284,3,564,282,
        0,5283,5282,1,0,0,0,5283,5284,1,0,0,0,5284,5307,1,0,0,0,5285,5286,
        5,348,0,0,5286,5287,3,552,276,0,5287,5288,5,118,0,0,5288,5289,3,
        582,291,0,5289,5290,5,102,0,0,5290,5292,3,560,280,0,5291,5293,3,
        104,52,0,5292,5291,1,0,0,0,5292,5293,1,0,0,0,5293,5307,1,0,0,0,5294,
        5295,5,348,0,0,5295,5296,5,103,0,0,5296,5297,5,310,0,0,5297,5298,
        5,100,0,0,5298,5299,3,552,276,0,5299,5300,5,118,0,0,5300,5301,3,
        582,291,0,5301,5302,5,102,0,0,5302,5304,3,560,280,0,5303,5305,3,
        104,52,0,5304,5303,1,0,0,0,5304,5305,1,0,0,0,5305,5307,1,0,0,0,5306,
        5276,1,0,0,0,5306,5285,1,0,0,0,5306,5294,1,0,0,0,5307,581,1,0,0,
        0,5308,5309,7,26,0,0,5309,583,1,0,0,0,5310,5312,5,84,0,0,5311,5313,
        3,586,293,0,5312,5311,1,0,0,0,5312,5313,1,0,0,0,5313,5314,1,0,0,
        0,5314,5316,5,264,0,0,5315,5317,3,590,295,0,5316,5315,1,0,0,0,5316,
        5317,1,0,0,0,5317,5319,1,0,0,0,5318,5320,3,592,296,0,5319,5318,1,
        0,0,0,5319,5320,1,0,0,0,5320,5321,1,0,0,0,5321,5322,5,118,0,0,5322,
        5324,3,1072,536,0,5323,5325,3,594,297,0,5324,5323,1,0,0,0,5324,5325,
        1,0,0,0,5325,5326,1,0,0,0,5326,5327,5,2,0,0,5327,5328,3,596,298,
        0,5328,5330,5,3,0,0,5329,5331,3,602,301,0,5330,5329,1,0,0,0,5330,
        5331,1,0,0,0,5331,5333,1,0,0,0,5332,5334,3,114,57,0,5333,5332,1,
        0,0,0,5333,5334,1,0,0,0,5334,5336,1,0,0,0,5335,5337,3,250,125,0,
        5336,5335,1,0,0,0,5336,5337,1,0,0,0,5337,5339,1,0,0,0,5338,5340,
        3,1092,546,0,5339,5338,1,0,0,0,5339,5340,1,0,0,0,5340,5374,1,0,0,
        0,5341,5343,5,84,0,0,5342,5344,3,586,293,0,5343,5342,1,0,0,0,5343,
        5344,1,0,0,0,5344,5345,1,0,0,0,5345,5347,5,264,0,0,5346,5348,3,590,
        295,0,5347,5346,1,0,0,0,5347,5348,1,0,0,0,5348,5349,1,0,0,0,5349,
        5350,5,258,0,0,5350,5351,5,115,0,0,5351,5352,5,427,0,0,5352,5353,
        3,1382,691,0,5353,5354,5,118,0,0,5354,5356,3,1072,536,0,5355,5357,
        3,594,297,0,5356,5355,1,0,0,0,5356,5357,1,0,0,0,5357,5358,1,0,0,
        0,5358,5359,5,2,0,0,5359,5360,3,596,298,0,5360,5362,5,3,0,0,5361,
        5363,3,602,301,0,5362,5361,1,0,0,0,5362,5363,1,0,0,0,5363,5365,1,
        0,0,0,5364,5366,3,114,57,0,5365,5364,1,0,0,0,5365,5366,1,0,0,0,5366,
        5368,1,0,0,0,5367,5369,3,250,125,0,5368,5367,1,0,0,0,5368,5369,1,
        0,0,0,5369,5371,1,0,0,0,5370,5372,3,1092,546,0,5371,5370,1,0,0,0,
        5371,5372,1,0,0,0,5372,5374,1,0,0,0,5373,5310,1,0,0,0,5373,5341,
        1,0,0,0,5374,585,1,0,0,0,5375,5376,5,136,0,0,5376,587,1,0,0,0,5377,
        5378,3,1414,707,0,5378,589,1,0,0,0,5379,5380,5,147,0,0,5380,591,
        1,0,0,0,5381,5382,3,1382,691,0,5382,593,1,0,0,0,5383,5384,5,138,
        0,0,5384,5385,3,1382,691,0,5385,595,1,0,0,0,5386,5391,3,600,300,
        0,5387,5388,5,6,0,0,5388,5390,3,600,300,0,5389,5387,1,0,0,0,5390,
        5393,1,0,0,0,5391,5389,1,0,0,0,5391,5392,1,0,0,0,5392,597,1,0,0,
        0,5393,5391,1,0,0,0,5394,5396,3,606,303,0,5395,5394,1,0,0,0,5395,
        5396,1,0,0,0,5396,5398,1,0,0,0,5397,5399,3,608,304,0,5398,5397,1,
        0,0,0,5398,5399,1,0,0,0,5399,5401,1,0,0,0,5400,5402,3,610,305,0,
        5401,5400,1,0,0,0,5401,5402,1,0,0,0,5402,5404,1,0,0,0,5403,5405,
        3,612,306,0,5404,5403,1,0,0,0,5404,5405,1,0,0,0,5405,5418,1,0,0,
        0,5406,5408,3,606,303,0,5407,5406,1,0,0,0,5407,5408,1,0,0,0,5408,
        5409,1,0,0,0,5409,5410,3,520,260,0,5410,5412,3,112,56,0,5411,5413,
        3,610,305,0,5412,5411,1,0,0,0,5412,5413,1,0,0,0,5413,5415,1,0,0,
        0,5414,5416,3,612,306,0,5415,5414,1,0,0,0,5415,5416,1,0,0,0,5416,
        5418,1,0,0,0,5417,5395,1,0,0,0,5417,5407,1,0,0,0,5418,599,1,0,0,
        0,5419,5420,3,1414,707,0,5420,5421,3,598,299,0,5421,5431,1,0,0,0,
        5422,5423,3,1214,607,0,5423,5424,3,598,299,0,5424,5431,1,0,0,0,5425,
        5426,5,2,0,0,5426,5427,3,1162,581,0,5427,5428,5,3,0,0,5428,5429,
        3,598,299,0,5429,5431,1,0,0,0,5430,5419,1,0,0,0,5430,5422,1,0,0,
        0,5430,5425,1,0,0,0,5431,601,1,0,0,0,5432,5433,5,479,0,0,5433,5434,
        5,2,0,0,5434,5435,3,604,302,0,5435,5436,5,3,0,0,5436,603,1,0,0,0,
        5437,5442,3,600,300,0,5438,5439,5,6,0,0,5439,5441,3,600,300,0,5440,
        5438,1,0,0,0,5441,5444,1,0,0,0,5442,5440,1,0,0,0,5442,5443,1,0,0,
        0,5443,605,1,0,0,0,5444,5442,1,0,0,0,5445,5446,5,81,0,0,5446,5447,
        3,520,260,0,5447,607,1,0,0,0,5448,5449,3,520,260,0,5449,609,1,0,
        0,0,5450,5451,7,27,0,0,5451,611,1,0,0,0,5452,5453,5,304,0,0,5453,
        5457,5,245,0,0,5454,5455,5,304,0,0,5455,5457,5,278,0,0,5456,5452,
        1,0,0,0,5456,5454,1,0,0,0,5457,613,1,0,0,0,5458,5460,5,84,0,0,5459,
        5461,3,616,308,0,5460,5459,1,0,0,0,5460,5461,1,0,0,0,5461,5462,1,
        0,0,0,5462,5463,7,23,0,0,5463,5464,3,1388,694,0,5464,5474,3,626,
        313,0,5465,5472,5,347,0,0,5466,5473,3,636,318,0,5467,5468,5,130,
        0,0,5468,5469,5,2,0,0,5469,5470,3,666,333,0,5470,5471,5,3,0,0,5471,
        5473,1,0,0,0,5472,5466,1,0,0,0,5472,5467,1,0,0,0,5473,5475,1,0,0,
        0,5474,5465,1,0,0,0,5474,5475,1,0,0,0,5475,5476,1,0,0,0,5476,5477,
        3,652,326,0,5477,615,1,0,0,0,5478,5479,5,120,0,0,5479,5480,5,342,
        0,0,5480,617,1,0,0,0,5481,5483,5,2,0,0,5482,5484,3,620,310,0,5483,
        5482,1,0,0,0,5483,5484,1,0,0,0,5484,5485,1,0,0,0,5485,5486,5,3,0,
        0,5486,619,1,0,0,0,5487,5492,3,630,315,0,5488,5489,5,6,0,0,5489,
        5491,3,630,315,0,5490,5488,1,0,0,0,5491,5494,1,0,0,0,5492,5490,1,
        0,0,0,5492,5493,1,0,0,0,5493,621,1,0,0,0,5494,5492,1,0,0,0,5495,
        5500,3,624,312,0,5496,5497,5,6,0,0,5497,5499,3,624,312,0,5498,5496,
        1,0,0,0,5499,5502,1,0,0,0,5500,5498,1,0,0,0,5500,5501,1,0,0,0,5501,
        623,1,0,0,0,5502,5500,1,0,0,0,5503,5504,3,1388,694,0,5504,5505,3,
        618,309,0,5505,5512,1,0,0,0,5506,5512,3,1428,714,0,5507,5509,3,1414,
        707,0,5508,5510,3,1324,662,0,5509,5508,1,0,0,0,5509,5510,1,0,0,0,
        5510,5512,1,0,0,0,5511,5503,1,0,0,0,5511,5506,1,0,0,0,5511,5507,
        1,0,0,0,5512,625,1,0,0,0,5513,5515,5,2,0,0,5514,5516,3,628,314,0,
        5515,5514,1,0,0,0,5515,5516,1,0,0,0,5516,5517,1,0,0,0,5517,5518,
        5,3,0,0,5518,627,1,0,0,0,5519,5524,3,640,320,0,5520,5521,5,6,0,0,
        5521,5523,3,640,320,0,5522,5520,1,0,0,0,5523,5526,1,0,0,0,5524,5522,
        1,0,0,0,5524,5525,1,0,0,0,5525,629,1,0,0,0,5526,5524,1,0,0,0,5527,
        5529,3,632,316,0,5528,5530,3,634,317,0,5529,5528,1,0,0,0,5529,5530,
        1,0,0,0,5530,5531,1,0,0,0,5531,5532,3,638,319,0,5532,5541,1,0,0,
        0,5533,5535,3,634,317,0,5534,5536,3,632,316,0,5535,5534,1,0,0,0,
        5535,5536,1,0,0,0,5536,5537,1,0,0,0,5537,5538,3,638,319,0,5538,5541,
        1,0,0,0,5539,5541,3,638,319,0,5540,5527,1,0,0,0,5540,5533,1,0,0,
        0,5540,5539,1,0,0,0,5541,631,1,0,0,0,5542,5544,5,106,0,0,5543,5545,
        5,491,0,0,5544,5543,1,0,0,0,5544,5545,1,0,0,0,5545,5550,1,0,0,0,
        5546,5550,5,491,0,0,5547,5550,5,431,0,0,5548,5550,5,139,0,0,5549,
        5542,1,0,0,0,5549,5546,1,0,0,0,5549,5547,1,0,0,0,5549,5548,1,0,0,
        0,5550,633,1,0,0,0,5551,5552,3,1416,708,0,5552,635,1,0,0,0,5553,
        5554,3,638,319,0,5554,637,1,0,0,0,5555,5565,3,1116,558,0,5556,5558,
        5,446,0,0,5557,5556,1,0,0,0,5557,5558,1,0,0,0,5558,5559,1,0,0,0,
        5559,5560,3,1416,708,0,5560,5561,3,522,261,0,5561,5562,5,27,0,0,
        5562,5563,5,391,0,0,5563,5565,1,0,0,0,5564,5555,1,0,0,0,5564,5557,
        1,0,0,0,5565,639,1,0,0,0,5566,5569,3,630,315,0,5567,5568,7,28,0,
        0,5568,5570,3,1162,581,0,5569,5567,1,0,0,0,5569,5570,1,0,0,0,5570,
        641,1,0,0,0,5571,5572,3,630,315,0,5572,643,1,0,0,0,5573,5584,5,2,
        0,0,5574,5585,5,9,0,0,5575,5585,3,646,323,0,5576,5577,5,121,0,0,
        5577,5578,5,185,0,0,5578,5585,3,646,323,0,5579,5580,3,646,323,0,
        5580,5581,5,121,0,0,5581,5582,5,185,0,0,5582,5583,3,646,323,0,5583,
        5585,1,0,0,0,5584,5574,1,0,0,0,5584,5575,1,0,0,0,5584,5576,1,0,0,
        0,5584,5579,1,0,0,0,5585,5586,1,0,0,0,5586,5587,5,3,0,0,5587,645,
        1,0,0,0,5588,5593,3,642,321,0,5589,5590,5,6,0,0,5590,5592,3,642,
        321,0,5591,5589,1,0,0,0,5592,5595,1,0,0,0,5593,5591,1,0,0,0,5593,
        5594,1,0,0,0,5594,647,1,0,0,0,5595,5593,1,0,0,0,5596,5597,3,1388,
        694,0,5597,5598,3,644,322,0,5598,649,1,0,0,0,5599,5604,3,648,324,
        0,5600,5601,5,6,0,0,5601,5603,3,648,324,0,5602,5600,1,0,0,0,5603,
        5606,1,0,0,0,5604,5602,1,0,0,0,5604,5605,1,0,0,0,5605,651,1,0,0,
        0,5606,5604,1,0,0,0,5607,5609,3,656,328,0,5608,5607,1,0,0,0,5609,
        5610,1,0,0,0,5610,5608,1,0,0,0,5610,5611,1,0,0,0,5611,5612,1,0,0,
        0,5612,5613,6,326,-1,0,5613,653,1,0,0,0,5614,5615,5,187,0,0,5615,
        5616,5,118,0,0,5616,5617,5,116,0,0,5617,5650,5,496,0,0,5618,5619,
        5,347,0,0,5619,5620,5,116,0,0,5620,5621,5,118,0,0,5621,5622,5,116,
        0,0,5622,5650,5,496,0,0,5623,5650,5,377,0,0,5624,5650,5,260,0,0,
        5625,5650,5,369,0,0,5626,5650,5,408,0,0,5627,5628,5,243,0,0,5628,
        5629,5,358,0,0,5629,5650,5,219,0,0,5630,5631,5,243,0,0,5631,5632,
        5,358,0,0,5632,5650,5,272,0,0,5633,5634,5,358,0,0,5634,5650,5,219,
        0,0,5635,5636,5,358,0,0,5636,5650,5,272,0,0,5637,5650,5,279,0,0,
        5638,5639,5,115,0,0,5639,5650,5,279,0,0,5640,5641,5,208,0,0,5641,
        5650,3,288,144,0,5642,5643,5,351,0,0,5643,5650,3,288,144,0,5644,
        5645,5,497,0,0,5645,5650,3,520,260,0,5646,5650,3,78,39,0,5647,5648,
        5,498,0,0,5648,5650,3,1414,707,0,5649,5614,1,0,0,0,5649,5618,1,0,
        0,0,5649,5623,1,0,0,0,5649,5624,1,0,0,0,5649,5625,1,0,0,0,5649,5626,
        1,0,0,0,5649,5627,1,0,0,0,5649,5630,1,0,0,0,5649,5633,1,0,0,0,5649,
        5635,1,0,0,0,5649,5637,1,0,0,0,5649,5638,1,0,0,0,5649,5640,1,0,0,
        0,5649,5642,1,0,0,0,5649,5644,1,0,0,0,5649,5646,1,0,0,0,5649,5647,
        1,0,0,0,5650,655,1,0,0,0,5651,5652,5,74,0,0,5652,5660,3,658,329,
        0,5653,5654,5,276,0,0,5654,5660,3,68,34,0,5655,5656,5,481,0,0,5656,
        5660,3,660,330,0,5657,5660,5,142,0,0,5658,5660,3,654,327,0,5659,
        5651,1,0,0,0,5659,5653,1,0,0,0,5659,5655,1,0,0,0,5659,5657,1,0,0,
        0,5659,5658,1,0,0,0,5660,657,1,0,0,0,5661,5667,3,1400,700,0,5662,
        5663,3,1400,700,0,5663,5664,5,6,0,0,5664,5665,3,1400,700,0,5665,
        5667,1,0,0,0,5666,5661,1,0,0,0,5666,5662,1,0,0,0,5667,659,1,0,0,
        0,5668,5669,5,100,0,0,5669,5670,5,391,0,0,5670,5677,3,1116,558,0,
        5671,5672,5,6,0,0,5672,5673,5,100,0,0,5673,5674,5,391,0,0,5674,5676,
        3,1116,558,0,5675,5671,1,0,0,0,5676,5679,1,0,0,0,5677,5675,1,0,0,
        0,5677,5678,1,0,0,0,5678,661,1,0,0,0,5679,5677,1,0,0,0,5680,5681,
        5,143,0,0,5681,5682,3,456,228,0,5682,663,1,0,0,0,5683,5684,3,634,
        317,0,5684,5685,3,638,319,0,5685,665,1,0,0,0,5686,5691,3,664,332,
        0,5687,5688,5,6,0,0,5688,5690,3,664,332,0,5689,5687,1,0,0,0,5690,
        5693,1,0,0,0,5691,5689,1,0,0,0,5691,5692,1,0,0,0,5692,667,1,0,0,
        0,5693,5691,1,0,0,0,5694,5695,5,176,0,0,5695,5696,7,29,0,0,5696,
        5697,3,624,312,0,5697,5699,3,670,335,0,5698,5700,3,672,336,0,5699,
        5698,1,0,0,0,5699,5700,1,0,0,0,5700,669,1,0,0,0,5701,5703,3,654,
        327,0,5702,5701,1,0,0,0,5703,5704,1,0,0,0,5704,5702,1,0,0,0,5704,
        5705,1,0,0,0,5705,671,1,0,0,0,5706,5707,5,346,0,0,5707,673,1,0,0,
        0,5708,5709,5,229,0,0,5709,5710,5,249,0,0,5710,5712,3,622,311,0,
        5711,5713,3,104,52,0,5712,5711,1,0,0,0,5712,5713,1,0,0,0,5713,5751,
        1,0,0,0,5714,5715,5,229,0,0,5715,5716,5,249,0,0,5716,5717,5,258,
        0,0,5717,5718,5,427,0,0,5718,5720,3,622,311,0,5719,5721,3,104,52,
        0,5720,5719,1,0,0,0,5720,5721,1,0,0,0,5721,5751,1,0,0,0,5722,5723,
        5,229,0,0,5723,5724,5,327,0,0,5724,5726,3,622,311,0,5725,5727,3,
        104,52,0,5726,5725,1,0,0,0,5726,5727,1,0,0,0,5727,5751,1,0,0,0,5728,
        5729,5,229,0,0,5729,5730,5,327,0,0,5730,5731,5,258,0,0,5731,5732,
        5,427,0,0,5732,5734,3,622,311,0,5733,5735,3,104,52,0,5734,5733,1,
        0,0,0,5734,5735,1,0,0,0,5735,5751,1,0,0,0,5736,5737,5,229,0,0,5737,
        5738,5,480,0,0,5738,5740,3,622,311,0,5739,5741,3,104,52,0,5740,5739,
        1,0,0,0,5740,5741,1,0,0,0,5741,5751,1,0,0,0,5742,5743,5,229,0,0,
        5743,5744,5,480,0,0,5744,5745,5,258,0,0,5745,5746,5,427,0,0,5746,
        5748,3,622,311,0,5747,5749,3,104,52,0,5748,5747,1,0,0,0,5748,5749,
        1,0,0,0,5749,5751,1,0,0,0,5750,5708,1,0,0,0,5750,5714,1,0,0,0,5750,
        5722,1,0,0,0,5750,5728,1,0,0,0,5750,5736,1,0,0,0,5750,5742,1,0,0,
        0,5751,675,1,0,0,0,5752,5753,5,229,0,0,5753,5754,5,174,0,0,5754,
        5756,3,650,325,0,5755,5757,3,104,52,0,5756,5755,1,0,0,0,5756,5757,
        1,0,0,0,5757,5767,1,0,0,0,5758,5759,5,229,0,0,5759,5760,5,174,0,
        0,5760,5761,5,258,0,0,5761,5762,5,427,0,0,5762,5764,3,650,325,0,
        5763,5765,3,104,52,0,5764,5763,1,0,0,0,5764,5765,1,0,0,0,5765,5767,
        1,0,0,0,5766,5752,1,0,0,0,5766,5758,1,0,0,0,5767,677,1,0,0,0,5768,
        5769,5,229,0,0,5769,5770,5,309,0,0,5770,5772,3,684,342,0,5771,5773,
        3,104,52,0,5772,5771,1,0,0,0,5772,5773,1,0,0,0,5773,5783,1,0,0,0,
        5774,5775,5,229,0,0,5775,5776,5,309,0,0,5776,5777,5,258,0,0,5777,
        5778,5,427,0,0,5778,5780,3,684,342,0,5779,5781,3,104,52,0,5780,5779,
        1,0,0,0,5780,5781,1,0,0,0,5781,5783,1,0,0,0,5782,5768,1,0,0,0,5782,
        5774,1,0,0,0,5783,679,1,0,0,0,5784,5785,5,2,0,0,5785,5786,3,1116,
        558,0,5786,5787,5,3,0,0,5787,5807,1,0,0,0,5788,5789,5,2,0,0,5789,
        5790,3,1116,558,0,5790,5791,5,6,0,0,5791,5792,3,1116,558,0,5792,
        5793,5,3,0,0,5793,5807,1,0,0,0,5794,5795,5,2,0,0,5795,5796,5,438,
        0,0,5796,5797,5,6,0,0,5797,5798,3,1116,558,0,5798,5799,5,3,0,0,5799,
        5807,1,0,0,0,5800,5801,5,2,0,0,5801,5802,3,1116,558,0,5802,5803,
        5,6,0,0,5803,5804,5,438,0,0,5804,5805,5,3,0,0,5805,5807,1,0,0,0,
        5806,5784,1,0,0,0,5806,5788,1,0,0,0,5806,5794,1,0,0,0,5806,5800,
        1,0,0,0,5807,681,1,0,0,0,5808,5809,3,1414,707,0,5809,5810,5,11,0,
        0,5810,5812,1,0,0,0,5811,5808,1,0,0,0,5812,5815,1,0,0,0,5813,5811,
        1,0,0,0,5813,5814,1,0,0,0,5814,5816,1,0,0,0,5815,5813,1,0,0,0,5816,
        5817,3,1270,635,0,5817,683,1,0,0,0,5818,5823,3,686,343,0,5819,5820,
        5,6,0,0,5820,5822,3,686,343,0,5821,5819,1,0,0,0,5822,5825,1,0,0,
        0,5823,5821,1,0,0,0,5823,5824,1,0,0,0,5824,685,1,0,0,0,5825,5823,
        1,0,0,0,5826,5827,3,682,341,0,5827,5828,3,680,340,0,5828,687,1,0,
        0,0,5829,5830,5,95,0,0,5830,5831,3,690,345,0,5831,689,1,0,0,0,5832,
        5834,3,692,346,0,5833,5832,1,0,0,0,5834,5835,1,0,0,0,5835,5833,1,
        0,0,0,5835,5836,1,0,0,0,5836,691,1,0,0,0,5837,5841,3,1400,700,0,
        5838,5839,5,276,0,0,5839,5841,3,68,34,0,5840,5837,1,0,0,0,5840,5838,
        1,0,0,0,5841,693,1,0,0,0,5842,5843,5,84,0,0,5843,5844,5,79,0,0,5844,
        5845,5,2,0,0,5845,5846,3,1116,558,0,5846,5847,5,74,0,0,5847,5848,
        3,1116,558,0,5848,5849,5,3,0,0,5849,5850,5,143,0,0,5850,5851,5,249,
        0,0,5851,5853,3,624,312,0,5852,5854,3,696,348,0,5853,5852,1,0,0,
        0,5853,5854,1,0,0,0,5854,5880,1,0,0,0,5855,5856,5,84,0,0,5856,5857,
        5,79,0,0,5857,5858,5,2,0,0,5858,5859,3,1116,558,0,5859,5860,5,74,
        0,0,5860,5861,3,1116,558,0,5861,5862,5,3,0,0,5862,5863,5,410,0,0,
        5863,5865,5,249,0,0,5864,5866,3,696,348,0,5865,5864,1,0,0,0,5865,
        5866,1,0,0,0,5866,5880,1,0,0,0,5867,5868,5,84,0,0,5868,5869,5,79,
        0,0,5869,5870,5,2,0,0,5870,5871,3,1116,558,0,5871,5872,5,74,0,0,
        5872,5873,3,1116,558,0,5873,5874,5,3,0,0,5874,5875,5,143,0,0,5875,
        5877,5,431,0,0,5876,5878,3,696,348,0,5877,5876,1,0,0,0,5877,5878,
        1,0,0,0,5878,5880,1,0,0,0,5879,5842,1,0,0,0,5879,5855,1,0,0,0,5879,
        5867,1,0,0,0,5880,695,1,0,0,0,5881,5882,5,74,0,0,5882,5886,5,261,
        0,0,5883,5884,5,74,0,0,5884,5886,5,179,0,0,5885,5881,1,0,0,0,5885,
        5883,1,0,0,0,5886,697,1,0,0,0,5887,5888,5,229,0,0,5888,5890,5,79,
        0,0,5889,5891,3,700,350,0,5890,5889,1,0,0,0,5890,5891,1,0,0,0,5891,
        5892,1,0,0,0,5892,5893,5,2,0,0,5893,5894,3,1116,558,0,5894,5895,
        5,74,0,0,5895,5896,3,1116,558,0,5896,5898,5,3,0,0,5897,5899,3,104,
        52,0,5898,5897,1,0,0,0,5898,5899,1,0,0,0,5899,699,1,0,0,0,5900,5901,
        5,258,0,0,5901,5902,5,427,0,0,5902,701,1,0,0,0,5903,5905,5,84,0,
        0,5904,5906,3,616,308,0,5905,5904,1,0,0,0,5905,5906,1,0,0,0,5906,
        5907,1,0,0,0,5907,5908,5,481,0,0,5908,5909,5,100,0,0,5909,5910,3,
        1116,558,0,5910,5911,5,276,0,0,5911,5912,3,1382,691,0,5912,5913,
        5,2,0,0,5913,5914,3,704,352,0,5914,5915,5,3,0,0,5915,703,1,0,0,0,
        5916,5917,5,102,0,0,5917,5918,5,499,0,0,5918,5919,5,143,0,0,5919,
        5920,5,249,0,0,5920,5921,3,624,312,0,5921,5922,5,6,0,0,5922,5923,
        5,132,0,0,5923,5924,5,499,0,0,5924,5925,5,143,0,0,5925,5926,5,249,
        0,0,5926,5927,3,624,312,0,5927,5951,1,0,0,0,5928,5929,5,132,0,0,
        5929,5930,5,499,0,0,5930,5931,5,143,0,0,5931,5932,5,249,0,0,5932,
        5933,3,624,312,0,5933,5934,5,6,0,0,5934,5935,5,102,0,0,5935,5936,
        5,499,0,0,5936,5937,5,143,0,0,5937,5938,5,249,0,0,5938,5939,3,624,
        312,0,5939,5951,1,0,0,0,5940,5941,5,102,0,0,5941,5942,5,499,0,0,
        5942,5943,5,143,0,0,5943,5944,5,249,0,0,5944,5951,3,624,312,0,5945,
        5946,5,132,0,0,5946,5947,5,499,0,0,5947,5948,5,143,0,0,5948,5949,
        5,249,0,0,5949,5951,3,624,312,0,5950,5916,1,0,0,0,5950,5928,1,0,
        0,0,5950,5940,1,0,0,0,5950,5945,1,0,0,0,5951,705,1,0,0,0,5952,5953,
        5,229,0,0,5953,5955,5,481,0,0,5954,5956,3,700,350,0,5955,5954,1,
        0,0,0,5955,5956,1,0,0,0,5956,5957,1,0,0,0,5957,5958,5,100,0,0,5958,
        5959,3,1116,558,0,5959,5960,5,276,0,0,5960,5962,3,1382,691,0,5961,
        5963,3,104,52,0,5962,5961,1,0,0,0,5962,5963,1,0,0,0,5963,707,1,0,
        0,0,5964,5966,5,337,0,0,5965,5967,3,714,357,0,5966,5965,1,0,0,0,
        5966,5967,1,0,0,0,5967,5968,1,0,0,0,5968,5970,3,710,355,0,5969,5971,
        3,590,295,0,5970,5969,1,0,0,0,5970,5971,1,0,0,0,5971,5972,1,0,0,
        0,5972,5973,3,1378,689,0,5973,5995,1,0,0,0,5974,5976,5,337,0,0,5975,
        5977,3,714,357,0,5976,5975,1,0,0,0,5976,5977,1,0,0,0,5977,5978,1,
        0,0,0,5978,5980,5,354,0,0,5979,5981,3,590,295,0,5980,5979,1,0,0,
        0,5980,5981,1,0,0,0,5981,5982,1,0,0,0,5982,5995,3,1382,691,0,5983,
        5985,5,337,0,0,5984,5986,3,714,357,0,5985,5984,1,0,0,0,5985,5986,
        1,0,0,0,5986,5987,1,0,0,0,5987,5989,3,712,356,0,5988,5990,3,590,
        295,0,5989,5988,1,0,0,0,5989,5990,1,0,0,0,5990,5992,1,0,0,0,5991,
        5993,3,588,294,0,5992,5991,1,0,0,0,5992,5993,1,0,0,0,5993,5995,1,
        0,0,0,5994,5964,1,0,0,0,5994,5974,1,0,0,0,5994,5983,1,0,0,0,5995,
        709,1,0,0,0,5996,5997,7,19,0,0,5997,711,1,0,0,0,5998,5999,7,30,0,
        0,5999,713,1,0,0,0,6000,6001,5,2,0,0,6001,6002,3,848,424,0,6002,
        6003,5,3,0,0,6003,715,1,0,0,0,6004,6005,5,176,0,0,6005,6006,5,382,
        0,0,6006,6007,3,1382,691,0,6007,6008,5,364,0,0,6008,6009,3,112,56,
        0,6009,6017,1,0,0,0,6010,6011,5,176,0,0,6011,6012,5,382,0,0,6012,
        6013,3,1382,691,0,6013,6014,5,344,0,0,6014,6015,3,112,56,0,6015,
        6017,1,0,0,0,6016,6004,1,0,0,0,6016,6010,1,0,0,0,6017,717,1,0,0,
        0,6018,6019,5,176,0,0,6019,6020,5,174,0,0,6020,6021,3,648,324,0,
        6021,6022,5,340,0,0,6022,6023,5,132,0,0,6023,6024,3,1382,691,0,6024,
        6506,1,0,0,0,6025,6026,5,176,0,0,6026,6027,5,146,0,0,6027,6028,3,
        520,260,0,6028,6029,5,340,0,0,6029,6030,5,132,0,0,6030,6031,3,1382,
        691,0,6031,6506,1,0,0,0,6032,6033,5,176,0,0,6033,6034,5,206,0,0,
        6034,6035,3,520,260,0,6035,6036,5,340,0,0,6036,6037,5,132,0,0,6037,
        6038,3,1382,691,0,6038,6506,1,0,0,0,6039,6040,5,176,0,0,6040,6041,
        5,213,0,0,6041,6042,3,1382,691,0,6042,6043,5,340,0,0,6043,6044,5,
        132,0,0,6044,6045,3,1382,691,0,6045,6506,1,0,0,0,6046,6047,5,176,
        0,0,6047,6048,5,227,0,0,6048,6049,3,520,260,0,6049,6050,5,340,0,
        0,6050,6051,5,132,0,0,6051,6052,3,1382,691,0,6052,6506,1,0,0,0,6053,
        6054,5,176,0,0,6054,6055,5,227,0,0,6055,6056,3,520,260,0,6056,6057,
        5,340,0,0,6057,6058,5,83,0,0,6058,6059,3,1382,691,0,6059,6060,5,
        132,0,0,6060,6061,3,1382,691,0,6061,6506,1,0,0,0,6062,6063,5,176,
        0,0,6063,6064,5,101,0,0,6064,6065,5,212,0,0,6065,6066,5,412,0,0,
        6066,6067,3,1382,691,0,6067,6068,5,340,0,0,6068,6069,5,132,0,0,6069,
        6070,3,1382,691,0,6070,6506,1,0,0,0,6071,6072,5,176,0,0,6072,6073,
        5,249,0,0,6073,6074,3,624,312,0,6074,6075,5,340,0,0,6075,6076,5,
        132,0,0,6076,6077,3,1382,691,0,6077,6506,1,0,0,0,6078,6079,5,176,
        0,0,6079,6080,5,104,0,0,6080,6081,3,1408,704,0,6081,6082,5,340,0,
        0,6082,6083,5,132,0,0,6083,6084,3,1408,704,0,6084,6506,1,0,0,0,6085,
        6087,5,176,0,0,6086,6088,3,304,152,0,6087,6086,1,0,0,0,6087,6088,
        1,0,0,0,6088,6089,1,0,0,0,6089,6090,5,276,0,0,6090,6091,3,1382,691,
        0,6091,6092,5,340,0,0,6092,6093,5,132,0,0,6093,6094,3,1382,691,0,
        6094,6506,1,0,0,0,6095,6096,5,176,0,0,6096,6097,5,309,0,0,6097,6098,
        5,194,0,0,6098,6099,3,520,260,0,6099,6100,5,138,0,0,6100,6101,3,
        1382,691,0,6101,6102,5,340,0,0,6102,6103,5,132,0,0,6103,6104,3,1382,
        691,0,6104,6506,1,0,0,0,6105,6106,5,176,0,0,6106,6107,5,309,0,0,
        6107,6108,5,244,0,0,6108,6109,3,520,260,0,6109,6110,5,138,0,0,6110,
        6111,3,1382,691,0,6111,6112,5,340,0,0,6112,6113,5,132,0,0,6113,6114,
        3,1382,691,0,6114,6506,1,0,0,0,6115,6116,5,176,0,0,6116,6117,5,483,
        0,0,6117,6118,3,1382,691,0,6118,6119,5,118,0,0,6119,6120,3,1378,
        689,0,6120,6121,5,340,0,0,6121,6122,5,132,0,0,6122,6123,3,1382,691,
        0,6123,6506,1,0,0,0,6124,6125,5,176,0,0,6125,6126,5,483,0,0,6126,
        6127,5,258,0,0,6127,6128,5,427,0,0,6128,6129,3,1382,691,0,6129,6130,
        5,118,0,0,6130,6131,3,1378,689,0,6131,6132,5,340,0,0,6132,6133,5,
        132,0,0,6133,6134,3,1382,691,0,6134,6506,1,0,0,0,6135,6136,5,176,
        0,0,6136,6137,5,327,0,0,6137,6138,3,624,312,0,6138,6139,5,340,0,
        0,6139,6140,5,132,0,0,6140,6141,3,1382,691,0,6141,6506,1,0,0,0,6142,
        6143,5,176,0,0,6143,6144,5,490,0,0,6144,6145,3,1382,691,0,6145,6146,
        5,340,0,0,6146,6147,5,132,0,0,6147,6148,3,1382,691,0,6148,6506,1,
        0,0,0,6149,6150,5,176,0,0,6150,6151,5,480,0,0,6151,6152,3,624,312,
        0,6152,6153,5,340,0,0,6153,6154,5,132,0,0,6154,6155,3,1382,691,0,
        6155,6506,1,0,0,0,6156,6157,5,176,0,0,6157,6158,5,354,0,0,6158,6159,
        3,1382,691,0,6159,6160,5,340,0,0,6160,6161,5,132,0,0,6161,6162,3,
        1382,691,0,6162,6506,1,0,0,0,6163,6164,5,176,0,0,6164,6165,5,362,
        0,0,6165,6166,3,1382,691,0,6166,6167,5,340,0,0,6167,6168,5,132,0,
        0,6168,6169,3,1382,691,0,6169,6506,1,0,0,0,6170,6171,5,176,0,0,6171,
        6172,5,489,0,0,6172,6173,3,1382,691,0,6173,6174,5,340,0,0,6174,6175,
        5,132,0,0,6175,6176,3,1382,691,0,6176,6506,1,0,0,0,6177,6178,5,176,
        0,0,6178,6179,5,130,0,0,6179,6180,3,1072,536,0,6180,6181,5,340,0,
        0,6181,6182,5,132,0,0,6182,6183,3,1382,691,0,6183,6506,1,0,0,0,6184,
        6185,5,176,0,0,6185,6186,5,130,0,0,6186,6187,5,258,0,0,6187,6188,
        5,427,0,0,6188,6189,3,1072,536,0,6189,6190,5,340,0,0,6190,6191,5,
        132,0,0,6191,6192,3,1382,691,0,6192,6506,1,0,0,0,6193,6194,5,176,
        0,0,6194,6195,5,359,0,0,6195,6196,3,1378,689,0,6196,6197,5,340,0,
        0,6197,6198,5,132,0,0,6198,6199,3,1382,691,0,6199,6506,1,0,0,0,6200,
        6201,5,176,0,0,6201,6202,5,359,0,0,6202,6203,5,258,0,0,6203,6204,
        5,427,0,0,6204,6205,3,1378,689,0,6205,6206,5,340,0,0,6206,6207,5,
        132,0,0,6207,6208,3,1382,691,0,6208,6506,1,0,0,0,6209,6210,5,176,
        0,0,6210,6211,5,407,0,0,6211,6212,3,1378,689,0,6212,6213,5,340,0,
        0,6213,6214,5,132,0,0,6214,6215,3,1382,691,0,6215,6506,1,0,0,0,6216,
        6217,5,176,0,0,6217,6218,5,407,0,0,6218,6219,5,258,0,0,6219,6220,
        5,427,0,0,6220,6221,3,1378,689,0,6221,6222,5,340,0,0,6222,6223,5,
        132,0,0,6223,6224,3,1382,691,0,6224,6506,1,0,0,0,6225,6226,5,176,
        0,0,6226,6227,5,289,0,0,6227,6228,5,407,0,0,6228,6229,3,1378,689,
        0,6229,6230,5,340,0,0,6230,6231,5,132,0,0,6231,6232,3,1382,691,0,
        6232,6506,1,0,0,0,6233,6234,5,176,0,0,6234,6235,5,289,0,0,6235,6236,
        5,407,0,0,6236,6237,5,258,0,0,6237,6238,5,427,0,0,6238,6239,3,1378,
        689,0,6239,6240,5,340,0,0,6240,6241,5,132,0,0,6241,6242,3,1382,691,
        0,6242,6506,1,0,0,0,6243,6244,5,176,0,0,6244,6245,5,264,0,0,6245,
        6246,3,1378,689,0,6246,6247,5,340,0,0,6247,6248,5,132,0,0,6248,6249,
        3,1382,691,0,6249,6506,1,0,0,0,6250,6251,5,176,0,0,6251,6252,5,264,
        0,0,6252,6253,5,258,0,0,6253,6254,5,427,0,0,6254,6255,3,1378,689,
        0,6255,6256,5,340,0,0,6256,6257,5,132,0,0,6257,6258,3,1382,691,0,
        6258,6506,1,0,0,0,6259,6260,5,176,0,0,6260,6261,5,101,0,0,6261,6262,
        5,130,0,0,6262,6263,3,1072,536,0,6263,6264,5,340,0,0,6264,6265,5,
        132,0,0,6265,6266,3,1382,691,0,6266,6506,1,0,0,0,6267,6268,5,176,
        0,0,6268,6269,5,101,0,0,6269,6270,5,130,0,0,6270,6271,5,258,0,0,
        6271,6272,5,427,0,0,6272,6273,3,1072,536,0,6273,6274,5,340,0,0,6274,
        6275,5,132,0,0,6275,6276,3,1382,691,0,6276,6506,1,0,0,0,6277,6278,
        5,176,0,0,6278,6279,5,130,0,0,6279,6280,3,1072,536,0,6280,6282,5,
        340,0,0,6281,6283,3,720,360,0,6282,6281,1,0,0,0,6282,6283,1,0,0,
        0,6283,6284,1,0,0,0,6284,6285,3,1382,691,0,6285,6286,5,132,0,0,6286,
        6287,3,1382,691,0,6287,6506,1,0,0,0,6288,6289,5,176,0,0,6289,6290,
        5,130,0,0,6290,6291,5,258,0,0,6291,6292,5,427,0,0,6292,6293,3,1072,
        536,0,6293,6295,5,340,0,0,6294,6296,3,720,360,0,6295,6294,1,0,0,
        0,6295,6296,1,0,0,0,6296,6297,1,0,0,0,6297,6298,3,1382,691,0,6298,
        6299,5,132,0,0,6299,6300,3,1382,691,0,6300,6506,1,0,0,0,6301,6302,
        5,176,0,0,6302,6303,5,407,0,0,6303,6304,3,1378,689,0,6304,6306,5,
        340,0,0,6305,6307,3,720,360,0,6306,6305,1,0,0,0,6306,6307,1,0,0,
        0,6307,6308,1,0,0,0,6308,6309,3,1382,691,0,6309,6310,5,132,0,0,6310,
        6311,3,1382,691,0,6311,6506,1,0,0,0,6312,6313,5,176,0,0,6313,6314,
        5,407,0,0,6314,6315,5,258,0,0,6315,6316,5,427,0,0,6316,6317,3,1378,
        689,0,6317,6319,5,340,0,0,6318,6320,3,720,360,0,6319,6318,1,0,0,
        0,6319,6320,1,0,0,0,6320,6321,1,0,0,0,6321,6322,3,1382,691,0,6322,
        6323,5,132,0,0,6323,6324,3,1382,691,0,6324,6506,1,0,0,0,6325,6326,
        5,176,0,0,6326,6327,5,289,0,0,6327,6328,5,407,0,0,6328,6329,3,1378,
        689,0,6329,6331,5,340,0,0,6330,6332,3,720,360,0,6331,6330,1,0,0,
        0,6331,6332,1,0,0,0,6332,6333,1,0,0,0,6333,6334,3,1382,691,0,6334,
        6335,5,132,0,0,6335,6336,3,1382,691,0,6336,6506,1,0,0,0,6337,6338,
        5,176,0,0,6338,6339,5,289,0,0,6339,6340,5,407,0,0,6340,6341,5,258,
        0,0,6341,6342,5,427,0,0,6342,6343,3,1378,689,0,6343,6345,5,340,0,
        0,6344,6346,3,720,360,0,6345,6344,1,0,0,0,6345,6346,1,0,0,0,6346,
        6347,1,0,0,0,6347,6348,3,1382,691,0,6348,6349,5,132,0,0,6349,6350,
        3,1382,691,0,6350,6506,1,0,0,0,6351,6352,5,176,0,0,6352,6353,5,130,
        0,0,6353,6354,3,1072,536,0,6354,6355,5,340,0,0,6355,6356,5,83,0,
        0,6356,6357,3,1382,691,0,6357,6358,5,132,0,0,6358,6359,3,1382,691,
        0,6359,6506,1,0,0,0,6360,6361,5,176,0,0,6361,6362,5,130,0,0,6362,
        6363,5,258,0,0,6363,6364,5,427,0,0,6364,6365,3,1072,536,0,6365,6366,
        5,340,0,0,6366,6367,5,83,0,0,6367,6368,3,1382,691,0,6368,6369,5,
        132,0,0,6369,6370,3,1382,691,0,6370,6506,1,0,0,0,6371,6372,5,176,
        0,0,6372,6373,5,101,0,0,6373,6374,5,130,0,0,6374,6375,3,1072,536,
        0,6375,6377,5,340,0,0,6376,6378,3,720,360,0,6377,6376,1,0,0,0,6377,
        6378,1,0,0,0,6378,6379,1,0,0,0,6379,6380,3,1382,691,0,6380,6381,
        5,132,0,0,6381,6382,3,1382,691,0,6382,6506,1,0,0,0,6383,6384,5,176,
        0,0,6384,6385,5,101,0,0,6385,6386,5,130,0,0,6386,6387,5,258,0,0,
        6387,6388,5,427,0,0,6388,6389,3,1072,536,0,6389,6391,5,340,0,0,6390,
        6392,3,720,360,0,6391,6390,1,0,0,0,6391,6392,1,0,0,0,6392,6393,1,
        0,0,0,6393,6394,3,1382,691,0,6394,6395,5,132,0,0,6395,6396,3,1382,
        691,0,6396,6506,1,0,0,0,6397,6398,5,176,0,0,6398,6399,5,352,0,0,
        6399,6400,3,1382,691,0,6400,6401,5,118,0,0,6401,6402,3,1378,689,
        0,6402,6403,5,340,0,0,6403,6404,5,132,0,0,6404,6405,3,1382,691,0,
        6405,6506,1,0,0,0,6406,6407,5,176,0,0,6407,6408,5,388,0,0,6408,6409,
        3,1382,691,0,6409,6410,5,118,0,0,6410,6411,3,1378,689,0,6411,6412,
        5,340,0,0,6412,6413,5,132,0,0,6413,6414,3,1382,691,0,6414,6506,1,
        0,0,0,6415,6416,5,176,0,0,6416,6417,5,236,0,0,6417,6418,5,388,0,
        0,6418,6419,3,1382,691,0,6419,6420,5,340,0,0,6420,6421,5,132,0,0,
        6421,6422,3,1382,691,0,6422,6506,1,0,0,0,6423,6424,5,176,0,0,6424,
        6425,5,349,0,0,6425,6426,3,1408,704,0,6426,6427,5,340,0,0,6427,6428,
        5,132,0,0,6428,6429,3,1408,704,0,6429,6506,1,0,0,0,6430,6431,5,176,
        0,0,6431,6432,5,137,0,0,6432,6433,3,1408,704,0,6433,6434,5,340,0,
        0,6434,6435,5,132,0,0,6435,6436,3,1408,704,0,6436,6506,1,0,0,0,6437,
        6438,5,176,0,0,6438,6439,5,382,0,0,6439,6440,3,1382,691,0,6440,6441,
        5,340,0,0,6441,6442,5,132,0,0,6442,6443,3,1382,691,0,6443,6506,1,
        0,0,0,6444,6445,5,176,0,0,6445,6446,5,373,0,0,6446,6447,3,520,260,
        0,6447,6448,5,340,0,0,6448,6449,5,132,0,0,6449,6450,3,1382,691,0,
        6450,6506,1,0,0,0,6451,6452,5,176,0,0,6452,6453,5,386,0,0,6453,6454,
        5,356,0,0,6454,6455,5,314,0,0,6455,6456,3,520,260,0,6456,6457,5,
        340,0,0,6457,6458,5,132,0,0,6458,6459,3,1382,691,0,6459,6506,1,0,
        0,0,6460,6461,5,176,0,0,6461,6462,5,386,0,0,6462,6463,5,356,0,0,
        6463,6464,5,223,0,0,6464,6465,3,520,260,0,6465,6466,5,340,0,0,6466,
        6467,5,132,0,0,6467,6468,3,1382,691,0,6468,6506,1,0,0,0,6469,6470,
        5,176,0,0,6470,6471,5,386,0,0,6471,6472,5,356,0,0,6472,6473,5,384,
        0,0,6473,6474,3,520,260,0,6474,6475,5,340,0,0,6475,6476,5,132,0,
        0,6476,6477,3,1382,691,0,6477,6506,1,0,0,0,6478,6479,5,176,0,0,6479,
        6480,5,386,0,0,6480,6481,5,356,0,0,6481,6482,5,201,0,0,6482,6483,
        3,520,260,0,6483,6484,5,340,0,0,6484,6485,5,132,0,0,6485,6486,3,
        1382,691,0,6486,6506,1,0,0,0,6487,6488,5,176,0,0,6488,6489,5,391,
        0,0,6489,6490,3,520,260,0,6490,6491,5,340,0,0,6491,6492,5,132,0,
        0,6492,6493,3,1382,691,0,6493,6506,1,0,0,0,6494,6495,5,176,0,0,6495,
        6496,5,391,0,0,6496,6497,3,520,260,0,6497,6498,5,340,0,0,6498,6499,
        5,181,0,0,6499,6500,3,1382,691,0,6500,6501,5,132,0,0,6501,6503,3,
        1382,691,0,6502,6504,3,104,52,0,6503,6502,1,0,0,0,6503,6504,1,0,
        0,0,6504,6506,1,0,0,0,6505,6018,1,0,0,0,6505,6025,1,0,0,0,6505,6032,
        1,0,0,0,6505,6039,1,0,0,0,6505,6046,1,0,0,0,6505,6053,1,0,0,0,6505,
        6062,1,0,0,0,6505,6071,1,0,0,0,6505,6078,1,0,0,0,6505,6085,1,0,0,
        0,6505,6095,1,0,0,0,6505,6105,1,0,0,0,6505,6115,1,0,0,0,6505,6124,
        1,0,0,0,6505,6135,1,0,0,0,6505,6142,1,0,0,0,6505,6149,1,0,0,0,6505,
        6156,1,0,0,0,6505,6163,1,0,0,0,6505,6170,1,0,0,0,6505,6177,1,0,0,
        0,6505,6184,1,0,0,0,6505,6193,1,0,0,0,6505,6200,1,0,0,0,6505,6209,
        1,0,0,0,6505,6216,1,0,0,0,6505,6225,1,0,0,0,6505,6233,1,0,0,0,6505,
        6243,1,0,0,0,6505,6250,1,0,0,0,6505,6259,1,0,0,0,6505,6267,1,0,0,
        0,6505,6277,1,0,0,0,6505,6288,1,0,0,0,6505,6301,1,0,0,0,6505,6312,
        1,0,0,0,6505,6325,1,0,0,0,6505,6337,1,0,0,0,6505,6351,1,0,0,0,6505,
        6360,1,0,0,0,6505,6371,1,0,0,0,6505,6383,1,0,0,0,6505,6397,1,0,0,
        0,6505,6406,1,0,0,0,6505,6415,1,0,0,0,6505,6423,1,0,0,0,6505,6430,
        1,0,0,0,6505,6437,1,0,0,0,6505,6444,1,0,0,0,6505,6451,1,0,0,0,6505,
        6460,1,0,0,0,6505,6469,1,0,0,0,6505,6478,1,0,0,0,6505,6487,1,0,0,
        0,6505,6494,1,0,0,0,6506,719,1,0,0,0,6507,6508,5,82,0,0,6508,721,
        1,0,0,0,6509,6510,5,364,0,0,6510,6511,5,212,0,0,6511,723,1,0,0,0,
        6512,6513,5,176,0,0,6513,6514,5,249,0,0,6514,6516,3,624,312,0,6515,
        6517,3,726,363,0,6516,6515,1,0,0,0,6516,6517,1,0,0,0,6517,6518,1,
        0,0,0,6518,6519,5,500,0,0,6519,6520,5,118,0,0,6520,6521,5,242,0,
        0,6521,6522,3,1382,691,0,6522,6582,1,0,0,0,6523,6524,5,176,0,0,6524,
        6525,5,327,0,0,6525,6527,3,624,312,0,6526,6528,3,726,363,0,6527,
        6526,1,0,0,0,6527,6528,1,0,0,0,6528,6529,1,0,0,0,6529,6530,5,500,
        0,0,6530,6531,5,118,0,0,6531,6532,5,242,0,0,6532,6533,3,1382,691,
        0,6533,6582,1,0,0,0,6534,6535,5,176,0,0,6535,6536,5,480,0,0,6536,
        6538,3,624,312,0,6537,6539,3,726,363,0,6538,6537,1,0,0,0,6538,6539,
        1,0,0,0,6539,6540,1,0,0,0,6540,6541,5,500,0,0,6541,6542,5,118,0,
        0,6542,6543,5,242,0,0,6543,6544,3,1382,691,0,6544,6582,1,0,0,0,6545,
        6546,5,176,0,0,6546,6547,5,388,0,0,6547,6548,3,1382,691,0,6548,6549,
        5,118,0,0,6549,6551,3,1378,689,0,6550,6552,3,726,363,0,6551,6550,
        1,0,0,0,6551,6552,1,0,0,0,6552,6553,1,0,0,0,6553,6554,5,500,0,0,
        6554,6555,5,118,0,0,6555,6556,5,242,0,0,6556,6557,3,1382,691,0,6557,
        6582,1,0,0,0,6558,6559,5,176,0,0,6559,6560,5,289,0,0,6560,6561,5,
        407,0,0,6561,6563,3,1378,689,0,6562,6564,3,726,363,0,6563,6562,1,
        0,0,0,6563,6564,1,0,0,0,6564,6565,1,0,0,0,6565,6566,5,500,0,0,6566,
        6567,5,118,0,0,6567,6568,5,242,0,0,6568,6569,3,1382,691,0,6569,6582,
        1,0,0,0,6570,6571,5,176,0,0,6571,6572,5,264,0,0,6572,6574,3,1378,
        689,0,6573,6575,3,726,363,0,6574,6573,1,0,0,0,6574,6575,1,0,0,0,
        6575,6576,1,0,0,0,6576,6577,5,500,0,0,6577,6578,5,118,0,0,6578,6579,
        5,242,0,0,6579,6580,3,1382,691,0,6580,6582,1,0,0,0,6581,6512,1,0,
        0,0,6581,6523,1,0,0,0,6581,6534,1,0,0,0,6581,6545,1,0,0,0,6581,6558,
        1,0,0,0,6581,6570,1,0,0,0,6582,725,1,0,0,0,6583,6584,5,300,0,0,6584,
        727,1,0,0,0,6585,6586,5,176,0,0,6586,6587,5,174,0,0,6587,6588,3,
        648,324,0,6588,6589,5,364,0,0,6589,6590,5,354,0,0,6590,6591,3,1382,
        691,0,6591,6803,1,0,0,0,6592,6593,5,176,0,0,6593,6594,5,146,0,0,
        6594,6595,3,520,260,0,6595,6596,5,364,0,0,6596,6597,5,354,0,0,6597,
        6598,3,1382,691,0,6598,6803,1,0,0,0,6599,6600,5,176,0,0,6600,6601,
        5,206,0,0,6601,6602,3,520,260,0,6602,6603,5,364,0,0,6603,6604,5,
        354,0,0,6604,6605,3,1382,691,0,6605,6803,1,0,0,0,6606,6607,5,176,
        0,0,6607,6608,5,227,0,0,6608,6609,3,520,260,0,6609,6610,5,364,0,
        0,6610,6611,5,354,0,0,6611,6612,3,1382,691,0,6612,6803,1,0,0,0,6613,
        6614,5,176,0,0,6614,6615,5,242,0,0,6615,6616,3,1382,691,0,6616,6617,
        5,364,0,0,6617,6618,5,354,0,0,6618,6619,3,1382,691,0,6619,6803,1,
        0,0,0,6620,6621,5,176,0,0,6621,6622,5,249,0,0,6622,6623,3,624,312,
        0,6623,6624,5,364,0,0,6624,6625,5,354,0,0,6625,6626,3,1382,691,0,
        6626,6803,1,0,0,0,6627,6628,5,176,0,0,6628,6629,5,309,0,0,6629,6630,
        3,686,343,0,6630,6631,5,364,0,0,6631,6632,5,354,0,0,6632,6633,3,
        1382,691,0,6633,6803,1,0,0,0,6634,6635,5,176,0,0,6635,6636,5,309,
        0,0,6636,6637,5,194,0,0,6637,6638,3,520,260,0,6638,6639,5,138,0,
        0,6639,6640,3,1382,691,0,6640,6641,5,364,0,0,6641,6642,5,354,0,0,
        6642,6643,3,1382,691,0,6643,6803,1,0,0,0,6644,6645,5,176,0,0,6645,
        6646,5,309,0,0,6646,6647,5,244,0,0,6647,6648,3,520,260,0,6648,6649,
        5,138,0,0,6649,6650,3,1382,691,0,6650,6651,5,364,0,0,6651,6652,5,
        354,0,0,6652,6653,3,1382,691,0,6653,6803,1,0,0,0,6654,6655,5,176,
        0,0,6655,6656,5,327,0,0,6656,6657,3,624,312,0,6657,6658,5,364,0,
        0,6658,6659,5,354,0,0,6659,6660,3,1382,691,0,6660,6803,1,0,0,0,6661,
        6662,5,176,0,0,6662,6663,5,480,0,0,6663,6664,3,624,312,0,6664,6665,
        5,364,0,0,6665,6666,5,354,0,0,6666,6667,3,1382,691,0,6667,6803,1,
        0,0,0,6668,6669,5,176,0,0,6669,6670,5,130,0,0,6670,6671,3,1072,536,
        0,6671,6672,5,364,0,0,6672,6673,5,354,0,0,6673,6674,3,1382,691,0,
        6674,6803,1,0,0,0,6675,6676,5,176,0,0,6676,6677,5,130,0,0,6677,6678,
        5,258,0,0,6678,6679,5,427,0,0,6679,6680,3,1072,536,0,6680,6681,5,
        364,0,0,6681,6682,5,354,0,0,6682,6683,3,1382,691,0,6683,6803,1,0,
        0,0,6684,6685,5,176,0,0,6685,6686,5,373,0,0,6686,6687,3,520,260,
        0,6687,6688,5,364,0,0,6688,6689,5,354,0,0,6689,6690,3,1382,691,0,
        6690,6803,1,0,0,0,6691,6692,5,176,0,0,6692,6693,5,386,0,0,6693,6694,
        5,356,0,0,6694,6695,5,314,0,0,6695,6696,3,520,260,0,6696,6697,5,
        364,0,0,6697,6698,5,354,0,0,6698,6699,3,1382,691,0,6699,6803,1,0,
        0,0,6700,6701,5,176,0,0,6701,6702,5,386,0,0,6702,6703,5,356,0,0,
        6703,6704,5,223,0,0,6704,6705,3,520,260,0,6705,6706,5,364,0,0,6706,
        6707,5,354,0,0,6707,6708,3,1382,691,0,6708,6803,1,0,0,0,6709,6710,
        5,176,0,0,6710,6711,5,386,0,0,6711,6712,5,356,0,0,6712,6713,5,384,
        0,0,6713,6714,3,520,260,0,6714,6715,5,364,0,0,6715,6716,5,354,0,
        0,6716,6717,3,1382,691,0,6717,6803,1,0,0,0,6718,6719,5,176,0,0,6719,
        6720,5,386,0,0,6720,6721,5,356,0,0,6721,6722,5,201,0,0,6722,6723,
        3,520,260,0,6723,6724,5,364,0,0,6724,6725,5,354,0,0,6725,6726,3,
        1382,691,0,6726,6803,1,0,0,0,6727,6728,5,176,0,0,6728,6729,5,359,
        0,0,6729,6730,3,1378,689,0,6730,6731,5,364,0,0,6731,6732,5,354,0,
        0,6732,6733,3,1382,691,0,6733,6803,1,0,0,0,6734,6735,5,176,0,0,6735,
        6736,5,359,0,0,6736,6737,5,258,0,0,6737,6738,5,427,0,0,6738,6739,
        3,1378,689,0,6739,6740,5,364,0,0,6740,6741,5,354,0,0,6741,6742,3,
        1382,691,0,6742,6803,1,0,0,0,6743,6744,5,176,0,0,6744,6745,5,407,
        0,0,6745,6746,3,1378,689,0,6746,6747,5,364,0,0,6747,6748,5,354,0,
        0,6748,6749,3,1382,691,0,6749,6803,1,0,0,0,6750,6751,5,176,0,0,6751,
        6752,5,407,0,0,6752,6753,5,258,0,0,6753,6754,5,427,0,0,6754,6755,
        3,1378,689,0,6755,6756,5,364,0,0,6756,6757,5,354,0,0,6757,6758,3,
        1382,691,0,6758,6803,1,0,0,0,6759,6760,5,176,0,0,6760,6761,5,289,
        0,0,6761,6762,5,407,0,0,6762,6763,3,1378,689,0,6763,6764,5,364,0,
        0,6764,6765,5,354,0,0,6765,6766,3,1382,691,0,6766,6803,1,0,0,0,6767,
        6768,5,176,0,0,6768,6769,5,289,0,0,6769,6770,5,407,0,0,6770,6771,
        5,258,0,0,6771,6772,5,427,0,0,6772,6773,3,1378,689,0,6773,6774,5,
        364,0,0,6774,6775,5,354,0,0,6775,6776,3,1382,691,0,6776,6803,1,0,
        0,0,6777,6778,5,176,0,0,6778,6779,5,101,0,0,6779,6780,5,130,0,0,
        6780,6781,3,1072,536,0,6781,6782,5,364,0,0,6782,6783,5,354,0,0,6783,
        6784,3,1382,691,0,6784,6803,1,0,0,0,6785,6786,5,176,0,0,6786,6787,
        5,101,0,0,6787,6788,5,130,0,0,6788,6789,5,258,0,0,6789,6790,5,427,
        0,0,6790,6791,3,1072,536,0,6791,6792,5,364,0,0,6792,6793,5,354,0,
        0,6793,6794,3,1382,691,0,6794,6803,1,0,0,0,6795,6796,5,176,0,0,6796,
        6797,5,391,0,0,6797,6798,3,520,260,0,6798,6799,5,364,0,0,6799,6800,
        5,354,0,0,6800,6801,3,1382,691,0,6801,6803,1,0,0,0,6802,6585,1,0,
        0,0,6802,6592,1,0,0,0,6802,6599,1,0,0,0,6802,6606,1,0,0,0,6802,6613,
        1,0,0,0,6802,6620,1,0,0,0,6802,6627,1,0,0,0,6802,6634,1,0,0,0,6802,
        6644,1,0,0,0,6802,6654,1,0,0,0,6802,6661,1,0,0,0,6802,6668,1,0,0,
        0,6802,6675,1,0,0,0,6802,6684,1,0,0,0,6802,6691,1,0,0,0,6802,6700,
        1,0,0,0,6802,6709,1,0,0,0,6802,6718,1,0,0,0,6802,6727,1,0,0,0,6802,
        6734,1,0,0,0,6802,6743,1,0,0,0,6802,6750,1,0,0,0,6802,6759,1,0,0,
        0,6802,6767,1,0,0,0,6802,6777,1,0,0,0,6802,6785,1,0,0,0,6802,6795,
        1,0,0,0,6803,729,1,0,0,0,6804,6805,5,176,0,0,6805,6806,5,309,0,0,
        6806,6807,3,686,343,0,6807,6808,5,364,0,0,6808,6809,5,2,0,0,6809,
        6810,3,732,366,0,6810,6811,5,3,0,0,6811,731,1,0,0,0,6812,6817,3,
        734,367,0,6813,6814,5,6,0,0,6814,6816,3,734,367,0,6815,6813,1,0,
        0,0,6816,6819,1,0,0,0,6817,6815,1,0,0,0,6817,6818,1,0,0,0,6818,733,
        1,0,0,0,6819,6817,1,0,0,0,6820,6821,3,1420,710,0,6821,6822,5,10,
        0,0,6822,6823,5,438,0,0,6823,6829,1,0,0,0,6824,6825,3,1420,710,0,
        6825,6826,5,10,0,0,6826,6827,3,736,368,0,6827,6829,1,0,0,0,6828,
        6820,1,0,0,0,6828,6824,1,0,0,0,6829,735,1,0,0,0,6830,6836,3,638,
        319,0,6831,6836,3,1430,715,0,6832,6836,3,1276,638,0,6833,6836,3,
        288,144,0,6834,6836,3,1400,700,0,6835,6830,1,0,0,0,6835,6831,1,0,
        0,0,6835,6832,1,0,0,0,6835,6833,1,0,0,0,6835,6834,1,0,0,0,6836,737,
        1,0,0,0,6837,6838,5,176,0,0,6838,6839,5,391,0,0,6839,6840,3,520,
        260,0,6840,6841,5,364,0,0,6841,6842,5,2,0,0,6842,6843,3,732,366,
        0,6843,6844,5,3,0,0,6844,739,1,0,0,0,6845,6846,5,176,0,0,6846,6847,
        5,174,0,0,6847,6848,3,648,324,0,6848,6849,5,313,0,0,6849,6850,5,
        132,0,0,6850,6851,3,1410,705,0,6851,7031,1,0,0,0,6852,6853,5,176,
        0,0,6853,6854,5,146,0,0,6854,6855,3,520,260,0,6855,6856,5,313,0,
        0,6856,6857,5,132,0,0,6857,6858,3,1410,705,0,6858,7031,1,0,0,0,6859,
        6860,5,176,0,0,6860,6861,5,206,0,0,6861,6862,3,520,260,0,6862,6863,
        5,313,0,0,6863,6864,5,132,0,0,6864,6865,3,1410,705,0,6865,7031,1,
        0,0,0,6866,6867,5,176,0,0,6867,6868,5,213,0,0,6868,6869,3,1382,691,
        0,6869,6870,5,313,0,0,6870,6871,5,132,0,0,6871,6872,3,1410,705,0,
        6872,7031,1,0,0,0,6873,6874,5,176,0,0,6874,6875,5,227,0,0,6875,6876,
        3,520,260,0,6876,6877,5,313,0,0,6877,6878,5,132,0,0,6878,6879,3,
        1410,705,0,6879,7031,1,0,0,0,6880,6881,5,176,0,0,6881,6882,5,249,
        0,0,6882,6883,3,624,312,0,6883,6884,5,313,0,0,6884,6885,5,132,0,
        0,6885,6886,3,1410,705,0,6886,7031,1,0,0,0,6887,6889,5,176,0,0,6888,
        6890,3,304,152,0,6889,6888,1,0,0,0,6889,6890,1,0,0,0,6890,6891,1,
        0,0,0,6891,6892,5,276,0,0,6892,6893,3,1382,691,0,6893,6894,5,313,
        0,0,6894,6895,5,132,0,0,6895,6896,3,1410,705,0,6896,7031,1,0,0,0,
        6897,6898,5,176,0,0,6898,6899,5,277,0,0,6899,6900,5,305,0,0,6900,
        6901,3,288,144,0,6901,6902,5,313,0,0,6902,6903,5,132,0,0,6903,6904,
        3,1410,705,0,6904,7031,1,0,0,0,6905,6906,5,176,0,0,6906,6907,5,309,
        0,0,6907,6908,3,686,343,0,6908,6909,5,313,0,0,6909,6910,5,132,0,
        0,6910,6911,3,1410,705,0,6911,7031,1,0,0,0,6912,6913,5,176,0,0,6913,
        6914,5,309,0,0,6914,6915,5,194,0,0,6915,6916,3,520,260,0,6916,6917,
        5,138,0,0,6917,6918,3,1382,691,0,6918,6919,5,313,0,0,6919,6920,5,
        132,0,0,6920,6921,3,1410,705,0,6921,7031,1,0,0,0,6922,6923,5,176,
        0,0,6923,6924,5,309,0,0,6924,6925,5,244,0,0,6925,6926,3,520,260,
        0,6926,6927,5,138,0,0,6927,6928,3,1382,691,0,6928,6929,5,313,0,0,
        6929,6930,5,132,0,0,6930,6931,3,1410,705,0,6931,7031,1,0,0,0,6932,
        6933,5,176,0,0,6933,6934,5,327,0,0,6934,6935,3,624,312,0,6935,6936,
        5,313,0,0,6936,6937,5,132,0,0,6937,6938,3,1410,705,0,6938,7031,1,
        0,0,0,6939,6940,5,176,0,0,6940,6941,5,480,0,0,6941,6942,3,624,312,
        0,6942,6943,5,313,0,0,6943,6944,5,132,0,0,6944,6945,3,1410,705,0,
        6945,7031,1,0,0,0,6946,6947,5,176,0,0,6947,6948,5,354,0,0,6948,6949,
        3,1382,691,0,6949,6950,5,313,0,0,6950,6951,5,132,0,0,6951,6952,3,
        1410,705,0,6952,7031,1,0,0,0,6953,6954,5,176,0,0,6954,6955,5,391,
        0,0,6955,6956,3,520,260,0,6956,6957,5,313,0,0,6957,6958,5,132,0,
        0,6958,6959,3,1410,705,0,6959,7031,1,0,0,0,6960,6961,5,176,0,0,6961,
        6962,5,382,0,0,6962,6963,3,1382,691,0,6963,6964,5,313,0,0,6964,6965,
        5,132,0,0,6965,6966,3,1410,705,0,6966,7031,1,0,0,0,6967,6968,5,176,
        0,0,6968,6969,5,373,0,0,6969,6970,3,520,260,0,6970,6971,5,313,0,
        0,6971,6972,5,132,0,0,6972,6973,3,1410,705,0,6973,7031,1,0,0,0,6974,
        6975,5,176,0,0,6975,6976,5,386,0,0,6976,6977,5,356,0,0,6977,6978,
        5,223,0,0,6978,6979,3,520,260,0,6979,6980,5,313,0,0,6980,6981,5,
        132,0,0,6981,6982,3,1410,705,0,6982,7031,1,0,0,0,6983,6984,5,176,
        0,0,6984,6985,5,386,0,0,6985,6986,5,356,0,0,6986,6987,5,201,0,0,
        6987,6988,3,520,260,0,6988,6989,5,313,0,0,6989,6990,5,132,0,0,6990,
        6991,3,1410,705,0,6991,7031,1,0,0,0,6992,6993,5,176,0,0,6993,6994,
        5,101,0,0,6994,6995,5,212,0,0,6995,6996,5,412,0,0,6996,6997,3,1382,
        691,0,6997,6998,5,313,0,0,6998,6999,5,132,0,0,6999,7000,3,1410,705,
        0,7000,7031,1,0,0,0,7001,7002,5,176,0,0,7002,7003,5,362,0,0,7003,
        7004,3,1382,691,0,7004,7005,5,313,0,0,7005,7006,5,132,0,0,7006,7007,
        3,1410,705,0,7007,7031,1,0,0,0,7008,7009,5,176,0,0,7009,7010,5,236,
        0,0,7010,7011,5,388,0,0,7011,7012,3,1382,691,0,7012,7013,5,313,0,
        0,7013,7014,5,132,0,0,7014,7015,3,1410,705,0,7015,7031,1,0,0,0,7016,
        7017,5,176,0,0,7017,7018,5,490,0,0,7018,7019,3,1382,691,0,7019,7020,
        5,313,0,0,7020,7021,5,132,0,0,7021,7022,3,1410,705,0,7022,7031,1,
        0,0,0,7023,7024,5,176,0,0,7024,7025,5,489,0,0,7025,7026,3,1382,691,
        0,7026,7027,5,313,0,0,7027,7028,5,132,0,0,7028,7029,3,1410,705,0,
        7029,7031,1,0,0,0,7030,6845,1,0,0,0,7030,6852,1,0,0,0,7030,6859,
        1,0,0,0,7030,6866,1,0,0,0,7030,6873,1,0,0,0,7030,6880,1,0,0,0,7030,
        6887,1,0,0,0,7030,6897,1,0,0,0,7030,6905,1,0,0,0,7030,6912,1,0,0,
        0,7030,6922,1,0,0,0,7030,6932,1,0,0,0,7030,6939,1,0,0,0,7030,6946,
        1,0,0,0,7030,6953,1,0,0,0,7030,6960,1,0,0,0,7030,6967,1,0,0,0,7030,
        6974,1,0,0,0,7030,6983,1,0,0,0,7030,6992,1,0,0,0,7030,7001,1,0,0,
        0,7030,7008,1,0,0,0,7030,7016,1,0,0,0,7030,7023,1,0,0,0,7031,741,
        1,0,0,0,7032,7033,5,84,0,0,7033,7034,5,490,0,0,7034,7036,3,1382,
        691,0,7035,7037,3,744,372,0,7036,7035,1,0,0,0,7036,7037,1,0,0,0,
        7037,7039,1,0,0,0,7038,7040,3,662,331,0,7039,7038,1,0,0,0,7039,7040,
        1,0,0,0,7040,743,1,0,0,0,7041,7042,3,746,373,0,7042,745,1,0,0,0,
        7043,7044,5,100,0,0,7044,7045,5,130,0,0,7045,7050,3,1074,537,0,7046,
        7047,5,100,0,0,7047,7048,5,68,0,0,7048,7050,5,381,0,0,7049,7043,
        1,0,0,0,7049,7046,1,0,0,0,7050,747,1,0,0,0,7051,7052,5,176,0,0,7052,
        7053,5,490,0,0,7053,7054,3,1382,691,0,7054,7055,5,364,0,0,7055,7056,
        3,456,228,0,7056,7079,1,0,0,0,7057,7058,5,176,0,0,7058,7059,5,490,
        0,0,7059,7060,3,1382,691,0,7060,7061,5,171,0,0,7061,7062,5,130,0,
        0,7062,7063,3,1074,537,0,7063,7079,1,0,0,0,7064,7065,5,176,0,0,7065,
        7066,5,490,0,0,7066,7067,3,1382,691,0,7067,7068,5,364,0,0,7068,7069,
        5,130,0,0,7069,7070,3,1074,537,0,7070,7079,1,0,0,0,7071,7072,5,176,
        0,0,7072,7073,5,490,0,0,7073,7074,3,1382,691,0,7074,7075,5,229,0,
        0,7075,7076,5,130,0,0,7076,7077,3,1074,537,0,7077,7079,1,0,0,0,7078,
        7051,1,0,0,0,7078,7057,1,0,0,0,7078,7064,1,0,0,0,7078,7071,1,0,0,
        0,7079,749,1,0,0,0,7080,7081,5,84,0,0,7081,7082,5,489,0,0,7082,7083,
        3,1382,691,0,7083,7084,5,202,0,0,7084,7085,3,1400,700,0,7085,7086,
        5,490,0,0,7086,7088,3,752,376,0,7087,7089,3,662,331,0,7088,7087,
        1,0,0,0,7088,7089,1,0,0,0,7089,751,1,0,0,0,7090,7095,3,754,377,0,
        7091,7092,5,6,0,0,7092,7094,3,754,377,0,7093,7091,1,0,0,0,7094,7097,
        1,0,0,0,7095,7093,1,0,0,0,7095,7096,1,0,0,0,7096,753,1,0,0,0,7097,
        7095,1,0,0,0,7098,7099,3,1420,710,0,7099,755,1,0,0,0,7100,7101,5,
        176,0,0,7101,7102,5,489,0,0,7102,7103,3,1382,691,0,7103,7104,5,364,
        0,0,7104,7105,3,456,228,0,7105,7140,1,0,0,0,7106,7107,5,176,0,0,
        7107,7108,5,489,0,0,7108,7109,3,1382,691,0,7109,7110,5,202,0,0,7110,
        7111,3,1400,700,0,7111,7140,1,0,0,0,7112,7113,5,176,0,0,7113,7114,
        5,489,0,0,7114,7115,3,1382,691,0,7115,7116,5,336,0,0,7116,7118,5,
        490,0,0,7117,7119,3,662,331,0,7118,7117,1,0,0,0,7118,7119,1,0,0,
        0,7119,7140,1,0,0,0,7120,7121,5,176,0,0,7121,7122,5,489,0,0,7122,
        7123,3,1382,691,0,7123,7124,5,364,0,0,7124,7125,5,490,0,0,7125,7127,
        3,752,376,0,7126,7128,3,662,331,0,7127,7126,1,0,0,0,7127,7128,1,
        0,0,0,7128,7140,1,0,0,0,7129,7130,5,176,0,0,7130,7131,5,489,0,0,
        7131,7132,3,1382,691,0,7132,7133,5,231,0,0,7133,7140,1,0,0,0,7134,
        7135,5,176,0,0,7135,7136,5,489,0,0,7136,7137,3,1382,691,0,7137,7138,
        5,224,0,0,7138,7140,1,0,0,0,7139,7100,1,0,0,0,7139,7106,1,0,0,0,
        7139,7112,1,0,0,0,7139,7120,1,0,0,0,7139,7129,1,0,0,0,7139,7134,
        1,0,0,0,7140,757,1,0,0,0,7141,7142,5,229,0,0,7142,7143,5,489,0,0,
        7143,7145,3,1382,691,0,7144,7146,3,104,52,0,7145,7144,1,0,0,0,7145,
        7146,1,0,0,0,7146,7156,1,0,0,0,7147,7148,5,229,0,0,7148,7149,5,489,
        0,0,7149,7150,5,258,0,0,7150,7151,5,427,0,0,7151,7153,3,1382,691,
        0,7152,7154,3,104,52,0,7153,7152,1,0,0,0,7153,7154,1,0,0,0,7154,
        7156,1,0,0,0,7155,7141,1,0,0,0,7155,7147,1,0,0,0,7156,759,1,0,0,
        0,7157,7159,5,84,0,0,7158,7160,3,616,308,0,7159,7158,1,0,0,0,7159,
        7160,1,0,0,0,7160,7161,1,0,0,0,7161,7162,5,352,0,0,7162,7163,3,1382,
        691,0,7163,7164,5,74,0,0,7164,7165,5,118,0,0,7165,7166,3,770,385,
        0,7166,7167,5,132,0,0,7167,7169,3,1378,689,0,7168,7170,3,1092,546,
        0,7169,7168,1,0,0,0,7169,7170,1,0,0,0,7170,7171,1,0,0,0,7171,7173,
        5,95,0,0,7172,7174,3,772,386,0,7173,7172,1,0,0,0,7173,7174,1,0,0,
        0,7174,7175,1,0,0,0,7175,7176,3,762,381,0,7176,761,1,0,0,0,7177,
        7184,5,301,0,0,7178,7184,3,766,383,0,7179,7180,5,2,0,0,7180,7181,
        3,764,382,0,7181,7182,5,3,0,0,7182,7184,1,0,0,0,7183,7177,1,0,0,
        0,7183,7178,1,0,0,0,7183,7179,1,0,0,0,7184,763,1,0,0,0,7185,7187,
        3,768,384,0,7186,7185,1,0,0,0,7186,7187,1,0,0,0,7187,7194,1,0,0,
        0,7188,7190,5,7,0,0,7189,7191,3,768,384,0,7190,7189,1,0,0,0,7190,
        7191,1,0,0,0,7191,7193,1,0,0,0,7192,7188,1,0,0,0,7193,7196,1,0,0,
        0,7194,7192,1,0,0,0,7194,7195,1,0,0,0,7195,765,1,0,0,0,7196,7194,
        1,0,0,0,7197,7203,3,964,482,0,7198,7203,3,906,453,0,7199,7203,3,
        946,473,0,7200,7203,3,932,466,0,7201,7203,3,774,387,0,7202,7197,
        1,0,0,0,7202,7198,1,0,0,0,7202,7199,1,0,0,0,7202,7200,1,0,0,0,7202,
        7201,1,0,0,0,7203,767,1,0,0,0,7204,7205,3,766,383,0,7205,769,1,0,
        0,0,7206,7207,7,31,0,0,7207,771,1,0,0,0,7208,7209,7,32,0,0,7209,
        773,1,0,0,0,7210,7211,5,302,0,0,7211,7213,3,1414,707,0,7212,7214,
        3,776,388,0,7213,7212,1,0,0,0,7213,7214,1,0,0,0,7214,775,1,0,0,0,
        7215,7216,5,6,0,0,7216,7217,3,1400,700,0,7217,777,1,0,0,0,7218,7219,
        5,281,0,0,7219,7220,3,1414,707,0,7220,779,1,0,0,0,7221,7222,5,397,
        0,0,7222,7226,3,1414,707,0,7223,7224,5,397,0,0,7224,7226,5,9,0,0,
        7225,7221,1,0,0,0,7225,7223,1,0,0,0,7226,781,1,0,0,0,7227,7229,5,
        167,0,0,7228,7230,3,784,392,0,7229,7228,1,0,0,0,7229,7230,1,0,0,
        0,7230,7232,1,0,0,0,7231,7233,3,792,396,0,7232,7231,1,0,0,0,7232,
        7233,1,0,0,0,7233,7297,1,0,0,0,7234,7236,5,184,0,0,7235,7237,3,784,
        392,0,7236,7235,1,0,0,0,7236,7237,1,0,0,0,7237,7239,1,0,0,0,7238,
        7240,3,790,395,0,7239,7238,1,0,0,0,7239,7240,1,0,0,0,7240,7297,1,
        0,0,0,7241,7242,5,371,0,0,7242,7244,5,387,0,0,7243,7245,3,790,395,
        0,7244,7243,1,0,0,0,7244,7245,1,0,0,0,7245,7297,1,0,0,0,7246,7248,
        5,199,0,0,7247,7249,3,784,392,0,7248,7247,1,0,0,0,7248,7249,1,0,
        0,0,7249,7251,1,0,0,0,7250,7252,3,792,396,0,7251,7250,1,0,0,0,7251,
        7252,1,0,0,0,7252,7297,1,0,0,0,7253,7255,5,492,0,0,7254,7256,3,784,
        392,0,7255,7254,1,0,0,0,7255,7256,1,0,0,0,7256,7258,1,0,0,0,7257,
        7259,3,792,396,0,7258,7257,1,0,0,0,7258,7259,1,0,0,0,7259,7297,1,
        0,0,0,7260,7262,5,350,0,0,7261,7263,3,784,392,0,7262,7261,1,0,0,
        0,7262,7263,1,0,0,0,7263,7265,1,0,0,0,7264,7266,3,792,396,0,7265,
        7264,1,0,0,0,7265,7266,1,0,0,0,7266,7297,1,0,0,0,7267,7268,5,353,
        0,0,7268,7297,3,1414,707,0,7269,7270,5,339,0,0,7270,7271,5,353,0,
        0,7271,7297,3,1414,707,0,7272,7273,5,339,0,0,7273,7297,3,1414,707,
        0,7274,7276,5,350,0,0,7275,7277,3,784,392,0,7276,7275,1,0,0,0,7276,
        7277,1,0,0,0,7277,7278,1,0,0,0,7278,7279,5,132,0,0,7279,7280,5,353,
        0,0,7280,7297,3,1414,707,0,7281,7283,5,350,0,0,7282,7284,3,784,392,
        0,7283,7282,1,0,0,0,7283,7284,1,0,0,0,7284,7285,1,0,0,0,7285,7286,
        5,132,0,0,7286,7297,3,1414,707,0,7287,7288,5,321,0,0,7288,7289,5,
        387,0,0,7289,7297,3,1400,700,0,7290,7291,5,199,0,0,7291,7292,5,322,
        0,0,7292,7297,3,1400,700,0,7293,7294,5,350,0,0,7294,7295,5,322,0,
        0,7295,7297,3,1400,700,0,7296,7227,1,0,0,0,7296,7234,1,0,0,0,7296,
        7241,1,0,0,0,7296,7246,1,0,0,0,7296,7253,1,0,0,0,7296,7260,1,0,0,
        0,7296,7267,1,0,0,0,7296,7269,1,0,0,0,7296,7272,1,0,0,0,7296,7274,
        1,0,0,0,7296,7281,1,0,0,0,7296,7287,1,0,0,0,7296,7290,1,0,0,0,7296,
        7293,1,0,0,0,7297,783,1,0,0,0,7298,7299,7,33,0,0,7299,785,1,0,0,
        0,7300,7301,5,273,0,0,7301,7302,5,280,0,0,7302,7311,3,60,30,0,7303,
        7304,5,331,0,0,7304,7311,5,119,0,0,7305,7306,5,331,0,0,7306,7311,
        5,413,0,0,7307,7311,5,92,0,0,7308,7309,5,115,0,0,7309,7311,5,92,
        0,0,7310,7300,1,0,0,0,7310,7303,1,0,0,0,7310,7305,1,0,0,0,7310,7307,
        1,0,0,0,7310,7308,1,0,0,0,7311,787,1,0,0,0,7312,7319,3,786,393,0,
        7313,7315,5,6,0,0,7314,7313,1,0,0,0,7314,7315,1,0,0,0,7315,7316,
        1,0,0,0,7316,7318,3,786,393,0,7317,7314,1,0,0,0,7318,7321,1,0,0,
        0,7319,7317,1,0,0,0,7319,7320,1,0,0,0,7320,789,1,0,0,0,7321,7319,
        1,0,0,0,7322,7323,3,788,394,0,7323,791,1,0,0,0,7324,7326,5,71,0,
        0,7325,7327,5,300,0,0,7326,7325,1,0,0,0,7326,7327,1,0,0,0,7327,7328,
        1,0,0,0,7328,7329,5,191,0,0,7329,793,1,0,0,0,7330,7333,5,84,0,0,
        7331,7332,5,120,0,0,7332,7334,5,342,0,0,7333,7331,1,0,0,0,7333,7334,
        1,0,0,0,7334,7336,1,0,0,0,7335,7337,3,170,85,0,7336,7335,1,0,0,0,
        7336,7337,1,0,0,0,7337,7355,1,0,0,0,7338,7339,5,407,0,0,7339,7341,
        3,1378,689,0,7340,7342,3,210,105,0,7341,7340,1,0,0,0,7341,7342,1,
        0,0,0,7342,7344,1,0,0,0,7343,7345,3,114,57,0,7344,7343,1,0,0,0,7344,
        7345,1,0,0,0,7345,7356,1,0,0,0,7346,7347,5,334,0,0,7347,7348,5,407,
        0,0,7348,7349,3,1378,689,0,7349,7350,5,2,0,0,7350,7351,3,212,106,
        0,7351,7353,5,3,0,0,7352,7354,3,114,57,0,7353,7352,1,0,0,0,7353,
        7354,1,0,0,0,7354,7356,1,0,0,0,7355,7338,1,0,0,0,7355,7346,1,0,0,
        0,7356,7357,1,0,0,0,7357,7358,5,74,0,0,7358,7360,3,964,482,0,7359,
        7361,3,796,398,0,7360,7359,1,0,0,0,7360,7361,1,0,0,0,7361,795,1,
        0,0,0,7362,7364,5,143,0,0,7363,7365,7,34,0,0,7364,7363,1,0,0,0,7364,
        7365,1,0,0,0,7365,7366,1,0,0,0,7366,7367,5,80,0,0,7367,7368,5,310,
        0,0,7368,797,1,0,0,0,7369,7370,5,282,0,0,7370,7371,3,1386,693,0,
        7371,799,1,0,0,0,7372,7373,5,84,0,0,7373,7374,5,213,0,0,7374,7376,
        3,1382,691,0,7375,7377,3,12,6,0,7376,7375,1,0,0,0,7376,7377,1,0,
        0,0,7377,7379,1,0,0,0,7378,7380,3,802,401,0,7379,7378,1,0,0,0,7379,
        7380,1,0,0,0,7380,801,1,0,0,0,7381,7382,3,804,402,0,7382,803,1,0,
        0,0,7383,7385,3,806,403,0,7384,7383,1,0,0,0,7385,7386,1,0,0,0,7386,
        7384,1,0,0,0,7386,7387,1,0,0,0,7387,805,1,0,0,0,7388,7390,3,808,
        404,0,7389,7391,3,810,405,0,7390,7389,1,0,0,0,7390,7391,1,0,0,0,
        7391,7395,1,0,0,0,7392,7396,3,1406,703,0,7393,7396,3,62,31,0,7394,
        7396,5,91,0,0,7395,7392,1,0,0,0,7395,7393,1,0,0,0,7395,7394,1,0,
        0,0,7396,807,1,0,0,0,7397,7406,3,1436,718,0,7398,7399,5,202,0,0,
        7399,7406,5,112,0,0,7400,7406,5,232,0,0,7401,7406,5,284,0,0,7402,
        7406,5,313,0,0,7403,7406,5,382,0,0,7404,7406,5,384,0,0,7405,7397,
        1,0,0,0,7405,7398,1,0,0,0,7405,7400,1,0,0,0,7405,7401,1,0,0,0,7405,
        7402,1,0,0,0,7405,7403,1,0,0,0,7405,7404,1,0,0,0,7406,809,1,0,0,
        0,7407,7408,5,10,0,0,7408,811,1,0,0,0,7409,7410,5,176,0,0,7410,7411,
        5,213,0,0,7411,7422,3,1382,691,0,7412,7414,5,143,0,0,7413,7415,3,
        802,401,0,7414,7413,1,0,0,0,7414,7415,1,0,0,0,7415,7423,1,0,0,0,
        7416,7418,3,802,401,0,7417,7416,1,0,0,0,7417,7418,1,0,0,0,7418,7423,
        1,0,0,0,7419,7420,5,364,0,0,7420,7421,5,382,0,0,7421,7423,3,1382,
        691,0,7422,7412,1,0,0,0,7422,7417,1,0,0,0,7422,7419,1,0,0,0,7423,
        813,1,0,0,0,7424,7425,5,176,0,0,7425,7426,5,213,0,0,7426,7427,3,
        1382,691,0,7427,7428,3,76,38,0,7428,815,1,0,0,0,7429,7430,5,229,
        0,0,7430,7433,5,213,0,0,7431,7432,5,258,0,0,7432,7434,5,427,0,0,
        7433,7431,1,0,0,0,7433,7434,1,0,0,0,7434,7435,1,0,0,0,7435,7443,
        3,1382,691,0,7436,7438,3,12,6,0,7437,7436,1,0,0,0,7437,7438,1,0,
        0,0,7438,7439,1,0,0,0,7439,7440,5,2,0,0,7440,7441,3,818,409,0,7441,
        7442,5,3,0,0,7442,7444,1,0,0,0,7443,7437,1,0,0,0,7443,7444,1,0,0,
        0,7444,817,1,0,0,0,7445,7450,3,820,410,0,7446,7447,5,6,0,0,7447,
        7449,3,820,410,0,7448,7446,1,0,0,0,7449,7452,1,0,0,0,7450,7448,1,
        0,0,0,7450,7451,1,0,0,0,7451,819,1,0,0,0,7452,7450,1,0,0,0,7453,
        7454,5,247,0,0,7454,821,1,0,0,0,7455,7456,5,176,0,0,7456,7457,5,
        146,0,0,7457,7458,3,520,260,0,7458,7459,5,336,0,0,7459,7460,5,406,
        0,0,7460,823,1,0,0,0,7461,7462,5,176,0,0,7462,7463,5,380,0,0,7463,
        7464,7,35,0,0,7464,7465,3,50,25,0,7465,825,1,0,0,0,7466,7467,5,84,
        0,0,7467,7468,5,227,0,0,7468,7470,3,520,260,0,7469,7471,3,830,415,
        0,7470,7469,1,0,0,0,7470,7471,1,0,0,0,7471,7472,1,0,0,0,7472,7473,
        3,1116,558,0,7473,7474,3,188,94,0,7474,827,1,0,0,0,7475,7476,5,176,
        0,0,7476,7477,5,227,0,0,7477,7500,3,520,260,0,7478,7501,3,102,51,
        0,7479,7480,5,229,0,0,7480,7481,5,115,0,0,7481,7501,5,116,0,0,7482,
        7483,5,364,0,0,7483,7484,5,115,0,0,7484,7501,5,116,0,0,7485,7486,
        5,171,0,0,7486,7501,3,204,102,0,7487,7488,5,229,0,0,7488,7491,5,
        83,0,0,7489,7490,5,258,0,0,7490,7492,5,427,0,0,7491,7489,1,0,0,0,
        7491,7492,1,0,0,0,7492,7493,1,0,0,0,7493,7495,3,1382,691,0,7494,
        7496,3,104,52,0,7495,7494,1,0,0,0,7495,7496,1,0,0,0,7496,7501,1,
        0,0,0,7497,7498,5,403,0,0,7498,7499,5,83,0,0,7499,7501,3,1382,691,
        0,7500,7478,1,0,0,0,7500,7479,1,0,0,0,7500,7482,1,0,0,0,7500,7485,
        1,0,0,0,7500,7487,1,0,0,0,7500,7497,1,0,0,0,7501,829,1,0,0,0,7502,
        7503,5,74,0,0,7503,831,1,0,0,0,7504,7505,5,176,0,0,7505,7506,5,386,
        0,0,7506,7507,5,356,0,0,7507,7508,5,223,0,0,7508,7509,3,520,260,
        0,7509,7510,3,456,228,0,7510,833,1,0,0,0,7511,7512,5,176,0,0,7512,
        7513,5,386,0,0,7513,7514,5,356,0,0,7514,7515,5,201,0,0,7515,7516,
        3,520,260,0,7516,7517,5,171,0,0,7517,7518,5,286,0,0,7518,7519,5,
        100,0,0,7519,7520,3,1380,690,0,7520,7521,3,836,418,0,7521,7522,3,
        518,259,0,7522,7584,1,0,0,0,7523,7524,5,176,0,0,7524,7525,5,386,
        0,0,7525,7526,5,356,0,0,7526,7527,5,201,0,0,7527,7528,3,520,260,
        0,7528,7529,5,176,0,0,7529,7530,5,286,0,0,7530,7531,5,100,0,0,7531,
        7532,3,1380,690,0,7532,7533,3,836,418,0,7533,7534,3,518,259,0,7534,
        7584,1,0,0,0,7535,7536,5,176,0,0,7536,7537,5,386,0,0,7537,7538,5,
        356,0,0,7538,7539,5,201,0,0,7539,7540,3,520,260,0,7540,7541,5,176,
        0,0,7541,7542,5,286,0,0,7542,7543,5,342,0,0,7543,7544,3,520,260,
        0,7544,7545,3,836,418,0,7545,7546,3,520,260,0,7546,7584,1,0,0,0,
        7547,7548,5,176,0,0,7548,7549,5,386,0,0,7549,7550,5,356,0,0,7550,
        7551,5,201,0,0,7551,7552,3,520,260,0,7552,7553,5,176,0,0,7553,7554,
        5,286,0,0,7554,7555,5,100,0,0,7555,7556,3,1380,690,0,7556,7557,5,
        342,0,0,7557,7558,3,520,260,0,7558,7559,3,836,418,0,7559,7560,3,
        520,260,0,7560,7584,1,0,0,0,7561,7562,5,176,0,0,7562,7563,5,386,
        0,0,7563,7564,5,356,0,0,7564,7565,5,201,0,0,7565,7566,3,520,260,
        0,7566,7567,5,229,0,0,7567,7568,5,286,0,0,7568,7569,5,100,0,0,7569,
        7570,3,1380,690,0,7570,7584,1,0,0,0,7571,7572,5,176,0,0,7572,7573,
        5,386,0,0,7573,7574,5,356,0,0,7574,7575,5,201,0,0,7575,7576,3,520,
        260,0,7576,7577,5,229,0,0,7577,7578,5,286,0,0,7578,7579,5,258,0,
        0,7579,7580,5,427,0,0,7580,7581,5,100,0,0,7581,7582,3,1380,690,0,
        7582,7584,1,0,0,0,7583,7511,1,0,0,0,7583,7523,1,0,0,0,7583,7535,
        1,0,0,0,7583,7547,1,0,0,0,7583,7561,1,0,0,0,7583,7571,1,0,0,0,7584,
        835,1,0,0,0,7585,7586,5,143,0,0,7586,837,1,0,0,0,7587,7589,5,84,
        0,0,7588,7590,3,484,242,0,7589,7588,1,0,0,0,7589,7590,1,0,0,0,7590,
        7591,1,0,0,0,7591,7592,5,206,0,0,7592,7593,3,520,260,0,7593,7594,
        5,100,0,0,7594,7595,3,1400,700,0,7595,7596,5,132,0,0,7596,7597,3,
        1400,700,0,7597,7598,5,102,0,0,7598,7599,3,520,260,0,7599,839,1,
        0,0,0,7600,7602,5,196,0,0,7601,7603,3,868,434,0,7602,7601,1,0,0,
        0,7602,7603,1,0,0,0,7603,7604,1,0,0,0,7604,7606,3,1378,689,0,7605,
        7607,3,842,421,0,7606,7605,1,0,0,0,7606,7607,1,0,0,0,7607,7621,1,
        0,0,0,7608,7610,5,196,0,0,7609,7611,3,868,434,0,7610,7609,1,0,0,
        0,7610,7611,1,0,0,0,7611,7621,1,0,0,0,7612,7614,5,196,0,0,7613,7615,
        3,868,434,0,7614,7613,1,0,0,0,7614,7615,1,0,0,0,7615,7616,1,0,0,
        0,7616,7617,3,1382,691,0,7617,7618,5,118,0,0,7618,7619,3,1378,689,
        0,7619,7621,1,0,0,0,7620,7600,1,0,0,0,7620,7608,1,0,0,0,7620,7612,
        1,0,0,0,7621,841,1,0,0,0,7622,7623,5,138,0,0,7623,7624,3,1382,691,
        0,7624,843,1,0,0,0,7625,7627,5,401,0,0,7626,7628,3,870,435,0,7627,
        7626,1,0,0,0,7627,7628,1,0,0,0,7628,7630,1,0,0,0,7629,7631,3,872,
        436,0,7630,7629,1,0,0,0,7630,7631,1,0,0,0,7631,7633,1,0,0,0,7632,
        7634,3,868,434,0,7633,7632,1,0,0,0,7633,7634,1,0,0,0,7634,7636,1,
        0,0,0,7635,7637,3,866,433,0,7636,7635,1,0,0,0,7636,7637,1,0,0,0,
        7637,7639,1,0,0,0,7638,7640,3,880,440,0,7639,7638,1,0,0,0,7639,7640,
        1,0,0,0,7640,7649,1,0,0,0,7641,7642,5,401,0,0,7642,7643,5,2,0,0,
        7643,7644,3,850,425,0,7644,7646,5,3,0,0,7645,7647,3,880,440,0,7646,
        7645,1,0,0,0,7646,7647,1,0,0,0,7647,7649,1,0,0,0,7648,7625,1,0,0,
        0,7648,7641,1,0,0,0,7649,845,1,0,0,0,7650,7652,3,852,426,0,7651,
        7653,3,868,434,0,7652,7651,1,0,0,0,7652,7653,1,0,0,0,7653,7655,1,
        0,0,0,7654,7656,3,880,440,0,7655,7654,1,0,0,0,7655,7656,1,0,0,0,
        7656,7665,1,0,0,0,7657,7658,3,852,426,0,7658,7659,5,2,0,0,7659,7660,
        3,850,425,0,7660,7662,5,3,0,0,7661,7663,3,880,440,0,7662,7661,1,
        0,0,0,7662,7663,1,0,0,0,7663,7665,1,0,0,0,7664,7650,1,0,0,0,7664,
        7657,1,0,0,0,7665,847,1,0,0,0,7666,7671,3,854,427,0,7667,7668,5,
        6,0,0,7668,7670,3,854,427,0,7669,7667,1,0,0,0,7670,7673,1,0,0,0,
        7671,7669,1,0,0,0,7671,7672,1,0,0,0,7672,849,1,0,0,0,7673,7671,1,
        0,0,0,7674,7679,3,860,430,0,7675,7676,5,6,0,0,7676,7678,3,860,430,
        0,7677,7675,1,0,0,0,7678,7681,1,0,0,0,7679,7677,1,0,0,0,7679,7680,
        1,0,0,0,7680,851,1,0,0,0,7681,7679,1,0,0,0,7682,7683,7,36,0,0,7683,
        853,1,0,0,0,7684,7686,3,856,428,0,7685,7687,3,858,429,0,7686,7685,
        1,0,0,0,7686,7687,1,0,0,0,7687,855,1,0,0,0,7688,7692,3,1418,709,
        0,7689,7692,3,852,426,0,7690,7692,5,67,0,0,7691,7688,1,0,0,0,7691,
        7689,1,0,0,0,7691,7690,1,0,0,0,7692,857,1,0,0,0,7693,7696,3,62,31,
        0,7694,7696,3,288,144,0,7695,7693,1,0,0,0,7695,7694,1,0,0,0,7696,
        859,1,0,0,0,7697,7699,3,862,431,0,7698,7700,3,864,432,0,7699,7698,
        1,0,0,0,7699,7700,1,0,0,0,7700,861,1,0,0,0,7701,7704,3,1418,709,
        0,7702,7704,3,852,426,0,7703,7701,1,0,0,0,7703,7702,1,0,0,0,7704,
        863,1,0,0,0,7705,7708,3,62,31,0,7706,7708,3,288,144,0,7707,7705,
        1,0,0,0,7707,7706,1,0,0,0,7708,865,1,0,0,0,7709,7710,3,852,426,0,
        7710,867,1,0,0,0,7711,7712,5,166,0,0,7712,869,1,0,0,0,7713,7714,
        5,151,0,0,7714,871,1,0,0,0,7715,7716,5,150,0,0,7716,873,1,0,0,0,
        7717,7718,5,2,0,0,7718,7719,3,1380,690,0,7719,7720,5,3,0,0,7720,
        875,1,0,0,0,7721,7723,3,1378,689,0,7722,7724,3,874,437,0,7723,7722,
        1,0,0,0,7723,7724,1,0,0,0,7724,877,1,0,0,0,7725,7730,3,876,438,0,
        7726,7727,5,6,0,0,7727,7729,3,876,438,0,7728,7726,1,0,0,0,7729,7732,
        1,0,0,0,7730,7728,1,0,0,0,7730,7731,1,0,0,0,7731,879,1,0,0,0,7732,
        7730,1,0,0,0,7733,7734,3,878,439,0,7734,881,1,0,0,0,7735,7736,5,
        241,0,0,7736,7754,3,884,442,0,7737,7738,5,241,0,0,7738,7740,3,852,
        426,0,7739,7741,3,868,434,0,7740,7739,1,0,0,0,7740,7741,1,0,0,0,
        7741,7742,1,0,0,0,7742,7743,3,884,442,0,7743,7754,1,0,0,0,7744,7745,
        5,241,0,0,7745,7746,5,166,0,0,7746,7754,3,884,442,0,7747,7748,5,
        241,0,0,7748,7749,5,2,0,0,7749,7750,3,886,443,0,7750,7751,5,3,0,
        0,7751,7752,3,884,442,0,7752,7754,1,0,0,0,7753,7735,1,0,0,0,7753,
        7737,1,0,0,0,7753,7744,1,0,0,0,7753,7747,1,0,0,0,7754,883,1,0,0,
        0,7755,7765,3,964,482,0,7756,7765,3,906,453,0,7757,7765,3,946,473,
        0,7758,7765,3,932,466,0,7759,7765,3,956,478,0,7760,7765,3,260,130,
        0,7761,7765,3,266,133,0,7762,7765,3,272,136,0,7763,7765,3,900,450,
        0,7764,7755,1,0,0,0,7764,7756,1,0,0,0,7764,7757,1,0,0,0,7764,7758,
        1,0,0,0,7764,7759,1,0,0,0,7764,7760,1,0,0,0,7764,7761,1,0,0,0,7764,
        7762,1,0,0,0,7764,7763,1,0,0,0,7765,885,1,0,0,0,7766,7771,3,888,
        444,0,7767,7768,5,6,0,0,7768,7770,3,888,444,0,7769,7767,1,0,0,0,
        7770,7773,1,0,0,0,7771,7769,1,0,0,0,7771,7772,1,0,0,0,7772,887,1,
        0,0,0,7773,7771,1,0,0,0,7774,7776,3,890,445,0,7775,7777,3,892,446,
        0,7776,7775,1,0,0,0,7776,7777,1,0,0,0,7777,889,1,0,0,0,7778,7781,
        3,1418,709,0,7779,7781,3,852,426,0,7780,7778,1,0,0,0,7780,7779,1,
        0,0,0,7781,891,1,0,0,0,7782,7785,3,62,31,0,7783,7785,3,288,144,0,
        7784,7782,1,0,0,0,7784,7783,1,0,0,0,7785,893,1,0,0,0,7786,7787,5,
        321,0,0,7787,7789,3,1382,691,0,7788,7790,3,896,448,0,7789,7788,1,
        0,0,0,7789,7790,1,0,0,0,7790,7791,1,0,0,0,7791,7792,5,74,0,0,7792,
        7793,3,898,449,0,7793,895,1,0,0,0,7794,7795,5,2,0,0,7795,7796,3,
        1286,643,0,7796,7797,5,3,0,0,7797,897,1,0,0,0,7798,7803,3,964,482,
        0,7799,7803,3,906,453,0,7800,7803,3,946,473,0,7801,7803,3,932,466,
        0,7802,7798,1,0,0,0,7802,7799,1,0,0,0,7802,7800,1,0,0,0,7802,7801,
        1,0,0,0,7803,899,1,0,0,0,7804,7805,5,240,0,0,7805,7807,3,1382,691,
        0,7806,7808,3,902,451,0,7807,7806,1,0,0,0,7807,7808,1,0,0,0,7808,
        7843,1,0,0,0,7809,7811,5,84,0,0,7810,7812,3,170,85,0,7811,7810,1,
        0,0,0,7811,7812,1,0,0,0,7812,7813,1,0,0,0,7813,7814,5,130,0,0,7814,
        7815,3,262,131,0,7815,7816,5,74,0,0,7816,7817,5,240,0,0,7817,7819,
        3,1382,691,0,7818,7820,3,902,451,0,7819,7818,1,0,0,0,7819,7820,1,
        0,0,0,7820,7822,1,0,0,0,7821,7823,3,264,132,0,7822,7821,1,0,0,0,
        7822,7823,1,0,0,0,7823,7843,1,0,0,0,7824,7826,5,84,0,0,7825,7827,
        3,170,85,0,7826,7825,1,0,0,0,7826,7827,1,0,0,0,7827,7828,1,0,0,0,
        7828,7829,5,130,0,0,7829,7830,5,258,0,0,7830,7831,5,115,0,0,7831,
        7832,5,427,0,0,7832,7833,3,262,131,0,7833,7834,5,74,0,0,7834,7835,
        5,240,0,0,7835,7837,3,1382,691,0,7836,7838,3,902,451,0,7837,7836,
        1,0,0,0,7837,7838,1,0,0,0,7838,7840,1,0,0,0,7839,7841,3,264,132,
        0,7840,7839,1,0,0,0,7840,7841,1,0,0,0,7841,7843,1,0,0,0,7842,7804,
        1,0,0,0,7842,7809,1,0,0,0,7842,7824,1,0,0,0,7843,901,1,0,0,0,7844,
        7845,5,2,0,0,7845,7846,3,1280,640,0,7846,7847,5,3,0,0,7847,903,1,
        0,0,0,7848,7849,5,215,0,0,7849,7859,3,1382,691,0,7850,7851,5,215,
        0,0,7851,7852,5,321,0,0,7852,7859,3,1382,691,0,7853,7854,5,215,0,
        0,7854,7859,5,68,0,0,7855,7856,5,215,0,0,7856,7857,5,321,0,0,7857,
        7859,5,68,0,0,7858,7848,1,0,0,0,7858,7850,1,0,0,0,7858,7853,1,0,
        0,0,7858,7855,1,0,0,0,7859,905,1,0,0,0,7860,7862,3,984,492,0,7861,
        7860,1,0,0,0,7861,7862,1,0,0,0,7862,7863,1,0,0,0,7863,7864,5,270,
        0,0,7864,7865,5,109,0,0,7865,7866,3,908,454,0,7866,7868,3,910,455,
        0,7867,7869,3,918,459,0,7868,7867,1,0,0,0,7868,7869,1,0,0,0,7869,
        7871,1,0,0,0,7870,7872,3,922,461,0,7871,7870,1,0,0,0,7871,7872,1,
        0,0,0,7872,907,1,0,0,0,7873,7876,3,1378,689,0,7874,7875,5,74,0,0,
        7875,7877,3,1414,707,0,7876,7874,1,0,0,0,7876,7877,1,0,0,0,7877,
        909,1,0,0,0,7878,7898,3,964,482,0,7879,7880,5,501,0,0,7880,7881,
        3,912,456,0,7881,7882,5,488,0,0,7882,7883,3,964,482,0,7883,7898,
        1,0,0,0,7884,7885,5,2,0,0,7885,7886,3,914,457,0,7886,7891,5,3,0,
        0,7887,7888,5,501,0,0,7888,7889,3,912,456,0,7889,7890,5,488,0,0,
        7890,7892,1,0,0,0,7891,7887,1,0,0,0,7891,7892,1,0,0,0,7892,7893,
        1,0,0,0,7893,7894,3,964,482,0,7894,7898,1,0,0,0,7895,7896,5,91,0,
        0,7896,7898,5,453,0,0,7897,7878,1,0,0,0,7897,7879,1,0,0,0,7897,7884,
        1,0,0,0,7897,7895,1,0,0,0,7898,911,1,0,0,0,7899,7900,7,37,0,0,7900,
        913,1,0,0,0,7901,7906,3,916,458,0,7902,7903,5,6,0,0,7903,7905,3,
        916,458,0,7904,7902,1,0,0,0,7905,7908,1,0,0,0,7906,7904,1,0,0,0,
        7906,7907,1,0,0,0,7907,915,1,0,0,0,7908,7906,1,0,0,0,7909,7910,3,
        1414,707,0,7910,7911,3,1326,663,0,7911,917,1,0,0,0,7912,7913,5,118,
        0,0,7913,7915,5,502,0,0,7914,7916,3,920,460,0,7915,7914,1,0,0,0,
        7915,7916,1,0,0,0,7916,7917,1,0,0,0,7917,7925,5,95,0,0,7918,7919,
        5,400,0,0,7919,7920,5,364,0,0,7920,7922,3,948,474,0,7921,7923,3,
        1092,546,0,7922,7921,1,0,0,0,7922,7923,1,0,0,0,7923,7926,1,0,0,0,
        7924,7926,5,301,0,0,7925,7918,1,0,0,0,7925,7924,1,0,0,0,7926,919,
        1,0,0,0,7927,7928,5,2,0,0,7928,7929,3,596,298,0,7929,7931,5,3,0,
        0,7930,7932,3,1092,546,0,7931,7930,1,0,0,0,7931,7932,1,0,0,0,7932,
        7937,1,0,0,0,7933,7934,5,118,0,0,7934,7935,5,83,0,0,7935,7937,3,
        1382,691,0,7936,7927,1,0,0,0,7936,7933,1,0,0,0,7937,921,1,0,0,0,
        7938,7939,5,125,0,0,7939,7940,3,1372,686,0,7940,923,1,0,0,0,7941,
        7943,5,291,0,0,7942,7944,5,109,0,0,7943,7942,1,0,0,0,7943,7944,1,
        0,0,0,7944,7945,1,0,0,0,7945,7947,3,1378,689,0,7946,7948,3,1064,
        532,0,7947,7946,1,0,0,0,7947,7948,1,0,0,0,7948,7949,1,0,0,0,7949,
        7952,5,138,0,0,7950,7953,3,966,483,0,7951,7953,3,1378,689,0,7952,
        7950,1,0,0,0,7952,7951,1,0,0,0,7953,7955,1,0,0,0,7954,7956,3,1064,
        532,0,7955,7954,1,0,0,0,7955,7956,1,0,0,0,7956,7957,1,0,0,0,7957,
        7958,5,118,0,0,7958,7967,3,1162,581,0,7959,7961,3,926,463,0,7960,
        7962,3,928,464,0,7961,7960,1,0,0,0,7961,7962,1,0,0,0,7962,7968,1,
        0,0,0,7963,7965,3,928,464,0,7964,7966,3,926,463,0,7965,7964,1,0,
        0,0,7965,7966,1,0,0,0,7966,7968,1,0,0,0,7967,7959,1,0,0,0,7967,7963,
        1,0,0,0,7968,7970,1,0,0,0,7969,7971,3,930,465,0,7970,7969,1,0,0,
        0,7970,7971,1,0,0,0,7971,925,1,0,0,0,7972,7973,5,140,0,0,7973,7974,
        5,115,0,0,7974,7977,5,288,0,0,7975,7976,5,71,0,0,7976,7978,3,1162,
        581,0,7977,7975,1,0,0,0,7977,7978,1,0,0,0,7978,7980,1,0,0,0,7979,
        7981,5,131,0,0,7980,7979,1,0,0,0,7980,7981,1,0,0,0,7981,7982,1,0,
        0,0,7982,7987,5,270,0,0,7983,7984,5,2,0,0,7984,7985,3,914,457,0,
        7985,7986,5,3,0,0,7986,7988,1,0,0,0,7987,7983,1,0,0,0,7987,7988,
        1,0,0,0,7988,7989,1,0,0,0,7989,7990,3,1056,528,0,7990,927,1,0,0,
        0,7991,7992,5,140,0,0,7992,7995,5,288,0,0,7993,7994,5,71,0,0,7994,
        7996,3,1162,581,0,7995,7993,1,0,0,0,7995,7996,1,0,0,0,7996,7998,
        1,0,0,0,7997,7999,5,131,0,0,7998,7997,1,0,0,0,7998,7999,1,0,0,0,
        7999,8000,1,0,0,0,8000,8001,5,400,0,0,8001,8002,5,364,0,0,8002,8003,
        3,948,474,0,8003,929,1,0,0,0,8004,8005,5,140,0,0,8005,8007,5,288,
        0,0,8006,8008,5,131,0,0,8007,8006,1,0,0,0,8007,8008,1,0,0,0,8008,
        8009,1,0,0,0,8009,8010,5,220,0,0,8010,931,1,0,0,0,8011,8013,3,984,
        492,0,8012,8011,1,0,0,0,8012,8013,1,0,0,0,8013,8014,1,0,0,0,8014,
        8015,5,220,0,0,8015,8016,5,102,0,0,8016,8018,3,1076,538,0,8017,8019,
        3,934,467,0,8018,8017,1,0,0,0,8018,8019,1,0,0,0,8019,8021,1,0,0,
        0,8020,8022,3,1094,547,0,8021,8020,1,0,0,0,8021,8022,1,0,0,0,8022,
        8024,1,0,0,0,8023,8025,3,922,461,0,8024,8023,1,0,0,0,8024,8025,1,
        0,0,0,8025,933,1,0,0,0,8026,8027,5,138,0,0,8027,8028,3,1060,530,
        0,8028,935,1,0,0,0,8029,8031,5,285,0,0,8030,8032,3,992,496,0,8031,
        8030,1,0,0,0,8031,8032,1,0,0,0,8032,8033,1,0,0,0,8033,8035,3,1074,
        537,0,8034,8036,3,938,469,0,8035,8034,1,0,0,0,8035,8036,1,0,0,0,
        8036,8038,1,0,0,0,8037,8039,3,942,471,0,8038,8037,1,0,0,0,8038,8039,
        1,0,0,0,8039,937,1,0,0,0,8040,8041,5,106,0,0,8041,8042,3,940,470,
        0,8042,8043,5,294,0,0,8043,939,1,0,0,0,8044,8045,5,169,0,0,8045,
        8057,7,38,0,0,8046,8047,5,445,0,0,8047,8057,7,38,0,0,8048,8053,5,
        365,0,0,8049,8050,5,400,0,0,8050,8054,5,239,0,0,8051,8052,5,445,
        0,0,8052,8054,5,239,0,0,8053,8049,1,0,0,0,8053,8051,1,0,0,0,8053,
        8054,1,0,0,0,8054,8057,1,0,0,0,8055,8057,5,239,0,0,8056,8044,1,0,
        0,0,8056,8046,1,0,0,0,8056,8048,1,0,0,0,8056,8055,1,0,0,0,8057,941,
        1,0,0,0,8058,8059,5,303,0,0,8059,943,1,0,0,0,8060,8064,5,303,0,0,
        8061,8062,5,503,0,0,8062,8064,5,504,0,0,8063,8060,1,0,0,0,8063,8061,
        1,0,0,0,8064,945,1,0,0,0,8065,8067,3,984,492,0,8066,8065,1,0,0,0,
        8066,8067,1,0,0,0,8067,8068,1,0,0,0,8068,8069,5,400,0,0,8069,8070,
        3,1076,538,0,8070,8071,5,364,0,0,8071,8073,3,948,474,0,8072,8074,
        3,1058,529,0,8073,8072,1,0,0,0,8073,8074,1,0,0,0,8074,8076,1,0,0,
        0,8075,8077,3,1094,547,0,8076,8075,1,0,0,0,8076,8077,1,0,0,0,8077,
        8079,1,0,0,0,8078,8080,3,922,461,0,8079,8078,1,0,0,0,8079,8080,1,
        0,0,0,8080,947,1,0,0,0,8081,8086,3,950,475,0,8082,8083,5,6,0,0,8083,
        8085,3,950,475,0,8084,8082,1,0,0,0,8085,8088,1,0,0,0,8086,8084,1,
        0,0,0,8086,8087,1,0,0,0,8087,949,1,0,0,0,8088,8086,1,0,0,0,8089,
        8090,3,952,476,0,8090,8091,5,10,0,0,8091,8092,3,1162,581,0,8092,
        8100,1,0,0,0,8093,8094,5,2,0,0,8094,8095,3,954,477,0,8095,8096,5,
        3,0,0,8096,8097,5,10,0,0,8097,8098,3,1162,581,0,8098,8100,1,0,0,
        0,8099,8089,1,0,0,0,8099,8093,1,0,0,0,8100,951,1,0,0,0,8101,8102,
        3,1414,707,0,8102,8103,3,1326,663,0,8103,953,1,0,0,0,8104,8109,3,
        952,476,0,8105,8106,5,6,0,0,8106,8108,3,952,476,0,8107,8105,1,0,
        0,0,8108,8111,1,0,0,0,8109,8107,1,0,0,0,8109,8110,1,0,0,0,8110,955,
        1,0,0,0,8111,8109,1,0,0,0,8112,8113,5,216,0,0,8113,8114,3,958,479,
        0,8114,8115,3,960,480,0,8115,8117,5,210,0,0,8116,8118,3,962,481,
        0,8117,8116,1,0,0,0,8117,8118,1,0,0,0,8118,8119,1,0,0,0,8119,8120,
        5,100,0,0,8120,8121,3,964,482,0,8121,957,1,0,0,0,8122,8123,3,1382,
        691,0,8123,959,1,0,0,0,8124,8125,5,300,0,0,8125,8130,5,355,0,0,8126,
        8130,5,355,0,0,8127,8130,5,145,0,0,8128,8130,5,269,0,0,8129,8124,
        1,0,0,0,8129,8126,1,0,0,0,8129,8127,1,0,0,0,8129,8128,1,0,0,0,8130,
        8133,1,0,0,0,8131,8129,1,0,0,0,8131,8132,1,0,0,0,8132,961,1,0,0,
        0,8133,8131,1,0,0,0,8134,8135,5,143,0,0,8135,8139,5,255,0,0,8136,
        8137,5,410,0,0,8137,8139,5,255,0,0,8138,8134,1,0,0,0,8138,8136,1,
        0,0,0,8139,963,1,0,0,0,8140,8143,3,968,484,0,8141,8143,3,966,483,
        0,8142,8140,1,0,0,0,8142,8141,1,0,0,0,8143,965,1,0,0,0,8144,8145,
        5,2,0,0,8145,8146,3,968,484,0,8146,8147,5,3,0,0,8147,8153,1,0,0,
        0,8148,8149,5,2,0,0,8149,8150,3,966,483,0,8150,8151,5,3,0,0,8151,
        8153,1,0,0,0,8152,8144,1,0,0,0,8152,8148,1,0,0,0,8153,967,1,0,0,
        0,8154,8156,3,970,485,0,8155,8157,3,1000,500,0,8156,8155,1,0,0,0,
        8156,8157,1,0,0,0,8157,8166,1,0,0,0,8158,8160,3,1044,522,0,8159,
        8161,3,1010,505,0,8160,8159,1,0,0,0,8160,8161,1,0,0,0,8161,8167,
        1,0,0,0,8162,8164,3,1008,504,0,8163,8165,3,1046,523,0,8164,8163,
        1,0,0,0,8164,8165,1,0,0,0,8165,8167,1,0,0,0,8166,8158,1,0,0,0,8166,
        8162,1,0,0,0,8166,8167,1,0,0,0,8167,8184,1,0,0,0,8168,8169,3,976,
        488,0,8169,8171,3,970,485,0,8170,8172,3,1000,500,0,8171,8170,1,0,
        0,0,8171,8172,1,0,0,0,8172,8181,1,0,0,0,8173,8175,3,1044,522,0,8174,
        8176,3,1010,505,0,8175,8174,1,0,0,0,8175,8176,1,0,0,0,8176,8182,
        1,0,0,0,8177,8179,3,1008,504,0,8178,8180,3,1046,523,0,8179,8178,
        1,0,0,0,8179,8180,1,0,0,0,8180,8182,1,0,0,0,8181,8173,1,0,0,0,8181,
        8177,1,0,0,0,8181,8182,1,0,0,0,8182,8184,1,0,0,0,8183,8154,1,0,0,
        0,8183,8168,1,0,0,0,8184,969,1,0,0,0,8185,8193,3,972,486,0,8186,
        8188,7,39,0,0,8187,8189,3,994,497,0,8188,8187,1,0,0,0,8188,8189,
        1,0,0,0,8189,8190,1,0,0,0,8190,8192,3,972,486,0,8191,8186,1,0,0,
        0,8192,8195,1,0,0,0,8193,8191,1,0,0,0,8193,8194,1,0,0,0,8194,971,
        1,0,0,0,8195,8193,1,0,0,0,8196,8204,3,974,487,0,8197,8199,5,108,
        0,0,8198,8200,3,994,497,0,8199,8198,1,0,0,0,8199,8200,1,0,0,0,8200,
        8201,1,0,0,0,8201,8203,3,974,487,0,8202,8197,1,0,0,0,8203,8206,1,
        0,0,0,8204,8202,1,0,0,0,8204,8205,1,0,0,0,8205,973,1,0,0,0,8206,
        8204,1,0,0,0,8207,8252,5,126,0,0,8208,8210,3,998,499,0,8209,8208,
        1,0,0,0,8209,8210,1,0,0,0,8210,8212,1,0,0,0,8211,8213,3,1370,685,
        0,8212,8211,1,0,0,0,8212,8213,1,0,0,0,8213,8215,1,0,0,0,8214,8216,
        3,986,493,0,8215,8214,1,0,0,0,8215,8216,1,0,0,0,8216,8218,1,0,0,
        0,8217,8219,3,1058,529,0,8218,8217,1,0,0,0,8218,8219,1,0,0,0,8219,
        8221,1,0,0,0,8220,8222,3,1092,546,0,8221,8220,1,0,0,0,8221,8222,
        1,0,0,0,8222,8224,1,0,0,0,8223,8225,3,1028,514,0,8224,8223,1,0,0,
        0,8224,8225,1,0,0,0,8225,8227,1,0,0,0,8226,8228,3,1042,521,0,8227,
        8226,1,0,0,0,8227,8228,1,0,0,0,8228,8230,1,0,0,0,8229,8231,3,1240,
        620,0,8230,8229,1,0,0,0,8230,8231,1,0,0,0,8231,8253,1,0,0,0,8232,
        8233,3,996,498,0,8233,8235,3,1372,686,0,8234,8236,3,986,493,0,8235,
        8234,1,0,0,0,8235,8236,1,0,0,0,8236,8238,1,0,0,0,8237,8239,3,1058,
        529,0,8238,8237,1,0,0,0,8238,8239,1,0,0,0,8239,8241,1,0,0,0,8240,
        8242,3,1092,546,0,8241,8240,1,0,0,0,8241,8242,1,0,0,0,8242,8244,
        1,0,0,0,8243,8245,3,1028,514,0,8244,8243,1,0,0,0,8244,8245,1,0,0,
        0,8245,8247,1,0,0,0,8246,8248,3,1042,521,0,8247,8246,1,0,0,0,8247,
        8248,1,0,0,0,8248,8250,1,0,0,0,8249,8251,3,1240,620,0,8250,8249,
        1,0,0,0,8250,8251,1,0,0,0,8251,8253,1,0,0,0,8252,8209,1,0,0,0,8252,
        8232,1,0,0,0,8253,8259,1,0,0,0,8254,8259,3,1056,528,0,8255,8256,
        5,130,0,0,8256,8259,3,1072,536,0,8257,8259,3,966,483,0,8258,8207,
        1,0,0,0,8258,8254,1,0,0,0,8258,8255,1,0,0,0,8258,8257,1,0,0,0,8259,
        975,1,0,0,0,8260,8262,5,143,0,0,8261,8263,5,334,0,0,8262,8261,1,
        0,0,0,8262,8263,1,0,0,0,8263,8264,1,0,0,0,8264,8265,3,978,489,0,
        8265,977,1,0,0,0,8266,8271,3,980,490,0,8267,8268,5,6,0,0,8268,8270,
        3,980,490,0,8269,8267,1,0,0,0,8270,8273,1,0,0,0,8271,8269,1,0,0,
        0,8271,8272,1,0,0,0,8272,979,1,0,0,0,8273,8271,1,0,0,0,8274,8276,
        3,1382,691,0,8275,8277,3,874,437,0,8276,8275,1,0,0,0,8276,8277,1,
        0,0,0,8277,8278,1,0,0,0,8278,8280,5,74,0,0,8279,8281,3,982,491,0,
        8280,8279,1,0,0,0,8280,8281,1,0,0,0,8281,8282,1,0,0,0,8282,8283,
        5,2,0,0,8283,8284,3,898,449,0,8284,8285,5,3,0,0,8285,981,1,0,0,0,
        8286,8290,5,289,0,0,8287,8288,5,115,0,0,8288,8290,5,289,0,0,8289,
        8286,1,0,0,0,8289,8287,1,0,0,0,8290,983,1,0,0,0,8291,8292,3,976,
        488,0,8292,985,1,0,0,0,8293,8294,5,109,0,0,8294,8295,3,990,495,0,
        8295,987,1,0,0,0,8296,8297,5,377,0,0,8297,989,1,0,0,0,8298,8300,
        7,40,0,0,8299,8298,1,0,0,0,8299,8300,1,0,0,0,8300,8301,1,0,0,0,8301,
        8303,7,12,0,0,8302,8304,3,992,496,0,8303,8302,1,0,0,0,8303,8304,
        1,0,0,0,8304,8305,1,0,0,0,8305,8315,3,1378,689,0,8306,8308,5,398,
        0,0,8307,8309,3,992,496,0,8308,8307,1,0,0,0,8308,8309,1,0,0,0,8309,
        8310,1,0,0,0,8310,8315,3,1378,689,0,8311,8312,5,130,0,0,8312,8315,
        3,1378,689,0,8313,8315,3,1378,689,0,8314,8299,1,0,0,0,8314,8306,
        1,0,0,0,8314,8311,1,0,0,0,8314,8313,1,0,0,0,8315,991,1,0,0,0,8316,
        8317,5,130,0,0,8317,993,1,0,0,0,8318,8319,7,41,0,0,8319,995,1,0,
        0,0,8320,8326,5,94,0,0,8321,8322,5,118,0,0,8322,8323,5,2,0,0,8323,
        8324,3,1280,640,0,8324,8325,5,3,0,0,8325,8327,1,0,0,0,8326,8321,
        1,0,0,0,8326,8327,1,0,0,0,8327,997,1,0,0,0,8328,8329,5,68,0,0,8329,
        999,1,0,0,0,8330,8331,3,1002,501,0,8331,1001,1,0,0,0,8332,8333,5,
        121,0,0,8333,8334,5,185,0,0,8334,8335,3,1004,502,0,8335,1003,1,0,
        0,0,8336,8341,3,1006,503,0,8337,8338,5,6,0,0,8338,8340,3,1006,503,
        0,8339,8337,1,0,0,0,8340,8343,1,0,0,0,8341,8339,1,0,0,0,8341,8342,
        1,0,0,0,8342,1005,1,0,0,0,8343,8341,1,0,0,0,8344,8350,3,1162,581,
        0,8345,8346,5,138,0,0,8346,8351,3,1276,638,0,8347,8349,3,610,305,
        0,8348,8347,1,0,0,0,8348,8349,1,0,0,0,8349,8351,1,0,0,0,8350,8345,
        1,0,0,0,8350,8348,1,0,0,0,8351,8353,1,0,0,0,8352,8354,3,612,306,
        0,8353,8352,1,0,0,0,8353,8354,1,0,0,0,8354,1007,1,0,0,0,8355,8357,
        3,1012,506,0,8356,8358,3,1014,507,0,8357,8356,1,0,0,0,8357,8358,
        1,0,0,0,8358,8364,1,0,0,0,8359,8361,3,1014,507,0,8360,8362,3,1012,
        506,0,8361,8360,1,0,0,0,8361,8362,1,0,0,0,8362,8364,1,0,0,0,8363,
        8355,1,0,0,0,8363,8359,1,0,0,0,8364,1009,1,0,0,0,8365,8366,3,1008,
        504,0,8366,1011,1,0,0,0,8367,8368,5,112,0,0,8368,8371,3,1016,508,
        0,8369,8370,5,6,0,0,8370,8372,3,1018,509,0,8371,8369,1,0,0,0,8371,
        8372,1,0,0,0,8372,8391,1,0,0,0,8373,8374,5,99,0,0,8374,8388,3,1026,
        513,0,8375,8376,3,1020,510,0,8376,8380,3,1024,512,0,8377,8381,5,
        119,0,0,8378,8379,5,143,0,0,8379,8381,5,505,0,0,8380,8377,1,0,0,
        0,8380,8378,1,0,0,0,8381,8389,1,0,0,0,8382,8386,3,1024,512,0,8383,
        8387,5,119,0,0,8384,8385,5,143,0,0,8385,8387,5,505,0,0,8386,8383,
        1,0,0,0,8386,8384,1,0,0,0,8387,8389,1,0,0,0,8388,8375,1,0,0,0,8388,
        8382,1,0,0,0,8389,8391,1,0,0,0,8390,8367,1,0,0,0,8390,8373,1,0,0,
        0,8391,1013,1,0,0,0,8392,8397,5,117,0,0,8393,8398,3,1018,509,0,8394,
        8395,3,1020,510,0,8395,8396,3,1024,512,0,8396,8398,1,0,0,0,8397,
        8393,1,0,0,0,8397,8394,1,0,0,0,8398,1015,1,0,0,0,8399,8402,3,1162,
        581,0,8400,8402,5,68,0,0,8401,8399,1,0,0,0,8401,8400,1,0,0,0,8402,
        1017,1,0,0,0,8403,8404,3,1162,581,0,8404,1019,1,0,0,0,8405,8411,
        3,1206,603,0,8406,8407,5,12,0,0,8407,8411,3,1022,511,0,8408,8409,
        5,13,0,0,8409,8411,3,1022,511,0,8410,8405,1,0,0,0,8410,8406,1,0,
        0,0,8410,8408,1,0,0,0,8411,1021,1,0,0,0,8412,8415,3,1398,699,0,8413,
        8415,3,1396,698,0,8414,8412,1,0,0,0,8414,8413,1,0,0,0,8415,1023,
        1,0,0,0,8416,8417,7,42,0,0,8417,1025,1,0,0,0,8418,8419,7,43,0,0,
        8419,1027,1,0,0,0,8420,8421,5,104,0,0,8421,8422,5,185,0,0,8422,8423,
        3,1030,515,0,8423,1029,1,0,0,0,8424,8429,3,1032,516,0,8425,8426,
        5,6,0,0,8426,8428,3,1032,516,0,8427,8425,1,0,0,0,8428,8431,1,0,0,
        0,8429,8427,1,0,0,0,8429,8430,1,0,0,0,8430,1031,1,0,0,0,8431,8429,
        1,0,0,0,8432,8438,3,1034,517,0,8433,8438,3,1038,519,0,8434,8438,
        3,1036,518,0,8435,8438,3,1040,520,0,8436,8438,3,1162,581,0,8437,
        8432,1,0,0,0,8437,8433,1,0,0,0,8437,8434,1,0,0,0,8437,8435,1,0,0,
        0,8437,8436,1,0,0,0,8438,1033,1,0,0,0,8439,8440,5,2,0,0,8440,8441,
        5,3,0,0,8441,1035,1,0,0,0,8442,8443,5,506,0,0,8443,8444,5,2,0,0,
        8444,8445,3,1280,640,0,8445,8446,5,3,0,0,8446,1037,1,0,0,0,8447,
        8448,5,507,0,0,8448,8449,5,2,0,0,8449,8450,3,1280,640,0,8450,8451,
        5,3,0,0,8451,1039,1,0,0,0,8452,8453,5,508,0,0,8453,8454,5,509,0,
        0,8454,8455,5,2,0,0,8455,8456,3,1030,515,0,8456,8457,5,3,0,0,8457,
        1041,1,0,0,0,8458,8459,5,105,0,0,8459,8460,3,1162,581,0,8460,1043,
        1,0,0,0,8461,8466,3,1048,524,0,8462,8463,5,100,0,0,8463,8464,5,331,
        0,0,8464,8466,5,119,0,0,8465,8461,1,0,0,0,8465,8462,1,0,0,0,8466,
        1045,1,0,0,0,8467,8468,3,1044,522,0,8468,1047,1,0,0,0,8469,8471,
        3,1050,525,0,8470,8469,1,0,0,0,8471,8472,1,0,0,0,8472,8470,1,0,0,
        0,8472,8473,1,0,0,0,8473,1049,1,0,0,0,8474,8476,3,1052,526,0,8475,
        8477,3,1054,527,0,8476,8475,1,0,0,0,8476,8477,1,0,0,0,8477,8479,
        1,0,0,0,8478,8480,3,944,472,0,8479,8478,1,0,0,0,8479,8480,1,0,0,
        0,8480,1051,1,0,0,0,8481,8491,5,100,0,0,8482,8483,5,300,0,0,8483,
        8485,5,274,0,0,8484,8482,1,0,0,0,8484,8485,1,0,0,0,8485,8486,1,0,
        0,0,8486,8492,5,400,0,0,8487,8489,5,274,0,0,8488,8487,1,0,0,0,8488,
        8489,1,0,0,0,8489,8490,1,0,0,0,8490,8492,5,365,0,0,8491,8484,1,0,
        0,0,8491,8488,1,0,0,0,8492,1053,1,0,0,0,8493,8494,5,306,0,0,8494,
        8495,3,1376,688,0,8495,1055,1,0,0,0,8496,8497,5,453,0,0,8497,8498,
        5,2,0,0,8498,8499,3,1280,640,0,8499,8507,5,3,0,0,8500,8501,5,6,0,
        0,8501,8502,5,2,0,0,8502,8503,3,1280,640,0,8503,8504,5,3,0,0,8504,
        8506,1,0,0,0,8505,8500,1,0,0,0,8506,8509,1,0,0,0,8507,8505,1,0,0,
        0,8507,8508,1,0,0,0,8508,1057,1,0,0,0,8509,8507,1,0,0,0,8510,8511,
        5,102,0,0,8511,8512,3,1060,530,0,8512,1059,1,0,0,0,8513,8518,3,1062,
        531,0,8514,8515,5,6,0,0,8515,8517,3,1062,531,0,8516,8514,1,0,0,0,
        8517,8520,1,0,0,0,8518,8516,1,0,0,0,8518,8519,1,0,0,0,8519,1061,
        1,0,0,0,8520,8518,1,0,0,0,8521,8523,3,1072,536,0,8522,8524,3,1064,
        532,0,8523,8522,1,0,0,0,8523,8524,1,0,0,0,8524,8526,1,0,0,0,8525,
        8527,3,1078,539,0,8526,8525,1,0,0,0,8526,8527,1,0,0,0,8527,8580,
        1,0,0,0,8528,8530,3,1082,541,0,8529,8531,3,1066,533,0,8530,8529,
        1,0,0,0,8530,8531,1,0,0,0,8531,8580,1,0,0,0,8532,8534,3,1102,551,
        0,8533,8535,3,1064,532,0,8534,8533,1,0,0,0,8534,8535,1,0,0,0,8535,
        8580,1,0,0,0,8536,8538,3,966,483,0,8537,8539,3,1064,532,0,8538,8537,
        1,0,0,0,8538,8539,1,0,0,0,8539,8580,1,0,0,0,8540,8553,5,110,0,0,
        8541,8543,3,1102,551,0,8542,8544,3,1064,532,0,8543,8542,1,0,0,0,
        8543,8544,1,0,0,0,8544,8554,1,0,0,0,8545,8547,3,1082,541,0,8546,
        8548,3,1066,533,0,8547,8546,1,0,0,0,8547,8548,1,0,0,0,8548,8554,
        1,0,0,0,8549,8551,3,966,483,0,8550,8552,3,1064,532,0,8551,8550,1,
        0,0,0,8551,8552,1,0,0,0,8552,8554,1,0,0,0,8553,8541,1,0,0,0,8553,
        8545,1,0,0,0,8553,8549,1,0,0,0,8554,8580,1,0,0,0,8555,8556,5,2,0,
        0,8556,8573,3,1062,531,0,8557,8558,5,148,0,0,8558,8559,5,156,0,0,
        8559,8574,3,1062,531,0,8560,8562,5,159,0,0,8561,8563,3,1068,534,
        0,8562,8561,1,0,0,0,8562,8563,1,0,0,0,8563,8564,1,0,0,0,8564,8565,
        5,156,0,0,8565,8574,3,1062,531,0,8566,8568,3,1068,534,0,8567,8566,
        1,0,0,0,8567,8568,1,0,0,0,8568,8569,1,0,0,0,8569,8570,5,156,0,0,
        8570,8571,3,1062,531,0,8571,8572,3,1070,535,0,8572,8574,1,0,0,0,
        8573,8557,1,0,0,0,8573,8560,1,0,0,0,8573,8567,1,0,0,0,8573,8574,
        1,0,0,0,8574,8575,1,0,0,0,8575,8577,5,3,0,0,8576,8578,3,1064,532,
        0,8577,8576,1,0,0,0,8577,8578,1,0,0,0,8578,8580,1,0,0,0,8579,8521,
        1,0,0,0,8579,8528,1,0,0,0,8579,8532,1,0,0,0,8579,8536,1,0,0,0,8579,
        8540,1,0,0,0,8579,8555,1,0,0,0,8580,8599,1,0,0,0,8581,8582,5,148,
        0,0,8582,8583,5,156,0,0,8583,8598,3,1062,531,0,8584,8586,5,159,0,
        0,8585,8587,3,1068,534,0,8586,8585,1,0,0,0,8586,8587,1,0,0,0,8587,
        8588,1,0,0,0,8588,8589,5,156,0,0,8589,8598,3,1062,531,0,8590,8592,
        3,1068,534,0,8591,8590,1,0,0,0,8591,8592,1,0,0,0,8592,8593,1,0,0,
        0,8593,8594,5,156,0,0,8594,8595,3,1062,531,0,8595,8596,3,1070,535,
        0,8596,8598,1,0,0,0,8597,8581,1,0,0,0,8597,8584,1,0,0,0,8597,8591,
        1,0,0,0,8598,8601,1,0,0,0,8599,8597,1,0,0,0,8599,8600,1,0,0,0,8600,
        1063,1,0,0,0,8601,8599,1,0,0,0,8602,8604,5,74,0,0,8603,8602,1,0,
        0,0,8603,8604,1,0,0,0,8604,8605,1,0,0,0,8605,8610,3,1414,707,0,8606,
        8607,5,2,0,0,8607,8608,3,1380,690,0,8608,8609,5,3,0,0,8609,8611,
        1,0,0,0,8610,8606,1,0,0,0,8610,8611,1,0,0,0,8611,1065,1,0,0,0,8612,
        8625,3,1064,532,0,8613,8615,5,74,0,0,8614,8616,3,1414,707,0,8615,
        8614,1,0,0,0,8615,8616,1,0,0,0,8616,8619,1,0,0,0,8617,8619,3,1414,
        707,0,8618,8613,1,0,0,0,8618,8617,1,0,0,0,8619,8620,1,0,0,0,8620,
        8621,5,2,0,0,8621,8622,3,1098,549,0,8622,8623,5,3,0,0,8623,8625,
        1,0,0,0,8624,8612,1,0,0,0,8624,8618,1,0,0,0,8625,1067,1,0,0,0,8626,
        8628,7,44,0,0,8627,8629,5,161,0,0,8628,8627,1,0,0,0,8628,8629,1,
        0,0,0,8629,1069,1,0,0,0,8630,8631,5,138,0,0,8631,8632,5,2,0,0,8632,
        8633,3,1380,690,0,8633,8634,5,3,0,0,8634,8638,1,0,0,0,8635,8636,
        5,118,0,0,8636,8638,3,1162,581,0,8637,8630,1,0,0,0,8637,8635,1,0,
        0,0,8638,1071,1,0,0,0,8639,8641,3,1378,689,0,8640,8642,5,9,0,0,8641,
        8640,1,0,0,0,8641,8642,1,0,0,0,8642,8652,1,0,0,0,8643,8649,5,119,
        0,0,8644,8650,3,1378,689,0,8645,8646,5,2,0,0,8646,8647,3,1378,689,
        0,8647,8648,5,3,0,0,8648,8650,1,0,0,0,8649,8644,1,0,0,0,8649,8645,
        1,0,0,0,8650,8652,1,0,0,0,8651,8639,1,0,0,0,8651,8643,1,0,0,0,8652,
        1073,1,0,0,0,8653,8658,3,1072,536,0,8654,8655,5,6,0,0,8655,8657,
        3,1072,536,0,8656,8654,1,0,0,0,8657,8660,1,0,0,0,8658,8656,1,0,0,
        0,8658,8659,1,0,0,0,8659,1075,1,0,0,0,8660,8658,1,0,0,0,8661,8666,
        3,1072,536,0,8662,8664,5,74,0,0,8663,8662,1,0,0,0,8663,8664,1,0,
        0,0,8664,8665,1,0,0,0,8665,8667,3,1414,707,0,8666,8663,1,0,0,0,8666,
        8667,1,0,0,0,8667,1077,1,0,0,0,8668,8669,5,510,0,0,8669,8670,3,1388,
        694,0,8670,8671,5,2,0,0,8671,8672,3,1280,640,0,8672,8674,5,3,0,0,
        8673,8675,3,1080,540,0,8674,8673,1,0,0,0,8674,8675,1,0,0,0,8675,
        1079,1,0,0,0,8676,8677,5,341,0,0,8677,8678,5,2,0,0,8678,8679,3,1162,
        581,0,8679,8680,5,3,0,0,8680,1081,1,0,0,0,8681,8683,3,1214,607,0,
        8682,8684,3,1090,545,0,8683,8682,1,0,0,0,8683,8684,1,0,0,0,8684,
        8694,1,0,0,0,8685,8686,5,351,0,0,8686,8687,5,102,0,0,8687,8688,5,
        2,0,0,8688,8689,3,1086,543,0,8689,8691,5,3,0,0,8690,8692,3,1090,
        545,0,8691,8690,1,0,0,0,8691,8692,1,0,0,0,8692,8694,1,0,0,0,8693,
        8681,1,0,0,0,8693,8685,1,0,0,0,8694,1083,1,0,0,0,8695,8697,3,1214,
        607,0,8696,8698,3,1088,544,0,8697,8696,1,0,0,0,8697,8698,1,0,0,0,
        8698,1085,1,0,0,0,8699,8704,3,1084,542,0,8700,8701,5,6,0,0,8701,
        8703,3,1084,542,0,8702,8700,1,0,0,0,8703,8706,1,0,0,0,8704,8702,
        1,0,0,0,8704,8705,1,0,0,0,8705,1087,1,0,0,0,8706,8704,1,0,0,0,8707,
        8708,5,74,0,0,8708,8709,5,2,0,0,8709,8710,3,1098,549,0,8710,8711,
        5,3,0,0,8711,1089,1,0,0,0,8712,8713,5,143,0,0,8713,8714,5,511,0,
        0,8714,1091,1,0,0,0,8715,8716,5,141,0,0,8716,8717,3,1162,581,0,8717,
        1093,1,0,0,0,8718,8723,5,141,0,0,8719,8720,5,472,0,0,8720,8721,5,
        306,0,0,8721,8724,3,958,479,0,8722,8724,3,1162,581,0,8723,8719,1,
        0,0,0,8723,8722,1,0,0,0,8724,1095,1,0,0,0,8725,8726,3,1098,549,0,
        8726,1097,1,0,0,0,8727,8732,3,1100,550,0,8728,8729,5,6,0,0,8729,
        8731,3,1100,550,0,8730,8728,1,0,0,0,8731,8734,1,0,0,0,8732,8730,
        1,0,0,0,8732,8733,1,0,0,0,8733,1099,1,0,0,0,8734,8732,1,0,0,0,8735,
        8736,3,1414,707,0,8736,8738,3,1116,558,0,8737,8739,3,106,53,0,8738,
        8737,1,0,0,0,8738,8739,1,0,0,0,8739,1101,1,0,0,0,8740,8741,5,512,
        0,0,8741,8757,5,2,0,0,8742,8743,3,1206,603,0,8743,8744,3,1232,616,
        0,8744,8745,5,513,0,0,8745,8746,3,1104,552,0,8746,8758,1,0,0,0,8747,
        8748,5,514,0,0,8748,8749,5,2,0,0,8749,8750,3,1112,556,0,8750,8751,
        5,3,0,0,8751,8752,5,6,0,0,8752,8753,3,1206,603,0,8753,8754,3,1232,
        616,0,8754,8755,5,513,0,0,8755,8756,3,1104,552,0,8756,8758,1,0,0,
        0,8757,8742,1,0,0,0,8757,8747,1,0,0,0,8758,8759,1,0,0,0,8759,8760,
        5,3,0,0,8760,1103,1,0,0,0,8761,8766,3,1106,553,0,8762,8763,5,6,0,
        0,8763,8765,3,1106,553,0,8764,8762,1,0,0,0,8765,8768,1,0,0,0,8766,
        8764,1,0,0,0,8766,8767,1,0,0,0,8767,1105,1,0,0,0,8768,8766,1,0,0,
        0,8769,8776,3,1414,707,0,8770,8772,3,1116,558,0,8771,8773,3,1108,
        554,0,8772,8771,1,0,0,0,8772,8773,1,0,0,0,8773,8777,1,0,0,0,8774,
        8775,5,100,0,0,8775,8777,5,511,0,0,8776,8770,1,0,0,0,8776,8774,1,
        0,0,0,8777,1107,1,0,0,0,8778,8780,3,1110,555,0,8779,8778,1,0,0,0,
        8780,8781,1,0,0,0,8781,8779,1,0,0,0,8781,8782,1,0,0,0,8782,1109,
        1,0,0,0,8783,8784,5,91,0,0,8784,8792,3,1162,581,0,8785,8786,3,1436,
        718,0,8786,8787,3,1162,581,0,8787,8792,1,0,0,0,8788,8789,5,115,0,
        0,8789,8792,5,116,0,0,8790,8792,5,116,0,0,8791,8783,1,0,0,0,8791,
        8785,1,0,0,0,8791,8788,1,0,0,0,8791,8790,1,0,0,0,8792,1111,1,0,0,
        0,8793,8798,3,1114,557,0,8794,8795,5,6,0,0,8795,8797,3,1114,557,
        0,8796,8794,1,0,0,0,8797,8800,1,0,0,0,8798,8796,1,0,0,0,8798,8799,
        1,0,0,0,8799,1113,1,0,0,0,8800,8798,1,0,0,0,8801,8802,3,1204,602,
        0,8802,8803,5,74,0,0,8803,8804,3,1420,710,0,8804,8808,1,0,0,0,8805,
        8806,5,91,0,0,8806,8808,3,1204,602,0,8807,8801,1,0,0,0,8807,8805,
        1,0,0,0,8808,1115,1,0,0,0,8809,8811,5,446,0,0,8810,8809,1,0,0,0,
        8810,8811,1,0,0,0,8811,8812,1,0,0,0,8812,8821,3,1120,560,0,8813,
        8822,3,1118,559,0,8814,8819,5,73,0,0,8815,8816,5,4,0,0,8816,8817,
        3,1398,699,0,8817,8818,5,5,0,0,8818,8820,1,0,0,0,8819,8815,1,0,0,
        0,8819,8820,1,0,0,0,8820,8822,1,0,0,0,8821,8813,1,0,0,0,8821,8814,
        1,0,0,0,8822,1117,1,0,0,0,8823,8825,5,4,0,0,8824,8826,3,1398,699,
        0,8825,8824,1,0,0,0,8825,8826,1,0,0,0,8826,8827,1,0,0,0,8827,8829,
        5,5,0,0,8828,8823,1,0,0,0,8829,8832,1,0,0,0,8830,8828,1,0,0,0,8830,
        8831,1,0,0,0,8831,1119,1,0,0,0,8832,8830,1,0,0,0,8833,8850,3,1124,
        562,0,8834,8850,3,1128,564,0,8835,8850,3,1132,566,0,8836,8850,3,
        1140,570,0,8837,8850,3,1148,574,0,8838,8846,3,1150,575,0,8839,8841,
        3,1154,577,0,8840,8839,1,0,0,0,8840,8841,1,0,0,0,8841,8847,1,0,0,
        0,8842,8843,5,2,0,0,8843,8844,3,1398,699,0,8844,8845,5,3,0,0,8845,
        8847,1,0,0,0,8846,8840,1,0,0,0,8846,8842,1,0,0,0,8847,8850,1,0,0,
        0,8848,8850,3,1158,579,0,8849,8833,1,0,0,0,8849,8834,1,0,0,0,8849,
        8835,1,0,0,0,8849,8836,1,0,0,0,8849,8837,1,0,0,0,8849,8838,1,0,0,
        0,8849,8848,1,0,0,0,8850,1121,1,0,0,0,8851,8857,3,1128,564,0,8852,
        8857,3,1134,567,0,8853,8857,3,1142,571,0,8854,8857,3,1148,574,0,
        8855,8857,3,1158,579,0,8856,8851,1,0,0,0,8856,8852,1,0,0,0,8856,
        8853,1,0,0,0,8856,8854,1,0,0,0,8856,8855,1,0,0,0,8857,1123,1,0,0,
        0,8858,8860,3,1416,708,0,8859,8861,3,522,261,0,8860,8859,1,0,0,0,
        8860,8861,1,0,0,0,8861,8863,1,0,0,0,8862,8864,3,1126,563,0,8863,
        8862,1,0,0,0,8863,8864,1,0,0,0,8864,1125,1,0,0,0,8865,8866,5,2,0,
        0,8866,8867,3,1280,640,0,8867,8868,5,3,0,0,8868,1127,1,0,0,0,8869,
        8894,5,432,0,0,8870,8894,5,433,0,0,8871,8894,5,447,0,0,8872,8894,
        5,419,0,0,8873,8894,5,444,0,0,8874,8876,5,429,0,0,8875,8877,3,1130,
        565,0,8876,8875,1,0,0,0,8876,8877,1,0,0,0,8877,8894,1,0,0,0,8878,
        8879,5,228,0,0,8879,8894,5,443,0,0,8880,8882,5,426,0,0,8881,8883,
        3,1126,563,0,8882,8881,1,0,0,0,8882,8883,1,0,0,0,8883,8894,1,0,0,
        0,8884,8886,5,425,0,0,8885,8887,3,1126,563,0,8886,8885,1,0,0,0,8886,
        8887,1,0,0,0,8887,8894,1,0,0,0,8888,8890,5,440,0,0,8889,8891,3,1126,
        563,0,8890,8889,1,0,0,0,8890,8891,1,0,0,0,8891,8894,1,0,0,0,8892,
        8894,5,421,0,0,8893,8869,1,0,0,0,8893,8870,1,0,0,0,8893,8871,1,0,
        0,0,8893,8872,1,0,0,0,8893,8873,1,0,0,0,8893,8874,1,0,0,0,8893,8878,
        1,0,0,0,8893,8880,1,0,0,0,8893,8884,1,0,0,0,8893,8888,1,0,0,0,8893,
        8892,1,0,0,0,8894,1129,1,0,0,0,8895,8896,5,2,0,0,8896,8897,3,1398,
        699,0,8897,8898,5,3,0,0,8898,1131,1,0,0,0,8899,8902,3,1136,568,0,
        8900,8902,3,1138,569,0,8901,8899,1,0,0,0,8901,8900,1,0,0,0,8902,
        1133,1,0,0,0,8903,8906,3,1136,568,0,8904,8906,3,1138,569,0,8905,
        8903,1,0,0,0,8905,8904,1,0,0,0,8906,1135,1,0,0,0,8907,8909,5,420,
        0,0,8908,8910,3,1146,573,0,8909,8908,1,0,0,0,8909,8910,1,0,0,0,8910,
        8911,1,0,0,0,8911,8912,5,2,0,0,8912,8913,3,1280,640,0,8913,8914,
        5,3,0,0,8914,1137,1,0,0,0,8915,8917,5,420,0,0,8916,8918,3,1146,573,
        0,8917,8916,1,0,0,0,8917,8918,1,0,0,0,8918,1139,1,0,0,0,8919,8924,
        3,1144,572,0,8920,8921,5,2,0,0,8921,8922,3,1398,699,0,8922,8923,
        5,3,0,0,8923,8925,1,0,0,0,8924,8920,1,0,0,0,8924,8925,1,0,0,0,8925,
        1141,1,0,0,0,8926,8931,3,1144,572,0,8927,8928,5,2,0,0,8928,8929,
        3,1398,699,0,8929,8930,5,3,0,0,8930,8932,1,0,0,0,8931,8927,1,0,0,
        0,8931,8932,1,0,0,0,8932,1143,1,0,0,0,8933,8935,7,45,0,0,8934,8936,
        3,1146,573,0,8935,8934,1,0,0,0,8935,8936,1,0,0,0,8936,8944,1,0,0,
        0,8937,8944,5,454,0,0,8938,8939,5,436,0,0,8939,8941,7,46,0,0,8940,
        8942,3,1146,573,0,8941,8940,1,0,0,0,8941,8942,1,0,0,0,8942,8944,
        1,0,0,0,8943,8933,1,0,0,0,8943,8937,1,0,0,0,8943,8938,1,0,0,0,8944,
        1145,1,0,0,0,8945,8946,5,405,0,0,8946,1147,1,0,0,0,8947,8952,7,47,
        0,0,8948,8949,5,2,0,0,8949,8950,3,1398,699,0,8950,8951,5,3,0,0,8951,
        8953,1,0,0,0,8952,8948,1,0,0,0,8952,8953,1,0,0,0,8953,8955,1,0,0,
        0,8954,8956,3,1152,576,0,8955,8954,1,0,0,0,8955,8956,1,0,0,0,8956,
        1149,1,0,0,0,8957,8958,5,434,0,0,8958,1151,1,0,0,0,8959,8960,5,143,
        0,0,8960,8961,5,449,0,0,8961,8966,5,417,0,0,8962,8963,5,410,0,0,
        8963,8964,5,449,0,0,8964,8966,5,417,0,0,8965,8959,1,0,0,0,8965,8962,
        1,0,0,0,8966,1153,1,0,0,0,8967,8993,5,415,0,0,8968,8993,5,295,0,
        0,8969,8993,5,214,0,0,8970,8993,5,256,0,0,8971,8993,5,292,0,0,8972,
        8993,3,1156,578,0,8973,8974,5,415,0,0,8974,8975,5,132,0,0,8975,8993,
        5,295,0,0,8976,8977,5,214,0,0,8977,8981,5,132,0,0,8978,8982,5,256,
        0,0,8979,8982,5,292,0,0,8980,8982,3,1156,578,0,8981,8978,1,0,0,0,
        8981,8979,1,0,0,0,8981,8980,1,0,0,0,8982,8993,1,0,0,0,8983,8984,
        5,256,0,0,8984,8987,5,132,0,0,8985,8988,5,292,0,0,8986,8988,3,1156,
        578,0,8987,8985,1,0,0,0,8987,8986,1,0,0,0,8988,8993,1,0,0,0,8989,
        8990,5,292,0,0,8990,8991,5,132,0,0,8991,8993,3,1156,578,0,8992,8967,
        1,0,0,0,8992,8968,1,0,0,0,8992,8969,1,0,0,0,8992,8970,1,0,0,0,8992,
        8971,1,0,0,0,8992,8972,1,0,0,0,8992,8973,1,0,0,0,8992,8976,1,0,0,
        0,8992,8983,1,0,0,0,8992,8989,1,0,0,0,8993,1155,1,0,0,0,8994,8999,
        5,357,0,0,8995,8996,5,2,0,0,8996,8997,3,1398,699,0,8997,8998,5,3,
        0,0,8998,9000,1,0,0,0,8999,8995,1,0,0,0,8999,9000,1,0,0,0,9000,1157,
        1,0,0,0,9001,9002,5,30,0,0,9002,1159,1,0,0,0,9003,9004,5,235,0,0,
        9004,9005,3,1162,581,0,9005,1161,1,0,0,0,9006,9007,3,1164,582,0,
        9007,1163,1,0,0,0,9008,9012,3,1166,583,0,9009,9010,4,582,0,0,9010,
        9013,3,1274,637,0,9011,9013,1,0,0,0,9012,9009,1,0,0,0,9012,9011,
        1,0,0,0,9013,1165,1,0,0,0,9014,9019,3,1168,584,0,9015,9016,7,48,
        0,0,9016,9018,3,1168,584,0,9017,9015,1,0,0,0,9018,9021,1,0,0,0,9019,
        9017,1,0,0,0,9019,9020,1,0,0,0,9020,1167,1,0,0,0,9021,9019,1,0,0,
        0,9022,9027,3,1170,585,0,9023,9024,5,120,0,0,9024,9026,3,1170,585,
        0,9025,9023,1,0,0,0,9026,9029,1,0,0,0,9027,9025,1,0,0,0,9027,9028,
        1,0,0,0,9028,1169,1,0,0,0,9029,9027,1,0,0,0,9030,9035,3,1172,586,
        0,9031,9032,5,71,0,0,9032,9034,3,1172,586,0,9033,9031,1,0,0,0,9034,
        9037,1,0,0,0,9035,9033,1,0,0,0,9035,9036,1,0,0,0,9036,1171,1,0,0,
        0,9037,9035,1,0,0,0,9038,9050,3,1174,587,0,9039,9041,5,115,0,0,9040,
        9039,1,0,0,0,9040,9041,1,0,0,0,9041,9042,1,0,0,0,9042,9044,5,418,
        0,0,9043,9045,5,129,0,0,9044,9043,1,0,0,0,9044,9045,1,0,0,0,9045,
        9046,1,0,0,0,9046,9047,3,1174,587,0,9047,9048,5,71,0,0,9048,9049,
        3,1174,587,0,9049,9051,1,0,0,0,9050,9040,1,0,0,0,9050,9051,1,0,0,
        0,9051,1173,1,0,0,0,9052,9058,3,1176,588,0,9053,9055,5,115,0,0,9054,
        9053,1,0,0,0,9054,9055,1,0,0,0,9055,9056,1,0,0,0,9056,9057,5,106,
        0,0,9057,9059,3,1306,653,0,9058,9054,1,0,0,0,9058,9059,1,0,0,0,9059,
        1175,1,0,0,0,9060,9062,5,115,0,0,9061,9060,1,0,0,0,9061,9062,1,0,
        0,0,9062,9063,1,0,0,0,9063,9064,3,1178,589,0,9064,1177,1,0,0,0,9065,
        9067,3,1180,590,0,9066,9068,7,49,0,0,9067,9066,1,0,0,0,9067,9068,
        1,0,0,0,9068,1179,1,0,0,0,9069,9093,3,1182,591,0,9070,9072,5,154,
        0,0,9071,9073,5,115,0,0,9072,9071,1,0,0,0,9072,9073,1,0,0,0,9073,
        9091,1,0,0,0,9074,9092,5,116,0,0,9075,9092,5,134,0,0,9076,9092,5,
        98,0,0,9077,9092,5,396,0,0,9078,9079,5,94,0,0,9079,9080,5,102,0,
        0,9080,9092,3,1162,581,0,9081,9082,5,306,0,0,9082,9083,5,2,0,0,9083,
        9084,3,1286,643,0,9084,9085,5,3,0,0,9085,9092,1,0,0,0,9086,9092,
        5,226,0,0,9087,9089,3,1296,648,0,9088,9087,1,0,0,0,9088,9089,1,0,
        0,0,9089,9090,1,0,0,0,9090,9092,5,516,0,0,9091,9074,1,0,0,0,9091,
        9075,1,0,0,0,9091,9076,1,0,0,0,9091,9077,1,0,0,0,9091,9078,1,0,0,
        0,9091,9081,1,0,0,0,9091,9086,1,0,0,0,9091,9088,1,0,0,0,9092,9094,
        1,0,0,0,9093,9070,1,0,0,0,9093,9094,1,0,0,0,9094,1181,1,0,0,0,9095,
        9107,3,1184,592,0,9096,9097,7,50,0,0,9097,9108,3,1184,592,0,9098,
        9099,3,1278,639,0,9099,9105,3,1268,634,0,9100,9106,3,966,483,0,9101,
        9102,5,2,0,0,9102,9103,3,1162,581,0,9103,9104,5,3,0,0,9104,9106,
        1,0,0,0,9105,9100,1,0,0,0,9105,9101,1,0,0,0,9106,9108,1,0,0,0,9107,
        9096,1,0,0,0,9107,9098,1,0,0,0,9107,9108,1,0,0,0,9108,1183,1,0,0,
        0,9109,9123,3,1186,593,0,9110,9112,5,115,0,0,9111,9110,1,0,0,0,9111,
        9112,1,0,0,0,9112,9117,1,0,0,0,9113,9118,5,158,0,0,9114,9118,5,152,
        0,0,9115,9116,5,165,0,0,9116,9118,5,132,0,0,9117,9113,1,0,0,0,9117,
        9114,1,0,0,0,9117,9115,1,0,0,0,9118,9119,1,0,0,0,9119,9121,3,1186,
        593,0,9120,9122,3,1160,580,0,9121,9120,1,0,0,0,9121,9122,1,0,0,0,
        9122,9124,1,0,0,0,9123,9111,1,0,0,0,9123,9124,1,0,0,0,9124,1185,
        1,0,0,0,9125,9131,3,1188,594,0,9126,9127,3,1274,637,0,9127,9128,
        3,1188,594,0,9128,9130,1,0,0,0,9129,9126,1,0,0,0,9130,9133,1,0,0,
        0,9131,9129,1,0,0,0,9131,9132,1,0,0,0,9132,1187,1,0,0,0,9133,9131,
        1,0,0,0,9134,9136,3,1274,637,0,9135,9134,1,0,0,0,9135,9136,1,0,0,
        0,9136,9137,1,0,0,0,9137,9138,3,1190,595,0,9138,1189,1,0,0,0,9139,
        9144,3,1192,596,0,9140,9141,7,51,0,0,9141,9143,3,1192,596,0,9142,
        9140,1,0,0,0,9143,9146,1,0,0,0,9144,9142,1,0,0,0,9144,9145,1,0,0,
        0,9145,1191,1,0,0,0,9146,9144,1,0,0,0,9147,9152,3,1194,597,0,9148,
        9149,7,52,0,0,9149,9151,3,1194,597,0,9150,9148,1,0,0,0,9151,9154,
        1,0,0,0,9152,9150,1,0,0,0,9152,9153,1,0,0,0,9153,1193,1,0,0,0,9154,
        9152,1,0,0,0,9155,9158,3,1196,598,0,9156,9157,5,15,0,0,9157,9159,
        3,1196,598,0,9158,9156,1,0,0,0,9158,9159,1,0,0,0,9159,1195,1,0,0,
        0,9160,9162,7,51,0,0,9161,9160,1,0,0,0,9161,9162,1,0,0,0,9162,9163,
        1,0,0,0,9163,9164,3,1198,599,0,9164,1197,1,0,0,0,9165,9170,3,1200,
        600,0,9166,9167,5,180,0,0,9167,9168,5,449,0,0,9168,9169,5,417,0,
        0,9169,9171,3,1162,581,0,9170,9166,1,0,0,0,9170,9171,1,0,0,0,9171,
        1199,1,0,0,0,9172,9175,3,1202,601,0,9173,9174,5,81,0,0,9174,9176,
        3,520,260,0,9175,9173,1,0,0,0,9175,9176,1,0,0,0,9176,1201,1,0,0,
        0,9177,9182,3,1206,603,0,9178,9179,5,26,0,0,9179,9181,3,1116,558,
        0,9180,9178,1,0,0,0,9181,9184,1,0,0,0,9182,9180,1,0,0,0,9182,9183,
        1,0,0,0,9183,1203,1,0,0,0,9184,9182,1,0,0,0,9185,9186,6,602,-1,0,
        9186,9193,3,1206,603,0,9187,9188,7,51,0,0,9188,9193,3,1204,602,9,
        9189,9190,3,1274,637,0,9190,9191,3,1204,602,3,9191,9193,1,0,0,0,
        9192,9185,1,0,0,0,9192,9187,1,0,0,0,9192,9189,1,0,0,0,9193,9233,
        1,0,0,0,9194,9195,10,8,0,0,9195,9196,5,15,0,0,9196,9232,3,1204,602,
        9,9197,9198,10,7,0,0,9198,9199,7,52,0,0,9199,9232,3,1204,602,8,9200,
        9201,10,6,0,0,9201,9202,7,51,0,0,9202,9232,3,1204,602,7,9203,9204,
        10,5,0,0,9204,9205,3,1274,637,0,9205,9206,3,1204,602,6,9206,9232,
        1,0,0,0,9207,9208,10,4,0,0,9208,9209,7,50,0,0,9209,9232,3,1204,602,
        5,9210,9211,10,10,0,0,9211,9212,5,26,0,0,9212,9232,3,1116,558,0,
        9213,9214,10,2,0,0,9214,9232,3,1274,637,0,9215,9216,10,1,0,0,9216,
        9218,5,154,0,0,9217,9219,5,115,0,0,9218,9217,1,0,0,0,9218,9219,1,
        0,0,0,9219,9229,1,0,0,0,9220,9221,5,94,0,0,9221,9222,5,102,0,0,9222,
        9230,3,1204,602,0,9223,9224,5,306,0,0,9224,9225,5,2,0,0,9225,9226,
        3,1286,643,0,9226,9227,5,3,0,0,9227,9230,1,0,0,0,9228,9230,5,226,
        0,0,9229,9220,1,0,0,0,9229,9223,1,0,0,0,9229,9228,1,0,0,0,9230,9232,
        1,0,0,0,9231,9194,1,0,0,0,9231,9197,1,0,0,0,9231,9200,1,0,0,0,9231,
        9203,1,0,0,0,9231,9207,1,0,0,0,9231,9210,1,0,0,0,9231,9213,1,0,0,
        0,9231,9215,1,0,0,0,9232,9235,1,0,0,0,9233,9231,1,0,0,0,9233,9234,
        1,0,0,0,9234,1205,1,0,0,0,9235,9233,1,0,0,0,9236,9237,5,427,0,0,
        9237,9273,3,966,483,0,9238,9241,5,73,0,0,9239,9242,3,966,483,0,9240,
        9242,3,1288,644,0,9241,9239,1,0,0,0,9241,9240,1,0,0,0,9242,9273,
        1,0,0,0,9243,9244,5,28,0,0,9244,9273,3,1326,663,0,9245,9246,5,508,
        0,0,9246,9247,5,2,0,0,9247,9248,3,1280,640,0,9248,9249,5,3,0,0,9249,
        9273,1,0,0,0,9250,9251,5,136,0,0,9251,9273,3,966,483,0,9252,9273,
        3,1318,659,0,9253,9273,3,1390,695,0,9254,9255,5,2,0,0,9255,9256,
        3,1162,581,0,9256,9257,5,3,0,0,9257,9258,3,1326,663,0,9258,9273,
        1,0,0,0,9259,9273,3,1308,654,0,9260,9273,3,1212,606,0,9261,9263,
        3,966,483,0,9262,9264,3,1324,662,0,9263,9262,1,0,0,0,9263,9264,1,
        0,0,0,9264,9273,1,0,0,0,9265,9273,3,1264,632,0,9266,9273,3,1266,
        633,0,9267,9268,3,1262,631,0,9268,9269,5,163,0,0,9269,9270,3,1262,
        631,0,9270,9273,1,0,0,0,9271,9273,5,91,0,0,9272,9236,1,0,0,0,9272,
        9238,1,0,0,0,9272,9243,1,0,0,0,9272,9245,1,0,0,0,9272,9250,1,0,0,
        0,9272,9252,1,0,0,0,9272,9253,1,0,0,0,9272,9254,1,0,0,0,9272,9259,
        1,0,0,0,9272,9260,1,0,0,0,9272,9261,1,0,0,0,9272,9265,1,0,0,0,9272,
        9266,1,0,0,0,9272,9267,1,0,0,0,9272,9271,1,0,0,0,9273,1207,1,0,0,
        0,9274,9275,5,579,0,0,9275,1209,1,0,0,0,9276,9277,3,1388,694,0,9277,
        9299,5,2,0,0,9278,9282,3,1282,641,0,9279,9280,5,6,0,0,9280,9281,
        5,139,0,0,9281,9283,3,1284,642,0,9282,9279,1,0,0,0,9282,9283,1,0,
        0,0,9283,9285,1,0,0,0,9284,9286,3,1000,500,0,9285,9284,1,0,0,0,9285,
        9286,1,0,0,0,9286,9300,1,0,0,0,9287,9288,5,139,0,0,9288,9290,3,1284,
        642,0,9289,9291,3,1000,500,0,9290,9289,1,0,0,0,9290,9291,1,0,0,0,
        9291,9300,1,0,0,0,9292,9293,7,41,0,0,9293,9295,3,1282,641,0,9294,
        9296,3,1000,500,0,9295,9294,1,0,0,0,9295,9296,1,0,0,0,9296,9300,
        1,0,0,0,9297,9300,5,9,0,0,9298,9300,1,0,0,0,9299,9278,1,0,0,0,9299,
        9287,1,0,0,0,9299,9292,1,0,0,0,9299,9297,1,0,0,0,9299,9298,1,0,0,
        0,9300,9301,1,0,0,0,9301,9302,5,3,0,0,9302,1211,1,0,0,0,9303,9305,
        3,1210,605,0,9304,9306,3,1236,618,0,9305,9304,1,0,0,0,9305,9306,
        1,0,0,0,9306,9308,1,0,0,0,9307,9309,3,1238,619,0,9308,9307,1,0,0,
        0,9308,9309,1,0,0,0,9309,9311,1,0,0,0,9310,9312,3,1246,623,0,9311,
        9310,1,0,0,0,9311,9312,1,0,0,0,9312,9315,1,0,0,0,9313,9315,3,1216,
        608,0,9314,9303,1,0,0,0,9314,9313,1,0,0,0,9315,1213,1,0,0,0,9316,
        9319,3,1210,605,0,9317,9319,3,1216,608,0,9318,9316,1,0,0,0,9318,
        9317,1,0,0,0,9319,1215,1,0,0,0,9320,9321,5,146,0,0,9321,9322,5,100,
        0,0,9322,9323,5,2,0,0,9323,9324,3,1162,581,0,9324,9325,5,3,0,0,9325,
        9627,1,0,0,0,9326,9627,5,86,0,0,9327,9332,5,88,0,0,9328,9329,5,2,
        0,0,9329,9330,3,1398,699,0,9330,9331,5,3,0,0,9331,9333,1,0,0,0,9332,
        9328,1,0,0,0,9332,9333,1,0,0,0,9333,9627,1,0,0,0,9334,9339,5,89,
        0,0,9335,9336,5,2,0,0,9336,9337,3,1398,699,0,9337,9338,5,3,0,0,9338,
        9340,1,0,0,0,9339,9335,1,0,0,0,9339,9340,1,0,0,0,9340,9627,1,0,0,
        0,9341,9346,5,113,0,0,9342,9343,5,2,0,0,9343,9344,3,1398,699,0,9344,
        9345,5,3,0,0,9345,9347,1,0,0,0,9346,9342,1,0,0,0,9346,9347,1,0,0,
        0,9347,9627,1,0,0,0,9348,9353,5,114,0,0,9349,9350,5,2,0,0,9350,9351,
        3,1398,699,0,9351,9352,5,3,0,0,9352,9354,1,0,0,0,9353,9349,1,0,0,
        0,9353,9354,1,0,0,0,9354,9627,1,0,0,0,9355,9627,5,87,0,0,9356,9627,
        5,90,0,0,9357,9627,5,127,0,0,9358,9627,5,42,0,0,9359,9627,5,137,
        0,0,9360,9627,5,85,0,0,9361,9627,5,149,0,0,9362,9363,5,79,0,0,9363,
        9364,5,2,0,0,9364,9365,3,1162,581,0,9365,9366,5,74,0,0,9366,9367,
        3,1116,558,0,9367,9368,5,3,0,0,9368,9627,1,0,0,0,9369,9370,5,428,
        0,0,9370,9372,5,2,0,0,9371,9373,3,1292,646,0,9372,9371,1,0,0,0,9372,
        9373,1,0,0,0,9373,9374,1,0,0,0,9374,9627,5,3,0,0,9375,9376,5,527,
        0,0,9376,9377,5,2,0,0,9377,9380,3,1162,581,0,9378,9379,5,6,0,0,9379,
        9381,3,1296,648,0,9380,9378,1,0,0,0,9380,9381,1,0,0,0,9381,9382,
        1,0,0,0,9382,9383,5,3,0,0,9383,9627,1,0,0,0,9384,9385,5,441,0,0,
        9385,9390,5,2,0,0,9386,9391,3,1298,649,0,9387,9389,3,1282,641,0,
        9388,9387,1,0,0,0,9388,9389,1,0,0,0,9389,9391,1,0,0,0,9390,9386,
        1,0,0,0,9390,9388,1,0,0,0,9391,9392,1,0,0,0,9392,9627,5,3,0,0,9393,
        9394,5,442,0,0,9394,9396,5,2,0,0,9395,9397,3,1300,650,0,9396,9395,
        1,0,0,0,9396,9397,1,0,0,0,9397,9398,1,0,0,0,9398,9627,5,3,0,0,9399,
        9400,5,448,0,0,9400,9405,5,2,0,0,9401,9406,3,1302,651,0,9402,9404,
        3,1282,641,0,9403,9402,1,0,0,0,9403,9404,1,0,0,0,9404,9406,1,0,0,
        0,9405,9401,1,0,0,0,9405,9403,1,0,0,0,9406,9407,1,0,0,0,9407,9627,
        5,3,0,0,9408,9409,5,451,0,0,9409,9410,5,2,0,0,9410,9411,3,1162,581,
        0,9411,9412,5,74,0,0,9412,9413,3,1116,558,0,9413,9414,5,3,0,0,9414,
        9627,1,0,0,0,9415,9416,5,452,0,0,9416,9418,5,2,0,0,9417,9419,7,53,
        0,0,9418,9417,1,0,0,0,9418,9419,1,0,0,0,9419,9420,1,0,0,0,9420,9421,
        3,1304,652,0,9421,9422,5,3,0,0,9422,9627,1,0,0,0,9423,9424,5,439,
        0,0,9424,9425,5,2,0,0,9425,9426,3,1162,581,0,9426,9427,5,6,0,0,9427,
        9428,3,1162,581,0,9428,9429,5,3,0,0,9429,9627,1,0,0,0,9430,9431,
        5,424,0,0,9431,9432,5,2,0,0,9432,9433,3,1280,640,0,9433,9434,5,3,
        0,0,9434,9627,1,0,0,0,9435,9436,5,430,0,0,9436,9437,5,2,0,0,9437,
        9438,3,1280,640,0,9438,9439,5,3,0,0,9439,9627,1,0,0,0,9440,9441,
        5,435,0,0,9441,9442,5,2,0,0,9442,9443,3,1280,640,0,9443,9444,5,3,
        0,0,9444,9627,1,0,0,0,9445,9446,5,463,0,0,9446,9447,5,2,0,0,9447,
        9448,3,1280,640,0,9448,9449,5,3,0,0,9449,9627,1,0,0,0,9450,9451,
        5,464,0,0,9451,9452,5,2,0,0,9452,9453,5,297,0,0,9453,9459,3,1420,
        710,0,9454,9457,5,6,0,0,9455,9458,3,1222,611,0,9456,9458,3,1280,
        640,0,9457,9455,1,0,0,0,9457,9456,1,0,0,0,9458,9460,1,0,0,0,9459,
        9454,1,0,0,0,9459,9460,1,0,0,0,9460,9461,1,0,0,0,9461,9462,5,3,0,
        0,9462,9627,1,0,0,0,9463,9464,5,465,0,0,9464,9465,5,2,0,0,9465,9466,
        3,1206,603,0,9466,9467,3,1232,616,0,9467,9468,5,3,0,0,9468,9627,
        1,0,0,0,9469,9470,5,466,0,0,9470,9471,5,2,0,0,9471,9472,3,1224,612,
        0,9472,9473,5,3,0,0,9473,9627,1,0,0,0,9474,9475,5,467,0,0,9475,9476,
        5,2,0,0,9476,9477,3,1228,614,0,9477,9479,3,1162,581,0,9478,9480,
        3,1230,615,0,9479,9478,1,0,0,0,9479,9480,1,0,0,0,9480,9481,1,0,0,
        0,9481,9482,5,3,0,0,9482,9627,1,0,0,0,9483,9484,5,468,0,0,9484,9485,
        5,2,0,0,9485,9486,5,297,0,0,9486,9489,3,1420,710,0,9487,9488,5,6,
        0,0,9488,9490,3,1162,581,0,9489,9487,1,0,0,0,9489,9490,1,0,0,0,9490,
        9491,1,0,0,0,9491,9492,5,3,0,0,9492,9627,1,0,0,0,9493,9494,5,469,
        0,0,9494,9495,5,2,0,0,9495,9496,5,414,0,0,9496,9497,3,1162,581,0,
        9497,9498,5,6,0,0,9498,9500,3,1218,609,0,9499,9501,3,1220,610,0,
        9500,9499,1,0,0,0,9500,9501,1,0,0,0,9501,9502,1,0,0,0,9502,9503,
        5,3,0,0,9503,9627,1,0,0,0,9504,9505,5,470,0,0,9505,9506,5,2,0,0,
        9506,9507,3,1228,614,0,9507,9508,3,1162,581,0,9508,9509,5,74,0,0,
        9509,9510,3,1120,560,0,9510,9511,5,3,0,0,9511,9627,1,0,0,0,9512,
        9513,5,34,0,0,9513,9528,5,2,0,0,9514,9529,3,1282,641,0,9515,9517,
        3,1356,678,0,9516,9518,3,1360,680,0,9517,9516,1,0,0,0,9517,9518,
        1,0,0,0,9518,9520,1,0,0,0,9519,9521,3,1354,677,0,9520,9519,1,0,0,
        0,9520,9521,1,0,0,0,9521,9523,1,0,0,0,9522,9524,3,1350,675,0,9523,
        9522,1,0,0,0,9523,9524,1,0,0,0,9524,9529,1,0,0,0,9525,9527,3,1350,
        675,0,9526,9525,1,0,0,0,9526,9527,1,0,0,0,9527,9529,1,0,0,0,9528,
        9514,1,0,0,0,9528,9515,1,0,0,0,9528,9526,1,0,0,0,9529,9530,1,0,0,
        0,9530,9627,5,3,0,0,9531,9532,5,31,0,0,9532,9550,5,2,0,0,9533,9535,
        3,1364,682,0,9534,9536,3,1362,681,0,9535,9534,1,0,0,0,9535,9536,
        1,0,0,0,9536,9538,1,0,0,0,9537,9539,3,1350,675,0,9538,9537,1,0,0,
        0,9538,9539,1,0,0,0,9539,9551,1,0,0,0,9540,9542,3,968,484,0,9541,
        9543,3,1346,673,0,9542,9541,1,0,0,0,9542,9543,1,0,0,0,9543,9545,
        1,0,0,0,9544,9546,3,1350,675,0,9545,9544,1,0,0,0,9545,9546,1,0,0,
        0,9546,9551,1,0,0,0,9547,9549,3,1350,675,0,9548,9547,1,0,0,0,9548,
        9549,1,0,0,0,9549,9551,1,0,0,0,9550,9533,1,0,0,0,9550,9540,1,0,0,
        0,9550,9548,1,0,0,0,9551,9552,1,0,0,0,9552,9627,5,3,0,0,9553,9554,
        5,30,0,0,9554,9555,5,2,0,0,9555,9557,3,1344,672,0,9556,9558,3,1354,
        677,0,9557,9556,1,0,0,0,9557,9558,1,0,0,0,9558,9559,1,0,0,0,9559,
        9560,5,3,0,0,9560,9627,1,0,0,0,9561,9562,5,37,0,0,9562,9563,5,2,
        0,0,9563,9564,3,1162,581,0,9564,9565,5,3,0,0,9565,9627,1,0,0,0,9566,
        9567,5,38,0,0,9567,9568,5,2,0,0,9568,9570,3,1344,672,0,9569,9571,
        3,1350,675,0,9570,9569,1,0,0,0,9570,9571,1,0,0,0,9571,9572,1,0,0,
        0,9572,9573,5,3,0,0,9573,9627,1,0,0,0,9574,9575,5,41,0,0,9575,9576,
        5,2,0,0,9576,9627,5,3,0,0,9577,9578,5,36,0,0,9578,9579,5,2,0,0,9579,
        9580,3,1344,672,0,9580,9581,5,6,0,0,9581,9583,3,1162,581,0,9582,
        9584,3,1328,664,0,9583,9582,1,0,0,0,9583,9584,1,0,0,0,9584,9586,
        1,0,0,0,9585,9587,3,1350,675,0,9586,9585,1,0,0,0,9586,9587,1,0,0,
        0,9587,9588,1,0,0,0,9588,9590,3,1334,667,0,9589,9591,3,1348,674,
        0,9590,9589,1,0,0,0,9590,9591,1,0,0,0,9591,9593,1,0,0,0,9592,9594,
        3,1340,670,0,9593,9592,1,0,0,0,9593,9594,1,0,0,0,9594,9595,1,0,0,
        0,9595,9596,5,3,0,0,9596,9627,1,0,0,0,9597,9598,5,33,0,0,9598,9599,
        5,2,0,0,9599,9600,3,1344,672,0,9600,9601,5,6,0,0,9601,9603,3,1162,
        581,0,9602,9604,3,1328,664,0,9603,9602,1,0,0,0,9603,9604,1,0,0,0,
        9604,9606,1,0,0,0,9605,9607,3,1342,671,0,9606,9605,1,0,0,0,9606,
        9607,1,0,0,0,9607,9608,1,0,0,0,9608,9609,5,3,0,0,9609,9627,1,0,0,
        0,9610,9611,5,40,0,0,9611,9612,5,2,0,0,9612,9613,3,1344,672,0,9613,
        9614,5,6,0,0,9614,9616,3,1162,581,0,9615,9617,3,1328,664,0,9616,
        9615,1,0,0,0,9616,9617,1,0,0,0,9617,9619,1,0,0,0,9618,9620,3,1350,
        675,0,9619,9618,1,0,0,0,9619,9620,1,0,0,0,9620,9622,1,0,0,0,9621,
        9623,3,1340,670,0,9622,9621,1,0,0,0,9622,9623,1,0,0,0,9623,9624,
        1,0,0,0,9624,9625,5,3,0,0,9625,9627,1,0,0,0,9626,9320,1,0,0,0,9626,
        9326,1,0,0,0,9626,9327,1,0,0,0,9626,9334,1,0,0,0,9626,9341,1,0,0,
        0,9626,9348,1,0,0,0,9626,9355,1,0,0,0,9626,9356,1,0,0,0,9626,9357,
        1,0,0,0,9626,9358,1,0,0,0,9626,9359,1,0,0,0,9626,9360,1,0,0,0,9626,
        9361,1,0,0,0,9626,9362,1,0,0,0,9626,9369,1,0,0,0,9626,9375,1,0,0,
        0,9626,9384,1,0,0,0,9626,9393,1,0,0,0,9626,9399,1,0,0,0,9626,9408,
        1,0,0,0,9626,9415,1,0,0,0,9626,9423,1,0,0,0,9626,9430,1,0,0,0,9626,
        9435,1,0,0,0,9626,9440,1,0,0,0,9626,9445,1,0,0,0,9626,9450,1,0,0,
        0,9626,9463,1,0,0,0,9626,9469,1,0,0,0,9626,9474,1,0,0,0,9626,9483,
        1,0,0,0,9626,9493,1,0,0,0,9626,9504,1,0,0,0,9626,9512,1,0,0,0,9626,
        9531,1,0,0,0,9626,9553,1,0,0,0,9626,9561,1,0,0,0,9626,9566,1,0,0,
        0,9626,9574,1,0,0,0,9626,9577,1,0,0,0,9626,9597,1,0,0,0,9626,9610,
        1,0,0,0,9627,1217,1,0,0,0,9628,9629,5,406,0,0,9629,9634,3,1162,581,
        0,9630,9631,5,406,0,0,9631,9632,5,300,0,0,9632,9634,5,488,0,0,9633,
        9628,1,0,0,0,9633,9630,1,0,0,0,9634,1219,1,0,0,0,9635,9636,5,6,0,
        0,9636,9637,5,370,0,0,9637,9646,5,416,0,0,9638,9639,5,6,0,0,9639,
        9640,5,370,0,0,9640,9646,5,300,0,0,9641,9642,5,6,0,0,9642,9643,5,
        370,0,0,9643,9644,5,300,0,0,9644,9646,5,488,0,0,9645,9635,1,0,0,
        0,9645,9638,1,0,0,0,9645,9641,1,0,0,0,9646,1221,1,0,0,0,9647,9648,
        5,455,0,0,9648,9649,5,2,0,0,9649,9650,3,1224,612,0,9650,9651,5,3,
        0,0,9651,1223,1,0,0,0,9652,9657,3,1226,613,0,9653,9654,5,6,0,0,9654,
        9656,3,1226,613,0,9655,9653,1,0,0,0,9656,9659,1,0,0,0,9657,9655,
        1,0,0,0,9657,9658,1,0,0,0,9658,1225,1,0,0,0,9659,9657,1,0,0,0,9660,
        9663,3,1162,581,0,9661,9662,5,74,0,0,9662,9664,3,1420,710,0,9663,
        9661,1,0,0,0,9663,9664,1,0,0,0,9664,1227,1,0,0,0,9665,9666,7,54,
        0,0,9666,1229,1,0,0,0,9667,9668,5,323,0,0,9668,9672,5,409,0,0,9669,
        9670,5,378,0,0,9670,9672,5,409,0,0,9671,9667,1,0,0,0,9671,9669,1,
        0,0,0,9672,1231,1,0,0,0,9673,9674,5,317,0,0,9674,9689,3,1206,603,
        0,9675,9676,5,317,0,0,9676,9677,3,1206,603,0,9677,9678,3,1234,617,
        0,9678,9689,1,0,0,0,9679,9680,5,317,0,0,9680,9681,3,1234,617,0,9681,
        9682,3,1206,603,0,9682,9689,1,0,0,0,9683,9684,5,317,0,0,9684,9685,
        3,1234,617,0,9685,9686,3,1206,603,0,9686,9687,3,1234,617,0,9687,
        9689,1,0,0,0,9688,9673,1,0,0,0,9688,9675,1,0,0,0,9688,9679,1,0,0,
        0,9688,9683,1,0,0,0,9689,1233,1,0,0,0,9690,9691,5,185,0,0,9691,9692,
        7,55,0,0,9692,1235,1,0,0,0,9693,9694,5,517,0,0,9694,9695,5,104,0,
        0,9695,9696,5,2,0,0,9696,9697,3,1002,501,0,9697,9698,5,3,0,0,9698,
        1237,1,0,0,0,9699,9700,5,518,0,0,9700,9701,5,2,0,0,9701,9702,5,141,
        0,0,9702,9703,3,1162,581,0,9703,9704,5,3,0,0,9704,1239,1,0,0,0,9705,
        9706,5,142,0,0,9706,9707,3,1242,621,0,9707,1241,1,0,0,0,9708,9713,
        3,1244,622,0,9709,9710,5,6,0,0,9710,9712,3,1244,622,0,9711,9709,
        1,0,0,0,9712,9715,1,0,0,0,9713,9711,1,0,0,0,9713,9714,1,0,0,0,9714,
        1243,1,0,0,0,9715,9713,1,0,0,0,9716,9717,3,1414,707,0,9717,9718,
        5,74,0,0,9718,9719,3,1248,624,0,9719,1245,1,0,0,0,9720,9723,5,162,
        0,0,9721,9724,3,1248,624,0,9722,9724,3,1414,707,0,9723,9721,1,0,
        0,0,9723,9722,1,0,0,0,9724,1247,1,0,0,0,9725,9727,5,2,0,0,9726,9728,
        3,1250,625,0,9727,9726,1,0,0,0,9727,9728,1,0,0,0,9728,9730,1,0,0,
        0,9729,9731,3,1252,626,0,9730,9729,1,0,0,0,9730,9731,1,0,0,0,9731,
        9733,1,0,0,0,9732,9734,3,1000,500,0,9733,9732,1,0,0,0,9733,9734,
        1,0,0,0,9734,9736,1,0,0,0,9735,9737,3,1254,627,0,9736,9735,1,0,0,
        0,9736,9737,1,0,0,0,9737,9738,1,0,0,0,9738,9739,5,3,0,0,9739,1249,
        1,0,0,0,9740,9741,3,1414,707,0,9741,1251,1,0,0,0,9742,9743,5,316,
        0,0,9743,9744,5,185,0,0,9744,9745,3,1280,640,0,9745,1253,1,0,0,0,
        9746,9747,5,330,0,0,9747,9749,3,1256,628,0,9748,9750,3,1260,630,
        0,9749,9748,1,0,0,0,9749,9750,1,0,0,0,9750,9762,1,0,0,0,9751,9752,
        5,351,0,0,9752,9754,3,1256,628,0,9753,9755,3,1260,630,0,9754,9753,
        1,0,0,0,9754,9755,1,0,0,0,9755,9762,1,0,0,0,9756,9757,5,519,0,0,
        9757,9759,3,1256,628,0,9758,9760,3,1260,630,0,9759,9758,1,0,0,0,
        9759,9760,1,0,0,0,9760,9762,1,0,0,0,9761,9746,1,0,0,0,9761,9751,
        1,0,0,0,9761,9756,1,0,0,0,9762,1255,1,0,0,0,9763,9770,3,1258,629,
        0,9764,9765,5,418,0,0,9765,9766,3,1258,629,0,9766,9767,5,71,0,0,
        9767,9768,3,1258,629,0,9768,9770,1,0,0,0,9769,9763,1,0,0,0,9769,
        9764,1,0,0,0,9770,1257,1,0,0,0,9771,9772,5,393,0,0,9772,9779,7,56,
        0,0,9773,9774,5,472,0,0,9774,9779,5,445,0,0,9775,9776,3,1162,581,
        0,9776,9777,7,56,0,0,9777,9779,1,0,0,0,9778,9771,1,0,0,0,9778,9773,
        1,0,0,0,9778,9775,1,0,0,0,9779,1259,1,0,0,0,9780,9787,5,237,0,0,
        9781,9782,5,472,0,0,9782,9788,5,445,0,0,9783,9788,5,104,0,0,9784,
        9788,5,505,0,0,9785,9786,5,300,0,0,9786,9788,5,520,0,0,9787,9781,
        1,0,0,0,9787,9783,1,0,0,0,9787,9784,1,0,0,0,9787,9785,1,0,0,0,9788,
        1261,1,0,0,0,9789,9790,5,445,0,0,9790,9792,5,2,0,0,9791,9793,3,1280,
        640,0,9792,9791,1,0,0,0,9792,9793,1,0,0,0,9793,9794,1,0,0,0,9794,
        9802,5,3,0,0,9795,9796,5,2,0,0,9796,9797,3,1280,640,0,9797,9798,
        5,6,0,0,9798,9799,3,1162,581,0,9799,9800,5,3,0,0,9800,9802,1,0,0,
        0,9801,9789,1,0,0,0,9801,9795,1,0,0,0,9802,1263,1,0,0,0,9803,9804,
        5,445,0,0,9804,9806,5,2,0,0,9805,9807,3,1280,640,0,9806,9805,1,0,
        0,0,9806,9807,1,0,0,0,9807,9808,1,0,0,0,9808,9809,5,3,0,0,9809,1265,
        1,0,0,0,9810,9811,5,2,0,0,9811,9812,3,1280,640,0,9812,9813,5,6,0,
        0,9813,9814,3,1162,581,0,9814,9815,5,3,0,0,9815,1267,1,0,0,0,9816,
        9817,7,57,0,0,9817,1269,1,0,0,0,9818,9821,5,29,0,0,9819,9821,3,1272,
        636,0,9820,9818,1,0,0,0,9820,9819,1,0,0,0,9821,1271,1,0,0,0,9822,
        9823,7,58,0,0,9823,1273,1,0,0,0,9824,9831,5,29,0,0,9825,9826,5,309,
        0,0,9826,9827,5,2,0,0,9827,9828,3,682,341,0,9828,9829,5,3,0,0,9829,
        9831,1,0,0,0,9830,9824,1,0,0,0,9830,9825,1,0,0,0,9831,1275,1,0,0,
        0,9832,9839,3,1270,635,0,9833,9834,5,309,0,0,9834,9835,5,2,0,0,9835,
        9836,3,682,341,0,9836,9837,5,3,0,0,9837,9839,1,0,0,0,9838,9832,1,
        0,0,0,9838,9833,1,0,0,0,9839,1277,1,0,0,0,9840,9853,3,1270,635,0,
        9841,9842,5,309,0,0,9842,9843,5,2,0,0,9843,9844,3,682,341,0,9844,
        9845,5,3,0,0,9845,9853,1,0,0,0,9846,9853,5,158,0,0,9847,9848,5,115,
        0,0,9848,9853,5,158,0,0,9849,9853,5,152,0,0,9850,9851,5,115,0,0,
        9851,9853,5,152,0,0,9852,9840,1,0,0,0,9852,9841,1,0,0,0,9852,9846,
        1,0,0,0,9852,9847,1,0,0,0,9852,9849,1,0,0,0,9852,9850,1,0,0,0,9853,
        1279,1,0,0,0,9854,9859,3,1162,581,0,9855,9856,5,6,0,0,9856,9858,
        3,1162,581,0,9857,9855,1,0,0,0,9858,9861,1,0,0,0,9859,9857,1,0,0,
        0,9859,9860,1,0,0,0,9860,1281,1,0,0,0,9861,9859,1,0,0,0,9862,9867,
        3,1284,642,0,9863,9864,5,6,0,0,9864,9866,3,1284,642,0,9865,9863,
        1,0,0,0,9866,9869,1,0,0,0,9867,9865,1,0,0,0,9867,9868,1,0,0,0,9868,
        1283,1,0,0,0,9869,9867,1,0,0,0,9870,9876,3,1162,581,0,9871,9872,
        3,634,317,0,9872,9873,7,59,0,0,9873,9874,3,1162,581,0,9874,9876,
        1,0,0,0,9875,9870,1,0,0,0,9875,9871,1,0,0,0,9876,1285,1,0,0,0,9877,
        9882,3,1116,558,0,9878,9879,5,6,0,0,9879,9881,3,1116,558,0,9880,
        9878,1,0,0,0,9881,9884,1,0,0,0,9882,9880,1,0,0,0,9882,9883,1,0,0,
        0,9883,1287,1,0,0,0,9884,9882,1,0,0,0,9885,9888,5,4,0,0,9886,9889,
        3,1280,640,0,9887,9889,3,1290,645,0,9888,9886,1,0,0,0,9888,9887,
        1,0,0,0,9888,9889,1,0,0,0,9889,9890,1,0,0,0,9890,9891,5,5,0,0,9891,
        1289,1,0,0,0,9892,9897,3,1288,644,0,9893,9894,5,6,0,0,9894,9896,
        3,1288,644,0,9895,9893,1,0,0,0,9896,9899,1,0,0,0,9897,9895,1,0,0,
        0,9897,9898,1,0,0,0,9898,1291,1,0,0,0,9899,9897,1,0,0,0,9900,9901,
        3,1294,647,0,9901,9902,5,102,0,0,9902,9903,3,1162,581,0,9903,1293,
        1,0,0,0,9904,9913,3,1436,718,0,9905,9913,5,415,0,0,9906,9913,5,295,
        0,0,9907,9913,5,214,0,0,9908,9913,5,256,0,0,9909,9913,5,292,0,0,
        9910,9913,5,357,0,0,9911,9913,3,1400,700,0,9912,9904,1,0,0,0,9912,
        9905,1,0,0,0,9912,9906,1,0,0,0,9912,9907,1,0,0,0,9912,9908,1,0,0,
        0,9912,9909,1,0,0,0,9912,9910,1,0,0,0,9912,9911,1,0,0,0,9913,1295,
        1,0,0,0,9914,9915,7,60,0,0,9915,1297,1,0,0,0,9916,9917,3,1162,581,
        0,9917,9918,5,122,0,0,9918,9919,3,1162,581,0,9919,9920,5,102,0,0,
        9920,9923,3,1162,581,0,9921,9922,5,100,0,0,9922,9924,3,1162,581,
        0,9923,9921,1,0,0,0,9923,9924,1,0,0,0,9924,1299,1,0,0,0,9925,9926,
        3,1204,602,0,9926,9927,5,106,0,0,9927,9928,3,1204,602,0,9928,1301,
        1,0,0,0,9929,9930,3,1162,581,0,9930,9931,5,102,0,0,9931,9932,3,1162,
        581,0,9932,9933,5,100,0,0,9933,9934,3,1162,581,0,9934,9956,1,0,0,
        0,9935,9936,3,1162,581,0,9936,9937,5,100,0,0,9937,9938,3,1162,581,
        0,9938,9939,5,102,0,0,9939,9940,3,1162,581,0,9940,9956,1,0,0,0,9941,
        9942,3,1162,581,0,9942,9943,5,102,0,0,9943,9944,3,1162,581,0,9944,
        9956,1,0,0,0,9945,9946,3,1162,581,0,9946,9947,5,100,0,0,9947,9948,
        3,1162,581,0,9948,9956,1,0,0,0,9949,9950,3,1162,581,0,9950,9951,
        5,165,0,0,9951,9952,3,1162,581,0,9952,9953,5,235,0,0,9953,9954,3,
        1162,581,0,9954,9956,1,0,0,0,9955,9929,1,0,0,0,9955,9935,1,0,0,0,
        9955,9941,1,0,0,0,9955,9945,1,0,0,0,9955,9949,1,0,0,0,9956,1303,
        1,0,0,0,9957,9958,3,1162,581,0,9958,9959,5,102,0,0,9959,9960,3,1280,
        640,0,9960,9965,1,0,0,0,9961,9962,5,102,0,0,9962,9965,3,1280,640,
        0,9963,9965,3,1280,640,0,9964,9957,1,0,0,0,9964,9961,1,0,0,0,9964,
        9963,1,0,0,0,9965,1305,1,0,0,0,9966,9972,3,966,483,0,9967,9968,5,
        2,0,0,9968,9969,3,1280,640,0,9969,9970,5,3,0,0,9970,9972,1,0,0,0,
        9971,9966,1,0,0,0,9971,9967,1,0,0,0,9972,1307,1,0,0,0,9973,9975,
        5,78,0,0,9974,9976,3,1316,658,0,9975,9974,1,0,0,0,9975,9976,1,0,
        0,0,9976,9977,1,0,0,0,9977,9979,3,1310,655,0,9978,9980,3,1314,657,
        0,9979,9978,1,0,0,0,9979,9980,1,0,0,0,9980,9981,1,0,0,0,9981,9982,
        5,492,0,0,9982,1309,1,0,0,0,9983,9985,3,1312,656,0,9984,9983,1,0,
        0,0,9985,9986,1,0,0,0,9986,9984,1,0,0,0,9986,9987,1,0,0,0,9987,1311,
        1,0,0,0,9988,9989,5,140,0,0,9989,9990,3,1162,581,0,9990,9991,5,131,
        0,0,9991,9992,3,1162,581,0,9992,1313,1,0,0,0,9993,9994,5,96,0,0,
        9994,9995,3,1162,581,0,9995,1315,1,0,0,0,9996,9997,3,1162,581,0,
        9997,1317,1,0,0,0,9998,10000,3,1414,707,0,9999,10001,3,1324,662,
        0,10000,9999,1,0,0,0,10000,10001,1,0,0,0,10001,1319,1,0,0,0,10002,
        10005,5,11,0,0,10003,10006,3,1384,692,0,10004,10006,5,9,0,0,10005,
        10003,1,0,0,0,10005,10004,1,0,0,0,10006,10020,1,0,0,0,10007,10016,
        5,4,0,0,10008,10017,3,1162,581,0,10009,10011,3,1322,661,0,10010,
        10009,1,0,0,0,10010,10011,1,0,0,0,10011,10012,1,0,0,0,10012,10014,
        5,8,0,0,10013,10015,3,1322,661,0,10014,10013,1,0,0,0,10014,10015,
        1,0,0,0,10015,10017,1,0,0,0,10016,10008,1,0,0,0,10016,10010,1,0,
        0,0,10017,10018,1,0,0,0,10018,10020,5,5,0,0,10019,10002,1,0,0,0,
        10019,10007,1,0,0,0,10020,1321,1,0,0,0,10021,10022,3,1162,581,0,
        10022,1323,1,0,0,0,10023,10025,3,1320,660,0,10024,10023,1,0,0,0,
        10025,10026,1,0,0,0,10026,10024,1,0,0,0,10026,10027,1,0,0,0,10027,
        1325,1,0,0,0,10028,10030,3,1320,660,0,10029,10028,1,0,0,0,10030,
        10033,1,0,0,0,10031,10029,1,0,0,0,10031,10032,1,0,0,0,10032,1327,
        1,0,0,0,10033,10031,1,0,0,0,10034,10035,5,317,0,0,10035,10036,3,
        1330,665,0,10036,1329,1,0,0,0,10037,10038,6,665,-1,0,10038,10039,
        3,1332,666,0,10039,10045,1,0,0,0,10040,10041,10,1,0,0,10041,10042,
        5,6,0,0,10042,10044,3,1332,666,0,10043,10040,1,0,0,0,10044,10047,
        1,0,0,0,10045,10043,1,0,0,0,10045,10046,1,0,0,0,10046,1331,1,0,0,
        0,10047,10045,1,0,0,0,10048,10049,3,1344,672,0,10049,10050,5,74,
        0,0,10050,10051,3,1420,710,0,10051,1333,1,0,0,0,10052,10053,5,410,
        0,0,10053,10078,5,412,0,0,10054,10055,5,410,0,0,10055,10056,5,73,
        0,0,10056,10078,5,412,0,0,10057,10058,5,143,0,0,10058,10078,5,412,
        0,0,10059,10060,5,143,0,0,10060,10061,5,73,0,0,10061,10078,5,412,
        0,0,10062,10063,5,143,0,0,10063,10064,5,48,0,0,10064,10065,5,73,
        0,0,10065,10078,5,412,0,0,10066,10067,5,143,0,0,10067,10068,5,65,
        0,0,10068,10069,5,73,0,0,10069,10078,5,412,0,0,10070,10071,5,143,
        0,0,10071,10072,5,48,0,0,10072,10078,5,412,0,0,10073,10074,5,143,
        0,0,10074,10075,5,65,0,0,10075,10078,5,412,0,0,10076,10078,1,0,0,
        0,10077,10052,1,0,0,0,10077,10054,1,0,0,0,10077,10057,1,0,0,0,10077,
        10059,1,0,0,0,10077,10062,1,0,0,0,10077,10066,1,0,0,0,10077,10070,
        1,0,0,0,10077,10073,1,0,0,0,10077,10076,1,0,0,0,10078,1335,1,0,0,
        0,10079,10080,5,91,0,0,10080,10083,3,1162,581,0,10081,10083,3,1338,
        669,0,10082,10079,1,0,0,0,10082,10081,1,0,0,0,10083,1337,1,0,0,0,
        10084,10095,5,529,0,0,10085,10095,5,116,0,0,10086,10095,5,134,0,
        0,10087,10095,5,98,0,0,10088,10095,5,396,0,0,10089,10090,5,50,0,
        0,10090,10095,5,73,0,0,10091,10092,5,50,0,0,10092,10095,5,305,0,
        0,10093,10095,5,50,0,0,10094,10084,1,0,0,0,10094,10085,1,0,0,0,10094,
        10086,1,0,0,0,10094,10087,1,0,0,0,10094,10088,1,0,0,0,10094,10089,
        1,0,0,0,10094,10091,1,0,0,0,10094,10093,1,0,0,0,10095,1339,1,0,0,
        0,10096,10097,3,1336,668,0,10097,10098,5,118,0,0,10098,10099,5,50,
        0,0,10099,10112,1,0,0,0,10100,10101,3,1336,668,0,10101,10102,5,118,
        0,0,10102,10103,5,529,0,0,10103,10112,1,0,0,0,10104,10105,3,1336,
        668,0,10105,10106,5,118,0,0,10106,10107,5,50,0,0,10107,10108,3,1336,
        668,0,10108,10109,5,118,0,0,10109,10110,5,529,0,0,10110,10112,1,
        0,0,0,10111,10096,1,0,0,0,10111,10100,1,0,0,0,10111,10104,1,0,0,
        0,10112,1341,1,0,0,0,10113,10114,3,1336,668,0,10114,10115,5,118,
        0,0,10115,10116,5,529,0,0,10116,1343,1,0,0,0,10117,10119,3,1162,
        581,0,10118,10120,3,1346,673,0,10119,10118,1,0,0,0,10119,10120,1,
        0,0,0,10120,1345,1,0,0,0,10121,10122,5,67,0,0,10122,10123,5,30,0,
        0,10123,10124,5,232,0,0,10124,10128,3,1382,691,0,10125,10126,5,67,
        0,0,10126,10128,5,30,0,0,10127,10121,1,0,0,0,10127,10125,1,0,0,0,
        10128,1347,1,0,0,0,10129,10130,5,53,0,0,10130,10131,5,60,0,0,10131,
        10132,5,118,0,0,10132,10133,5,61,0,0,10133,10144,5,63,0,0,10134,
        10135,5,53,0,0,10135,10144,5,60,0,0,10136,10137,5,56,0,0,10137,10138,
        5,60,0,0,10138,10139,5,118,0,0,10139,10140,5,61,0,0,10140,10144,
        5,63,0,0,10141,10142,5,56,0,0,10142,10144,5,60,0,0,10143,10129,1,
        0,0,0,10143,10134,1,0,0,0,10143,10136,1,0,0,0,10143,10141,1,0,0,
        0,10144,1349,1,0,0,0,10145,10146,5,125,0,0,10146,10148,3,1116,558,
        0,10147,10149,3,1346,673,0,10148,10147,1,0,0,0,10148,10149,1,0,0,
        0,10149,1351,1,0,0,0,10150,10160,5,30,0,0,10151,10152,5,30,0,0,10152,
        10160,5,488,0,0,10153,10154,5,30,0,0,10154,10160,5,73,0,0,10155,
        10156,5,30,0,0,10156,10160,5,305,0,0,10157,10158,5,30,0,0,10158,
        10160,5,61,0,0,10159,10150,1,0,0,0,10159,10151,1,0,0,0,10159,10153,
        1,0,0,0,10159,10155,1,0,0,0,10159,10157,1,0,0,0,10160,1353,1,0,0,
        0,10161,10162,5,143,0,0,10162,10163,5,136,0,0,10163,10172,5,54,0,
        0,10164,10165,5,143,0,0,10165,10172,5,136,0,0,10166,10167,5,410,
        0,0,10167,10168,5,136,0,0,10168,10172,5,54,0,0,10169,10170,5,410,
        0,0,10170,10172,5,136,0,0,10171,10161,1,0,0,0,10171,10164,1,0,0,
        0,10171,10166,1,0,0,0,10171,10169,1,0,0,0,10172,1355,1,0,0,0,10173,
        10174,6,678,-1,0,10174,10175,3,1358,679,0,10175,10181,1,0,0,0,10176,
        10177,10,1,0,0,10177,10178,5,6,0,0,10178,10180,3,1358,679,0,10179,
        10176,1,0,0,0,10180,10183,1,0,0,0,10181,10179,1,0,0,0,10181,10182,
        1,0,0,0,10182,1357,1,0,0,0,10183,10181,1,0,0,0,10184,10185,3,1206,
        603,0,10185,10186,5,488,0,0,10186,10187,3,1344,672,0,10187,10193,
        1,0,0,0,10188,10189,3,1162,581,0,10189,10190,5,8,0,0,10190,10191,
        3,1344,672,0,10191,10193,1,0,0,0,10192,10184,1,0,0,0,10192,10188,
        1,0,0,0,10193,1359,1,0,0,0,10194,10195,5,116,0,0,10195,10196,5,118,
        0,0,10196,10201,5,116,0,0,10197,10198,5,43,0,0,10198,10199,5,118,
        0,0,10199,10201,5,116,0,0,10200,10194,1,0,0,0,10200,10197,1,0,0,
        0,10201,1361,1,0,0,0,10202,10203,5,116,0,0,10203,10204,5,118,0,0,
        10204,10209,5,116,0,0,10205,10206,5,43,0,0,10206,10207,5,118,0,0,
        10207,10209,5,116,0,0,10208,10202,1,0,0,0,10208,10205,1,0,0,0,10209,
        1363,1,0,0,0,10210,10211,6,682,-1,0,10211,10212,3,1344,672,0,10212,
        10218,1,0,0,0,10213,10214,10,1,0,0,10214,10215,5,6,0,0,10215,10217,
        3,1344,672,0,10216,10213,1,0,0,0,10217,10220,1,0,0,0,10218,10216,
        1,0,0,0,10218,10219,1,0,0,0,10219,1365,1,0,0,0,10220,10218,1,0,0,
        0,10221,10222,5,35,0,0,10222,10223,5,2,0,0,10223,10225,3,1358,679,
        0,10224,10226,3,1360,680,0,10225,10224,1,0,0,0,10225,10226,1,0,0,
        0,10226,10228,1,0,0,0,10227,10229,3,1354,677,0,10228,10227,1,0,0,
        0,10228,10229,1,0,0,0,10229,10230,1,0,0,0,10230,10231,3,1350,675,
        0,10231,10232,5,3,0,0,10232,10246,1,0,0,0,10233,10234,5,32,0,0,10234,
        10235,5,2,0,0,10235,10237,3,1344,672,0,10236,10238,3,1368,684,0,
        10237,10236,1,0,0,0,10237,10238,1,0,0,0,10238,10240,1,0,0,0,10239,
        10241,3,1362,681,0,10240,10239,1,0,0,0,10240,10241,1,0,0,0,10241,
        10242,1,0,0,0,10242,10243,3,1350,675,0,10243,10244,5,3,0,0,10244,
        10246,1,0,0,0,10245,10221,1,0,0,0,10245,10233,1,0,0,0,10246,1367,
        1,0,0,0,10247,10248,5,121,0,0,10248,10249,5,185,0,0,10249,10250,
        3,1004,502,0,10250,1369,1,0,0,0,10251,10252,3,1372,686,0,10252,1371,
        1,0,0,0,10253,10258,3,1374,687,0,10254,10255,5,6,0,0,10255,10257,
        3,1374,687,0,10256,10254,1,0,0,0,10257,10260,1,0,0,0,10258,10256,
        1,0,0,0,10258,10259,1,0,0,0,10259,1373,1,0,0,0,10260,10258,1,0,0,
        0,10261,10266,3,1162,581,0,10262,10263,5,74,0,0,10263,10267,3,1420,
        710,0,10264,10267,3,1422,711,0,10265,10267,1,0,0,0,10266,10262,1,
        0,0,0,10266,10264,1,0,0,0,10266,10265,1,0,0,0,10267,10270,1,0,0,
        0,10268,10270,5,9,0,0,10269,10261,1,0,0,0,10269,10268,1,0,0,0,10270,
        1375,1,0,0,0,10271,10276,3,1378,689,0,10272,10273,5,6,0,0,10273,
        10275,3,1378,689,0,10274,10272,1,0,0,0,10275,10278,1,0,0,0,10276,
        10274,1,0,0,0,10276,10277,1,0,0,0,10277,1377,1,0,0,0,10278,10276,
        1,0,0,0,10279,10281,3,1414,707,0,10280,10282,3,1324,662,0,10281,
        10280,1,0,0,0,10281,10282,1,0,0,0,10282,1379,1,0,0,0,10283,10288,
        3,1382,691,0,10284,10285,5,6,0,0,10285,10287,3,1382,691,0,10286,
        10284,1,0,0,0,10287,10290,1,0,0,0,10288,10286,1,0,0,0,10288,10289,
        1,0,0,0,10289,1381,1,0,0,0,10290,10288,1,0,0,0,10291,10292,3,1414,
        707,0,10292,1383,1,0,0,0,10293,10294,3,1420,710,0,10294,1385,1,0,
        0,0,10295,10296,3,1400,700,0,10296,1387,1,0,0,0,10297,10302,3,1416,
        708,0,10298,10299,3,1414,707,0,10299,10300,3,1324,662,0,10300,10302,
        1,0,0,0,10301,10297,1,0,0,0,10301,10298,1,0,0,0,10302,1389,1,0,0,
        0,10303,10339,3,1398,699,0,10304,10339,3,1396,698,0,10305,10339,
        3,1400,700,0,10306,10339,3,1394,697,0,10307,10339,3,1392,696,0,10308,
        10318,3,1388,694,0,10309,10319,3,1400,700,0,10310,10311,5,2,0,0,
        10311,10313,3,1282,641,0,10312,10314,3,1000,500,0,10313,10312,1,
        0,0,0,10313,10314,1,0,0,0,10314,10315,1,0,0,0,10315,10316,5,3,0,
        0,10316,10317,3,1400,700,0,10317,10319,1,0,0,0,10318,10309,1,0,0,
        0,10318,10310,1,0,0,0,10319,10339,1,0,0,0,10320,10321,3,1122,561,
        0,10321,10322,3,1400,700,0,10322,10339,1,0,0,0,10323,10333,3,1150,
        575,0,10324,10326,3,1400,700,0,10325,10327,3,1154,577,0,10326,10325,
        1,0,0,0,10326,10327,1,0,0,0,10327,10334,1,0,0,0,10328,10329,5,2,
        0,0,10329,10330,3,1398,699,0,10330,10331,5,3,0,0,10331,10332,3,1400,
        700,0,10332,10334,1,0,0,0,10333,10324,1,0,0,0,10333,10328,1,0,0,
        0,10334,10339,1,0,0,0,10335,10339,5,134,0,0,10336,10339,5,98,0,0,
        10337,10339,5,116,0,0,10338,10303,1,0,0,0,10338,10304,1,0,0,0,10338,
        10305,1,0,0,0,10338,10306,1,0,0,0,10338,10307,1,0,0,0,10338,10308,
        1,0,0,0,10338,10320,1,0,0,0,10338,10323,1,0,0,0,10338,10335,1,0,
        0,0,10338,10336,1,0,0,0,10338,10337,1,0,0,0,10339,1391,1,0,0,0,10340,
        10341,5,572,0,0,10341,1393,1,0,0,0,10342,10343,5,568,0,0,10343,1395,
        1,0,0,0,10344,10345,5,578,0,0,10345,1397,1,0,0,0,10346,10347,5,576,
        0,0,10347,1399,1,0,0,0,10348,10350,3,1402,701,0,10349,10351,3,1404,
        702,0,10350,10349,1,0,0,0,10350,10351,1,0,0,0,10351,1401,1,0,0,0,
        10352,10364,5,563,0,0,10353,10364,5,565,0,0,10354,10358,5,567,0,
        0,10355,10357,5,593,0,0,10356,10355,1,0,0,0,10357,10360,1,0,0,0,
        10358,10356,1,0,0,0,10358,10359,1,0,0,0,10359,10361,1,0,0,0,10360,
        10358,1,0,0,0,10361,10364,5,594,0,0,10362,10364,5,587,0,0,10363,
        10352,1,0,0,0,10363,10353,1,0,0,0,10363,10354,1,0,0,0,10363,10362,
        1,0,0,0,10364,1403,1,0,0,0,10365,10366,5,525,0,0,10366,10367,3,1402,
        701,0,10367,1405,1,0,0,0,10368,10374,3,1398,699,0,10369,10370,5,
        12,0,0,10370,10374,3,1398,699,0,10371,10372,5,13,0,0,10372,10374,
        3,1398,699,0,10373,10368,1,0,0,0,10373,10369,1,0,0,0,10373,10371,
        1,0,0,0,10374,1407,1,0,0,0,10375,10376,3,1410,705,0,10376,1409,1,
        0,0,0,10377,10381,3,1418,709,0,10378,10381,5,90,0,0,10379,10381,
        5,127,0,0,10380,10377,1,0,0,0,10380,10378,1,0,0,0,10380,10379,1,
        0,0,0,10381,1411,1,0,0,0,10382,10387,3,1410,705,0,10383,10384,5,
        6,0,0,10384,10386,3,1410,705,0,10385,10383,1,0,0,0,10386,10389,1,
        0,0,0,10387,10385,1,0,0,0,10387,10388,1,0,0,0,10388,1413,1,0,0,0,
        10389,10387,1,0,0,0,10390,10394,3,1436,718,0,10391,10394,3,1424,
        712,0,10392,10394,3,1426,713,0,10393,10390,1,0,0,0,10393,10391,1,
        0,0,0,10393,10392,1,0,0,0,10394,1415,1,0,0,0,10395,10399,3,1436,
        718,0,10396,10399,3,1424,712,0,10397,10399,3,1428,714,0,10398,10395,
        1,0,0,0,10398,10396,1,0,0,0,10398,10397,1,0,0,0,10399,1417,1,0,0,
        0,10400,10405,3,1436,718,0,10401,10405,3,1424,712,0,10402,10405,
        3,1426,713,0,10403,10405,3,1428,714,0,10404,10400,1,0,0,0,10404,
        10401,1,0,0,0,10404,10402,1,0,0,0,10404,10403,1,0,0,0,10405,1419,
        1,0,0,0,10406,10413,3,1436,718,0,10407,10413,3,1424,712,0,10408,
        10413,3,1426,713,0,10409,10413,3,1428,714,0,10410,10413,3,1430,715,
        0,10411,10413,5,541,0,0,10412,10406,1,0,0,0,10412,10407,1,0,0,0,
        10412,10408,1,0,0,0,10412,10409,1,0,0,0,10412,10410,1,0,0,0,10412,
        10411,1,0,0,0,10413,1421,1,0,0,0,10414,10417,3,1436,718,0,10415,
        10417,3,1432,716,0,10416,10414,1,0,0,0,10416,10415,1,0,0,0,10417,
        1423,1,0,0,0,10418,10419,7,61,0,0,10419,1425,1,0,0,0,10420,10484,
        5,418,0,0,10421,10484,5,419,0,0,10422,10484,5,420,0,0,10423,10484,
        5,421,0,0,10424,10484,5,422,0,0,10425,10484,3,1140,570,0,10426,10484,
        5,424,0,0,10427,10484,5,425,0,0,10428,10484,5,426,0,0,10429,10484,
        5,427,0,0,10430,10484,5,428,0,0,10431,10484,5,429,0,0,10432,10484,
        5,430,0,0,10433,10484,5,508,0,0,10434,10484,5,431,0,0,10435,10484,
        5,432,0,0,10436,10484,5,433,0,0,10437,10484,5,434,0,0,10438,10484,
        5,30,0,0,10439,10484,5,31,0,0,10440,10484,5,32,0,0,10441,10484,5,
        33,0,0,10442,10484,5,34,0,0,10443,10484,5,35,0,0,10444,10484,5,36,
        0,0,10445,10484,5,37,0,0,10446,10484,5,38,0,0,10447,10484,5,39,0,
        0,10448,10484,5,40,0,0,10449,10484,5,435,0,0,10450,10484,5,41,0,
        0,10451,10484,5,436,0,0,10452,10484,5,437,0,0,10453,10484,5,438,
        0,0,10454,10484,5,527,0,0,10455,10484,5,439,0,0,10456,10484,5,440,
        0,0,10457,10484,5,491,0,0,10458,10484,5,441,0,0,10459,10484,5,442,
        0,0,10460,10484,5,443,0,0,10461,10484,5,444,0,0,10462,10484,5,445,
        0,0,10463,10484,5,446,0,0,10464,10484,5,447,0,0,10465,10484,5,448,
        0,0,10466,10484,5,449,0,0,10467,10484,5,450,0,0,10468,10484,5,451,
        0,0,10469,10484,5,452,0,0,10470,10484,5,453,0,0,10471,10484,5,454,
        0,0,10472,10484,5,455,0,0,10473,10484,5,463,0,0,10474,10484,5,464,
        0,0,10475,10484,5,465,0,0,10476,10484,5,466,0,0,10477,10484,5,514,
        0,0,10478,10484,5,467,0,0,10479,10484,5,468,0,0,10480,10484,5,469,
        0,0,10481,10484,5,470,0,0,10482,10484,5,512,0,0,10483,10420,1,0,
        0,0,10483,10421,1,0,0,0,10483,10422,1,0,0,0,10483,10423,1,0,0,0,
        10483,10424,1,0,0,0,10483,10425,1,0,0,0,10483,10426,1,0,0,0,10483,
        10427,1,0,0,0,10483,10428,1,0,0,0,10483,10429,1,0,0,0,10483,10430,
        1,0,0,0,10483,10431,1,0,0,0,10483,10432,1,0,0,0,10483,10433,1,0,
        0,0,10483,10434,1,0,0,0,10483,10435,1,0,0,0,10483,10436,1,0,0,0,
        10483,10437,1,0,0,0,10483,10438,1,0,0,0,10483,10439,1,0,0,0,10483,
        10440,1,0,0,0,10483,10441,1,0,0,0,10483,10442,1,0,0,0,10483,10443,
        1,0,0,0,10483,10444,1,0,0,0,10483,10445,1,0,0,0,10483,10446,1,0,
        0,0,10483,10447,1,0,0,0,10483,10448,1,0,0,0,10483,10449,1,0,0,0,
        10483,10450,1,0,0,0,10483,10451,1,0,0,0,10483,10452,1,0,0,0,10483,
        10453,1,0,0,0,10483,10454,1,0,0,0,10483,10455,1,0,0,0,10483,10456,
        1,0,0,0,10483,10457,1,0,0,0,10483,10458,1,0,0,0,10483,10459,1,0,
        0,0,10483,10460,1,0,0,0,10483,10461,1,0,0,0,10483,10462,1,0,0,0,
        10483,10463,1,0,0,0,10483,10464,1,0,0,0,10483,10465,1,0,0,0,10483,
        10466,1,0,0,0,10483,10467,1,0,0,0,10483,10468,1,0,0,0,10483,10469,
        1,0,0,0,10483,10470,1,0,0,0,10483,10471,1,0,0,0,10483,10472,1,0,
        0,0,10483,10473,1,0,0,0,10483,10474,1,0,0,0,10483,10475,1,0,0,0,
        10483,10476,1,0,0,0,10483,10477,1,0,0,0,10483,10478,1,0,0,0,10483,
        10479,1,0,0,0,10483,10480,1,0,0,0,10483,10481,1,0,0,0,10483,10482,
        1,0,0,0,10484,1427,1,0,0,0,10485,10486,7,62,0,0,10486,1429,1,0,0,
        0,10487,10488,7,63,0,0,10488,1431,1,0,0,0,10489,10490,7,64,0,0,10490,
        1433,1,0,0,0,10491,10492,3,1414,707,0,10492,1435,1,0,0,0,10493,10495,
        5,554,0,0,10494,10496,3,1404,702,0,10495,10494,1,0,0,0,10495,10496,
        1,0,0,0,10496,10501,1,0,0,0,10497,10501,5,555,0,0,10498,10501,5,
        559,0,0,10499,10501,5,579,0,0,10500,10493,1,0,0,0,10500,10497,1,
        0,0,0,10500,10498,1,0,0,0,10500,10499,1,0,0,0,10501,1437,1,0,0,0,
        1046,1444,1448,1452,1579,1588,1597,1603,1609,1624,1636,1642,1650,
        1661,1665,1673,1681,1699,1702,1707,1716,1725,1729,1741,1747,1763,
        1776,1783,1791,1796,1803,1809,1816,1827,1831,1835,1848,1852,1857,
        1862,1874,1883,1896,1901,1912,1918,1924,1929,1940,1946,1952,1961,
        1971,1986,1992,1999,2004,2011,2022,2046,2053,2062,2071,2079,2089,
        2098,2107,2115,2123,2132,2141,2145,2152,2160,2170,2176,2180,2184,
        2188,2192,2197,2200,2204,2225,2231,2326,2333,2349,2363,2373,2375,
        2380,2384,2387,2393,2395,2423,2433,2446,2453,2459,2463,2469,2474,
        2477,2479,2484,2488,2492,2496,2500,2503,2507,2515,2519,2523,2532,
        2539,2544,2551,2556,2563,2568,2586,2591,2603,2608,2617,2624,2631,
        2637,2642,2646,2649,2652,2655,2658,2661,2666,2669,2672,2675,2678,
        2681,2687,2691,2694,2697,2700,2703,2705,2714,2727,2735,2741,2745,
        2750,2757,2764,2775,2782,2785,2790,2793,2800,2809,2816,2821,2824,
        2827,2829,2834,2841,2851,2861,2874,2877,2880,2887,2895,2898,2901,
        2908,2912,2918,2921,2924,2927,2939,2942,2945,2949,2963,2981,2992,
        3007,3023,3044,3049,3052,3056,3059,3065,3068,3070,3079,3088,3107,
        3111,3122,3131,3137,3143,3147,3150,3153,3156,3159,3165,3169,3176,
        3182,3186,3189,3192,3195,3203,3207,3211,3217,3221,3227,3241,3250,
        3267,3272,3275,3277,3287,3294,3299,3302,3305,3312,3315,3317,3323,
        3332,3342,3347,3356,3365,3369,3376,3386,3397,3507,3515,3518,3528,
        3533,3543,3554,3566,3579,3589,3602,3605,3612,3621,3624,3631,3633,
        3641,3651,3653,3661,3665,3670,3681,3685,3690,3700,3706,3719,3725,
        3727,3734,3742,3747,3762,3775,3777,3781,3801,3818,3821,3824,3827,
        3830,3838,3841,3844,3890,3893,3896,3914,3921,3930,3936,3943,3953,
        3961,3966,3978,3995,4001,4008,4016,4030,4058,4065,4079,4094,4107,
        4116,4141,4152,4219,4230,4236,4244,4255,4269,4278,4288,4300,4315,
        4326,4334,4344,4351,4354,4360,4363,4378,4391,4420,4427,4442,4451,
        4462,4464,4473,4484,4486,4493,4508,4514,4522,4528,4536,4546,4552,
        4560,4566,4574,4581,4590,4592,4617,4624,4635,4641,4650,4655,4661,
        4668,4673,4677,4680,4686,4835,4839,4844,4855,4866,4877,4888,4899,
        4910,4921,4933,4944,4952,4959,4965,4973,4978,4983,4988,4994,5001,
        5007,5013,5018,5024,5031,5036,5042,5049,5052,5065,5074,5086,5088,
        5105,5112,5117,5121,5125,5129,5131,5191,5198,5204,5215,5218,5225,
        5228,5238,5241,5243,5262,5274,5283,5292,5304,5306,5312,5316,5319,
        5324,5330,5333,5336,5339,5343,5347,5356,5362,5365,5368,5371,5373,
        5391,5395,5398,5401,5404,5407,5412,5415,5417,5430,5442,5456,5460,
        5472,5474,5483,5492,5500,5509,5511,5515,5524,5529,5535,5540,5544,
        5549,5557,5564,5569,5584,5593,5604,5610,5649,5659,5666,5677,5691,
        5699,5704,5712,5720,5726,5734,5740,5748,5750,5756,5764,5766,5772,
        5780,5782,5806,5813,5823,5835,5840,5853,5865,5877,5879,5885,5890,
        5898,5905,5950,5955,5962,5966,5970,5976,5980,5985,5989,5992,5994,
        6016,6087,6282,6295,6306,6319,6331,6345,6377,6391,6503,6505,6516,
        6527,6538,6551,6563,6574,6581,6802,6817,6828,6835,6889,7030,7036,
        7039,7049,7078,7088,7095,7118,7127,7139,7145,7153,7155,7159,7169,
        7173,7183,7186,7190,7194,7202,7213,7225,7229,7232,7236,7239,7244,
        7248,7251,7255,7258,7262,7265,7276,7283,7296,7310,7314,7319,7326,
        7333,7336,7341,7344,7353,7355,7360,7364,7376,7379,7386,7390,7395,
        7405,7414,7417,7422,7433,7437,7443,7450,7470,7491,7495,7500,7583,
        7589,7602,7606,7610,7614,7620,7627,7630,7633,7636,7639,7646,7648,
        7652,7655,7662,7664,7671,7679,7686,7691,7695,7699,7703,7707,7723,
        7730,7740,7753,7764,7771,7776,7780,7784,7789,7802,7807,7811,7819,
        7822,7826,7837,7840,7842,7858,7861,7868,7871,7876,7891,7897,7906,
        7915,7922,7925,7931,7936,7943,7947,7952,7955,7961,7965,7967,7970,
        7977,7980,7987,7995,7998,8007,8012,8018,8021,8024,8031,8035,8038,
        8053,8056,8063,8066,8073,8076,8079,8086,8099,8109,8117,8129,8131,
        8138,8142,8152,8156,8160,8164,8166,8171,8175,8179,8181,8183,8188,
        8193,8199,8204,8209,8212,8215,8218,8221,8224,8227,8230,8235,8238,
        8241,8244,8247,8250,8252,8258,8262,8271,8276,8280,8289,8299,8303,
        8308,8314,8326,8341,8348,8350,8353,8357,8361,8363,8371,8380,8386,
        8388,8390,8397,8401,8410,8414,8429,8437,8465,8472,8476,8479,8484,
        8488,8491,8507,8518,8523,8526,8530,8534,8538,8543,8547,8551,8553,
        8562,8567,8573,8577,8579,8586,8591,8597,8599,8603,8610,8615,8618,
        8624,8628,8637,8641,8649,8651,8658,8663,8666,8674,8683,8691,8693,
        8697,8704,8723,8732,8738,8757,8766,8772,8776,8781,8791,8798,8807,
        8810,8819,8821,8825,8830,8840,8846,8849,8856,8860,8863,8876,8882,
        8886,8890,8893,8901,8905,8909,8917,8924,8931,8935,8941,8943,8952,
        8955,8965,8981,8987,8992,8999,9012,9019,9027,9035,9040,9044,9050,
        9054,9058,9061,9067,9072,9088,9091,9093,9105,9107,9111,9117,9121,
        9123,9131,9135,9144,9152,9158,9161,9170,9175,9182,9192,9218,9229,
        9231,9233,9241,9263,9272,9282,9285,9290,9295,9299,9305,9308,9311,
        9314,9318,9332,9339,9346,9353,9372,9380,9388,9390,9396,9403,9405,
        9418,9457,9459,9479,9489,9500,9517,9520,9523,9526,9528,9535,9538,
        9542,9545,9548,9550,9557,9570,9583,9586,9590,9593,9603,9606,9616,
        9619,9622,9626,9633,9645,9657,9663,9671,9688,9713,9723,9727,9730,
        9733,9736,9749,9754,9759,9761,9769,9778,9787,9792,9801,9806,9820,
        9830,9838,9852,9859,9867,9875,9882,9888,9897,9912,9923,9955,9964,
        9971,9975,9979,9986,10000,10005,10010,10014,10016,10019,10026,10031,
        10045,10077,10082,10094,10111,10119,10127,10143,10148,10159,10171,
        10181,10192,10200,10208,10218,10225,10228,10237,10240,10245,10258,
        10266,10269,10276,10281,10288,10301,10313,10318,10326,10333,10338,
        10350,10358,10363,10373,10380,10387,10393,10398,10404,10412,10416,
        10483,10495,10500
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!PostgreSQLParser.__ATN) {
            PostgreSQLParser.__ATN = new antlr.ATNDeserializer().deserialize(PostgreSQLParser._serializedATN);
        }

        return PostgreSQLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(PostgreSQLParser.literalNames, PostgreSQLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return PostgreSQLParser.vocabulary;
    }

    private static readonly decisionsToDFA = PostgreSQLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmtblock(): StmtblockContext {
        return this.getRuleContext(0, StmtblockContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EOF, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_root;
    }
}


export class StmtblockContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmtmulti(): StmtmultiContext {
        return this.getRuleContext(0, StmtmultiContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_stmtblock;
    }
}


export class StmtmultiContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public stmt(): StmtContext[];
    public stmt(i: number): StmtContext | null;
    public stmt(i?: number): StmtContext[] | StmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StmtContext);
        }

        return this.getRuleContext(i, StmtContext);
    }
    public SEMI(): antlr.TerminalNode[];
    public SEMI(i: number): antlr.TerminalNode | null;
    public SEMI(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.SEMI);
    	} else {
    		return this.getToken(PostgreSQLParser.SEMI, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_stmtmulti;
    }
}


export class StmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public altereventtrigstmt(): AltereventtrigstmtContext | null {
        return this.getRuleContext(0, AltereventtrigstmtContext);
    }
    public altercollationstmt(): AltercollationstmtContext | null {
        return this.getRuleContext(0, AltercollationstmtContext);
    }
    public alterdatabasestmt(): AlterdatabasestmtContext | null {
        return this.getRuleContext(0, AlterdatabasestmtContext);
    }
    public alterdatabasesetstmt(): AlterdatabasesetstmtContext | null {
        return this.getRuleContext(0, AlterdatabasesetstmtContext);
    }
    public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext | null {
        return this.getRuleContext(0, AlterdefaultprivilegesstmtContext);
    }
    public alterdomainstmt(): AlterdomainstmtContext | null {
        return this.getRuleContext(0, AlterdomainstmtContext);
    }
    public alterenumstmt(): AlterenumstmtContext | null {
        return this.getRuleContext(0, AlterenumstmtContext);
    }
    public alterextensionstmt(): AlterextensionstmtContext | null {
        return this.getRuleContext(0, AlterextensionstmtContext);
    }
    public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext | null {
        return this.getRuleContext(0, AlterextensioncontentsstmtContext);
    }
    public alterfdwstmt(): AlterfdwstmtContext | null {
        return this.getRuleContext(0, AlterfdwstmtContext);
    }
    public alterforeignserverstmt(): AlterforeignserverstmtContext | null {
        return this.getRuleContext(0, AlterforeignserverstmtContext);
    }
    public alterfunctionstmt(): AlterfunctionstmtContext | null {
        return this.getRuleContext(0, AlterfunctionstmtContext);
    }
    public altergroupstmt(): AltergroupstmtContext | null {
        return this.getRuleContext(0, AltergroupstmtContext);
    }
    public alterobjectdependsstmt(): AlterobjectdependsstmtContext | null {
        return this.getRuleContext(0, AlterobjectdependsstmtContext);
    }
    public alterobjectschemastmt(): AlterobjectschemastmtContext | null {
        return this.getRuleContext(0, AlterobjectschemastmtContext);
    }
    public alterownerstmt(): AlterownerstmtContext | null {
        return this.getRuleContext(0, AlterownerstmtContext);
    }
    public alteroperatorstmt(): AlteroperatorstmtContext | null {
        return this.getRuleContext(0, AlteroperatorstmtContext);
    }
    public altertypestmt(): AltertypestmtContext | null {
        return this.getRuleContext(0, AltertypestmtContext);
    }
    public alterpolicystmt(): AlterpolicystmtContext | null {
        return this.getRuleContext(0, AlterpolicystmtContext);
    }
    public alterseqstmt(): AlterseqstmtContext | null {
        return this.getRuleContext(0, AlterseqstmtContext);
    }
    public altersystemstmt(): AltersystemstmtContext | null {
        return this.getRuleContext(0, AltersystemstmtContext);
    }
    public altertablestmt(): AltertablestmtContext | null {
        return this.getRuleContext(0, AltertablestmtContext);
    }
    public altertblspcstmt(): AltertblspcstmtContext | null {
        return this.getRuleContext(0, AltertblspcstmtContext);
    }
    public altercompositetypestmt(): AltercompositetypestmtContext | null {
        return this.getRuleContext(0, AltercompositetypestmtContext);
    }
    public alterpublicationstmt(): AlterpublicationstmtContext | null {
        return this.getRuleContext(0, AlterpublicationstmtContext);
    }
    public alterrolesetstmt(): AlterrolesetstmtContext | null {
        return this.getRuleContext(0, AlterrolesetstmtContext);
    }
    public alterrolestmt(): AlterrolestmtContext | null {
        return this.getRuleContext(0, AlterrolestmtContext);
    }
    public altersubscriptionstmt(): AltersubscriptionstmtContext | null {
        return this.getRuleContext(0, AltersubscriptionstmtContext);
    }
    public alterstatsstmt(): AlterstatsstmtContext | null {
        return this.getRuleContext(0, AlterstatsstmtContext);
    }
    public altertsconfigurationstmt(): AltertsconfigurationstmtContext | null {
        return this.getRuleContext(0, AltertsconfigurationstmtContext);
    }
    public altertsdictionarystmt(): AltertsdictionarystmtContext | null {
        return this.getRuleContext(0, AltertsdictionarystmtContext);
    }
    public alterusermappingstmt(): AlterusermappingstmtContext | null {
        return this.getRuleContext(0, AlterusermappingstmtContext);
    }
    public analyzestmt(): AnalyzestmtContext | null {
        return this.getRuleContext(0, AnalyzestmtContext);
    }
    public callstmt(): CallstmtContext | null {
        return this.getRuleContext(0, CallstmtContext);
    }
    public checkpointstmt(): CheckpointstmtContext | null {
        return this.getRuleContext(0, CheckpointstmtContext);
    }
    public closeportalstmt(): CloseportalstmtContext | null {
        return this.getRuleContext(0, CloseportalstmtContext);
    }
    public clusterstmt(): ClusterstmtContext | null {
        return this.getRuleContext(0, ClusterstmtContext);
    }
    public commentstmt(): CommentstmtContext | null {
        return this.getRuleContext(0, CommentstmtContext);
    }
    public constraintssetstmt(): ConstraintssetstmtContext | null {
        return this.getRuleContext(0, ConstraintssetstmtContext);
    }
    public copystmt(): CopystmtContext | null {
        return this.getRuleContext(0, CopystmtContext);
    }
    public createamstmt(): CreateamstmtContext | null {
        return this.getRuleContext(0, CreateamstmtContext);
    }
    public createasstmt(): CreateasstmtContext | null {
        return this.getRuleContext(0, CreateasstmtContext);
    }
    public createassertionstmt(): CreateassertionstmtContext | null {
        return this.getRuleContext(0, CreateassertionstmtContext);
    }
    public createcaststmt(): CreatecaststmtContext | null {
        return this.getRuleContext(0, CreatecaststmtContext);
    }
    public createconversionstmt(): CreateconversionstmtContext | null {
        return this.getRuleContext(0, CreateconversionstmtContext);
    }
    public createdomainstmt(): CreatedomainstmtContext | null {
        return this.getRuleContext(0, CreatedomainstmtContext);
    }
    public createextensionstmt(): CreateextensionstmtContext | null {
        return this.getRuleContext(0, CreateextensionstmtContext);
    }
    public createfdwstmt(): CreatefdwstmtContext | null {
        return this.getRuleContext(0, CreatefdwstmtContext);
    }
    public createforeignserverstmt(): CreateforeignserverstmtContext | null {
        return this.getRuleContext(0, CreateforeignserverstmtContext);
    }
    public createforeigntablestmt(): CreateforeigntablestmtContext | null {
        return this.getRuleContext(0, CreateforeigntablestmtContext);
    }
    public createfunctionstmt(): CreatefunctionstmtContext | null {
        return this.getRuleContext(0, CreatefunctionstmtContext);
    }
    public creategroupstmt(): CreategroupstmtContext | null {
        return this.getRuleContext(0, CreategroupstmtContext);
    }
    public creatematviewstmt(): CreatematviewstmtContext | null {
        return this.getRuleContext(0, CreatematviewstmtContext);
    }
    public createopclassstmt(): CreateopclassstmtContext | null {
        return this.getRuleContext(0, CreateopclassstmtContext);
    }
    public createopfamilystmt(): CreateopfamilystmtContext | null {
        return this.getRuleContext(0, CreateopfamilystmtContext);
    }
    public createpublicationstmt(): CreatepublicationstmtContext | null {
        return this.getRuleContext(0, CreatepublicationstmtContext);
    }
    public alteropfamilystmt(): AlteropfamilystmtContext | null {
        return this.getRuleContext(0, AlteropfamilystmtContext);
    }
    public createpolicystmt(): CreatepolicystmtContext | null {
        return this.getRuleContext(0, CreatepolicystmtContext);
    }
    public createplangstmt(): CreateplangstmtContext | null {
        return this.getRuleContext(0, CreateplangstmtContext);
    }
    public createschemastmt(): CreateschemastmtContext | null {
        return this.getRuleContext(0, CreateschemastmtContext);
    }
    public createseqstmt(): CreateseqstmtContext | null {
        return this.getRuleContext(0, CreateseqstmtContext);
    }
    public createstmt(): CreatestmtContext | null {
        return this.getRuleContext(0, CreatestmtContext);
    }
    public createsubscriptionstmt(): CreatesubscriptionstmtContext | null {
        return this.getRuleContext(0, CreatesubscriptionstmtContext);
    }
    public createstatsstmt(): CreatestatsstmtContext | null {
        return this.getRuleContext(0, CreatestatsstmtContext);
    }
    public createtablespacestmt(): CreatetablespacestmtContext | null {
        return this.getRuleContext(0, CreatetablespacestmtContext);
    }
    public createtransformstmt(): CreatetransformstmtContext | null {
        return this.getRuleContext(0, CreatetransformstmtContext);
    }
    public createtrigstmt(): CreatetrigstmtContext | null {
        return this.getRuleContext(0, CreatetrigstmtContext);
    }
    public createeventtrigstmt(): CreateeventtrigstmtContext | null {
        return this.getRuleContext(0, CreateeventtrigstmtContext);
    }
    public createrolestmt(): CreaterolestmtContext | null {
        return this.getRuleContext(0, CreaterolestmtContext);
    }
    public createuserstmt(): CreateuserstmtContext | null {
        return this.getRuleContext(0, CreateuserstmtContext);
    }
    public createusermappingstmt(): CreateusermappingstmtContext | null {
        return this.getRuleContext(0, CreateusermappingstmtContext);
    }
    public createdbstmt(): CreatedbstmtContext | null {
        return this.getRuleContext(0, CreatedbstmtContext);
    }
    public deallocatestmt(): DeallocatestmtContext | null {
        return this.getRuleContext(0, DeallocatestmtContext);
    }
    public declarecursorstmt(): DeclarecursorstmtContext | null {
        return this.getRuleContext(0, DeclarecursorstmtContext);
    }
    public definestmt(): DefinestmtContext | null {
        return this.getRuleContext(0, DefinestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public discardstmt(): DiscardstmtContext | null {
        return this.getRuleContext(0, DiscardstmtContext);
    }
    public dostmt(): DostmtContext | null {
        return this.getRuleContext(0, DostmtContext);
    }
    public dropcaststmt(): DropcaststmtContext | null {
        return this.getRuleContext(0, DropcaststmtContext);
    }
    public dropopclassstmt(): DropopclassstmtContext | null {
        return this.getRuleContext(0, DropopclassstmtContext);
    }
    public dropopfamilystmt(): DropopfamilystmtContext | null {
        return this.getRuleContext(0, DropopfamilystmtContext);
    }
    public dropownedstmt(): DropownedstmtContext | null {
        return this.getRuleContext(0, DropownedstmtContext);
    }
    public dropstmt(): DropstmtContext | null {
        return this.getRuleContext(0, DropstmtContext);
    }
    public dropsubscriptionstmt(): DropsubscriptionstmtContext | null {
        return this.getRuleContext(0, DropsubscriptionstmtContext);
    }
    public droptablespacestmt(): DroptablespacestmtContext | null {
        return this.getRuleContext(0, DroptablespacestmtContext);
    }
    public droptransformstmt(): DroptransformstmtContext | null {
        return this.getRuleContext(0, DroptransformstmtContext);
    }
    public droprolestmt(): DroprolestmtContext | null {
        return this.getRuleContext(0, DroprolestmtContext);
    }
    public dropusermappingstmt(): DropusermappingstmtContext | null {
        return this.getRuleContext(0, DropusermappingstmtContext);
    }
    public dropdbstmt(): DropdbstmtContext | null {
        return this.getRuleContext(0, DropdbstmtContext);
    }
    public executestmt(): ExecutestmtContext | null {
        return this.getRuleContext(0, ExecutestmtContext);
    }
    public explainstmt(): ExplainstmtContext | null {
        return this.getRuleContext(0, ExplainstmtContext);
    }
    public fetchstmt(): FetchstmtContext | null {
        return this.getRuleContext(0, FetchstmtContext);
    }
    public grantstmt(): GrantstmtContext | null {
        return this.getRuleContext(0, GrantstmtContext);
    }
    public grantrolestmt(): GrantrolestmtContext | null {
        return this.getRuleContext(0, GrantrolestmtContext);
    }
    public importforeignschemastmt(): ImportforeignschemastmtContext | null {
        return this.getRuleContext(0, ImportforeignschemastmtContext);
    }
    public indexstmt(): IndexstmtContext | null {
        return this.getRuleContext(0, IndexstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public mergestmt(): MergestmtContext | null {
        return this.getRuleContext(0, MergestmtContext);
    }
    public listenstmt(): ListenstmtContext | null {
        return this.getRuleContext(0, ListenstmtContext);
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext | null {
        return this.getRuleContext(0, RefreshmatviewstmtContext);
    }
    public loadstmt(): LoadstmtContext | null {
        return this.getRuleContext(0, LoadstmtContext);
    }
    public lockstmt(): LockstmtContext | null {
        return this.getRuleContext(0, LockstmtContext);
    }
    public notifystmt(): NotifystmtContext | null {
        return this.getRuleContext(0, NotifystmtContext);
    }
    public preparestmt(): PreparestmtContext | null {
        return this.getRuleContext(0, PreparestmtContext);
    }
    public reassignownedstmt(): ReassignownedstmtContext | null {
        return this.getRuleContext(0, ReassignownedstmtContext);
    }
    public reindexstmt(): ReindexstmtContext | null {
        return this.getRuleContext(0, ReindexstmtContext);
    }
    public removeaggrstmt(): RemoveaggrstmtContext | null {
        return this.getRuleContext(0, RemoveaggrstmtContext);
    }
    public removefuncstmt(): RemovefuncstmtContext | null {
        return this.getRuleContext(0, RemovefuncstmtContext);
    }
    public removeoperstmt(): RemoveoperstmtContext | null {
        return this.getRuleContext(0, RemoveoperstmtContext);
    }
    public renamestmt(): RenamestmtContext | null {
        return this.getRuleContext(0, RenamestmtContext);
    }
    public revokestmt(): RevokestmtContext | null {
        return this.getRuleContext(0, RevokestmtContext);
    }
    public revokerolestmt(): RevokerolestmtContext | null {
        return this.getRuleContext(0, RevokerolestmtContext);
    }
    public rulestmt(): RulestmtContext | null {
        return this.getRuleContext(0, RulestmtContext);
    }
    public seclabelstmt(): SeclabelstmtContext | null {
        return this.getRuleContext(0, SeclabelstmtContext);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public transactionstmt(): TransactionstmtContext | null {
        return this.getRuleContext(0, TransactionstmtContext);
    }
    public truncatestmt(): TruncatestmtContext | null {
        return this.getRuleContext(0, TruncatestmtContext);
    }
    public unlistenstmt(): UnlistenstmtContext | null {
        return this.getRuleContext(0, UnlistenstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public vacuumstmt(): VacuumstmtContext | null {
        return this.getRuleContext(0, VacuumstmtContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public variablesetstmt(): VariablesetstmtContext | null {
        return this.getRuleContext(0, VariablesetstmtContext);
    }
    public variableshowstmt(): VariableshowstmtContext | null {
        return this.getRuleContext(0, VariableshowstmtContext);
    }
    public viewstmt(): ViewstmtContext | null {
        return this.getRuleContext(0, ViewstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_stmt;
    }
}


export class CallstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CALL, 0)!;
    }
    public func_application(): Func_applicationContext {
        return this.getRuleContext(0, Func_applicationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_callstmt;
    }
}


export class CreaterolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ROLE, 0)!;
    }
    public roleid(): RoleidContext {
        return this.getRuleContext(0, RoleidContext)!;
    }
    public optrolelist(): OptrolelistContext {
        return this.getRuleContext(0, OptrolelistContext)!;
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createrolestmt;
    }
}


export class With_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_with_;
    }
}


export class OptrolelistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createoptroleelem(): CreateoptroleelemContext[];
    public createoptroleelem(i: number): CreateoptroleelemContext | null;
    public createoptroleelem(i?: number): CreateoptroleelemContext[] | CreateoptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateoptroleelemContext);
        }

        return this.getRuleContext(i, CreateoptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optrolelist;
    }
}


export class AlteroptrolelistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alteroptroleelem(): AlteroptroleelemContext[];
    public alteroptroleelem(i: number): AlteroptroleelemContext | null;
    public alteroptroleelem(i?: number): AlteroptroleelemContext[] | AlteroptroleelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlteroptroleelemContext);
        }

        return this.getRuleContext(i, AlteroptroleelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alteroptrolelist;
    }
}


export class AlteroptroleelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PASSWORD, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCRYPTED, 0);
    }
    public UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNENCRYPTED, 0);
    }
    public INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INHERIT, 0);
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONNECTION, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIMIT, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALID, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNTIL, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alteroptroleelem;
    }
}


export class CreateoptroleelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alteroptroleelem(): AlteroptroleelemContext | null {
        return this.getRuleContext(0, AlteroptroleelemContext);
    }
    public SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSID, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADMIN, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public GROUP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUP_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createoptroleelem;
    }
}


export class CreateuserstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USER, 0)!;
    }
    public roleid(): RoleidContext {
        return this.getRuleContext(0, RoleidContext)!;
    }
    public optrolelist(): OptrolelistContext {
        return this.getRuleContext(0, OptrolelistContext)!;
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createuserstmt;
    }
}


export class AlterrolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public alteroptrolelist(): AlteroptrolelistContext {
        return this.getRuleContext(0, AlteroptrolelistContext)!;
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterrolestmt;
    }
}


export class In_database_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IN_P, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATABASE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_in_database_;
    }
}


export class AlterrolesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public setresetclause(): SetresetclauseContext {
        return this.getRuleContext(0, SetresetclauseContext)!;
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public in_database_(): In_database_Context | null {
        return this.getRuleContext(0, In_database_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterrolesetstmt;
    }
}


export class DroprolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public GROUP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUP_P, 0);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_droprolestmt;
    }
}


export class CreategroupstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public GROUP_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GROUP_P, 0)!;
    }
    public roleid(): RoleidContext {
        return this.getRuleContext(0, RoleidContext)!;
    }
    public optrolelist(): OptrolelistContext {
        return this.getRuleContext(0, OptrolelistContext)!;
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_creategroupstmt;
    }
}


export class AltergroupstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public GROUP_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GROUP_P, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public add_drop(): Add_dropContext {
        return this.getRuleContext(0, Add_dropContext)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USER, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altergroupstmt;
    }
}


export class Add_dropContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_add_drop;
    }
}


export class CreateschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SCHEMA, 0)!;
    }
    public optschemaeltlist(): OptschemaeltlistContext {
        return this.getRuleContext(0, OptschemaeltlistContext)!;
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public optschemaname(): OptschemanameContext | null {
        return this.getRuleContext(0, OptschemanameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createschemastmt;
    }
}


export class OptschemanameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optschemaname;
    }
}


export class OptschemaeltlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public schema_stmt(): Schema_stmtContext[];
    public schema_stmt(i: number): Schema_stmtContext | null;
    public schema_stmt(i?: number): Schema_stmtContext[] | Schema_stmtContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Schema_stmtContext);
        }

        return this.getRuleContext(i, Schema_stmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optschemaeltlist;
    }
}


export class Schema_stmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createstmt(): CreatestmtContext | null {
        return this.getRuleContext(0, CreatestmtContext);
    }
    public indexstmt(): IndexstmtContext | null {
        return this.getRuleContext(0, IndexstmtContext);
    }
    public createseqstmt(): CreateseqstmtContext | null {
        return this.getRuleContext(0, CreateseqstmtContext);
    }
    public createtrigstmt(): CreatetrigstmtContext | null {
        return this.getRuleContext(0, CreatetrigstmtContext);
    }
    public grantstmt(): GrantstmtContext | null {
        return this.getRuleContext(0, GrantstmtContext);
    }
    public viewstmt(): ViewstmtContext | null {
        return this.getRuleContext(0, ViewstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_schema_stmt;
    }
}


export class VariablesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public set_rest(): Set_restContext {
        return this.getRuleContext(0, Set_restContext)!;
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCAL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_variablesetstmt;
    }
}


export class Set_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public transaction_mode_list(): Transaction_mode_listContext | null {
        return this.getRuleContext(0, Transaction_mode_listContext);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION, 0);
    }
    public CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHARACTERISTICS, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_set_rest;
    }
}


export class Generic_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public var_name(): Var_nameContext {
        return this.getRuleContext(0, Var_nameContext)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUAL, 0);
    }
    public var_list(): Var_listContext | null {
        return this.getRuleContext(0, Var_listContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generic_set;
    }
}


export class Set_rest_moreContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_set(): Generic_setContext | null {
        return this.getRuleContext(0, Generic_setContext);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public CURRENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_P, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIME, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ZONE, 0);
    }
    public zone_value(): Zone_valueContext | null {
        return this.getRuleContext(0, Zone_valueContext);
    }
    public CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CATALOG, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NAMES, 0);
    }
    public encoding_(): Encoding_Context | null {
        return this.getRuleContext(0, Encoding_Context);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
    }
    public XML_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XML_P, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTION, 0);
    }
    public document_or_content(): Document_or_contentContext | null {
        return this.getRuleContext(0, Document_or_contentContext);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SNAPSHOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_set_rest_more;
    }
}


export class Var_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.DOT);
    	} else {
    		return this.getToken(PostgreSQLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_var_name;
    }
}


export class Var_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public var_value(): Var_valueContext[];
    public var_value(i: number): Var_valueContext | null;
    public var_value(i?: number): Var_valueContext[] | Var_valueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Var_valueContext);
        }

        return this.getRuleContext(i, Var_valueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_var_list;
    }
}


export class Var_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean_or_string_(): Boolean_or_string_Context | null {
        return this.getRuleContext(0, Boolean_or_string_Context);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_var_value;
    }
}


export class Iso_levelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.READ, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNCOMMITTED, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMITTED, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPEATABLE, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERIALIZABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_iso_level;
    }
}


export class Boolean_or_string_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUE_P, 0);
    }
    public FALSE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FALSE_P, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_boolean_or_string_;
    }
}


export class Zone_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public constinterval(): ConstintervalContext | null {
        return this.getRuleContext(0, ConstintervalContext);
    }
    public interval_(): Interval_Context | null {
        return this.getRuleContext(0, Interval_Context);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_zone_value;
    }
}


export class Encoding_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_encoding_;
    }
}


export class Nonreservedword_or_sconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_nonreservedword_or_sconst;
    }
}


export class VariableresetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.RESET, 0)!;
    }
    public reset_rest(): Reset_restContext {
        return this.getRuleContext(0, Reset_restContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_variableresetstmt;
    }
}


export class Reset_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_reset(): Generic_resetContext | null {
        return this.getRuleContext(0, Generic_resetContext);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIME, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ZONE, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ISOLATION, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEVEL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reset_rest;
    }
}


export class Generic_resetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generic_reset;
    }
}


export class SetresetclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public set_rest(): Set_restContext | null {
        return this.getRuleContext(0, Set_restContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_setresetclause;
    }
}


export class FunctionsetresetclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public set_rest_more(): Set_rest_moreContext | null {
        return this.getRuleContext(0, Set_rest_moreContext);
    }
    public variableresetstmt(): VariableresetstmtContext | null {
        return this.getRuleContext(0, VariableresetstmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_functionsetresetclause;
    }
}


export class VariableshowstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SHOW, 0)!;
    }
    public var_name(): Var_nameContext | null {
        return this.getRuleContext(0, Var_nameContext);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIME, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ZONE, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ISOLATION, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEVEL, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_variableshowstmt;
    }
}


export class ConstraintssetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public CONSTRAINTS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CONSTRAINTS, 0)!;
    }
    public constraints_set_list(): Constraints_set_listContext {
        return this.getRuleContext(0, Constraints_set_listContext)!;
    }
    public constraints_set_mode(): Constraints_set_modeContext {
        return this.getRuleContext(0, Constraints_set_modeContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constraintssetstmt;
    }
}


export class Constraints_set_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public qualified_name_list(): Qualified_name_listContext | null {
        return this.getRuleContext(0, Qualified_name_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constraints_set_list;
    }
}


export class Constraints_set_modeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRED, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constraints_set_mode;
    }
}


export class CheckpointstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECKPOINT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CHECKPOINT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_checkpointstmt;
    }
}


export class DiscardstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISCARD(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DISCARD, 0)!;
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMP, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPORARY, 0);
    }
    public PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLANS, 0);
    }
    public SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_discardstmt;
    }
}


export class AltertablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public alter_table_cmds(): Alter_table_cmdsContext | null {
        return this.getRuleContext(0, Alter_table_cmdsContext);
    }
    public partition_cmd(): Partition_cmdContext | null {
        return this.getRuleContext(0, Partition_cmdContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public TABLESPACE(): antlr.TerminalNode[];
    public TABLESPACE(i: number): antlr.TerminalNode | null;
    public TABLESPACE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.TABLESPACE);
    	} else {
    		return this.getToken(PostgreSQLParser.TABLESPACE, i);
    	}
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BY, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public nowait_(): Nowait_Context | null {
        return this.getRuleContext(0, Nowait_Context);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public index_partition_cmd(): Index_partition_cmdContext | null {
        return this.getRuleContext(0, Index_partition_cmdContext);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altertablestmt;
    }
}


export class Alter_table_cmdsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_table_cmd(): Alter_table_cmdContext[];
    public alter_table_cmd(i: number): Alter_table_cmdContext | null;
    public alter_table_cmd(i?: number): Alter_table_cmdContext[] | Alter_table_cmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_table_cmdContext);
        }

        return this.getRuleContext(i, Alter_table_cmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_table_cmds;
    }
}


export class Partition_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATTACH, 0);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PARTITION, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public partitionboundspec(): PartitionboundspecContext | null {
        return this.getRuleContext(0, PartitionboundspecContext);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DETACH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_partition_cmd;
    }
}


export class Index_partition_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ATTACH, 0)!;
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PARTITION, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_index_partition_cmd;
    }
}


export class Alter_table_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public columnDef(): ColumnDefContext | null {
        return this.getRuleContext(0, ColumnDefContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMN, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALTER, 0);
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public alter_column_default(): Alter_column_defaultContext | null {
        return this.getRuleContext(0, Alter_column_defaultContext);
    }
    public column_(): Column_Context | null {
        return this.getRuleContext(0, Column_Context);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXPRESSION, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESET, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORAGE, 0);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GENERATED, 0);
    }
    public generated_when(): Generated_whenContext | null {
        return this.getRuleContext(0, Generated_whenContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public IDENTITY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
    }
    public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | null {
        return this.getRuleContext(0, OptparenthesizedseqoptlistContext);
    }
    public alter_identity_column_option_list(): Alter_identity_column_option_listContext | null {
        return this.getRuleContext(0, Alter_identity_column_option_listContext);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public set_data_(): Set_data_Context | null {
        return this.getRuleContext(0, Set_data_Context);
    }
    public collate_clause_(): Collate_clause_Context | null {
        return this.getRuleContext(0, Collate_clause_Context);
    }
    public alter_using(): Alter_usingContext | null {
        return this.getRuleContext(0, Alter_usingContext);
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public tableconstraint(): TableconstraintContext | null {
        return this.getRuleContext(0, TableconstraintContext);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public constraintattributespec(): ConstraintattributespecContext | null {
        return this.getRuleContext(0, ConstraintattributespecContext);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALIDATE, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OIDS, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLUSTER, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOGGED, 0);
    }
    public UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNLOGGED, 0);
    }
    public ENABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENABLE_P, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALWAYS, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLICA, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public DISABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISABLE_P, 0);
    }
    public RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RULE, 0);
    }
    public INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INHERIT, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNER, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public replica_identity(): Replica_identityContext | null {
        return this.getRuleContext(0, Replica_identityContext);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEVEL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SECURITY, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORCE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_table_cmd;
    }
}


export class Alter_column_defaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DEFAULT, 0)!;
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_column_default;
    }
}


export class Drop_behavior_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADE, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTRICT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_drop_behavior_;
    }
}


export class Collate_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COLLATE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_collate_clause_;
    }
}


export class Alter_usingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_using;
    }
}


export class Replica_identityContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTHING, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FULL, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_replica_identity;
    }
}


export class ReloptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public reloption_list(): Reloption_listContext {
        return this.getRuleContext(0, Reloption_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reloptions;
    }
}


export class Reloptions_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public reloptions(): ReloptionsContext {
        return this.getRuleContext(0, ReloptionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reloptions_;
    }
}


export class Reloption_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public reloption_elem(): Reloption_elemContext[];
    public reloption_elem(i: number): Reloption_elemContext | null;
    public reloption_elem(i?: number): Reloption_elemContext[] | Reloption_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Reloption_elemContext);
        }

        return this.getRuleContext(i, Reloption_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reloption_list;
    }
}


export class Reloption_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext[];
    public colLabel(i: number): ColLabelContext | null;
    public colLabel(i?: number): ColLabelContext[] | ColLabelContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColLabelContext);
        }

        return this.getRuleContext(i, ColLabelContext);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUAL, 0);
    }
    public def_arg(): Def_argContext | null {
        return this.getRuleContext(0, Def_argContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reloption_elem;
    }
}


export class Alter_identity_column_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_identity_column_option(): Alter_identity_column_optionContext[];
    public alter_identity_column_option(i: number): Alter_identity_column_optionContext | null;
    public alter_identity_column_option(i?: number): Alter_identity_column_optionContext[] | Alter_identity_column_optionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_identity_column_optionContext);
        }

        return this.getRuleContext(i, Alter_identity_column_optionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_identity_column_option_list;
    }
}


export class Alter_identity_column_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTART, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public seqoptelem(): SeqoptelemContext | null {
        return this.getRuleContext(0, SeqoptelemContext);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GENERATED, 0);
    }
    public generated_when(): Generated_whenContext | null {
        return this.getRuleContext(0, Generated_whenContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_identity_column_option;
    }
}


export class PartitionboundspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUES, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
    	}
    }
    public hash_partbound(): Hash_partboundContext | null {
        return this.getRuleContext(0, Hash_partboundContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
    	}
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public expr_list(): Expr_listContext[];
    public expr_list(i: number): Expr_listContext | null;
    public expr_list(i?: number): Expr_listContext[] | Expr_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Expr_listContext);
        }

        return this.getRuleContext(i, Expr_listContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_partitionboundspec;
    }
}


export class Hash_partbound_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext {
        return this.getRuleContext(0, NonreservedwordContext)!;
    }
    public iconst(): IconstContext {
        return this.getRuleContext(0, IconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_hash_partbound_elem;
    }
}


export class Hash_partboundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public hash_partbound_elem(): Hash_partbound_elemContext[];
    public hash_partbound_elem(i: number): Hash_partbound_elemContext | null;
    public hash_partbound_elem(i?: number): Hash_partbound_elemContext[] | Hash_partbound_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Hash_partbound_elemContext);
        }

        return this.getRuleContext(i, Hash_partbound_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_hash_partbound;
    }
}


export class AltercompositetypestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public TYPE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TYPE_P, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public alter_type_cmds(): Alter_type_cmdsContext {
        return this.getRuleContext(0, Alter_type_cmdsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altercompositetypestmt;
    }
}


export class Alter_type_cmdsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_type_cmd(): Alter_type_cmdContext[];
    public alter_type_cmd(i: number): Alter_type_cmdContext | null;
    public alter_type_cmd(i?: number): Alter_type_cmdContext[] | Alter_type_cmdContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_type_cmdContext);
        }

        return this.getRuleContext(i, Alter_type_cmdContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_type_cmds;
    }
}


export class Alter_type_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public ATTRIBUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ATTRIBUTE, 0)!;
    }
    public tablefuncelement(): TablefuncelementContext | null {
        return this.getRuleContext(0, TablefuncelementContext);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALTER, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public set_data_(): Set_data_Context | null {
        return this.getRuleContext(0, Set_data_Context);
    }
    public collate_clause_(): Collate_clause_Context | null {
        return this.getRuleContext(0, Collate_clause_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_type_cmd;
    }
}


export class CloseportalstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE, 0)!;
    }
    public cursor_name(): Cursor_nameContext | null {
        return this.getRuleContext(0, Cursor_nameContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_closeportalstmt;
    }
}


export class CopystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COPY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COPY, 0)!;
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public copy_from(): Copy_fromContext | null {
        return this.getRuleContext(0, Copy_fromContext);
    }
    public copy_file_name(): Copy_file_nameContext {
        return this.getRuleContext(0, Copy_file_nameContext)!;
    }
    public copy_options(): Copy_optionsContext {
        return this.getRuleContext(0, Copy_optionsContext)!;
    }
    public binary_(): Binary_Context | null {
        return this.getRuleContext(0, Binary_Context);
    }
    public column_list_(): Column_list_Context | null {
        return this.getRuleContext(0, Column_list_Context);
    }
    public program_(): Program_Context | null {
        return this.getRuleContext(0, Program_Context);
    }
    public copy_delimiter(): Copy_delimiterContext | null {
        return this.getRuleContext(0, Copy_delimiterContext);
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public preparablestmt(): PreparablestmtContext | null {
        return this.getRuleContext(0, PreparablestmtContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copystmt;
    }
}


export class Copy_fromContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_from;
    }
}


export class Program_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROGRAM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PROGRAM, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_program_;
    }
}


export class Copy_file_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STDIN, 0);
    }
    public STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STDOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_file_name;
    }
}


export class Copy_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copy_opt_list(): Copy_opt_listContext | null {
        return this.getRuleContext(0, Copy_opt_listContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public copy_generic_opt_list(): Copy_generic_opt_listContext | null {
        return this.getRuleContext(0, Copy_generic_opt_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_options;
    }
}


export class Copy_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copy_opt_item(): Copy_opt_itemContext[];
    public copy_opt_item(i: number): Copy_opt_itemContext | null;
    public copy_opt_item(i?: number): Copy_opt_itemContext[] | Copy_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Copy_opt_itemContext);
        }

        return this.getRuleContext(i, Copy_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_opt_list;
    }
}


export class Copy_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BINARY, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FREEZE, 0);
    }
    public DELIMITER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELIMITER, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public as_(): As_Context | null {
        return this.getRuleContext(0, As_Context);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CSV, 0);
    }
    public HEADER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HEADER_P, 0);
    }
    public QUOTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.QUOTE, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ESCAPE, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORCE, 0);
    }
    public columnlist(): ColumnlistContext | null {
        return this.getRuleContext(0, ColumnlistContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCODING, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_opt_item;
    }
}


export class Binary_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BINARY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BINARY, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_binary_;
    }
}


export class Copy_delimiterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELIMITERS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DELIMITERS, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public using_(): Using_Context | null {
        return this.getRuleContext(0, Using_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_delimiter;
    }
}


export class Using_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_using_;
    }
}


export class Copy_generic_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copy_generic_opt_elem(): Copy_generic_opt_elemContext[];
    public copy_generic_opt_elem(i: number): Copy_generic_opt_elemContext | null;
    public copy_generic_opt_elem(i?: number): Copy_generic_opt_elemContext[] | Copy_generic_opt_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Copy_generic_opt_elemContext);
        }

        return this.getRuleContext(i, Copy_generic_opt_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_generic_opt_list;
    }
}


export class Copy_generic_opt_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public copy_generic_opt_arg(): Copy_generic_opt_argContext | null {
        return this.getRuleContext(0, Copy_generic_opt_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_generic_opt_elem;
    }
}


export class Copy_generic_opt_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean_or_string_(): Boolean_or_string_Context | null {
        return this.getRuleContext(0, Boolean_or_string_Context);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext | null {
        return this.getRuleContext(0, Copy_generic_opt_arg_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_generic_opt_arg;
    }
}


export class Copy_generic_opt_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public copy_generic_opt_arg_list_item(): Copy_generic_opt_arg_list_itemContext[];
    public copy_generic_opt_arg_list_item(i: number): Copy_generic_opt_arg_list_itemContext | null;
    public copy_generic_opt_arg_list_item(i?: number): Copy_generic_opt_arg_list_itemContext[] | Copy_generic_opt_arg_list_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Copy_generic_opt_arg_list_itemContext);
        }

        return this.getRuleContext(i, Copy_generic_opt_arg_list_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_generic_opt_arg_list;
    }
}


export class Copy_generic_opt_arg_list_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean_or_string_(): Boolean_or_string_Context {
        return this.getRuleContext(0, Boolean_or_string_Context)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_copy_generic_opt_arg_list_item;
    }
}


export class CreatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLE, 0)!;
    }
    public qualified_name(): Qualified_nameContext[];
    public qualified_name(i: number): Qualified_nameContext | null;
    public qualified_name(i?: number): Qualified_nameContext[] | Qualified_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qualified_nameContext);
        }

        return this.getRuleContext(i, Qualified_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARTITION, 0);
    }
    public partitionboundspec(): PartitionboundspecContext | null {
        return this.getRuleContext(0, PartitionboundspecContext);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public opttableelementlist(): OpttableelementlistContext | null {
        return this.getRuleContext(0, OpttableelementlistContext);
    }
    public optinherit(): OptinheritContext | null {
        return this.getRuleContext(0, OptinheritContext);
    }
    public optpartitionspec(): OptpartitionspecContext | null {
        return this.getRuleContext(0, OptpartitionspecContext);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public optwith(): OptwithContext | null {
        return this.getRuleContext(0, OptwithContext);
    }
    public oncommitoption(): OncommitoptionContext | null {
        return this.getRuleContext(0, OncommitoptionContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext | null {
        return this.getRuleContext(0, OpttypedtableelementlistContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createstmt;
    }
}


export class OpttempContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPORARY, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMP, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCAL, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GLOBAL, 0);
    }
    public UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNLOGGED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opttemp;
    }
}


export class OpttableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableelementlist(): TableelementlistContext {
        return this.getRuleContext(0, TableelementlistContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opttableelementlist;
    }
}


export class OpttypedtableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public typedtableelementlist(): TypedtableelementlistContext {
        return this.getRuleContext(0, TypedtableelementlistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opttypedtableelementlist;
    }
}


export class TableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableelement(): TableelementContext[];
    public tableelement(i: number): TableelementContext | null;
    public tableelement(i?: number): TableelementContext[] | TableelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableelementContext);
        }

        return this.getRuleContext(i, TableelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tableelementlist;
    }
}


export class TypedtableelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typedtableelement(): TypedtableelementContext[];
    public typedtableelement(i: number): TypedtableelementContext | null;
    public typedtableelement(i?: number): TypedtableelementContext[] | TypedtableelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypedtableelementContext);
        }

        return this.getRuleContext(i, TypedtableelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_typedtableelementlist;
    }
}


export class TableelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableconstraint(): TableconstraintContext | null {
        return this.getRuleContext(0, TableconstraintContext);
    }
    public tablelikeclause(): TablelikeclauseContext | null {
        return this.getRuleContext(0, TablelikeclauseContext);
    }
    public columnDef(): ColumnDefContext | null {
        return this.getRuleContext(0, ColumnDefContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tableelement;
    }
}


export class TypedtableelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnOptions(): ColumnOptionsContext | null {
        return this.getRuleContext(0, ColumnOptionsContext);
    }
    public tableconstraint(): TableconstraintContext | null {
        return this.getRuleContext(0, TableconstraintContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_typedtableelement;
    }
}


export class ColumnDefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public colquallist(): ColquallistContext {
        return this.getRuleContext(0, ColquallistContext)!;
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_columnDef;
    }
}


export class ColumnOptionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public colquallist(): ColquallistContext {
        return this.getRuleContext(0, ColquallistContext)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTIONS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_columnOptions;
    }
}


export class ColquallistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colconstraint(): ColconstraintContext[];
    public colconstraint(i: number): ColconstraintContext | null;
    public colconstraint(i?: number): ColconstraintContext[] | ColconstraintContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColconstraintContext);
        }

        return this.getRuleContext(i, ColconstraintContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_colquallist;
    }
}


export class ColconstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public colconstraintelem(): ColconstraintelemContext | null {
        return this.getRuleContext(0, ColconstraintelemContext);
    }
    public constraintattr(): ConstraintattrContext | null {
        return this.getRuleContext(0, ConstraintattrContext);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATE, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_colconstraint;
    }
}


export class ColconstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNIQUE, 0);
    }
    public definition_(): Definition_Context | null {
        return this.getRuleContext(0, Definition_Context);
    }
    public optconstablespace(): OptconstablespaceContext | null {
        return this.getRuleContext(0, OptconstablespaceContext);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEY, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public no_inherit_(): No_inherit_Context | null {
        return this.getRuleContext(0, No_inherit_Context);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public b_expr(): B_exprContext | null {
        return this.getRuleContext(0, B_exprContext);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GENERATED, 0);
    }
    public generated_when(): Generated_whenContext | null {
        return this.getRuleContext(0, Generated_whenContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public IDENTITY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
    }
    public STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORED, 0);
    }
    public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | null {
        return this.getRuleContext(0, OptparenthesizedseqoptlistContext);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFERENCES, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public column_list_(): Column_list_Context | null {
        return this.getRuleContext(0, Column_list_Context);
    }
    public key_match(): Key_matchContext | null {
        return this.getRuleContext(0, Key_matchContext);
    }
    public key_actions(): Key_actionsContext | null {
        return this.getRuleContext(0, Key_actionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_colconstraintelem;
    }
}


export class Generated_whenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALWAYS, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BY, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generated_when;
    }
}


export class ConstraintattrContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INITIALLY, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRED, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constraintattr;
    }
}


export class TablelikeclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LIKE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public tablelikeoptionlist(): TablelikeoptionlistContext {
        return this.getRuleContext(0, TablelikeoptionlistContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tablelikeclause;
    }
}


export class TablelikeoptionlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablelikeoption(): TablelikeoptionContext[];
    public tablelikeoption(i: number): TablelikeoptionContext | null;
    public tablelikeoption(i?: number): TablelikeoptionContext[] | TablelikeoptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablelikeoptionContext);
        }

        return this.getRuleContext(i, TablelikeoptionContext);
    }
    public INCLUDING(): antlr.TerminalNode[];
    public INCLUDING(i: number): antlr.TerminalNode | null;
    public INCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.INCLUDING);
    	} else {
    		return this.getToken(PostgreSQLParser.INCLUDING, i);
    	}
    }
    public EXCLUDING(): antlr.TerminalNode[];
    public EXCLUDING(i: number): antlr.TerminalNode | null;
    public EXCLUDING(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.EXCLUDING);
    	} else {
    		return this.getToken(PostgreSQLParser.EXCLUDING, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tablelikeoptionlist;
    }
}


export class TablelikeoptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMENTS, 0);
    }
    public CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINTS, 0);
    }
    public DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULTS, 0);
    }
    public IDENTITY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GENERATED, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEXES, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORAGE, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tablelikeoption;
    }
}


export class TableconstraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public constraintelem(): ConstraintelemContext {
        return this.getRuleContext(0, ConstraintelemContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tableconstraint;
    }
}


export class ConstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHECK, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public constraintattributespec(): ConstraintattributespecContext | null {
        return this.getRuleContext(0, ConstraintattributespecContext);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNIQUE, 0);
    }
    public columnlist(): ColumnlistContext | null {
        return this.getRuleContext(0, ColumnlistContext);
    }
    public existingindex(): ExistingindexContext | null {
        return this.getRuleContext(0, ExistingindexContext);
    }
    public c_include_(): C_include_Context | null {
        return this.getRuleContext(0, C_include_Context);
    }
    public definition_(): Definition_Context | null {
        return this.getRuleContext(0, Definition_Context);
    }
    public optconstablespace(): OptconstablespaceContext | null {
        return this.getRuleContext(0, OptconstablespaceContext);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIMARY, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEY, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUDE, 0);
    }
    public exclusionconstraintlist(): ExclusionconstraintlistContext | null {
        return this.getRuleContext(0, ExclusionconstraintlistContext);
    }
    public access_method_clause(): Access_method_clauseContext | null {
        return this.getRuleContext(0, Access_method_clauseContext);
    }
    public exclusionwhereclause(): ExclusionwhereclauseContext | null {
        return this.getRuleContext(0, ExclusionwhereclauseContext);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFERENCES, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public column_list_(): Column_list_Context | null {
        return this.getRuleContext(0, Column_list_Context);
    }
    public key_match(): Key_matchContext | null {
        return this.getRuleContext(0, Key_matchContext);
    }
    public key_actions(): Key_actionsContext | null {
        return this.getRuleContext(0, Key_actionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constraintelem;
    }
}


export class No_inherit_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.NO, 0)!;
    }
    public INHERIT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INHERIT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_no_inherit_;
    }
}


export class Column_list_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public columnlist(): ColumnlistContext {
        return this.getRuleContext(0, ColumnlistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_column_list_;
    }
}


export class ColumnlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnElem(): ColumnElemContext[];
    public columnElem(i: number): ColumnElemContext | null;
    public columnElem(i?: number): ColumnElemContext[] | ColumnElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnElemContext);
        }

        return this.getRuleContext(i, ColumnElemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_columnlist;
    }
}


export class ColumnElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_columnElem;
    }
}


export class C_include_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INCLUDE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INCLUDE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public columnlist(): ColumnlistContext {
        return this.getRuleContext(0, ColumnlistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_c_include_;
    }
}


export class Key_matchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MATCH, 0)!;
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FULL, 0);
    }
    public PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARTIAL, 0);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SIMPLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_key_match;
    }
}


export class ExclusionconstraintlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public exclusionconstraintelem(): ExclusionconstraintelemContext[];
    public exclusionconstraintelem(i: number): ExclusionconstraintelemContext | null;
    public exclusionconstraintelem(i?: number): ExclusionconstraintelemContext[] | ExclusionconstraintelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExclusionconstraintelemContext);
        }

        return this.getRuleContext(i, ExclusionconstraintelemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_exclusionconstraintlist;
    }
}


export class ExclusionconstraintelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_elem(): Index_elemContext {
        return this.getRuleContext(0, Index_elemContext)!;
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_exclusionconstraintelem;
    }
}


export class ExclusionwhereclauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHERE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_exclusionwhereclause;
    }
}


export class Key_actionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public key_update(): Key_updateContext | null {
        return this.getRuleContext(0, Key_updateContext);
    }
    public key_delete(): Key_deleteContext | null {
        return this.getRuleContext(0, Key_deleteContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_key_actions;
    }
}


export class Key_updateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UPDATE, 0)!;
    }
    public key_action(): Key_actionContext {
        return this.getRuleContext(0, Key_actionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_key_update;
    }
}


export class Key_deleteContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public DELETE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DELETE_P, 0)!;
    }
    public key_action(): Key_actionContext {
        return this.getRuleContext(0, Key_actionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_key_delete;
    }
}


export class Key_actionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ACTION, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTRICT, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADE, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_key_action;
    }
}


export class OptinheritContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INHERITS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INHERITS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public qualified_name_list(): Qualified_name_listContext {
        return this.getRuleContext(0, Qualified_name_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optinherit;
    }
}


export class OptpartitionspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionspec(): PartitionspecContext {
        return this.getRuleContext(0, PartitionspecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optpartitionspec;
    }
}


export class PartitionspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public part_params(): Part_paramsContext {
        return this.getRuleContext(0, Part_paramsContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_partitionspec;
    }
}


export class Part_paramsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public part_elem(): Part_elemContext[];
    public part_elem(i: number): Part_elemContext | null;
    public part_elem(i?: number): Part_elemContext[] | Part_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Part_elemContext);
        }

        return this.getRuleContext(i, Part_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_part_params;
    }
}


export class Part_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public collate_(): Collate_Context | null {
        return this.getRuleContext(0, Collate_Context);
    }
    public class_(): Class_Context | null {
        return this.getRuleContext(0, Class_Context);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_part_elem;
    }
}


export class Table_access_method_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_table_access_method_clause;
    }
}


export class OptwithContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OIDS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optwith;
    }
}


export class OncommitoptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public COMMIT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COMMIT, 0)!;
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public DELETE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELETE_P, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROWS, 0);
    }
    public PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRESERVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_oncommitoption;
    }
}


export class OpttablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opttablespace;
    }
}


export class OptconstablespaceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INDEX, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optconstablespace;
    }
}


export class ExistingindexContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INDEX, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_existingindex;
    }
}


export class CreatestatsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public STATISTICS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.STATISTICS, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public from_list(): From_listContext {
        return this.getRuleContext(0, From_listContext)!;
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public name_list_(): Name_list_Context | null {
        return this.getRuleContext(0, Name_list_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createstatsstmt;
    }
}


export class AlterstatsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public STATISTICS(): antlr.TerminalNode[];
    public STATISTICS(i: number): antlr.TerminalNode | null;
    public STATISTICS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.STATISTICS);
    	} else {
    		return this.getToken(PostgreSQLParser.STATISTICS, i);
    	}
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public signediconst(): SignediconstContext {
        return this.getRuleContext(0, SignediconstContext)!;
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterstatsstmt;
    }
}


export class CreateasstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLE, 0)!;
    }
    public create_as_target(): Create_as_targetContext {
        return this.getRuleContext(0, Create_as_targetContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public with_data_(): With_data_Context | null {
        return this.getRuleContext(0, With_data_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createasstmt;
    }
}


export class Create_as_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public column_list_(): Column_list_Context | null {
        return this.getRuleContext(0, Column_list_Context);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public optwith(): OptwithContext | null {
        return this.getRuleContext(0, OptwithContext);
    }
    public oncommitoption(): OncommitoptionContext | null {
        return this.getRuleContext(0, OncommitoptionContext);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_create_as_target;
    }
}


export class With_data_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public DATA_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATA_P, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_with_data_;
    }
}


export class CreatematviewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VIEW, 0)!;
    }
    public create_mv_target(): Create_mv_targetContext {
        return this.getRuleContext(0, Create_mv_targetContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public optnolog(): OptnologContext | null {
        return this.getRuleContext(0, OptnologContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public with_data_(): With_data_Context | null {
        return this.getRuleContext(0, With_data_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_creatematviewstmt;
    }
}


export class Create_mv_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public column_list_(): Column_list_Context | null {
        return this.getRuleContext(0, Column_list_Context);
    }
    public table_access_method_clause(): Table_access_method_clauseContext | null {
        return this.getRuleContext(0, Table_access_method_clauseContext);
    }
    public reloptions_(): Reloptions_Context | null {
        return this.getRuleContext(0, Reloptions_Context);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_create_mv_target;
    }
}


export class OptnologContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNLOGGED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UNLOGGED, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optnolog;
    }
}


export class RefreshmatviewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REFRESH, 0)!;
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VIEW, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public concurrently_(): Concurrently_Context | null {
        return this.getRuleContext(0, Concurrently_Context);
    }
    public with_data_(): With_data_Context | null {
        return this.getRuleContext(0, With_data_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_refreshmatviewstmt;
    }
}


export class CreateseqstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public optseqoptlist(): OptseqoptlistContext | null {
        return this.getRuleContext(0, OptseqoptlistContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createseqstmt;
    }
}


export class AlterseqstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public SEQUENCE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public seqoptlist(): SeqoptlistContext {
        return this.getRuleContext(0, SeqoptlistContext)!;
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterseqstmt;
    }
}


export class OptseqoptlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public seqoptlist(): SeqoptlistContext {
        return this.getRuleContext(0, SeqoptlistContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optseqoptlist;
    }
}


export class OptparenthesizedseqoptlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public seqoptlist(): SeqoptlistContext {
        return this.getRuleContext(0, SeqoptlistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optparenthesizedseqoptlist;
    }
}


export class SeqoptlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public seqoptelem(): SeqoptelemContext[];
    public seqoptelem(i: number): SeqoptelemContext | null;
    public seqoptelem(i?: number): SeqoptelemContext[] | SeqoptelemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SeqoptelemContext);
        }

        return this.getRuleContext(i, SeqoptelemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_seqoptlist;
    }
}


export class SeqoptelemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CACHE, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CYCLE, 0);
    }
    public INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INCREMENT, 0);
    }
    public by_(): By_Context | null {
        return this.getRuleContext(0, By_Context);
    }
    public MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MAXVALUE, 0);
    }
    public MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINVALUE, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNED, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BY, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public NAME_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NAME_P, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.START, 0);
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_seqoptelem;
    }
}


export class By_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_by_;
    }
}


export class NumericonlyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fconst(): FconstContext | null {
        return this.getRuleContext(0, FconstContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUS, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_numericonly;
    }
}


export class Numericonly_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericonly(): NumericonlyContext[];
    public numericonly(i: number): NumericonlyContext | null;
    public numericonly(i?: number): NumericonlyContext[] | NumericonlyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericonlyContext);
        }

        return this.getRuleContext(i, NumericonlyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_numericonly_list;
    }
}


export class CreateplangstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public or_replace_(): Or_replace_Context | null {
        return this.getRuleContext(0, Or_replace_Context);
    }
    public trusted_(): Trusted_Context | null {
        return this.getRuleContext(0, Trusted_Context);
    }
    public procedural_(): Procedural_Context | null {
        return this.getRuleContext(0, Procedural_Context);
    }
    public HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HANDLER, 0);
    }
    public handler_name(): Handler_nameContext | null {
        return this.getRuleContext(0, Handler_nameContext);
    }
    public inline_handler_(): Inline_handler_Context | null {
        return this.getRuleContext(0, Inline_handler_Context);
    }
    public validator_(): Validator_Context | null {
        return this.getRuleContext(0, Validator_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createplangstmt;
    }
}


export class Trusted_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUSTED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TRUSTED, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_trusted_;
    }
}


export class Handler_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_handler_name;
    }
}


export class Inline_handler_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INLINE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INLINE_P, 0)!;
    }
    public handler_name(): Handler_nameContext {
        return this.getRuleContext(0, Handler_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_inline_handler_;
    }
}


export class Validator_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALIDATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VALIDATOR, 0)!;
    }
    public handler_name(): Handler_nameContext | null {
        return this.getRuleContext(0, Handler_nameContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_validator_clause;
    }
}


export class Validator_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public validator_clause(): Validator_clauseContext {
        return this.getRuleContext(0, Validator_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_validator_;
    }
}


export class Procedural_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PROCEDURAL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PROCEDURAL, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_procedural_;
    }
}


export class CreatetablespacestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public LOCATION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LOCATION, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public opttablespaceowner(): OpttablespaceownerContext | null {
        return this.getRuleContext(0, OpttablespaceownerContext);
    }
    public reloptions_(): Reloptions_Context | null {
        return this.getRuleContext(0, Reloptions_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createtablespacestmt;
    }
}


export class OpttablespaceownerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OWNER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OWNER, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opttablespaceowner;
    }
}


export class DroptablespacestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_droptablespacestmt;
    }
}


export class CreateextensionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXTENSION, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public create_extension_opt_list(): Create_extension_opt_listContext {
        return this.getRuleContext(0, Create_extension_opt_listContext)!;
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createextensionstmt;
    }
}


export class Create_extension_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public create_extension_opt_item(): Create_extension_opt_itemContext[];
    public create_extension_opt_item(i: number): Create_extension_opt_itemContext | null;
    public create_extension_opt_item(i?: number): Create_extension_opt_itemContext[] | Create_extension_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Create_extension_opt_itemContext);
        }

        return this.getRuleContext(i, Create_extension_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_create_extension_opt_list;
    }
}


export class Create_extension_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public VERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VERSION_P, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_create_extension_opt_item;
    }
}


export class AlterextensionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXTENSION, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UPDATE, 0)!;
    }
    public alter_extension_opt_list(): Alter_extension_opt_listContext {
        return this.getRuleContext(0, Alter_extension_opt_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterextensionstmt;
    }
}


export class Alter_extension_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_extension_opt_item(): Alter_extension_opt_itemContext[];
    public alter_extension_opt_item(i: number): Alter_extension_opt_itemContext | null;
    public alter_extension_opt_item(i?: number): Alter_extension_opt_itemContext[] | Alter_extension_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_extension_opt_itemContext);
        }

        return this.getRuleContext(i, Alter_extension_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_extension_opt_list;
    }
}


export class Alter_extension_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_extension_opt_item;
    }
}


export class AlterextensioncontentsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXTENSION, 0)!;
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public add_drop(): Add_dropContext {
        return this.getRuleContext(0, Add_dropContext)!;
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLASS, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FAMILY, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSFORM, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterextensioncontentsstmt;
    }
}


export class CreatefdwstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOREIGN, 0)!;
    }
    public DATA_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATA_P, 0)!;
    }
    public WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WRAPPER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public fdw_options_(): Fdw_options_Context | null {
        return this.getRuleContext(0, Fdw_options_Context);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createfdwstmt;
    }
}


export class Fdw_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HANDLER, 0);
    }
    public handler_name(): Handler_nameContext | null {
        return this.getRuleContext(0, Handler_nameContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALIDATOR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_fdw_option;
    }
}


export class Fdw_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fdw_option(): Fdw_optionContext[];
    public fdw_option(i: number): Fdw_optionContext | null;
    public fdw_option(i?: number): Fdw_optionContext[] | Fdw_optionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Fdw_optionContext);
        }

        return this.getRuleContext(i, Fdw_optionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_fdw_options;
    }
}


export class Fdw_options_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fdw_options(): Fdw_optionsContext {
        return this.getRuleContext(0, Fdw_optionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_fdw_options_;
    }
}


export class AlterfdwstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOREIGN, 0)!;
    }
    public DATA_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATA_P, 0)!;
    }
    public WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WRAPPER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public fdw_options_(): Fdw_options_Context | null {
        return this.getRuleContext(0, Fdw_options_Context);
    }
    public fdw_options(): Fdw_optionsContext | null {
        return this.getRuleContext(0, Fdw_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterfdwstmt;
    }
}


export class Create_generic_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public generic_option_list(): Generic_option_listContext {
        return this.getRuleContext(0, Generic_option_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_create_generic_options;
    }
}


export class Generic_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_option_elem(): Generic_option_elemContext[];
    public generic_option_elem(i: number): Generic_option_elemContext | null;
    public generic_option_elem(i?: number): Generic_option_elemContext[] | Generic_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Generic_option_elemContext);
        }

        return this.getRuleContext(i, Generic_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generic_option_list;
    }
}


export class Alter_generic_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIONS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPTIONS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public alter_generic_option_list(): Alter_generic_option_listContext {
        return this.getRuleContext(0, Alter_generic_option_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_generic_options;
    }
}


export class Alter_generic_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alter_generic_option_elem(): Alter_generic_option_elemContext[];
    public alter_generic_option_elem(i: number): Alter_generic_option_elemContext | null;
    public alter_generic_option_elem(i?: number): Alter_generic_option_elemContext[] | Alter_generic_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alter_generic_option_elemContext);
        }

        return this.getRuleContext(i, Alter_generic_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_generic_option_list;
    }
}


export class Alter_generic_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_option_elem(): Generic_option_elemContext | null {
        return this.getRuleContext(0, Generic_option_elemContext);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public generic_option_name(): Generic_option_nameContext | null {
        return this.getRuleContext(0, Generic_option_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alter_generic_option_elem;
    }
}


export class Generic_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generic_option_name(): Generic_option_nameContext {
        return this.getRuleContext(0, Generic_option_nameContext)!;
    }
    public generic_option_arg(): Generic_option_argContext {
        return this.getRuleContext(0, Generic_option_argContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generic_option_elem;
    }
}


export class Generic_option_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generic_option_name;
    }
}


export class Generic_option_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generic_option_arg;
    }
}


export class CreateforeignserverstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SERVER, 0)!;
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOREIGN, 0)!;
    }
    public DATA_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATA_P, 0)!;
    }
    public WRAPPER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WRAPPER, 0)!;
    }
    public type_(): Type_Context | null {
        return this.getRuleContext(0, Type_Context);
    }
    public foreign_server_version_(): Foreign_server_version_Context | null {
        return this.getRuleContext(0, Foreign_server_version_Context);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createforeignserverstmt;
    }
}


export class Type_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TYPE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TYPE_P, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_type_;
    }
}


export class Foreign_server_versionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VERSION_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VERSION_P, 0)!;
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_foreign_server_version;
    }
}


export class Foreign_server_version_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public foreign_server_version(): Foreign_server_versionContext {
        return this.getRuleContext(0, Foreign_server_versionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_foreign_server_version_;
    }
}


export class AlterforeignserverstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SERVER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext | null {
        return this.getRuleContext(0, Alter_generic_optionsContext);
    }
    public foreign_server_version(): Foreign_server_versionContext | null {
        return this.getRuleContext(0, Foreign_server_versionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterforeignserverstmt;
    }
}


export class CreateforeigntablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOREIGN, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLE, 0)!;
    }
    public qualified_name(): Qualified_nameContext[];
    public qualified_name(i: number): Qualified_nameContext | null;
    public qualified_name(i?: number): Qualified_nameContext[] | Qualified_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qualified_nameContext);
        }

        return this.getRuleContext(i, Qualified_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SERVER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public opttableelementlist(): OpttableelementlistContext | null {
        return this.getRuleContext(0, OpttableelementlistContext);
    }
    public optinherit(): OptinheritContext | null {
        return this.getRuleContext(0, OptinheritContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARTITION, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public partitionboundspec(): PartitionboundspecContext | null {
        return this.getRuleContext(0, PartitionboundspecContext);
    }
    public opttypedtableelementlist(): OpttypedtableelementlistContext | null {
        return this.getRuleContext(0, OpttypedtableelementlistContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createforeigntablestmt;
    }
}


export class ImportforeignschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IMPORT_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IMPORT_P, 0)!;
    }
    public FOREIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOREIGN, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SCHEMA, 0)!;
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SERVER, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INTO, 0)!;
    }
    public import_qualification(): Import_qualificationContext | null {
        return this.getRuleContext(0, Import_qualificationContext);
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_importforeignschemastmt;
    }
}


export class Import_qualification_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIMIT, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_import_qualification_type;
    }
}


export class Import_qualificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public import_qualification_type(): Import_qualification_typeContext {
        return this.getRuleContext(0, Import_qualification_typeContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public relation_expr_list(): Relation_expr_listContext {
        return this.getRuleContext(0, Relation_expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_import_qualification;
    }
}


export class CreateusermappingstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USER, 0)!;
    }
    public MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MAPPING, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public auth_ident(): Auth_identContext {
        return this.getRuleContext(0, Auth_identContext)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SERVER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public create_generic_options(): Create_generic_optionsContext | null {
        return this.getRuleContext(0, Create_generic_optionsContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createusermappingstmt;
    }
}


export class Auth_identContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext | null {
        return this.getRuleContext(0, RolespecContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_auth_ident;
    }
}


export class DropusermappingstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USER, 0)!;
    }
    public MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MAPPING, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public auth_ident(): Auth_identContext {
        return this.getRuleContext(0, Auth_identContext)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SERVER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropusermappingstmt;
    }
}


export class AlterusermappingstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USER, 0)!;
    }
    public MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MAPPING, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public auth_ident(): Auth_identContext {
        return this.getRuleContext(0, Auth_identContext)!;
    }
    public SERVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SERVER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public alter_generic_options(): Alter_generic_optionsContext {
        return this.getRuleContext(0, Alter_generic_optionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterusermappingstmt;
    }
}


export class CreatepolicystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.POLICY, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext | null {
        return this.getRuleContext(0, RowsecuritydefaultpermissiveContext);
    }
    public rowsecuritydefaultforcmd(): RowsecuritydefaultforcmdContext | null {
        return this.getRuleContext(0, RowsecuritydefaultforcmdContext);
    }
    public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext | null {
        return this.getRuleContext(0, RowsecuritydefaulttoroleContext);
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | null {
        return this.getRuleContext(0, RowsecurityoptionalexprContext);
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | null {
        return this.getRuleContext(0, RowsecurityoptionalwithcheckContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createpolicystmt;
    }
}


export class AlterpolicystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.POLICY, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public rowsecurityoptionaltorole(): RowsecurityoptionaltoroleContext | null {
        return this.getRuleContext(0, RowsecurityoptionaltoroleContext);
    }
    public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | null {
        return this.getRuleContext(0, RowsecurityoptionalexprContext);
    }
    public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | null {
        return this.getRuleContext(0, RowsecurityoptionalwithcheckContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterpolicystmt;
    }
}


export class RowsecurityoptionalexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsecurityoptionalexpr;
    }
}


export class RowsecurityoptionalwithcheckContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsecurityoptionalwithcheck;
    }
}


export class RowsecuritydefaulttoroleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsecuritydefaulttorole;
    }
}


export class RowsecurityoptionaltoroleContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsecurityoptionaltorole;
    }
}


export class RowsecuritydefaultpermissiveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsecuritydefaultpermissive;
    }
}


export class RowsecuritydefaultforcmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public row_security_cmd(): Row_security_cmdContext {
        return this.getRuleContext(0, Row_security_cmdContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsecuritydefaultforcmd;
    }
}


export class Row_security_cmdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SELECT, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSERT, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public DELETE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELETE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_row_security_cmd;
    }
}


export class CreateamstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public ACCESS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ACCESS, 0)!;
    }
    public METHOD(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.METHOD, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public TYPE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TYPE_P, 0)!;
    }
    public am_type(): Am_typeContext {
        return this.getRuleContext(0, Am_typeContext)!;
    }
    public HANDLER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.HANDLER, 0)!;
    }
    public handler_name(): Handler_nameContext {
        return this.getRuleContext(0, Handler_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createamstmt;
    }
}


export class Am_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_am_type;
    }
}


export class CreatetrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TRIGGER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public triggeractiontime(): TriggeractiontimeContext | null {
        return this.getRuleContext(0, TriggeractiontimeContext);
    }
    public triggerevents(): TriggereventsContext {
        return this.getRuleContext(0, TriggereventsContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXECUTE, 0)!;
    }
    public function_or_procedure(): Function_or_procedureContext {
        return this.getRuleContext(0, Function_or_procedureContext)!;
    }
    public func_name(): Func_nameContext {
        return this.getRuleContext(0, Func_nameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public triggerfuncargs(): TriggerfuncargsContext {
        return this.getRuleContext(0, TriggerfuncargsContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public triggerreferencing(): TriggerreferencingContext | null {
        return this.getRuleContext(0, TriggerreferencingContext);
    }
    public triggerforspec(): TriggerforspecContext | null {
        return this.getRuleContext(0, TriggerforspecContext);
    }
    public triggerwhen(): TriggerwhenContext | null {
        return this.getRuleContext(0, TriggerwhenContext);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AFTER, 0);
    }
    public constraintattributespec(): ConstraintattributespecContext | null {
        return this.getRuleContext(0, ConstraintattributespecContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EACH, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public optconstrfromtable(): OptconstrfromtableContext | null {
        return this.getRuleContext(0, OptconstrfromtableContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createtrigstmt;
    }
}


export class TriggeractiontimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BEFORE, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AFTER, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSTEAD, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggeractiontime;
    }
}


export class TriggereventsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggeroneevent(): TriggeroneeventContext[];
    public triggeroneevent(i: number): TriggeroneeventContext | null;
    public triggeroneevent(i?: number): TriggeroneeventContext[] | TriggeroneeventContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggeroneeventContext);
        }

        return this.getRuleContext(i, TriggeroneeventContext);
    }
    public OR(): antlr.TerminalNode[];
    public OR(i: number): antlr.TerminalNode | null;
    public OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.OR);
    	} else {
    		return this.getToken(PostgreSQLParser.OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerevents;
    }
}


export class TriggeroneeventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSERT, 0);
    }
    public DELETE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELETE_P, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public columnlist(): ColumnlistContext | null {
        return this.getRuleContext(0, ColumnlistContext);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUNCATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggeroneevent;
    }
}


export class TriggerreferencingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REFERENCING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REFERENCING, 0)!;
    }
    public triggertransitions(): TriggertransitionsContext {
        return this.getRuleContext(0, TriggertransitionsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerreferencing;
    }
}


export class TriggertransitionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggertransition(): TriggertransitionContext[];
    public triggertransition(i: number): TriggertransitionContext | null;
    public triggertransition(i?: number): TriggertransitionContext[] | TriggertransitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggertransitionContext);
        }

        return this.getRuleContext(i, TriggertransitionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggertransitions;
    }
}


export class TriggertransitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transitionoldornew(): TransitionoldornewContext {
        return this.getRuleContext(0, TransitionoldornewContext)!;
    }
    public transitionrowortable(): TransitionrowortableContext {
        return this.getRuleContext(0, TransitionrowortableContext)!;
    }
    public transitionrelname(): TransitionrelnameContext {
        return this.getRuleContext(0, TransitionrelnameContext)!;
    }
    public as_(): As_Context | null {
        return this.getRuleContext(0, As_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggertransition;
    }
}


export class TransitionoldornewContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NEW, 0);
    }
    public OLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OLD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transitionoldornew;
    }
}


export class TransitionrowortableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transitionrowortable;
    }
}


export class TransitionrelnameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transitionrelname;
    }
}


export class TriggerforspecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public triggerfortype(): TriggerfortypeContext {
        return this.getRuleContext(0, TriggerfortypeContext)!;
    }
    public triggerforopteach(): TriggerforopteachContext | null {
        return this.getRuleContext(0, TriggerforopteachContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerforspec;
    }
}


export class TriggerforopteachContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EACH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EACH, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerforopteach;
    }
}


export class TriggerfortypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATEMENT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerfortype;
    }
}


export class TriggerwhenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHEN, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerwhen;
    }
}


export class Function_or_procedureContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_function_or_procedure;
    }
}


export class TriggerfuncargsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public triggerfuncarg(): TriggerfuncargContext[];
    public triggerfuncarg(i: number): TriggerfuncargContext | null;
    public triggerfuncarg(i?: number): TriggerfuncargContext[] | TriggerfuncargContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TriggerfuncargContext);
        }

        return this.getRuleContext(i, TriggerfuncargContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerfuncargs;
    }
}


export class TriggerfuncargContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public fconst(): FconstContext | null {
        return this.getRuleContext(0, FconstContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_triggerfuncarg;
    }
}


export class OptconstrfromtableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_optconstrfromtable;
    }
}


export class ConstraintattributespecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public constraintattributeElem(): ConstraintattributeElemContext[];
    public constraintattributeElem(i: number): ConstraintattributeElemContext | null;
    public constraintattributeElem(i?: number): ConstraintattributeElemContext[] | ConstraintattributeElemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConstraintattributeElemContext);
        }

        return this.getRuleContext(i, ConstraintattributeElemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constraintattributespec;
    }
}


export class ConstraintattributeElemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INITIALLY, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRED, 0);
    }
    public VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALID, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INHERIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constraintattributeElem;
    }
}


export class CreateeventtrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EVENT, 0)!;
    }
    public TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TRIGGER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXECUTE, 0)!;
    }
    public function_or_procedure(): Function_or_procedureContext {
        return this.getRuleContext(0, Function_or_procedureContext)!;
    }
    public func_name(): Func_nameContext {
        return this.getRuleContext(0, Func_nameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WHEN, 0);
    }
    public event_trigger_when_list(): Event_trigger_when_listContext | null {
        return this.getRuleContext(0, Event_trigger_when_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createeventtrigstmt;
    }
}


export class Event_trigger_when_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public event_trigger_when_item(): Event_trigger_when_itemContext[];
    public event_trigger_when_item(i: number): Event_trigger_when_itemContext | null;
    public event_trigger_when_item(i?: number): Event_trigger_when_itemContext[] | Event_trigger_when_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Event_trigger_when_itemContext);
        }

        return this.getRuleContext(i, Event_trigger_when_itemContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.AND);
    	} else {
    		return this.getToken(PostgreSQLParser.AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_event_trigger_when_list;
    }
}


export class Event_trigger_when_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public IN_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IN_P, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public event_trigger_value_list(): Event_trigger_value_listContext {
        return this.getRuleContext(0, Event_trigger_value_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_event_trigger_when_item;
    }
}


export class Event_trigger_value_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_event_trigger_value_list;
    }
}


export class AltereventtrigstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public EVENT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EVENT, 0)!;
    }
    public TRIGGER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TRIGGER, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public enable_trigger(): Enable_triggerContext {
        return this.getRuleContext(0, Enable_triggerContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altereventtrigstmt;
    }
}


export class Enable_triggerContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENABLE_P, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLICA, 0);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALWAYS, 0);
    }
    public DISABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISABLE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_enable_trigger;
    }
}


export class CreateassertionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public ASSERTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ASSERTION, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CHECK, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public constraintattributespec(): ConstraintattributespecContext {
        return this.getRuleContext(0, ConstraintattributespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createassertionstmt;
    }
}


export class DefinestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public func_name(): Func_nameContext | null {
        return this.getRuleContext(0, Func_nameContext);
    }
    public aggr_args(): Aggr_argsContext | null {
        return this.getRuleContext(0, Aggr_argsContext);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public or_replace_(): Or_replace_Context | null {
        return this.getRuleContext(0, Or_replace_Context);
    }
    public old_aggr_definition(): Old_aggr_definitionContext | null {
        return this.getRuleContext(0, Old_aggr_definitionContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public opttablefuncelementlist(): OpttablefuncelementlistContext | null {
        return this.getRuleContext(0, OpttablefuncelementlistContext);
    }
    public ENUM_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENUM_P, 0);
    }
    public enum_val_list_(): Enum_val_list_Context | null {
        return this.getRuleContext(0, Enum_val_list_Context);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RANGE, 0);
    }
    public TEXT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEXT_P, 0);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARSER, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPLATE, 0);
    }
    public CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_definestmt;
    }
}


export class DefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public def_list(): Def_listContext {
        return this.getRuleContext(0, Def_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_definition;
    }
}


export class Def_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public def_elem(): Def_elemContext[];
    public def_elem(i: number): Def_elemContext | null;
    public def_elem(i?: number): Def_elemContext[] | Def_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Def_elemContext);
        }

        return this.getRuleContext(i, Def_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_def_list;
    }
}


export class Def_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUAL, 0);
    }
    public def_arg(): Def_argContext | null {
        return this.getRuleContext(0, Def_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_def_elem;
    }
}


export class Def_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_def_arg;
    }
}


export class Old_aggr_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public old_aggr_list(): Old_aggr_listContext {
        return this.getRuleContext(0, Old_aggr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_old_aggr_definition;
    }
}


export class Old_aggr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public old_aggr_elem(): Old_aggr_elemContext[];
    public old_aggr_elem(i: number): Old_aggr_elemContext | null;
    public old_aggr_elem(i?: number): Old_aggr_elemContext[] | Old_aggr_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Old_aggr_elemContext);
        }

        return this.getRuleContext(i, Old_aggr_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_old_aggr_list;
    }
}


export class Old_aggr_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EQUAL, 0)!;
    }
    public def_arg(): Def_argContext {
        return this.getRuleContext(0, Def_argContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_old_aggr_elem;
    }
}


export class Enum_val_list_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public enum_val_list(): Enum_val_listContext {
        return this.getRuleContext(0, Enum_val_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_enum_val_list_;
    }
}


export class Enum_val_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_enum_val_list;
    }
}


export class AlterenumstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public TYPE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TYPE_P, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public VALUE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VALUE_P, 0)!;
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public if_not_exists_(): If_not_exists_Context | null {
        return this.getRuleContext(0, If_not_exists_Context);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BEFORE, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AFTER, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RENAME, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterenumstmt;
    }
}


export class If_not_exists_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IF_P, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.NOT, 0)!;
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_if_not_exists_;
    }
}


export class CreateopclassstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPERATOR, 0)!;
    }
    public CLASS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLASS, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public TYPE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TYPE_P, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public opclass_item_list(): Opclass_item_listContext {
        return this.getRuleContext(0, Opclass_item_listContext)!;
    }
    public default_(): Default_Context | null {
        return this.getRuleContext(0, Default_Context);
    }
    public opfamily_(): Opfamily_Context | null {
        return this.getRuleContext(0, Opfamily_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createopclassstmt;
    }
}


export class Opclass_item_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opclass_item(): Opclass_itemContext[];
    public opclass_item(i: number): Opclass_itemContext | null;
    public opclass_item(i?: number): Opclass_itemContext[] | Opclass_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opclass_itemContext);
        }

        return this.getRuleContext(i, Opclass_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opclass_item_list;
    }
}


export class Opclass_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public opclass_purpose(): Opclass_purposeContext | null {
        return this.getRuleContext(0, Opclass_purposeContext);
    }
    public recheck_(): Recheck_Context | null {
        return this.getRuleContext(0, Recheck_Context);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public type_list(): Type_listContext | null {
        return this.getRuleContext(0, Type_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORAGE, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opclass_item;
    }
}


export class Default_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DEFAULT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_default_;
    }
}


export class Opfamily_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FAMILY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opfamily_;
    }
}


export class Opclass_purposeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BY, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opclass_purpose;
    }
}


export class Recheck_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RECHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.RECHECK, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_recheck_;
    }
}


export class CreateopfamilystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPERATOR, 0)!;
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FAMILY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createopfamilystmt;
    }
}


export class AlteropfamilystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPERATOR, 0)!;
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FAMILY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public opclass_item_list(): Opclass_item_listContext | null {
        return this.getRuleContext(0, Opclass_item_listContext);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public opclass_drop_list(): Opclass_drop_listContext | null {
        return this.getRuleContext(0, Opclass_drop_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alteropfamilystmt;
    }
}


export class Opclass_drop_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public opclass_drop(): Opclass_dropContext[];
    public opclass_drop(i: number): Opclass_dropContext | null;
    public opclass_drop(i?: number): Opclass_dropContext[] | Opclass_dropContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Opclass_dropContext);
        }

        return this.getRuleContext(i, Opclass_dropContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opclass_drop_list;
    }
}


export class Opclass_dropContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public iconst(): IconstContext {
        return this.getRuleContext(0, IconstContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public type_list(): Type_listContext {
        return this.getRuleContext(0, Type_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opclass_drop;
    }
}


export class DropopclassstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPERATOR, 0)!;
    }
    public CLASS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLASS, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropopclassstmt;
    }
}


export class DropopfamilystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPERATOR, 0)!;
    }
    public FAMILY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FAMILY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropopfamilystmt;
    }
}


export class DropownedstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public OWNED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OWNED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropownedstmt;
    }
}


export class ReassignownedstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REASSIGN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REASSIGN, 0)!;
    }
    public OWNED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OWNED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reassignownedstmt;
    }
}


export class DropstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public any_name_list_(): Any_name_list_Context | null {
        return this.getRuleContext(0, Any_name_list_Context);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public drop_type_name(): Drop_type_nameContext | null {
        return this.getRuleContext(0, Drop_type_nameContext);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public object_type_name_on_any_name(): Object_type_name_on_any_nameContext | null {
        return this.getRuleContext(0, Object_type_name_on_any_nameContext);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public type_name_list(): Type_name_listContext | null {
        return this.getRuleContext(0, Type_name_listContext);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONCURRENTLY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropstmt;
    }
}


export class Object_type_any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public CONVERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public TEXT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEXT_P, 0);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARSER, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPLATE, 0);
    }
    public CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_object_type_any_name;
    }
}


export class Object_type_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public drop_type_name(): Drop_type_nameContext | null {
        return this.getRuleContext(0, Drop_type_nameContext);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATABASE, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_object_type_name;
    }
}


export class Drop_type_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ACCESS, 0);
    }
    public METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.METHOD, 0);
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EVENT, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTENSION, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public DATA_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATA_P, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRAPPER, 0);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public procedural_(): Procedural_Context | null {
        return this.getRuleContext(0, Procedural_Context);
    }
    public PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERVER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_drop_type_name;
    }
}


export class Object_type_name_on_any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.POLICY, 0);
    }
    public RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RULE, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_object_type_name_on_any_name;
    }
}


export class Any_name_list_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_any_name_list_;
    }
}


export class Any_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_any_name;
    }
}


export class AttrsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.DOT);
    	} else {
    		return this.getToken(PostgreSQLParser.DOT, i);
    	}
    }
    public attr_name(): Attr_nameContext[];
    public attr_name(i: number): Attr_nameContext | null;
    public attr_name(i?: number): Attr_nameContext[] | Attr_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Attr_nameContext);
        }

        return this.getRuleContext(i, Attr_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_attrs;
    }
}


export class Type_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_type_name_list;
    }
}


export class TruncatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TRUNCATE, 0)!;
    }
    public relation_expr_list(): Relation_expr_listContext {
        return this.getRuleContext(0, Relation_expr_listContext)!;
    }
    public table_(): Table_Context | null {
        return this.getRuleContext(0, Table_Context);
    }
    public restart_seqs_(): Restart_seqs_Context | null {
        return this.getRuleContext(0, Restart_seqs_Context);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_truncatestmt;
    }
}


export class Restart_seqs_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONTINUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONTINUE_P, 0);
    }
    public IDENTITY_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IDENTITY_P, 0)!;
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTART, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_restart_seqs_;
    }
}


export class CommentstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COMMENT, 0)!;
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.ON);
    	} else {
    		return this.getToken(PostgreSQLParser.ON, i);
    	}
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IS, 0)!;
    }
    public comment_text(): Comment_textContext {
        return this.getRuleContext(0, Comment_textContext)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMN, 0);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public object_type_name_on_any_name(): Object_type_name_on_any_nameContext | null {
        return this.getRuleContext(0, Object_type_name_on_any_nameContext);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSFORM, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLASS, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FAMILY, 0);
    }
    public LARGE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LARGE_P, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CAST, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_commentstmt;
    }
}


export class Comment_textContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_comment_text;
    }
}


export class SeclabelstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SECURITY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SECURITY, 0)!;
    }
    public LABEL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LABEL, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public object_type_any_name(): Object_type_any_nameContext | null {
        return this.getRuleContext(0, Object_type_any_nameContext);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IS, 0)!;
    }
    public security_label(): Security_labelContext {
        return this.getRuleContext(0, Security_labelContext)!;
    }
    public provider_(): Provider_Context | null {
        return this.getRuleContext(0, Provider_Context);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMN, 0);
    }
    public object_type_name(): Object_type_nameContext | null {
        return this.getRuleContext(0, Object_type_nameContext);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public LARGE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LARGE_P, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_seclabelstmt;
    }
}


export class Provider_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_provider_;
    }
}


export class Security_labelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_security_label;
    }
}


export class FetchstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FETCH, 0);
    }
    public fetch_args(): Fetch_argsContext {
        return this.getRuleContext(0, Fetch_argsContext)!;
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MOVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_fetchstmt;
    }
}


export class Fetch_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public cursor_name(): Cursor_nameContext {
        return this.getRuleContext(0, Cursor_nameContext)!;
    }
    public from_in(): From_inContext | null {
        return this.getRuleContext(0, From_inContext);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NEXT, 0);
    }
    public from_in_(): From_in_Context | null {
        return this.getRuleContext(0, From_in_Context);
    }
    public PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIOR, 0);
    }
    public FIRST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FIRST_P, 0);
    }
    public LAST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LAST_P, 0);
    }
    public ABSOLUTE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABSOLUTE_P, 0);
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public RELATIVE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RELATIVE_P, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORWARD, 0);
    }
    public BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BACKWARD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_fetch_args;
    }
}


export class From_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_from_in;
    }
}


export class From_in_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public from_in(): From_inContext {
        return this.getRuleContext(0, From_inContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_from_in_;
    }
}


export class GrantstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GRANT, 0)!;
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public privilege_target(): Privilege_targetContext {
        return this.getRuleContext(0, Privilege_targetContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public grant_grant_option_(): Grant_grant_option_Context | null {
        return this.getRuleContext(0, Grant_grant_option_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_grantstmt;
    }
}


export class RevokestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REVOKE, 0)!;
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public privilege_target(): Privilege_targetContext {
        return this.getRuleContext(0, Privilege_targetContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_revokestmt;
    }
}


export class PrivilegesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege_list(): Privilege_listContext | null {
        return this.getRuleContext(0, Privilege_listContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIVILEGES, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public columnlist(): ColumnlistContext | null {
        return this.getRuleContext(0, ColumnlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_privileges;
    }
}


export class Privilege_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_privilege_list;
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SELECT, 0);
    }
    public column_list_(): Column_list_Context | null {
        return this.getRuleContext(0, Column_list_Context);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFERENCES, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CREATE, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_privilege;
    }
}


export class Privilege_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name_list(): Qualified_name_listContext | null {
        return this.getRuleContext(0, Qualified_name_listContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public DATA_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATA_P, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRAPPER, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERVER, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext | null {
        return this.getRuleContext(0, Function_with_argtypes_listContext);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATABASE, 0);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public any_name_list_(): Any_name_list_Context | null {
        return this.getRuleContext(0, Any_name_list_Context);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public LARGE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LARGE_P, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public numericonly_list(): Numericonly_listContext | null {
        return this.getRuleContext(0, Numericonly_listContext);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLES, 0);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCES, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTIONS, 0);
    }
    public PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURES, 0);
    }
    public ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_privilege_target;
    }
}


export class Grantee_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public grantee(): GranteeContext[];
    public grantee(i: number): GranteeContext | null;
    public grantee(i?: number): GranteeContext[] | GranteeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GranteeContext);
        }

        return this.getRuleContext(i, GranteeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_grantee_list;
    }
}


export class GranteeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public GROUP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUP_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_grantee;
    }
}


export class Grant_grant_option_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GRANT, 0)!;
    }
    public OPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_grant_grant_option_;
    }
}


export class GrantrolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GRANT, 0)!;
    }
    public privilege_list(): Privilege_listContext {
        return this.getRuleContext(0, Privilege_listContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public grant_admin_option_(): Grant_admin_option_Context | null {
        return this.getRuleContext(0, Grant_admin_option_Context);
    }
    public granted_by_(): Granted_by_Context | null {
        return this.getRuleContext(0, Granted_by_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_grantrolestmt;
    }
}


export class RevokerolestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REVOKE, 0)!;
    }
    public privilege_list(): Privilege_listContext {
        return this.getRuleContext(0, Privilege_listContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public role_list(): Role_listContext {
        return this.getRuleContext(0, Role_listContext)!;
    }
    public granted_by_(): Granted_by_Context | null {
        return this.getRuleContext(0, Granted_by_Context);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_revokerolestmt;
    }
}


export class Grant_admin_option_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public ADMIN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ADMIN, 0)!;
    }
    public OPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_grant_admin_option_;
    }
}


export class Granted_by_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANTED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GRANTED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_granted_by_;
    }
}


export class AlterdefaultprivilegesstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DEFAULT, 0)!;
    }
    public PRIVILEGES(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PRIVILEGES, 0)!;
    }
    public defacloptionlist(): DefacloptionlistContext {
        return this.getRuleContext(0, DefacloptionlistContext)!;
    }
    public defaclaction(): DefaclactionContext {
        return this.getRuleContext(0, DefaclactionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterdefaultprivilegesstmt;
    }
}


export class DefacloptionlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public defacloption(): DefacloptionContext[];
    public defacloption(i: number): DefacloptionContext | null;
    public defacloption(i?: number): DefacloptionContext[] | DefacloptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DefacloptionContext);
        }

        return this.getRuleContext(i, DefacloptionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_defacloptionlist;
    }
}


export class DefacloptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public role_list(): Role_listContext | null {
        return this.getRuleContext(0, Role_listContext);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_defacloption;
    }
}


export class DefaclactionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GRANT, 0);
    }
    public privileges(): PrivilegesContext {
        return this.getRuleContext(0, PrivilegesContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public defacl_privilege_target(): Defacl_privilege_targetContext {
        return this.getRuleContext(0, Defacl_privilege_targetContext)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public grantee_list(): Grantee_listContext {
        return this.getRuleContext(0, Grantee_listContext)!;
    }
    public grant_grant_option_(): Grant_grant_option_Context | null {
        return this.getRuleContext(0, Grant_grant_option_Context);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REVOKE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_defaclaction;
    }
}


export class Defacl_privilege_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLES, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTIONS, 0);
    }
    public ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINES, 0);
    }
    public SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCES, 0);
    }
    public TYPES_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPES_P, 0);
    }
    public SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMAS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_defacl_privilege_target;
    }
}


export class IndexstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INDEX, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public relation_expr(): Relation_exprContext {
        return this.getRuleContext(0, Relation_exprContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public index_params(): Index_paramsContext {
        return this.getRuleContext(0, Index_paramsContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public unique_(): Unique_Context | null {
        return this.getRuleContext(0, Unique_Context);
    }
    public concurrently_(): Concurrently_Context | null {
        return this.getRuleContext(0, Concurrently_Context);
    }
    public index_name_(): Index_name_Context | null {
        return this.getRuleContext(0, Index_name_Context);
    }
    public access_method_clause(): Access_method_clauseContext | null {
        return this.getRuleContext(0, Access_method_clauseContext);
    }
    public include_(): Include_Context | null {
        return this.getRuleContext(0, Include_Context);
    }
    public reloptions_(): Reloptions_Context | null {
        return this.getRuleContext(0, Reloptions_Context);
    }
    public opttablespace(): OpttablespaceContext | null {
        return this.getRuleContext(0, OpttablespaceContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_indexstmt;
    }
}


export class Unique_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNIQUE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UNIQUE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_unique_;
    }
}


export class Single_name_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_single_name_;
    }
}


export class Concurrently_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CONCURRENTLY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CONCURRENTLY, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_concurrently_;
    }
}


export class Index_name_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_index_name_;
    }
}


export class Access_method_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_access_method_clause;
    }
}


export class Index_paramsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_elem(): Index_elemContext[];
    public index_elem(i: number): Index_elemContext | null;
    public index_elem(i?: number): Index_elemContext[] | Index_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Index_elemContext);
        }

        return this.getRuleContext(i, Index_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_index_params;
    }
}


export class Index_elem_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public collate_(): Collate_Context | null {
        return this.getRuleContext(0, Collate_Context);
    }
    public class_(): Class_Context | null {
        return this.getRuleContext(0, Class_Context);
    }
    public asc_desc_(): Asc_desc_Context | null {
        return this.getRuleContext(0, Asc_desc_Context);
    }
    public nulls_order_(): Nulls_order_Context | null {
        return this.getRuleContext(0, Nulls_order_Context);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public reloptions(): ReloptionsContext | null {
        return this.getRuleContext(0, ReloptionsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_index_elem_options;
    }
}


export class Index_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public index_elem_options(): Index_elem_optionsContext {
        return this.getRuleContext(0, Index_elem_optionsContext)!;
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_index_elem;
    }
}


export class Include_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INCLUDE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INCLUDE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public index_including_params(): Index_including_paramsContext {
        return this.getRuleContext(0, Index_including_paramsContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_include_;
    }
}


export class Index_including_paramsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public index_elem(): Index_elemContext[];
    public index_elem(i: number): Index_elemContext | null;
    public index_elem(i?: number): Index_elemContext[] | Index_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Index_elemContext);
        }

        return this.getRuleContext(i, Index_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_index_including_params;
    }
}


export class Collate_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COLLATE, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_collate_;
    }
}


export class Class_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_class_;
    }
}


export class Asc_desc_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DESC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_asc_desc_;
    }
}


export class Nulls_order_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULLS_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.NULLS_P, 0)!;
    }
    public FIRST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FIRST_P, 0);
    }
    public LAST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LAST_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_nulls_order_;
    }
}


export class CreatefunctionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public func_name(): Func_nameContext {
        return this.getRuleContext(0, Func_nameContext)!;
    }
    public func_args_with_defaults(): Func_args_with_defaultsContext {
        return this.getRuleContext(0, Func_args_with_defaultsContext)!;
    }
    public createfunc_opt_list(): Createfunc_opt_listContext {
        return this.getRuleContext(0, Createfunc_opt_listContext)!;
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public or_replace_(): Or_replace_Context | null {
        return this.getRuleContext(0, Or_replace_Context);
    }
    public RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RETURNS, 0);
    }
    public func_return(): Func_returnContext | null {
        return this.getRuleContext(0, Func_returnContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public table_func_column_list(): Table_func_column_listContext | null {
        return this.getRuleContext(0, Table_func_column_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createfunctionstmt;
    }
}


export class Or_replace_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OR, 0)!;
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REPLACE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_or_replace_;
    }
}


export class Func_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public func_args_list(): Func_args_listContext | null {
        return this.getRuleContext(0, Func_args_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_args;
    }
}


export class Func_args_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg(): Func_argContext[];
    public func_arg(i: number): Func_argContext | null;
    public func_arg(i?: number): Func_argContext[] | Func_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_argContext);
        }

        return this.getRuleContext(i, Func_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_args_list;
    }
}


export class Function_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public function_with_argtypes(): Function_with_argtypesContext[];
    public function_with_argtypes(i: number): Function_with_argtypesContext | null;
    public function_with_argtypes(i?: number): Function_with_argtypesContext[] | Function_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Function_with_argtypesContext);
        }

        return this.getRuleContext(i, Function_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_function_with_argtypes_list;
    }
}


export class Function_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_name(): Func_nameContext | null {
        return this.getRuleContext(0, Func_nameContext);
    }
    public func_args(): Func_argsContext | null {
        return this.getRuleContext(0, Func_argsContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_function_with_argtypes;
    }
}


export class Func_args_with_defaultsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public func_args_with_defaults_list(): Func_args_with_defaults_listContext | null {
        return this.getRuleContext(0, Func_args_with_defaults_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_args_with_defaults;
    }
}


export class Func_args_with_defaults_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg_with_default(): Func_arg_with_defaultContext[];
    public func_arg_with_default(i: number): Func_arg_with_defaultContext | null;
    public func_arg_with_default(i?: number): Func_arg_with_defaultContext[] | Func_arg_with_defaultContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_arg_with_defaultContext);
        }

        return this.getRuleContext(i, Func_arg_with_defaultContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_args_with_defaults_list;
    }
}


export class Func_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public arg_class(): Arg_classContext | null {
        return this.getRuleContext(0, Arg_classContext);
    }
    public func_type(): Func_typeContext {
        return this.getRuleContext(0, Func_typeContext)!;
    }
    public param_name(): Param_nameContext | null {
        return this.getRuleContext(0, Param_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_arg;
    }
}


export class Arg_classContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public OUT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OUT_P, 0);
    }
    public INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INOUT, 0);
    }
    public VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARIADIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_arg_class;
    }
}


export class Param_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_function_name(): Type_function_nameContext {
        return this.getRuleContext(0, Type_function_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_param_name;
    }
}


export class Func_returnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext {
        return this.getRuleContext(0, Func_typeContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_return;
    }
}


export class Func_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PERCENT, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SETOF, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_type;
    }
}


export class Func_arg_with_defaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg(): Func_argContext {
        return this.getRuleContext(0, Func_argContext)!;
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_arg_with_default;
    }
}


export class Aggr_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg(): Func_argContext {
        return this.getRuleContext(0, Func_argContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_aggr_arg;
    }
}


export class Aggr_argsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public aggr_args_list(): Aggr_args_listContext[];
    public aggr_args_list(i: number): Aggr_args_listContext | null;
    public aggr_args_list(i?: number): Aggr_args_listContext[] | Aggr_args_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Aggr_args_listContext);
        }

        return this.getRuleContext(i, Aggr_args_listContext);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_aggr_args;
    }
}


export class Aggr_args_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aggr_arg(): Aggr_argContext[];
    public aggr_arg(i: number): Aggr_argContext | null;
    public aggr_arg(i?: number): Aggr_argContext[] | Aggr_argContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Aggr_argContext);
        }

        return this.getRuleContext(i, Aggr_argContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_aggr_args_list;
    }
}


export class Aggregate_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_name(): Func_nameContext {
        return this.getRuleContext(0, Func_nameContext)!;
    }
    public aggr_args(): Aggr_argsContext {
        return this.getRuleContext(0, Aggr_argsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_aggregate_with_argtypes;
    }
}


export class Aggregate_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext[];
    public aggregate_with_argtypes(i: number): Aggregate_with_argtypesContext | null;
    public aggregate_with_argtypes(i?: number): Aggregate_with_argtypesContext[] | Aggregate_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Aggregate_with_argtypesContext);
        }

        return this.getRuleContext(i, Aggregate_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_aggregate_with_argtypes_list;
    }
}


export class Createfunc_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createfunc_opt_item(): Createfunc_opt_itemContext[];
    public createfunc_opt_item(i: number): Createfunc_opt_itemContext | null;
    public createfunc_opt_item(i?: number): Createfunc_opt_itemContext[] | Createfunc_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Createfunc_opt_itemContext);
        }

        return this.getRuleContext(i, Createfunc_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createfunc_opt_list;
    }
}


export class Common_func_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CALLED, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public NULL_P(): antlr.TerminalNode[];
    public NULL_P(i: number): antlr.TerminalNode | null;
    public NULL_P(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.NULL_P);
    	} else {
    		return this.getToken(PostgreSQLParser.NULL_P, i);
    	}
    }
    public INPUT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INPUT_P, 0);
    }
    public RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RETURNS, 0);
    }
    public STRICT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRICT_P, 0);
    }
    public IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMUTABLE, 0);
    }
    public STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STABLE, 0);
    }
    public VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VOLATILE, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTERNAL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SECURITY, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFINER, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INVOKER, 0);
    }
    public LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEAKPROOF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COST, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROWS, 0);
    }
    public SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUPPORT, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public functionsetresetclause(): FunctionsetresetclauseContext | null {
        return this.getRuleContext(0, FunctionsetresetclauseContext);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARALLEL, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_common_func_opt_item;
    }
}


export class Createfunc_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public func_as(): Func_asContext | null {
        return this.getRuleContext(0, Func_asContext);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSFORM, 0);
    }
    public transform_type_list(): Transform_type_listContext | null {
        return this.getRuleContext(0, Transform_type_listContext);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WINDOW, 0);
    }
    public common_func_opt_item(): Common_func_opt_itemContext | null {
        return this.getRuleContext(0, Common_func_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createfunc_opt_item;
    }
}


export class Func_asContext extends antlr.ParserRuleContext {
    public _def?: SconstContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_as;
    }
}


export class Transform_type_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode[];
    public FOR(i: number): antlr.TerminalNode | null;
    public FOR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.FOR);
    	} else {
    		return this.getToken(PostgreSQLParser.FOR, i);
    	}
    }
    public TYPE_P(): antlr.TerminalNode[];
    public TYPE_P(i: number): antlr.TerminalNode | null;
    public TYPE_P(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.TYPE_P);
    	} else {
    		return this.getToken(PostgreSQLParser.TYPE_P, i);
    	}
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transform_type_list;
    }
}


export class Definition_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_definition_;
    }
}


export class Table_func_columnContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public param_name(): Param_nameContext {
        return this.getRuleContext(0, Param_nameContext)!;
    }
    public func_type(): Func_typeContext {
        return this.getRuleContext(0, Func_typeContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_table_func_column;
    }
}


export class Table_func_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_func_column(): Table_func_columnContext[];
    public table_func_column(i: number): Table_func_columnContext | null;
    public table_func_column(i?: number): Table_func_columnContext[] | Table_func_columnContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_func_columnContext);
        }

        return this.getRuleContext(i, Table_func_columnContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_table_func_column_list;
    }
}


export class AlterfunctionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public function_with_argtypes(): Function_with_argtypesContext {
        return this.getRuleContext(0, Function_with_argtypesContext)!;
    }
    public alterfunc_opt_list(): Alterfunc_opt_listContext {
        return this.getRuleContext(0, Alterfunc_opt_listContext)!;
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public restrict_(): Restrict_Context | null {
        return this.getRuleContext(0, Restrict_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterfunctionstmt;
    }
}


export class Alterfunc_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public common_func_opt_item(): Common_func_opt_itemContext[];
    public common_func_opt_item(i: number): Common_func_opt_itemContext | null;
    public common_func_opt_item(i?: number): Common_func_opt_itemContext[] | Common_func_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Common_func_opt_itemContext);
        }

        return this.getRuleContext(i, Common_func_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterfunc_opt_list;
    }
}


export class Restrict_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RESTRICT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.RESTRICT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_restrict_;
    }
}


export class RemovefuncstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes_list(): Function_with_argtypes_listContext {
        return this.getRuleContext(0, Function_with_argtypes_listContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_removefuncstmt;
    }
}


export class RemoveaggrstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public AGGREGATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0)!;
    }
    public aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext {
        return this.getRuleContext(0, Aggregate_with_argtypes_listContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_removeaggrstmt;
    }
}


export class RemoveoperstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPERATOR, 0)!;
    }
    public operator_with_argtypes_list(): Operator_with_argtypes_listContext {
        return this.getRuleContext(0, Operator_with_argtypes_listContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_removeoperstmt;
    }
}


export class Oper_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_oper_argtypes;
    }
}


export class Any_operatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public all_op(): All_opContext {
        return this.getRuleContext(0, All_opContext)!;
    }
    public colid(): ColidContext[];
    public colid(i: number): ColidContext | null;
    public colid(i?: number): ColidContext[] | ColidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColidContext);
        }

        return this.getRuleContext(i, ColidContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.DOT);
    	} else {
    		return this.getToken(PostgreSQLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_any_operator;
    }
}


export class Operator_with_argtypes_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext[];
    public operator_with_argtypes(i: number): Operator_with_argtypesContext | null;
    public operator_with_argtypes(i?: number): Operator_with_argtypesContext[] | Operator_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Operator_with_argtypesContext);
        }

        return this.getRuleContext(i, Operator_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_operator_with_argtypes_list;
    }
}


export class Operator_with_argtypesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public any_operator(): Any_operatorContext {
        return this.getRuleContext(0, Any_operatorContext)!;
    }
    public oper_argtypes(): Oper_argtypesContext {
        return this.getRuleContext(0, Oper_argtypesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_operator_with_argtypes;
    }
}


export class DostmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DO, 0)!;
    }
    public dostmt_opt_list(): Dostmt_opt_listContext {
        return this.getRuleContext(0, Dostmt_opt_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dostmt;
    }
}


export class Dostmt_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dostmt_opt_item(): Dostmt_opt_itemContext[];
    public dostmt_opt_item(i: number): Dostmt_opt_itemContext | null;
    public dostmt_opt_item(i?: number): Dostmt_opt_itemContext[] | Dostmt_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Dostmt_opt_itemContext);
        }

        return this.getRuleContext(i, Dostmt_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dostmt_opt_list;
    }
}


export class Dostmt_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | null {
        return this.getRuleContext(0, Nonreservedword_or_sconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dostmt_opt_item;
    }
}


export class CreatecaststmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CAST, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public cast_context(): Cast_contextContext | null {
        return this.getRuleContext(0, Cast_contextContext);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createcaststmt;
    }
}


export class Cast_contextContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public IMPLICIT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMPLICIT_P, 0);
    }
    public ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASSIGNMENT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_cast_context;
    }
}


export class DropcaststmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CAST, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public if_exists_(): If_exists_Context | null {
        return this.getRuleContext(0, If_exists_Context);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropcaststmt;
    }
}


export class If_exists_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IF_P, 0)!;
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXISTS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_if_exists_;
    }
}


export class CreatetransformstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public TRANSFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TRANSFORM, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public transform_element_list(): Transform_element_listContext {
        return this.getRuleContext(0, Transform_element_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public or_replace_(): Or_replace_Context | null {
        return this.getRuleContext(0, Or_replace_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createtransformstmt;
    }
}


export class Transform_element_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public SQL_P(): antlr.TerminalNode[];
    public SQL_P(i: number): antlr.TerminalNode | null;
    public SQL_P(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.SQL_P);
    	} else {
    		return this.getToken(PostgreSQLParser.SQL_P, i);
    	}
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.WITH);
    	} else {
    		return this.getToken(PostgreSQLParser.WITH, i);
    	}
    }
    public FUNCTION(): antlr.TerminalNode[];
    public FUNCTION(i: number): antlr.TerminalNode | null;
    public FUNCTION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.FUNCTION);
    	} else {
    		return this.getToken(PostgreSQLParser.FUNCTION, i);
    	}
    }
    public function_with_argtypes(): Function_with_argtypesContext[];
    public function_with_argtypes(i: number): Function_with_argtypesContext | null;
    public function_with_argtypes(i?: number): Function_with_argtypesContext[] | Function_with_argtypesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Function_with_argtypesContext);
        }

        return this.getRuleContext(i, Function_with_argtypesContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transform_element_list;
    }
}


export class DroptransformstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public TRANSFORM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TRANSFORM, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public LANGUAGE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public if_exists_(): If_exists_Context | null {
        return this.getRuleContext(0, If_exists_Context);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_droptransformstmt;
    }
}


export class ReindexstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REINDEX(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REINDEX, 0)!;
    }
    public reindex_target_relation(): Reindex_target_relationContext | null {
        return this.getRuleContext(0, Reindex_target_relationContext);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public reindex_option_list(): Reindex_option_listContext | null {
        return this.getRuleContext(0, Reindex_option_listContext);
    }
    public concurrently_(): Concurrently_Context | null {
        return this.getRuleContext(0, Concurrently_Context);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public reindex_target_all(): Reindex_target_allContext | null {
        return this.getRuleContext(0, Reindex_target_allContext);
    }
    public single_name_(): Single_name_Context | null {
        return this.getRuleContext(0, Single_name_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reindexstmt;
    }
}


export class Reindex_target_relationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reindex_target_relation;
    }
}


export class Reindex_target_allContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATABASE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reindex_target_all;
    }
}


export class Reindex_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public utility_option_list(): Utility_option_listContext {
        return this.getRuleContext(0, Utility_option_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reindex_option_list;
    }
}


export class AltertblspcstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public TABLESPACE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public reloptions(): ReloptionsContext {
        return this.getRuleContext(0, ReloptionsContext)!;
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altertblspcstmt;
    }
}


export class RenamestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public CONVERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATABASE, 0);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public DATA_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATA_P, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRAPPER, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public GROUP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUP_P, 0);
    }
    public roleid(): RoleidContext[];
    public roleid(i: number): RoleidContext | null;
    public roleid(i?: number): RoleidContext[] | RoleidContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleidContext);
        }

        return this.getRuleContext(i, RoleidContext);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public procedural_(): Procedural_Context | null {
        return this.getRuleContext(0, Procedural_Context);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLASS, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FAMILY, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.POLICY, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERVER, 0);
    }
    public SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public column_(): Column_Context | null {
        return this.getRuleContext(0, Column_Context);
    }
    public RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RULE, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EVENT, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public TEXT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEXT_P, 0);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARSER, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPLATE, 0);
    }
    public CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATTRIBUTE, 0);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_renamestmt;
    }
}


export class Column_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COLUMN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_column_;
    }
}


export class Set_data_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public DATA_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATA_P, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_set_data_;
    }
}


export class AlterobjectdependsstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public DEPENDS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DEPENDS, 0)!;
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.ON);
    	} else {
    		return this.getToken(PostgreSQLParser.ON, i);
    	}
    }
    public EXTENSION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXTENSION, 0)!;
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public no_(): No_Context | null {
        return this.getRuleContext(0, No_Context);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterobjectdependsstmt;
    }
}


export class No_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.NO, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_no_;
    }
}


export class AlterobjectschemastmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public SCHEMA(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SCHEMA, 0)!;
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public CONVERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTENSION, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLASS, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FAMILY, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public TEXT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEXT_P, 0);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARSER, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPLATE, 0);
    }
    public CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterobjectschemastmt;
    }
}


export class AlteroperatorstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public OPERATOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPERATOR, 0)!;
    }
    public operator_with_argtypes(): Operator_with_argtypesContext {
        return this.getRuleContext(0, Operator_with_argtypesContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public operator_def_list(): Operator_def_listContext {
        return this.getRuleContext(0, Operator_def_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alteroperatorstmt;
    }
}


export class Operator_def_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public operator_def_elem(): Operator_def_elemContext[];
    public operator_def_elem(i: number): Operator_def_elemContext | null;
    public operator_def_elem(i?: number): Operator_def_elemContext[] | Operator_def_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Operator_def_elemContext);
        }

        return this.getRuleContext(i, Operator_def_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_operator_def_list;
    }
}


export class Operator_def_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EQUAL, 0)!;
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NONE, 0);
    }
    public operator_def_arg(): Operator_def_argContext | null {
        return this.getRuleContext(0, Operator_def_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_operator_def_elem;
    }
}


export class Operator_def_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_type(): Func_typeContext | null {
        return this.getRuleContext(0, Func_typeContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_operator_def_arg;
    }
}


export class AltertypestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public TYPE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TYPE_P, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public operator_def_list(): Operator_def_listContext {
        return this.getRuleContext(0, Operator_def_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altertypestmt;
    }
}


export class AlterownerstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public aggregate_with_argtypes(): Aggregate_with_argtypesContext | null {
        return this.getRuleContext(0, Aggregate_with_argtypesContext);
    }
    public OWNER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OWNER, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public CONVERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATABASE, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public function_with_argtypes(): Function_with_argtypesContext | null {
        return this.getRuleContext(0, Function_with_argtypesContext);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public procedural_(): Procedural_Context | null {
        return this.getRuleContext(0, Procedural_Context);
    }
    public LARGE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LARGE_P, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public operator_with_argtypes(): Operator_with_argtypesContext | null {
        return this.getRuleContext(0, Operator_with_argtypesContext);
    }
    public CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLASS, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FAMILY, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public TEXT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEXT_P, 0);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0);
    }
    public CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public DATA_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATA_P, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRAPPER, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERVER, 0);
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EVENT, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0);
    }
    public SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterownerstmt;
    }
}


export class CreatepublicationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public publication_for_tables_(): Publication_for_tables_Context | null {
        return this.getRuleContext(0, Publication_for_tables_Context);
    }
    public definition_(): Definition_Context | null {
        return this.getRuleContext(0, Definition_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createpublicationstmt;
    }
}


export class Publication_for_tables_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public publication_for_tables(): Publication_for_tablesContext {
        return this.getRuleContext(0, Publication_for_tablesContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_publication_for_tables_;
    }
}


export class Publication_for_tablesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public relation_expr_list(): Relation_expr_listContext | null {
        return this.getRuleContext(0, Relation_expr_listContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_publication_for_tables;
    }
}


export class AlterpublicationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public relation_expr_list(): Relation_expr_listContext | null {
        return this.getRuleContext(0, Relation_expr_listContext);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterpublicationstmt;
    }
}


export class CreatesubscriptionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public CONNECTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CONNECTION, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public PUBLICATION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0)!;
    }
    public publication_name_list(): Publication_name_listContext {
        return this.getRuleContext(0, Publication_name_listContext)!;
    }
    public definition_(): Definition_Context | null {
        return this.getRuleContext(0, Definition_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createsubscriptionstmt;
    }
}


export class Publication_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public publication_name_item(): Publication_name_itemContext[];
    public publication_name_item(i: number): Publication_name_itemContext | null;
    public publication_name_item(i?: number): Publication_name_itemContext[] | Publication_name_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Publication_name_itemContext);
        }

        return this.getRuleContext(i, Publication_name_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_publication_name_list;
    }
}


export class Publication_name_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_publication_name_item;
    }
}


export class AltersubscriptionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public definition(): DefinitionContext | null {
        return this.getRuleContext(0, DefinitionContext);
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONNECTION, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFRESH, 0);
    }
    public PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0);
    }
    public definition_(): Definition_Context | null {
        return this.getRuleContext(0, Definition_Context);
    }
    public publication_name_list(): Publication_name_listContext | null {
        return this.getRuleContext(0, Publication_name_listContext);
    }
    public ENABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENABLE_P, 0);
    }
    public DISABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISABLE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altersubscriptionstmt;
    }
}


export class DropsubscriptionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public SUBSCRIPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropsubscriptionstmt;
    }
}


export class RulestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public RULE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.RULE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public event(): EventContext {
        return this.getRuleContext(0, EventContext)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DO, 0)!;
    }
    public ruleactionlist(): RuleactionlistContext {
        return this.getRuleContext(0, RuleactionlistContext)!;
    }
    public or_replace_(): Or_replace_Context | null {
        return this.getRuleContext(0, Or_replace_Context);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public instead_(): Instead_Context | null {
        return this.getRuleContext(0, Instead_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rulestmt;
    }
}


export class RuleactionlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTHING, 0);
    }
    public ruleactionstmt(): RuleactionstmtContext | null {
        return this.getRuleContext(0, RuleactionstmtContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public ruleactionmulti(): RuleactionmultiContext | null {
        return this.getRuleContext(0, RuleactionmultiContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_ruleactionlist;
    }
}


export class RuleactionmultiContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ruleactionstmtOrEmpty(): RuleactionstmtOrEmptyContext[];
    public ruleactionstmtOrEmpty(i: number): RuleactionstmtOrEmptyContext | null;
    public ruleactionstmtOrEmpty(i?: number): RuleactionstmtOrEmptyContext[] | RuleactionstmtOrEmptyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RuleactionstmtOrEmptyContext);
        }

        return this.getRuleContext(i, RuleactionstmtOrEmptyContext);
    }
    public SEMI(): antlr.TerminalNode[];
    public SEMI(i: number): antlr.TerminalNode | null;
    public SEMI(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.SEMI);
    	} else {
    		return this.getToken(PostgreSQLParser.SEMI, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_ruleactionmulti;
    }
}


export class RuleactionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public notifystmt(): NotifystmtContext | null {
        return this.getRuleContext(0, NotifystmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_ruleactionstmt;
    }
}


export class RuleactionstmtOrEmptyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ruleactionstmt(): RuleactionstmtContext {
        return this.getRuleContext(0, RuleactionstmtContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_ruleactionstmtOrEmpty;
    }
}


export class EventContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SELECT, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public DELETE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELETE_P, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSERT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_event;
    }
}


export class Instead_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSTEAD, 0);
    }
    public ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALSO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_instead_;
    }
}


export class NotifystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOTIFY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.NOTIFY, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public notify_payload(): Notify_payloadContext | null {
        return this.getRuleContext(0, Notify_payloadContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_notifystmt;
    }
}


export class Notify_payloadContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COMMA, 0)!;
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_notify_payload;
    }
}


export class ListenstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LISTEN, 0)!;
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_listenstmt;
    }
}


export class UnlistenstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNLISTEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UNLISTEN, 0)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_unlistenstmt;
    }
}


export class TransactionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABORT_P, 0);
    }
    public transaction_(): Transaction_Context | null {
        return this.getRuleContext(0, Transaction_Context);
    }
    public transaction_chain_(): Transaction_chain_Context | null {
        return this.getRuleContext(0, Transaction_chain_Context);
    }
    public BEGIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BEGIN_P, 0);
    }
    public transaction_mode_list_or_empty(): Transaction_mode_list_or_emptyContext | null {
        return this.getRuleContext(0, Transaction_mode_list_or_emptyContext);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.START, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMIT, 0);
    }
    public END_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.END_P, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLLBACK, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SAVEPOINT, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RELEASE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PREPARE, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PREPARED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transactionstmt;
    }
}


export class Transaction_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WORK, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transaction_;
    }
}


export class Transaction_mode_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ISOLATION, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEVEL, 0);
    }
    public iso_level(): Iso_levelContext | null {
        return this.getRuleContext(0, Iso_levelContext);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.READ, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ONLY, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRITE, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transaction_mode_item;
    }
}


export class Transaction_mode_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transaction_mode_item(): Transaction_mode_itemContext[];
    public transaction_mode_item(i: number): Transaction_mode_itemContext | null;
    public transaction_mode_item(i?: number): Transaction_mode_itemContext[] | Transaction_mode_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Transaction_mode_itemContext);
        }

        return this.getRuleContext(i, Transaction_mode_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transaction_mode_list;
    }
}


export class Transaction_mode_list_or_emptyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public transaction_mode_list(): Transaction_mode_listContext {
        return this.getRuleContext(0, Transaction_mode_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transaction_mode_list_or_empty;
    }
}


export class Transaction_chain_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AND, 0)!;
    }
    public CHAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CHAIN, 0)!;
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_transaction_chain_;
    }
}


export class ViewstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RECURSIVE, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public columnlist(): ColumnlistContext | null {
        return this.getRuleContext(0, ColumnlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLACE, 0);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public check_option_(): Check_option_Context | null {
        return this.getRuleContext(0, Check_option_Context);
    }
    public column_list_(): Column_list_Context | null {
        return this.getRuleContext(0, Column_list_Context);
    }
    public reloptions_(): Reloptions_Context | null {
        return this.getRuleContext(0, Reloptions_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_viewstmt;
    }
}


export class Check_option_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CHECK, 0)!;
    }
    public OPTION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPTION, 0)!;
    }
    public CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADED, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_check_option_;
    }
}


export class LoadstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOAD(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LOAD, 0)!;
    }
    public file_name(): File_nameContext {
        return this.getRuleContext(0, File_nameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_loadstmt;
    }
}


export class CreatedbstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATABASE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public createdb_opt_list(): Createdb_opt_listContext | null {
        return this.getRuleContext(0, Createdb_opt_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createdbstmt;
    }
}


export class Createdb_opt_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createdb_opt_items(): Createdb_opt_itemsContext {
        return this.getRuleContext(0, Createdb_opt_itemsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createdb_opt_list;
    }
}


export class Createdb_opt_itemsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createdb_opt_item(): Createdb_opt_itemContext[];
    public createdb_opt_item(i: number): Createdb_opt_itemContext | null;
    public createdb_opt_item(i?: number): Createdb_opt_itemContext[] | Createdb_opt_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Createdb_opt_itemContext);
        }

        return this.getRuleContext(i, Createdb_opt_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createdb_opt_items;
    }
}


export class Createdb_opt_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createdb_opt_name(): Createdb_opt_nameContext {
        return this.getRuleContext(0, Createdb_opt_nameContext)!;
    }
    public signediconst(): SignediconstContext | null {
        return this.getRuleContext(0, SignediconstContext);
    }
    public boolean_or_string_(): Boolean_or_string_Context | null {
        return this.getRuleContext(0, Boolean_or_string_Context);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public equal_(): Equal_Context | null {
        return this.getRuleContext(0, Equal_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createdb_opt_item;
    }
}


export class Createdb_opt_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONNECTION, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIMIT, 0);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCODING, 0);
    }
    public LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCATION, 0);
    }
    public OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNER, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPLATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createdb_opt_name;
    }
}


export class Equal_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EQUAL, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_equal_;
    }
}


export class AlterdatabasestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATABASE, 0)!;
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public createdb_opt_list(): Createdb_opt_listContext | null {
        return this.getRuleContext(0, Createdb_opt_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterdatabasestmt;
    }
}


export class AlterdatabasesetstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATABASE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public setresetclause(): SetresetclauseContext {
        return this.getRuleContext(0, SetresetclauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterdatabasesetstmt;
    }
}


export class DropdbstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DROP, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DATABASE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public drop_option_list(): Drop_option_listContext | null {
        return this.getRuleContext(0, Drop_option_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public with_(): With_Context | null {
        return this.getRuleContext(0, With_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_dropdbstmt;
    }
}


export class Drop_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public drop_option(): Drop_optionContext[];
    public drop_option(i: number): Drop_optionContext | null;
    public drop_option(i?: number): Drop_optionContext[] | Drop_optionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Drop_optionContext);
        }

        return this.getRuleContext(i, Drop_optionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_drop_option_list;
    }
}


export class Drop_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FORCE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FORCE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_drop_option;
    }
}


export class AltercollationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public COLLATION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COLLATION, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public REFRESH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REFRESH, 0)!;
    }
    public VERSION_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VERSION_P, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altercollationstmt;
    }
}


export class AltersystemstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public SYSTEM_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SYSTEM_P, 0)!;
    }
    public generic_set(): Generic_setContext {
        return this.getRuleContext(0, Generic_setContext)!;
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altersystemstmt;
    }
}


export class CreatedomainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public DOMAIN_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public colquallist(): ColquallistContext {
        return this.getRuleContext(0, ColquallistContext)!;
    }
    public as_(): As_Context | null {
        return this.getRuleContext(0, As_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createdomainstmt;
    }
}


export class AlterdomainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public DOMAIN_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public alter_column_default(): Alter_column_defaultContext | null {
        return this.getRuleContext(0, Alter_column_defaultContext);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public tableconstraint(): TableconstraintContext | null {
        return this.getRuleContext(0, TableconstraintContext);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALIDATE, 0);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public drop_behavior_(): Drop_behavior_Context | null {
        return this.getRuleContext(0, Drop_behavior_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alterdomainstmt;
    }
}


export class As_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_as_;
    }
}


export class AltertsdictionarystmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALTER, 0)!;
    }
    public TEXT_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TEXT_P, 0)!;
    }
    public SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SEARCH, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0)!;
    }
    public any_name(): Any_nameContext {
        return this.getRuleContext(0, Any_nameContext)!;
    }
    public definition(): DefinitionContext {
        return this.getRuleContext(0, DefinitionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altertsdictionarystmt;
    }
}


export class AltertsconfigurationstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode[];
    public ALTER(i: number): antlr.TerminalNode | null;
    public ALTER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.ALTER);
    	} else {
    		return this.getToken(PostgreSQLParser.ALTER, i);
    	}
    }
    public TEXT_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TEXT_P, 0)!;
    }
    public SEARCH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SEARCH, 0)!;
    }
    public CONFIGURATION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0)!;
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public MAPPING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MAPPING, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public any_with(): Any_withContext | null {
        return this.getRuleContext(0, Any_withContext);
    }
    public any_name_list_(): Any_name_list_Context | null {
        return this.getRuleContext(0, Any_name_list_Context);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLACE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_altertsconfigurationstmt;
    }
}


export class Any_withContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_any_with;
    }
}


export class CreateconversionstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CREATE, 0)!;
    }
    public CONVERSION_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CONVERSION_P, 0)!;
    }
    public any_name(): Any_nameContext[];
    public any_name(i: number): Any_nameContext | null;
    public any_name(i?: number): Any_nameContext[] | Any_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Any_nameContext);
        }

        return this.getRuleContext(i, Any_nameContext);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public sconst(): SconstContext[];
    public sconst(i: number): SconstContext | null;
    public sconst(i?: number): SconstContext[] | SconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SconstContext);
        }

        return this.getRuleContext(i, SconstContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TO, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public default_(): Default_Context | null {
        return this.getRuleContext(0, Default_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_createconversionstmt;
    }
}


export class ClusterstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLUSTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLUSTER, 0)!;
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public verbose_(): Verbose_Context | null {
        return this.getRuleContext(0, Verbose_Context);
    }
    public cluster_index_specification(): Cluster_index_specificationContext | null {
        return this.getRuleContext(0, Cluster_index_specificationContext);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_clusterstmt;
    }
}


export class Cluster_index_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_cluster_index_specification;
    }
}


export class VacuumstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VACUUM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VACUUM, 0)!;
    }
    public full_(): Full_Context | null {
        return this.getRuleContext(0, Full_Context);
    }
    public freeze_(): Freeze_Context | null {
        return this.getRuleContext(0, Freeze_Context);
    }
    public verbose_(): Verbose_Context | null {
        return this.getRuleContext(0, Verbose_Context);
    }
    public analyze_(): Analyze_Context | null {
        return this.getRuleContext(0, Analyze_Context);
    }
    public vacuum_relation_list_(): Vacuum_relation_list_Context | null {
        return this.getRuleContext(0, Vacuum_relation_list_Context);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public vac_analyze_option_list(): Vac_analyze_option_listContext | null {
        return this.getRuleContext(0, Vac_analyze_option_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vacuumstmt;
    }
}


export class AnalyzestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyze_keyword(): Analyze_keywordContext {
        return this.getRuleContext(0, Analyze_keywordContext)!;
    }
    public verbose_(): Verbose_Context | null {
        return this.getRuleContext(0, Verbose_Context);
    }
    public vacuum_relation_list_(): Vacuum_relation_list_Context | null {
        return this.getRuleContext(0, Vacuum_relation_list_Context);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public vac_analyze_option_list(): Vac_analyze_option_listContext | null {
        return this.getRuleContext(0, Vac_analyze_option_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_analyzestmt;
    }
}


export class Utility_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public utility_option_elem(): Utility_option_elemContext[];
    public utility_option_elem(i: number): Utility_option_elemContext | null;
    public utility_option_elem(i?: number): Utility_option_elemContext[] | Utility_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Utility_option_elemContext);
        }

        return this.getRuleContext(i, Utility_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_utility_option_list;
    }
}


export class Vac_analyze_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vac_analyze_option_elem(): Vac_analyze_option_elemContext[];
    public vac_analyze_option_elem(i: number): Vac_analyze_option_elemContext | null;
    public vac_analyze_option_elem(i?: number): Vac_analyze_option_elemContext[] | Vac_analyze_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Vac_analyze_option_elemContext);
        }

        return this.getRuleContext(i, Vac_analyze_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vac_analyze_option_list;
    }
}


export class Analyze_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANALYZE, 0);
    }
    public ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANALYSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_analyze_keyword;
    }
}


export class Utility_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public utility_option_name(): Utility_option_nameContext {
        return this.getRuleContext(0, Utility_option_nameContext)!;
    }
    public utility_option_arg(): Utility_option_argContext | null {
        return this.getRuleContext(0, Utility_option_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_utility_option_elem;
    }
}


export class Utility_option_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public FORMAT_LA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORMAT_LA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_utility_option_name;
    }
}


export class Utility_option_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean_or_string_(): Boolean_or_string_Context | null {
        return this.getRuleContext(0, Boolean_or_string_Context);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_utility_option_arg;
    }
}


export class Vac_analyze_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vac_analyze_option_name(): Vac_analyze_option_nameContext {
        return this.getRuleContext(0, Vac_analyze_option_nameContext)!;
    }
    public vac_analyze_option_arg(): Vac_analyze_option_argContext | null {
        return this.getRuleContext(0, Vac_analyze_option_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vac_analyze_option_elem;
    }
}


export class Vac_analyze_option_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vac_analyze_option_name;
    }
}


export class Vac_analyze_option_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean_or_string_(): Boolean_or_string_Context | null {
        return this.getRuleContext(0, Boolean_or_string_Context);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vac_analyze_option_arg;
    }
}


export class Analyze_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public analyze_keyword(): Analyze_keywordContext {
        return this.getRuleContext(0, Analyze_keywordContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_analyze_;
    }
}


export class Verbose_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VERBOSE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VERBOSE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_verbose_;
    }
}


export class Full_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FULL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FULL, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_full_;
    }
}


export class Freeze_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FREEZE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FREEZE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_freeze_;
    }
}


export class Name_list_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public name_list(): Name_listContext {
        return this.getRuleContext(0, Name_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_name_list_;
    }
}


export class Vacuum_relationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public name_list_(): Name_list_Context | null {
        return this.getRuleContext(0, Name_list_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vacuum_relation;
    }
}


export class Vacuum_relation_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vacuum_relation(): Vacuum_relationContext[];
    public vacuum_relation(i: number): Vacuum_relationContext | null;
    public vacuum_relation(i?: number): Vacuum_relationContext[] | Vacuum_relationContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Vacuum_relationContext);
        }

        return this.getRuleContext(i, Vacuum_relationContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vacuum_relation_list;
    }
}


export class Vacuum_relation_list_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public vacuum_relation_list(): Vacuum_relation_listContext {
        return this.getRuleContext(0, Vacuum_relation_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_vacuum_relation_list_;
    }
}


export class ExplainstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXPLAIN, 0)!;
    }
    public explainablestmt(): ExplainablestmtContext {
        return this.getRuleContext(0, ExplainablestmtContext)!;
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public verbose_(): Verbose_Context | null {
        return this.getRuleContext(0, Verbose_Context);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VERBOSE, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public explain_option_list(): Explain_option_listContext | null {
        return this.getRuleContext(0, Explain_option_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_explainstmt;
    }
}


export class ExplainablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public declarecursorstmt(): DeclarecursorstmtContext | null {
        return this.getRuleContext(0, DeclarecursorstmtContext);
    }
    public createasstmt(): CreateasstmtContext | null {
        return this.getRuleContext(0, CreateasstmtContext);
    }
    public creatematviewstmt(): CreatematviewstmtContext | null {
        return this.getRuleContext(0, CreatematviewstmtContext);
    }
    public refreshmatviewstmt(): RefreshmatviewstmtContext | null {
        return this.getRuleContext(0, RefreshmatviewstmtContext);
    }
    public executestmt(): ExecutestmtContext | null {
        return this.getRuleContext(0, ExecutestmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_explainablestmt;
    }
}


export class Explain_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explain_option_elem(): Explain_option_elemContext[];
    public explain_option_elem(i: number): Explain_option_elemContext | null;
    public explain_option_elem(i?: number): Explain_option_elemContext[] | Explain_option_elemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Explain_option_elemContext);
        }

        return this.getRuleContext(i, Explain_option_elemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_explain_option_list;
    }
}


export class Explain_option_elemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explain_option_name(): Explain_option_nameContext {
        return this.getRuleContext(0, Explain_option_nameContext)!;
    }
    public explain_option_arg(): Explain_option_argContext | null {
        return this.getRuleContext(0, Explain_option_argContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_explain_option_elem;
    }
}


export class Explain_option_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public analyze_keyword(): Analyze_keywordContext | null {
        return this.getRuleContext(0, Analyze_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_explain_option_name;
    }
}


export class Explain_option_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public boolean_or_string_(): Boolean_or_string_Context | null {
        return this.getRuleContext(0, Boolean_or_string_Context);
    }
    public numericonly(): NumericonlyContext | null {
        return this.getRuleContext(0, NumericonlyContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_explain_option_arg;
    }
}


export class PreparestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PREPARE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PREPARE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public preparablestmt(): PreparablestmtContext {
        return this.getRuleContext(0, PreparablestmtContext)!;
    }
    public prep_type_clause(): Prep_type_clauseContext | null {
        return this.getRuleContext(0, Prep_type_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_preparestmt;
    }
}


export class Prep_type_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public type_list(): Type_listContext {
        return this.getRuleContext(0, Type_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_prep_type_clause;
    }
}


export class PreparablestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public insertstmt(): InsertstmtContext | null {
        return this.getRuleContext(0, InsertstmtContext);
    }
    public updatestmt(): UpdatestmtContext | null {
        return this.getRuleContext(0, UpdatestmtContext);
    }
    public deletestmt(): DeletestmtContext | null {
        return this.getRuleContext(0, DeletestmtContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_preparablestmt;
    }
}


export class ExecutestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXECUTE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXECUTE, 0)!;
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public execute_param_clause(): Execute_param_clauseContext | null {
        return this.getRuleContext(0, Execute_param_clauseContext);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CREATE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public create_as_target(): Create_as_targetContext | null {
        return this.getRuleContext(0, Create_as_targetContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public opttemp(): OpttempContext | null {
        return this.getRuleContext(0, OpttempContext);
    }
    public with_data_(): With_data_Context | null {
        return this.getRuleContext(0, With_data_Context);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_executestmt;
    }
}


export class Execute_param_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_execute_param_clause;
    }
}


export class DeallocatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEALLOCATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DEALLOCATE, 0)!;
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PREPARE, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_deallocatestmt;
    }
}


export class InsertstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INSERT, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INTO, 0)!;
    }
    public insert_target(): Insert_targetContext {
        return this.getRuleContext(0, Insert_targetContext)!;
    }
    public insert_rest(): Insert_restContext {
        return this.getRuleContext(0, Insert_restContext)!;
    }
    public with_clause_(): With_clause_Context | null {
        return this.getRuleContext(0, With_clause_Context);
    }
    public on_conflict_(): On_conflict_Context | null {
        return this.getRuleContext(0, On_conflict_Context);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_insertstmt;
    }
}


export class Insert_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_insert_target;
    }
}


export class Insert_restContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectstmt(): SelectstmtContext | null {
        return this.getRuleContext(0, SelectstmtContext);
    }
    public OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERRIDING, 0);
    }
    public override_kind(): Override_kindContext | null {
        return this.getRuleContext(0, Override_kindContext);
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public insert_column_list(): Insert_column_listContext | null {
        return this.getRuleContext(0, Insert_column_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_insert_rest;
    }
}


export class Override_kindContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public SYSTEM_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_override_kind;
    }
}


export class Insert_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public insert_column_item(): Insert_column_itemContext[];
    public insert_column_item(i: number): Insert_column_itemContext | null;
    public insert_column_item(i?: number): Insert_column_itemContext[] | Insert_column_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Insert_column_itemContext);
        }

        return this.getRuleContext(i, Insert_column_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_insert_column_list;
    }
}


export class Insert_column_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_indirection(): Opt_indirectionContext {
        return this.getRuleContext(0, Opt_indirectionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_insert_column_item;
    }
}


export class On_conflict_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public CONFLICT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CONFLICT, 0)!;
    }
    public DO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DO, 0)!;
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public set_clause_list(): Set_clause_listContext | null {
        return this.getRuleContext(0, Set_clause_listContext);
    }
    public NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTHING, 0);
    }
    public conf_expr_(): Conf_expr_Context | null {
        return this.getRuleContext(0, Conf_expr_Context);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_on_conflict_;
    }
}


export class Conf_expr_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public index_params(): Index_paramsContext | null {
        return this.getRuleContext(0, Index_paramsContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_conf_expr_;
    }
}


export class Returning_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.RETURNING, 0)!;
    }
    public target_list(): Target_listContext {
        return this.getRuleContext(0, Target_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_returning_clause;
    }
}


export class MergestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MERGE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MERGE, 0)!;
    }
    public qualified_name(): Qualified_nameContext[];
    public qualified_name(i: number): Qualified_nameContext | null;
    public qualified_name(i?: number): Qualified_nameContext[] | Qualified_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qualified_nameContext);
        }

        return this.getRuleContext(i, Qualified_nameContext);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public merge_insert_clause(): Merge_insert_clauseContext | null {
        return this.getRuleContext(0, Merge_insert_clauseContext);
    }
    public merge_update_clause(): Merge_update_clauseContext | null {
        return this.getRuleContext(0, Merge_update_clauseContext);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTO, 0);
    }
    public alias_clause(): Alias_clauseContext[];
    public alias_clause(i: number): Alias_clauseContext | null;
    public alias_clause(i?: number): Alias_clauseContext[] | Alias_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Alias_clauseContext);
        }

        return this.getRuleContext(i, Alias_clauseContext);
    }
    public merge_delete_clause(): Merge_delete_clauseContext | null {
        return this.getRuleContext(0, Merge_delete_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_mergestmt;
    }
}


export class Merge_insert_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHEN, 0)!;
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.NOT, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MATCHED, 0)!;
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INSERT, 0)!;
    }
    public values_clause(): Values_clauseContext {
        return this.getRuleContext(0, Values_clauseContext)!;
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AND, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.THEN, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public insert_column_list(): Insert_column_listContext | null {
        return this.getRuleContext(0, Insert_column_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_merge_insert_clause;
    }
}


export class Merge_update_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHEN, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MATCHED, 0)!;
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UPDATE, 0)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public set_clause_list(): Set_clause_listContext {
        return this.getRuleContext(0, Set_clause_listContext)!;
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AND, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.THEN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_merge_update_clause;
    }
}


export class Merge_delete_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHEN, 0)!;
    }
    public MATCHED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MATCHED, 0)!;
    }
    public DELETE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DELETE_P, 0)!;
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.THEN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_merge_delete_clause;
    }
}


export class DeletestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DELETE_P, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        return this.getRuleContext(0, Relation_expr_opt_aliasContext)!;
    }
    public with_clause_(): With_clause_Context | null {
        return this.getRuleContext(0, With_clause_Context);
    }
    public using_clause(): Using_clauseContext | null {
        return this.getRuleContext(0, Using_clauseContext);
    }
    public where_or_current_clause(): Where_or_current_clauseContext | null {
        return this.getRuleContext(0, Where_or_current_clauseContext);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_deletestmt;
    }
}


export class Using_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.USING, 0)!;
    }
    public from_list(): From_listContext {
        return this.getRuleContext(0, From_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_using_clause;
    }
}


export class LockstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCK_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.LOCK_P, 0)!;
    }
    public relation_expr_list(): Relation_expr_listContext {
        return this.getRuleContext(0, Relation_expr_listContext)!;
    }
    public table_(): Table_Context | null {
        return this.getRuleContext(0, Table_Context);
    }
    public lock_(): Lock_Context | null {
        return this.getRuleContext(0, Lock_Context);
    }
    public nowait_(): Nowait_Context | null {
        return this.getRuleContext(0, Nowait_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_lockstmt;
    }
}


export class Lock_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IN_P, 0)!;
    }
    public lock_type(): Lock_typeContext {
        return this.getRuleContext(0, Lock_typeContext)!;
    }
    public MODE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MODE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_lock_;
    }
}


export class Lock_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ACCESS, 0);
    }
    public SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SHARE, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUSIVE, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_lock_type;
    }
}


export class Nowait_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOWAIT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.NOWAIT, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_nowait_;
    }
}


export class Nowait_or_skip_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOWAIT, 0);
    }
    public SKIP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SKIP_P, 0);
    }
    public LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCKED, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_nowait_or_skip_;
    }
}


export class UpdatestmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UPDATE, 0)!;
    }
    public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
        return this.getRuleContext(0, Relation_expr_opt_aliasContext)!;
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SET, 0)!;
    }
    public set_clause_list(): Set_clause_listContext {
        return this.getRuleContext(0, Set_clause_listContext)!;
    }
    public with_clause_(): With_clause_Context | null {
        return this.getRuleContext(0, With_clause_Context);
    }
    public from_clause(): From_clauseContext | null {
        return this.getRuleContext(0, From_clauseContext);
    }
    public where_or_current_clause(): Where_or_current_clauseContext | null {
        return this.getRuleContext(0, Where_or_current_clauseContext);
    }
    public returning_clause(): Returning_clauseContext | null {
        return this.getRuleContext(0, Returning_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_updatestmt;
    }
}


export class Set_clause_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_clause(): Set_clauseContext[];
    public set_clause(i: number): Set_clauseContext | null;
    public set_clause(i?: number): Set_clauseContext[] | Set_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_clauseContext);
        }

        return this.getRuleContext(i, Set_clauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_set_clause_list;
    }
}


export class Set_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target(): Set_targetContext | null {
        return this.getRuleContext(0, Set_targetContext);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EQUAL, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public set_target_list(): Set_target_listContext | null {
        return this.getRuleContext(0, Set_target_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_set_clause;
    }
}


export class Set_targetContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public opt_indirection(): Opt_indirectionContext {
        return this.getRuleContext(0, Opt_indirectionContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_set_target;
    }
}


export class Set_target_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public set_target(): Set_targetContext[];
    public set_target(i: number): Set_targetContext | null;
    public set_target(i?: number): Set_targetContext[] | Set_targetContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Set_targetContext);
        }

        return this.getRuleContext(i, Set_targetContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_set_target_list;
    }
}


export class DeclarecursorstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECLARE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DECLARE, 0)!;
    }
    public cursor_name(): Cursor_nameContext {
        return this.getRuleContext(0, Cursor_nameContext)!;
    }
    public cursor_options(): Cursor_optionsContext {
        return this.getRuleContext(0, Cursor_optionsContext)!;
    }
    public CURSOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CURSOR, 0)!;
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public selectstmt(): SelectstmtContext {
        return this.getRuleContext(0, SelectstmtContext)!;
    }
    public hold_(): Hold_Context | null {
        return this.getRuleContext(0, Hold_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_declarecursorstmt;
    }
}


export class Cursor_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_cursor_name;
    }
}


export class Cursor_optionsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NO(): antlr.TerminalNode[];
    public NO(i: number): antlr.TerminalNode | null;
    public NO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.NO);
    	} else {
    		return this.getToken(PostgreSQLParser.NO, i);
    	}
    }
    public SCROLL(): antlr.TerminalNode[];
    public SCROLL(i: number): antlr.TerminalNode | null;
    public SCROLL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.SCROLL);
    	} else {
    		return this.getToken(PostgreSQLParser.SCROLL, i);
    	}
    }
    public BINARY(): antlr.TerminalNode[];
    public BINARY(i: number): antlr.TerminalNode | null;
    public BINARY(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.BINARY);
    	} else {
    		return this.getToken(PostgreSQLParser.BINARY, i);
    	}
    }
    public INSENSITIVE(): antlr.TerminalNode[];
    public INSENSITIVE(i: number): antlr.TerminalNode | null;
    public INSENSITIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.INSENSITIVE);
    	} else {
    		return this.getToken(PostgreSQLParser.INSENSITIVE, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_cursor_options;
    }
}


export class Hold_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public HOLD(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.HOLD, 0)!;
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_hold_;
    }
}


export class SelectstmtContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_selectstmt;
    }
}


export class Select_with_parensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_with_parens;
    }
}


export class Select_no_parensContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_clause(): Select_clauseContext {
        return this.getRuleContext(0, Select_clauseContext)!;
    }
    public sort_clause_(): Sort_clause_Context | null {
        return this.getRuleContext(0, Sort_clause_Context);
    }
    public for_locking_clause(): For_locking_clauseContext | null {
        return this.getRuleContext(0, For_locking_clauseContext);
    }
    public select_limit(): Select_limitContext | null {
        return this.getRuleContext(0, Select_limitContext);
    }
    public select_limit_(): Select_limit_Context | null {
        return this.getRuleContext(0, Select_limit_Context);
    }
    public for_locking_clause_(): For_locking_clause_Context | null {
        return this.getRuleContext(0, For_locking_clause_Context);
    }
    public with_clause(): With_clauseContext | null {
        return this.getRuleContext(0, With_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_no_parens;
    }
}


export class Select_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_select_intersect(): Simple_select_intersectContext[];
    public simple_select_intersect(i: number): Simple_select_intersectContext | null;
    public simple_select_intersect(i?: number): Simple_select_intersectContext[] | Simple_select_intersectContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Simple_select_intersectContext);
        }

        return this.getRuleContext(i, Simple_select_intersectContext);
    }
    public UNION(): antlr.TerminalNode[];
    public UNION(i: number): antlr.TerminalNode | null;
    public UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.UNION);
    	} else {
    		return this.getToken(PostgreSQLParser.UNION, i);
    	}
    }
    public EXCEPT(): antlr.TerminalNode[];
    public EXCEPT(i: number): antlr.TerminalNode | null;
    public EXCEPT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.EXCEPT);
    	} else {
    		return this.getToken(PostgreSQLParser.EXCEPT, i);
    	}
    }
    public all_or_distinct(): All_or_distinctContext[];
    public all_or_distinct(i: number): All_or_distinctContext | null;
    public all_or_distinct(i?: number): All_or_distinctContext[] | All_or_distinctContext | null {
        if (i === undefined) {
            return this.getRuleContexts(All_or_distinctContext);
        }

        return this.getRuleContext(i, All_or_distinctContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_clause;
    }
}


export class Simple_select_intersectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simple_select_pramary(): Simple_select_pramaryContext[];
    public simple_select_pramary(i: number): Simple_select_pramaryContext | null;
    public simple_select_pramary(i?: number): Simple_select_pramaryContext[] | Simple_select_pramaryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Simple_select_pramaryContext);
        }

        return this.getRuleContext(i, Simple_select_pramaryContext);
    }
    public INTERSECT(): antlr.TerminalNode[];
    public INTERSECT(i: number): antlr.TerminalNode | null;
    public INTERSECT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.INTERSECT);
    	} else {
    		return this.getToken(PostgreSQLParser.INTERSECT, i);
    	}
    }
    public all_or_distinct(): All_or_distinctContext[];
    public all_or_distinct(i: number): All_or_distinctContext | null;
    public all_or_distinct(i?: number): All_or_distinctContext[] | All_or_distinctContext | null {
        if (i === undefined) {
            return this.getRuleContexts(All_or_distinctContext);
        }

        return this.getRuleContext(i, All_or_distinctContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_simple_select_intersect;
    }
}


export class Simple_select_pramaryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SELECT, 0);
    }
    public distinct_clause(): Distinct_clauseContext | null {
        return this.getRuleContext(0, Distinct_clauseContext);
    }
    public target_list(): Target_listContext | null {
        return this.getRuleContext(0, Target_listContext);
    }
    public all_clause_(): All_clause_Context | null {
        return this.getRuleContext(0, All_clause_Context);
    }
    public target_list_(): Target_list_Context | null {
        return this.getRuleContext(0, Target_list_Context);
    }
    public into_clause(): Into_clauseContext | null {
        return this.getRuleContext(0, Into_clauseContext);
    }
    public from_clause(): From_clauseContext | null {
        return this.getRuleContext(0, From_clauseContext);
    }
    public where_clause(): Where_clauseContext | null {
        return this.getRuleContext(0, Where_clauseContext);
    }
    public group_clause(): Group_clauseContext | null {
        return this.getRuleContext(0, Group_clauseContext);
    }
    public having_clause(): Having_clauseContext | null {
        return this.getRuleContext(0, Having_clauseContext);
    }
    public window_clause(): Window_clauseContext | null {
        return this.getRuleContext(0, Window_clauseContext);
    }
    public values_clause(): Values_clauseContext | null {
        return this.getRuleContext(0, Values_clauseContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_simple_select_pramary;
    }
}


export class With_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public cte_list(): Cte_listContext {
        return this.getRuleContext(0, Cte_listContext)!;
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RECURSIVE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_with_clause;
    }
}


export class Cte_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public common_table_expr(): Common_table_exprContext[];
    public common_table_expr(i: number): Common_table_exprContext | null;
    public common_table_expr(i?: number): Common_table_exprContext[] | Common_table_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Common_table_exprContext);
        }

        return this.getRuleContext(i, Common_table_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_cte_list;
    }
}


export class Common_table_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public name(): NameContext {
        return this.getRuleContext(0, NameContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public preparablestmt(): PreparablestmtContext {
        return this.getRuleContext(0, PreparablestmtContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public name_list_(): Name_list_Context | null {
        return this.getRuleContext(0, Name_list_Context);
    }
    public materialized_(): Materialized_Context | null {
        return this.getRuleContext(0, Materialized_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_common_table_expr;
    }
}


export class Materialized_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_materialized_;
    }
}


export class With_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public with_clause(): With_clauseContext {
        return this.getRuleContext(0, With_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_with_clause_;
    }
}


export class Into_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INTO, 0)!;
    }
    public opttempTableName(): OpttempTableNameContext {
        return this.getRuleContext(0, OpttempTableNameContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_into_clause;
    }
}


export class Strict_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRICT_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.STRICT_P, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_strict_;
    }
}


export class OpttempTableNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext {
        return this.getRuleContext(0, Qualified_nameContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPORARY, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMP, 0);
    }
    public table_(): Table_Context | null {
        return this.getRuleContext(0, Table_Context);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCAL, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GLOBAL, 0);
    }
    public UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNLOGGED, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opttempTableName;
    }
}


export class Table_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLE, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_table_;
    }
}


export class All_or_distinctContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISTINCT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_all_or_distinct;
    }
}


export class Distinct_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DISTINCT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.DISTINCT, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_distinct_clause;
    }
}


export class All_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ALL, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_all_clause_;
    }
}


export class Sort_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sort_clause(): Sort_clauseContext {
        return this.getRuleContext(0, Sort_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_sort_clause_;
    }
}


export class Sort_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public sortby_list(): Sortby_listContext {
        return this.getRuleContext(0, Sortby_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_sort_clause;
    }
}


export class Sortby_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortby(): SortbyContext[];
    public sortby(i: number): SortbyContext | null;
    public sortby(i?: number): SortbyContext[] | SortbyContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortbyContext);
        }

        return this.getRuleContext(i, SortbyContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_sortby_list;
    }
}


export class SortbyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public qual_all_op(): Qual_all_opContext | null {
        return this.getRuleContext(0, Qual_all_opContext);
    }
    public nulls_order_(): Nulls_order_Context | null {
        return this.getRuleContext(0, Nulls_order_Context);
    }
    public asc_desc_(): Asc_desc_Context | null {
        return this.getRuleContext(0, Asc_desc_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_sortby;
    }
}


export class Select_limitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public limit_clause(): Limit_clauseContext | null {
        return this.getRuleContext(0, Limit_clauseContext);
    }
    public offset_clause(): Offset_clauseContext | null {
        return this.getRuleContext(0, Offset_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_limit;
    }
}


export class Select_limit_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public select_limit(): Select_limitContext {
        return this.getRuleContext(0, Select_limitContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_limit_;
    }
}


export class Limit_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIMIT, 0);
    }
    public select_limit_value(): Select_limit_valueContext | null {
        return this.getRuleContext(0, Select_limit_valueContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public select_offset_value(): Select_offset_valueContext | null {
        return this.getRuleContext(0, Select_offset_valueContext);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FETCH, 0);
    }
    public first_or_next(): First_or_nextContext | null {
        return this.getRuleContext(0, First_or_nextContext);
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext | null {
        return this.getRuleContext(0, Select_fetch_first_valueContext);
    }
    public row_or_rows(): Row_or_rowsContext | null {
        return this.getRuleContext(0, Row_or_rowsContext);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ONLY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_limit_clause;
    }
}


export class Offset_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OFFSET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OFFSET, 0)!;
    }
    public select_offset_value(): Select_offset_valueContext | null {
        return this.getRuleContext(0, Select_offset_valueContext);
    }
    public select_fetch_first_value(): Select_fetch_first_valueContext | null {
        return this.getRuleContext(0, Select_fetch_first_valueContext);
    }
    public row_or_rows(): Row_or_rowsContext | null {
        return this.getRuleContext(0, Row_or_rowsContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_offset_clause;
    }
}


export class Select_limit_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_limit_value;
    }
}


export class Select_offset_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_offset_value;
    }
}


export class Select_fetch_first_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public c_expr(): C_exprContext | null {
        return this.getRuleContext(0, C_exprContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLUS, 0);
    }
    public i_or_f_const(): I_or_f_constContext | null {
        return this.getRuleContext(0, I_or_f_constContext);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_select_fetch_first_value;
    }
}


export class I_or_f_constContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public fconst(): FconstContext | null {
        return this.getRuleContext(0, FconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_i_or_f_const;
    }
}


export class Row_or_rowsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROWS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_row_or_rows;
    }
}


export class First_or_nextContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIRST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FIRST_P, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NEXT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_first_or_next;
    }
}


export class Group_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GROUP_P, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public group_by_list(): Group_by_listContext {
        return this.getRuleContext(0, Group_by_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_group_clause;
    }
}


export class Group_by_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public group_by_item(): Group_by_itemContext[];
    public group_by_item(i: number): Group_by_itemContext | null;
    public group_by_item(i?: number): Group_by_itemContext[] | Group_by_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Group_by_itemContext);
        }

        return this.getRuleContext(i, Group_by_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_group_by_list;
    }
}


export class Group_by_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public empty_grouping_set(): Empty_grouping_setContext | null {
        return this.getRuleContext(0, Empty_grouping_setContext);
    }
    public cube_clause(): Cube_clauseContext | null {
        return this.getRuleContext(0, Cube_clauseContext);
    }
    public rollup_clause(): Rollup_clauseContext | null {
        return this.getRuleContext(0, Rollup_clauseContext);
    }
    public grouping_sets_clause(): Grouping_sets_clauseContext | null {
        return this.getRuleContext(0, Grouping_sets_clauseContext);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_group_by_item;
    }
}


export class Empty_grouping_setContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_empty_grouping_set;
    }
}


export class Rollup_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROLLUP(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ROLLUP, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rollup_clause;
    }
}


export class Cube_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CUBE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CUBE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_cube_clause;
    }
}


export class Grouping_sets_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUPING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GROUPING, 0)!;
    }
    public SETS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SETS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public group_by_list(): Group_by_listContext {
        return this.getRuleContext(0, Group_by_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_grouping_sets_clause;
    }
}


export class Having_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.HAVING, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_having_clause;
    }
}


export class For_locking_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public for_locking_items(): For_locking_itemsContext | null {
        return this.getRuleContext(0, For_locking_itemsContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.READ, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ONLY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_for_locking_clause;
    }
}


export class For_locking_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public for_locking_clause(): For_locking_clauseContext {
        return this.getRuleContext(0, For_locking_clauseContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_for_locking_clause_;
    }
}


export class For_locking_itemsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public for_locking_item(): For_locking_itemContext[];
    public for_locking_item(i: number): For_locking_itemContext | null;
    public for_locking_item(i?: number): For_locking_itemContext[] | For_locking_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(For_locking_itemContext);
        }

        return this.getRuleContext(i, For_locking_itemContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_for_locking_items;
    }
}


export class For_locking_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public for_locking_strength(): For_locking_strengthContext {
        return this.getRuleContext(0, For_locking_strengthContext)!;
    }
    public locked_rels_list(): Locked_rels_listContext | null {
        return this.getRuleContext(0, Locked_rels_listContext);
    }
    public nowait_or_skip_(): Nowait_or_skip_Context | null {
        return this.getRuleContext(0, Nowait_or_skip_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_for_locking_item;
    }
}


export class For_locking_strengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FOR, 0)!;
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SHARE, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_for_locking_strength;
    }
}


export class Locked_rels_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OF(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OF, 0)!;
    }
    public qualified_name_list(): Qualified_name_listContext {
        return this.getRuleContext(0, Qualified_name_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_locked_rels_list;
    }
}


export class Values_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VALUES, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
    	}
    }
    public expr_list(): Expr_listContext[];
    public expr_list(i: number): Expr_listContext | null;
    public expr_list(i?: number): Expr_listContext[] | Expr_listContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Expr_listContext);
        }

        return this.getRuleContext(i, Expr_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_values_clause;
    }
}


export class From_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public from_list(): From_listContext {
        return this.getRuleContext(0, From_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_from_clause;
    }
}


export class From_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public table_ref(): Table_refContext[];
    public table_ref(i: number): Table_refContext | null;
    public table_ref(i?: number): Table_refContext[] | Table_refContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_refContext);
        }

        return this.getRuleContext(i, Table_refContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_from_list;
    }
}


export class Table_refContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation_expr(): Relation_exprContext | null {
        return this.getRuleContext(0, Relation_exprContext);
    }
    public func_table(): Func_tableContext | null {
        return this.getRuleContext(0, Func_tableContext);
    }
    public xmltable(): XmltableContext | null {
        return this.getRuleContext(0, XmltableContext);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public LATERAL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LATERAL_P, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public table_ref(): Table_refContext[];
    public table_ref(i: number): Table_refContext | null;
    public table_ref(i?: number): Table_refContext[] | Table_refContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Table_refContext);
        }

        return this.getRuleContext(i, Table_refContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public CROSS(): antlr.TerminalNode[];
    public CROSS(i: number): antlr.TerminalNode | null;
    public CROSS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.CROSS);
    	} else {
    		return this.getToken(PostgreSQLParser.CROSS, i);
    	}
    }
    public JOIN(): antlr.TerminalNode[];
    public JOIN(i: number): antlr.TerminalNode | null;
    public JOIN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.JOIN);
    	} else {
    		return this.getToken(PostgreSQLParser.JOIN, i);
    	}
    }
    public NATURAL(): antlr.TerminalNode[];
    public NATURAL(i: number): antlr.TerminalNode | null;
    public NATURAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.NATURAL);
    	} else {
    		return this.getToken(PostgreSQLParser.NATURAL, i);
    	}
    }
    public join_qual(): Join_qualContext[];
    public join_qual(i: number): Join_qualContext | null;
    public join_qual(i?: number): Join_qualContext[] | Join_qualContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_qualContext);
        }

        return this.getRuleContext(i, Join_qualContext);
    }
    public alias_clause(): Alias_clauseContext | null {
        return this.getRuleContext(0, Alias_clauseContext);
    }
    public tablesample_clause(): Tablesample_clauseContext | null {
        return this.getRuleContext(0, Tablesample_clauseContext);
    }
    public func_alias_clause(): Func_alias_clauseContext | null {
        return this.getRuleContext(0, Func_alias_clauseContext);
    }
    public join_type(): Join_typeContext[];
    public join_type(i: number): Join_typeContext | null;
    public join_type(i?: number): Join_typeContext[] | Join_typeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Join_typeContext);
        }

        return this.getRuleContext(i, Join_typeContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_table_ref;
    }
}


export class Alias_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_alias_clause;
    }
}


export class Func_alias_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alias_clause(): Alias_clauseContext | null {
        return this.getRuleContext(0, Alias_clauseContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public tablefuncelementlist(): TablefuncelementlistContext | null {
        return this.getRuleContext(0, TablefuncelementlistContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_alias_clause;
    }
}


export class Join_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FULL, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RIGHT, 0);
    }
    public INNER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INNER_P, 0);
    }
    public OUTER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OUTER_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_join_type;
    }
}


export class Join_qualContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public name_list(): Name_listContext | null {
        return this.getRuleContext(0, Name_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_join_qual;
    }
}


export class Relation_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext | null {
        return this.getRuleContext(0, Qualified_nameContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ONLY, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_relation_expr;
    }
}


export class Relation_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation_expr(): Relation_exprContext[];
    public relation_expr(i: number): Relation_exprContext | null;
    public relation_expr(i?: number): Relation_exprContext[] | Relation_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Relation_exprContext);
        }

        return this.getRuleContext(i, Relation_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_relation_expr_list;
    }
}


export class Relation_expr_opt_aliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relation_expr(): Relation_exprContext {
        return this.getRuleContext(0, Relation_exprContext)!;
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_relation_expr_opt_alias;
    }
}


export class Tablesample_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLESAMPLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TABLESAMPLE, 0)!;
    }
    public func_name(): Func_nameContext {
        return this.getRuleContext(0, Func_nameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public repeatable_clause_(): Repeatable_clause_Context | null {
        return this.getRuleContext(0, Repeatable_clause_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tablesample_clause;
    }
}


export class Repeatable_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REPEATABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.REPEATABLE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_repeatable_clause_;
    }
}


export class Func_tableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_expr_windowless(): Func_expr_windowlessContext | null {
        return this.getRuleContext(0, Func_expr_windowlessContext);
    }
    public ordinality_(): Ordinality_Context | null {
        return this.getRuleContext(0, Ordinality_Context);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROWS, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public rowsfrom_list(): Rowsfrom_listContext | null {
        return this.getRuleContext(0, Rowsfrom_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_table;
    }
}


export class Rowsfrom_itemContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_expr_windowless(): Func_expr_windowlessContext {
        return this.getRuleContext(0, Func_expr_windowlessContext)!;
    }
    public col_def_list_(): Col_def_list_Context | null {
        return this.getRuleContext(0, Col_def_list_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsfrom_item;
    }
}


export class Rowsfrom_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rowsfrom_item(): Rowsfrom_itemContext[];
    public rowsfrom_item(i: number): Rowsfrom_itemContext | null;
    public rowsfrom_item(i?: number): Rowsfrom_itemContext[] | Rowsfrom_itemContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Rowsfrom_itemContext);
        }

        return this.getRuleContext(i, Rowsfrom_itemContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rowsfrom_list;
    }
}


export class Col_def_list_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public tablefuncelementlist(): TablefuncelementlistContext {
        return this.getRuleContext(0, TablefuncelementlistContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_col_def_list_;
    }
}


export class Ordinality_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITH, 0)!;
    }
    public ORDINALITY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ORDINALITY, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_ordinality_;
    }
}


export class Where_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHERE, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_where_clause;
    }
}


export class Where_or_current_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHERE, 0)!;
    }
    public CURRENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_P, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public cursor_name(): Cursor_nameContext | null {
        return this.getRuleContext(0, Cursor_nameContext);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_where_or_current_clause;
    }
}


export class OpttablefuncelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablefuncelementlist(): TablefuncelementlistContext {
        return this.getRuleContext(0, TablefuncelementlistContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opttablefuncelementlist;
    }
}


export class TablefuncelementlistContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tablefuncelement(): TablefuncelementContext[];
    public tablefuncelement(i: number): TablefuncelementContext | null;
    public tablefuncelement(i?: number): TablefuncelementContext[] | TablefuncelementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TablefuncelementContext);
        }

        return this.getRuleContext(i, TablefuncelementContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tablefuncelementlist;
    }
}


export class TablefuncelementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public collate_clause_(): Collate_clause_Context | null {
        return this.getRuleContext(0, Collate_clause_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_tablefuncelement;
    }
}


export class XmltableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XMLTABLE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.XMLTABLE, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode[];
    public OPEN_PAREN(i: number): antlr.TerminalNode | null;
    public OPEN_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.OPEN_PAREN);
    	} else {
    		return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
    	}
    }
    public CLOSE_PAREN(): antlr.TerminalNode[];
    public CLOSE_PAREN(i: number): antlr.TerminalNode | null;
    public CLOSE_PAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
    	} else {
    		return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
    	}
    }
    public c_expr(): C_exprContext | null {
        return this.getRuleContext(0, C_exprContext);
    }
    public xmlexists_argument(): Xmlexists_argumentContext | null {
        return this.getRuleContext(0, Xmlexists_argumentContext);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMNS, 0);
    }
    public xmltable_column_list(): Xmltable_column_listContext | null {
        return this.getRuleContext(0, Xmltable_column_listContext);
    }
    public XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLNAMESPACES, 0);
    }
    public xml_namespace_list(): Xml_namespace_listContext | null {
        return this.getRuleContext(0, Xml_namespace_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xmltable;
    }
}


export class Xmltable_column_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xmltable_column_el(): Xmltable_column_elContext[];
    public xmltable_column_el(i: number): Xmltable_column_elContext | null;
    public xmltable_column_el(i?: number): Xmltable_column_elContext[] | Xmltable_column_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xmltable_column_elContext);
        }

        return this.getRuleContext(i, Xmltable_column_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xmltable_column_list;
    }
}


export class Xmltable_column_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ORDINALITY, 0);
    }
    public xmltable_column_option_list(): Xmltable_column_option_listContext | null {
        return this.getRuleContext(0, Xmltable_column_option_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xmltable_column_el;
    }
}


export class Xmltable_column_option_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xmltable_column_option_el(): Xmltable_column_option_elContext[];
    public xmltable_column_option_el(i: number): Xmltable_column_option_elContext | null;
    public xmltable_column_option_el(i?: number): Xmltable_column_option_elContext[] | Xmltable_column_option_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xmltable_column_option_elContext);
        }

        return this.getRuleContext(i, Xmltable_column_option_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xmltable_column_option_list;
    }
}


export class Xmltable_column_option_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xmltable_column_option_el;
    }
}


export class Xml_namespace_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xml_namespace_el(): Xml_namespace_elContext[];
    public xml_namespace_el(i: number): Xml_namespace_elContext | null;
    public xml_namespace_el(i?: number): Xml_namespace_elContext[] | Xml_namespace_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_namespace_elContext);
        }

        return this.getRuleContext(i, Xml_namespace_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_namespace_list;
    }
}


export class Xml_namespace_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public b_expr(): B_exprContext {
        return this.getRuleContext(0, B_exprContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_namespace_el;
    }
}


export class TypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpletypename(): SimpletypenameContext {
        return this.getRuleContext(0, SimpletypenameContext)!;
    }
    public opt_array_bounds(): Opt_array_boundsContext | null {
        return this.getRuleContext(0, Opt_array_boundsContext);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ARRAY, 0);
    }
    public SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SETOF, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_BRACKET, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_BRACKET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_typename;
    }
}


export class Opt_array_boundsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_BRACKET(): antlr.TerminalNode[];
    public OPEN_BRACKET(i: number): antlr.TerminalNode | null;
    public OPEN_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.OPEN_BRACKET);
    	} else {
    		return this.getToken(PostgreSQLParser.OPEN_BRACKET, i);
    	}
    }
    public CLOSE_BRACKET(): antlr.TerminalNode[];
    public CLOSE_BRACKET(i: number): antlr.TerminalNode | null;
    public CLOSE_BRACKET(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.CLOSE_BRACKET);
    	} else {
    		return this.getToken(PostgreSQLParser.CLOSE_BRACKET, i);
    	}
    }
    public iconst(): IconstContext[];
    public iconst(i: number): IconstContext | null;
    public iconst(i?: number): IconstContext[] | IconstContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IconstContext);
        }

        return this.getRuleContext(i, IconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opt_array_bounds;
    }
}


export class SimpletypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public generictype(): GenerictypeContext | null {
        return this.getRuleContext(0, GenerictypeContext);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public bit(): BitContext | null {
        return this.getRuleContext(0, BitContext);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public constdatetime(): ConstdatetimeContext | null {
        return this.getRuleContext(0, ConstdatetimeContext);
    }
    public constinterval(): ConstintervalContext | null {
        return this.getRuleContext(0, ConstintervalContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public interval_(): Interval_Context | null {
        return this.getRuleContext(0, Interval_Context);
    }
    public jsonType(): JsonTypeContext | null {
        return this.getRuleContext(0, JsonTypeContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_simpletypename;
    }
}


export class ConsttypenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numeric(): NumericContext | null {
        return this.getRuleContext(0, NumericContext);
    }
    public constbit(): ConstbitContext | null {
        return this.getRuleContext(0, ConstbitContext);
    }
    public constcharacter(): ConstcharacterContext | null {
        return this.getRuleContext(0, ConstcharacterContext);
    }
    public constdatetime(): ConstdatetimeContext | null {
        return this.getRuleContext(0, ConstdatetimeContext);
    }
    public jsonType(): JsonTypeContext | null {
        return this.getRuleContext(0, JsonTypeContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_consttypename;
    }
}


export class GenerictypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_function_name(): Type_function_nameContext {
        return this.getRuleContext(0, Type_function_nameContext)!;
    }
    public attrs(): AttrsContext | null {
        return this.getRuleContext(0, AttrsContext);
    }
    public type_modifiers_(): Type_modifiers_Context | null {
        return this.getRuleContext(0, Type_modifiers_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_generictype;
    }
}


export class Type_modifiers_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_type_modifiers_;
    }
}


export class NumericContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INT_P, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTEGER, 0);
    }
    public SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SMALLINT, 0);
    }
    public BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BIGINT, 0);
    }
    public REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REAL, 0);
    }
    public FLOAT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FLOAT_P, 0);
    }
    public float_(): Float_Context | null {
        return this.getRuleContext(0, Float_Context);
    }
    public DOUBLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOUBLE_P, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRECISION, 0);
    }
    public DECIMAL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DECIMAL_P, 0);
    }
    public type_modifiers_(): Type_modifiers_Context | null {
        return this.getRuleContext(0, Type_modifiers_Context);
    }
    public DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEC, 0);
    }
    public NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NUMERIC, 0);
    }
    public BOOLEAN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BOOLEAN_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_numeric;
    }
}


export class Float_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public iconst(): IconstContext {
        return this.getRuleContext(0, IconstContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_float_;
    }
}


export class BitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitwithlength(): BitwithlengthContext | null {
        return this.getRuleContext(0, BitwithlengthContext);
    }
    public bitwithoutlength(): BitwithoutlengthContext | null {
        return this.getRuleContext(0, BitwithoutlengthContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_bit;
    }
}


export class ConstbitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public bitwithlength(): BitwithlengthContext | null {
        return this.getRuleContext(0, BitwithlengthContext);
    }
    public bitwithoutlength(): BitwithoutlengthContext | null {
        return this.getRuleContext(0, BitwithoutlengthContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constbit;
    }
}


export class BitwithlengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BIT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BIT, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public varying_(): Varying_Context | null {
        return this.getRuleContext(0, Varying_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_bitwithlength;
    }
}


export class BitwithoutlengthContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BIT(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BIT, 0)!;
    }
    public varying_(): Varying_Context | null {
        return this.getRuleContext(0, Varying_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_bitwithoutlength;
    }
}


export class CharacterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public character_c(): Character_cContext {
        return this.getRuleContext(0, Character_cContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_character;
    }
}


export class ConstcharacterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public character_c(): Character_cContext {
        return this.getRuleContext(0, Character_cContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constcharacter;
    }
}


export class Character_cContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHARACTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHARACTER, 0);
    }
    public CHAR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHAR_P, 0);
    }
    public NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NCHAR, 0);
    }
    public varying_(): Varying_Context | null {
        return this.getRuleContext(0, Varying_Context);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARCHAR, 0);
    }
    public NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NATIONAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_character_c;
    }
}


export class Varying_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VARYING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VARYING, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_varying_;
    }
}


export class ConstdatetimeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIMESTAMP, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIME, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public timezone_(): Timezone_Context | null {
        return this.getRuleContext(0, Timezone_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constdatetime;
    }
}


export class ConstintervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.INTERVAL, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_constinterval;
    }
}


export class Timezone_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.TIME, 0)!;
    }
    public ZONE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ZONE, 0)!;
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_timezone_;
    }
}


export class Interval_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public YEAR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.YEAR_P, 0);
    }
    public MONTH_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MONTH_P, 0);
    }
    public DAY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DAY_P, 0);
    }
    public HOUR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HOUR_P, 0);
    }
    public MINUTE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUTE_P, 0);
    }
    public interval_second(): Interval_secondContext | null {
        return this.getRuleContext(0, Interval_secondContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_interval_;
    }
}


export class Interval_secondContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SECOND_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.SECOND_P, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_interval_second;
    }
}


export class JsonTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.JSON, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_jsonType;
    }
}


export class Escape_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ESCAPE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ESCAPE, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_escape_;
    }
}


export class A_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_qual(): A_expr_qualContext {
        return this.getRuleContext(0, A_expr_qualContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr;
    }
}


export class A_expr_qualContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_lessless(): A_expr_lesslessContext {
        return this.getRuleContext(0, A_expr_lesslessContext)!;
    }
    public qual_op(): Qual_opContext | null {
        return this.getRuleContext(0, Qual_opContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_qual;
    }
}


export class A_expr_lesslessContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_or(): A_expr_orContext[];
    public a_expr_or(i: number): A_expr_orContext | null;
    public a_expr_or(i?: number): A_expr_orContext[] | A_expr_orContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_orContext);
        }

        return this.getRuleContext(i, A_expr_orContext);
    }
    public LESS_LESS(): antlr.TerminalNode[];
    public LESS_LESS(i: number): antlr.TerminalNode | null;
    public LESS_LESS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.LESS_LESS);
    	} else {
    		return this.getToken(PostgreSQLParser.LESS_LESS, i);
    	}
    }
    public GREATER_GREATER(): antlr.TerminalNode[];
    public GREATER_GREATER(i: number): antlr.TerminalNode | null;
    public GREATER_GREATER(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.GREATER_GREATER);
    	} else {
    		return this.getToken(PostgreSQLParser.GREATER_GREATER, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_lessless;
    }
}


export class A_expr_orContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_and(): A_expr_andContext[];
    public a_expr_and(i: number): A_expr_andContext | null;
    public a_expr_and(i?: number): A_expr_andContext[] | A_expr_andContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_andContext);
        }

        return this.getRuleContext(i, A_expr_andContext);
    }
    public OR(): antlr.TerminalNode[];
    public OR(i: number): antlr.TerminalNode | null;
    public OR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.OR);
    	} else {
    		return this.getToken(PostgreSQLParser.OR, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_or;
    }
}


export class A_expr_andContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_between(): A_expr_betweenContext[];
    public a_expr_between(i: number): A_expr_betweenContext | null;
    public a_expr_between(i?: number): A_expr_betweenContext[] | A_expr_betweenContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_betweenContext);
        }

        return this.getRuleContext(i, A_expr_betweenContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.AND);
    	} else {
    		return this.getToken(PostgreSQLParser.AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_and;
    }
}


export class A_expr_betweenContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_in(): A_expr_inContext[];
    public a_expr_in(i: number): A_expr_inContext | null;
    public a_expr_in(i?: number): A_expr_inContext[] | A_expr_inContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_inContext);
        }

        return this.getRuleContext(i, A_expr_inContext);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AND, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYMMETRIC, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_between;
    }
}


export class A_expr_inContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_unary_not(): A_expr_unary_notContext {
        return this.getRuleContext(0, A_expr_unary_notContext)!;
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public in_expr(): In_exprContext | null {
        return this.getRuleContext(0, In_exprContext);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_in;
    }
}


export class A_expr_unary_notContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_isnull(): A_expr_isnullContext {
        return this.getRuleContext(0, A_expr_isnullContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_unary_not;
    }
}


export class A_expr_isnullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_is_not(): A_expr_is_notContext {
        return this.getRuleContext(0, A_expr_is_notContext)!;
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ISNULL, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTNULL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_isnull;
    }
}


export class A_expr_is_notContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_compare(): A_expr_compareContext {
        return this.getRuleContext(0, A_expr_compareContext)!;
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IS, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public TRUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUE_P, 0);
    }
    public FALSE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FALSE_P, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNKNOWN, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISTINCT, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public type_list(): Type_listContext | null {
        return this.getRuleContext(0, Type_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public DOCUMENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
    }
    public NORMALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NORMALIZED, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public unicode_normal_form(): Unicode_normal_formContext | null {
        return this.getRuleContext(0, Unicode_normal_formContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_is_not;
    }
}


export class A_expr_compareContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_like(): A_expr_likeContext[];
    public a_expr_like(i: number): A_expr_likeContext | null;
    public a_expr_like(i?: number): A_expr_likeContext[] | A_expr_likeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_likeContext);
        }

        return this.getRuleContext(i, A_expr_likeContext);
    }
    public subquery_Op(): Subquery_OpContext | null {
        return this.getRuleContext(0, Subquery_OpContext);
    }
    public sub_type(): Sub_typeContext | null {
        return this.getRuleContext(0, Sub_typeContext);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT_EQUALS, 0);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_compare;
    }
}


export class A_expr_likeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_qual_op(): A_expr_qual_opContext[];
    public a_expr_qual_op(i: number): A_expr_qual_opContext | null;
    public a_expr_qual_op(i?: number): A_expr_qual_opContext[] | A_expr_qual_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_qual_opContext);
        }

        return this.getRuleContext(i, A_expr_qual_opContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ILIKE, 0);
    }
    public SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SIMILAR, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public escape_(): Escape_Context | null {
        return this.getRuleContext(0, Escape_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_like;
    }
}


export class A_expr_qual_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_unary_qualop(): A_expr_unary_qualopContext[];
    public a_expr_unary_qualop(i: number): A_expr_unary_qualopContext | null;
    public a_expr_unary_qualop(i?: number): A_expr_unary_qualopContext[] | A_expr_unary_qualopContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_unary_qualopContext);
        }

        return this.getRuleContext(i, A_expr_unary_qualopContext);
    }
    public qual_op(): Qual_opContext[];
    public qual_op(i: number): Qual_opContext | null;
    public qual_op(i?: number): Qual_opContext[] | Qual_opContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qual_opContext);
        }

        return this.getRuleContext(i, Qual_opContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_qual_op;
    }
}


export class A_expr_unary_qualopContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_add(): A_expr_addContext {
        return this.getRuleContext(0, A_expr_addContext)!;
    }
    public qual_op(): Qual_opContext | null {
        return this.getRuleContext(0, Qual_opContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_unary_qualop;
    }
}


export class A_expr_addContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_mul(): A_expr_mulContext[];
    public a_expr_mul(i: number): A_expr_mulContext | null;
    public a_expr_mul(i?: number): A_expr_mulContext[] | A_expr_mulContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_mulContext);
        }

        return this.getRuleContext(i, A_expr_mulContext);
    }
    public MINUS(): antlr.TerminalNode[];
    public MINUS(i: number): antlr.TerminalNode | null;
    public MINUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.MINUS);
    	} else {
    		return this.getToken(PostgreSQLParser.MINUS, i);
    	}
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.PLUS);
    	} else {
    		return this.getToken(PostgreSQLParser.PLUS, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_add;
    }
}


export class A_expr_mulContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_caret(): A_expr_caretContext[];
    public a_expr_caret(i: number): A_expr_caretContext | null;
    public a_expr_caret(i?: number): A_expr_caretContext[] | A_expr_caretContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_caretContext);
        }

        return this.getRuleContext(i, A_expr_caretContext);
    }
    public STAR(): antlr.TerminalNode[];
    public STAR(i: number): antlr.TerminalNode | null;
    public STAR(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.STAR);
    	} else {
    		return this.getToken(PostgreSQLParser.STAR, i);
    	}
    }
    public SLASH(): antlr.TerminalNode[];
    public SLASH(i: number): antlr.TerminalNode | null;
    public SLASH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.SLASH);
    	} else {
    		return this.getToken(PostgreSQLParser.SLASH, i);
    	}
    }
    public PERCENT(): antlr.TerminalNode[];
    public PERCENT(i: number): antlr.TerminalNode | null;
    public PERCENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.PERCENT);
    	} else {
    		return this.getToken(PostgreSQLParser.PERCENT, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_mul;
    }
}


export class A_expr_caretContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_unary_sign(): A_expr_unary_signContext[];
    public a_expr_unary_sign(i: number): A_expr_unary_signContext | null;
    public a_expr_unary_sign(i?: number): A_expr_unary_signContext[] | A_expr_unary_signContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_expr_unary_signContext);
        }

        return this.getRuleContext(i, A_expr_unary_signContext);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CARET, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_caret;
    }
}


export class A_expr_unary_signContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_at_time_zone(): A_expr_at_time_zoneContext {
        return this.getRuleContext(0, A_expr_at_time_zoneContext)!;
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUS, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLUS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_unary_sign;
    }
}


export class A_expr_at_time_zoneContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_collate(): A_expr_collateContext {
        return this.getRuleContext(0, A_expr_collateContext)!;
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AT, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIME, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ZONE, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_at_time_zone;
    }
}


export class A_expr_collateContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr_typecast(): A_expr_typecastContext {
        return this.getRuleContext(0, A_expr_typecastContext)!;
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATE, 0);
    }
    public any_name(): Any_nameContext | null {
        return this.getRuleContext(0, Any_nameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_collate;
    }
}


export class A_expr_typecastContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public c_expr(): C_exprContext {
        return this.getRuleContext(0, C_exprContext)!;
    }
    public TYPECAST(): antlr.TerminalNode[];
    public TYPECAST(i: number): antlr.TerminalNode | null;
    public TYPECAST(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.TYPECAST);
    	} else {
    		return this.getToken(PostgreSQLParser.TYPECAST, i);
    	}
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_a_expr_typecast;
    }
}


export class B_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public c_expr(): C_exprContext | null {
        return this.getRuleContext(0, C_exprContext);
    }
    public b_expr(): B_exprContext[];
    public b_expr(i: number): B_exprContext | null;
    public b_expr(i?: number): B_exprContext[] | B_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(B_exprContext);
        }

        return this.getRuleContext(i, B_exprContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUS, 0);
    }
    public qual_op(): Qual_opContext | null {
        return this.getRuleContext(0, Qual_opContext);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CARET, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PERCENT, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT_EQUALS, 0);
    }
    public TYPECAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPECAST, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IS, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISTINCT, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public type_list(): Type_listContext | null {
        return this.getRuleContext(0, Type_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public DOCUMENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_b_expr;
    }
}


export class C_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_c_expr;
    }
    public override copyFrom(ctx: C_exprContext): void {
        super.copyFrom(ctx);
    }
}
export class C_expr_existsContext extends C_exprContext {
    public constructor(ctx: C_exprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXISTS, 0)!;
    }
    public select_with_parens(): Select_with_parensContext {
        return this.getRuleContext(0, Select_with_parensContext)!;
    }
}
export class C_expr_caseContext extends C_exprContext {
    public constructor(ctx: C_exprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public case_expr(): Case_exprContext {
        return this.getRuleContext(0, Case_exprContext)!;
    }
}
export class C_expr_exprContext extends C_exprContext {
    public _a_expr_in_parens?: A_exprContext;
    public constructor(ctx: C_exprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ARRAY, 0);
    }
    public select_with_parens(): Select_with_parensContext | null {
        return this.getRuleContext(0, Select_with_parensContext);
    }
    public array_expr(): Array_exprContext | null {
        return this.getRuleContext(0, Array_exprContext);
    }
    public PARAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARAM, 0);
    }
    public opt_indirection(): Opt_indirectionContext | null {
        return this.getRuleContext(0, Opt_indirectionContext);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUPING, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNIQUE, 0);
    }
    public columnref(): ColumnrefContext | null {
        return this.getRuleContext(0, ColumnrefContext);
    }
    public aexprconst(): AexprconstContext | null {
        return this.getRuleContext(0, AexprconstContext);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public func_expr(): Func_exprContext | null {
        return this.getRuleContext(0, Func_exprContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public explicit_row(): Explicit_rowContext | null {
        return this.getRuleContext(0, Explicit_rowContext);
    }
    public implicit_row(): Implicit_rowContext | null {
        return this.getRuleContext(0, Implicit_rowContext);
    }
    public row(): RowContext[];
    public row(i: number): RowContext | null;
    public row(i?: number): RowContext[] | RowContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RowContext);
        }

        return this.getRuleContext(i, RowContext);
    }
    public OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERLAPS, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
}


export class PlsqlvariablenameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_plsqlvariablename;
    }
}


export class Func_applicationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_name(): Func_nameContext {
        return this.getRuleContext(0, Func_nameContext)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public func_arg_list(): Func_arg_listContext | null {
        return this.getRuleContext(0, Func_arg_listContext);
    }
    public VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARIADIC, 0);
    }
    public func_arg_expr(): Func_arg_exprContext | null {
        return this.getRuleContext(0, Func_arg_exprContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISTINCT, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public sort_clause_(): Sort_clause_Context | null {
        return this.getRuleContext(0, Sort_clause_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_application;
    }
}


export class Func_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_application(): Func_applicationContext | null {
        return this.getRuleContext(0, Func_applicationContext);
    }
    public within_group_clause(): Within_group_clauseContext | null {
        return this.getRuleContext(0, Within_group_clauseContext);
    }
    public filter_clause(): Filter_clauseContext | null {
        return this.getRuleContext(0, Filter_clauseContext);
    }
    public over_clause(): Over_clauseContext | null {
        return this.getRuleContext(0, Over_clauseContext);
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext | null {
        return this.getRuleContext(0, Func_expr_common_subexprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_expr;
    }
}


export class Func_expr_windowlessContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_application(): Func_applicationContext | null {
        return this.getRuleContext(0, Func_applicationContext);
    }
    public func_expr_common_subexpr(): Func_expr_common_subexprContext | null {
        return this.getRuleContext(0, Func_expr_common_subexprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_expr_windowless;
    }
}


export class Func_expr_common_subexprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public a_expr(): A_exprContext[];
    public a_expr(i: number): A_exprContext | null;
    public a_expr(i?: number): A_exprContext[] | A_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_exprContext);
        }

        return this.getRuleContext(i, A_exprContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_TIME, 0);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0);
    }
    public CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_ROLE, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_USER, 0);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION_USER, 0);
    }
    public SYSTEM_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSTEM_USER, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_CATALOG, 0);
    }
    public CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CAST, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public typename(): TypenameContext | null {
        return this.getRuleContext(0, TypenameContext);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTRACT, 0);
    }
    public extract_list(): Extract_listContext | null {
        return this.getRuleContext(0, Extract_listContext);
    }
    public NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NORMALIZE, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public unicode_normal_form(): Unicode_normal_formContext | null {
        return this.getRuleContext(0, Unicode_normal_formContext);
    }
    public OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERLAY, 0);
    }
    public overlay_list(): Overlay_listContext | null {
        return this.getRuleContext(0, Overlay_listContext);
    }
    public func_arg_list(): Func_arg_listContext | null {
        return this.getRuleContext(0, Func_arg_listContext);
    }
    public POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.POSITION, 0);
    }
    public position_list(): Position_listContext | null {
        return this.getRuleContext(0, Position_listContext);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSTRING, 0);
    }
    public substr_list(): Substr_listContext | null {
        return this.getRuleContext(0, Substr_listContext);
    }
    public TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TREAT, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIM, 0);
    }
    public trim_list(): Trim_listContext | null {
        return this.getRuleContext(0, Trim_listContext);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BOTH, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRAILING, 0);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULLIF, 0);
    }
    public COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COALESCE, 0);
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GREATEST, 0);
    }
    public LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEAST, 0);
    }
    public XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLCONCAT, 0);
    }
    public XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLELEMENT, 0);
    }
    public NAME_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NAME_P, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public xml_attributes(): Xml_attributesContext | null {
        return this.getRuleContext(0, Xml_attributesContext);
    }
    public XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLEXISTS, 0);
    }
    public c_expr(): C_exprContext | null {
        return this.getRuleContext(0, C_exprContext);
    }
    public xmlexists_argument(): Xmlexists_argumentContext | null {
        return this.getRuleContext(0, Xmlexists_argumentContext);
    }
    public XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLFOREST, 0);
    }
    public xml_attribute_list(): Xml_attribute_listContext | null {
        return this.getRuleContext(0, Xml_attribute_listContext);
    }
    public XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLPARSE, 0);
    }
    public document_or_content(): Document_or_contentContext | null {
        return this.getRuleContext(0, Document_or_contentContext);
    }
    public xml_whitespace_option(): Xml_whitespace_optionContext | null {
        return this.getRuleContext(0, Xml_whitespace_optionContext);
    }
    public XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLPI, 0);
    }
    public XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLROOT, 0);
    }
    public XML_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XML_P, 0);
    }
    public xml_root_version(): Xml_root_versionContext | null {
        return this.getRuleContext(0, Xml_root_versionContext);
    }
    public xml_root_standalone_(): Xml_root_standalone_Context | null {
        return this.getRuleContext(0, Xml_root_standalone_Context);
    }
    public XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLSERIALIZE, 0);
    }
    public simpletypename(): SimpletypenameContext | null {
        return this.getRuleContext(0, SimpletypenameContext);
    }
    public JSON_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_OBJECT, 0);
    }
    public json_name_and_value_list(): Json_name_and_value_listContext | null {
        return this.getRuleContext(0, Json_name_and_value_listContext);
    }
    public json_object_constructor_null_clause(): Json_object_constructor_null_clauseContext | null {
        return this.getRuleContext(0, Json_object_constructor_null_clauseContext);
    }
    public json_key_uniqueness_constraint(): Json_key_uniqueness_constraintContext | null {
        return this.getRuleContext(0, Json_key_uniqueness_constraintContext);
    }
    public json_returning_clause(): Json_returning_clauseContext | null {
        return this.getRuleContext(0, Json_returning_clauseContext);
    }
    public JSON_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_ARRAY, 0);
    }
    public json_value_expr_list(): Json_value_expr_listContext | null {
        return this.getRuleContext(0, Json_value_expr_listContext);
    }
    public select_no_parens(): Select_no_parensContext | null {
        return this.getRuleContext(0, Select_no_parensContext);
    }
    public json_array_constructor_null_clause(): Json_array_constructor_null_clauseContext | null {
        return this.getRuleContext(0, Json_array_constructor_null_clauseContext);
    }
    public json_format_clause(): Json_format_clauseContext | null {
        return this.getRuleContext(0, Json_format_clauseContext);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON, 0);
    }
    public json_value_expr(): Json_value_exprContext | null {
        return this.getRuleContext(0, Json_value_exprContext);
    }
    public JSON_SCALAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_SCALAR, 0);
    }
    public JSON_SERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_SERIALIZE, 0);
    }
    public MERGE_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MERGE_ACTION, 0);
    }
    public JSON_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_QUERY, 0);
    }
    public json_wrapper_behavior(): Json_wrapper_behaviorContext | null {
        return this.getRuleContext(0, Json_wrapper_behaviorContext);
    }
    public json_passing_clause(): Json_passing_clauseContext | null {
        return this.getRuleContext(0, Json_passing_clauseContext);
    }
    public json_quotes_clause(): Json_quotes_clauseContext | null {
        return this.getRuleContext(0, Json_quotes_clauseContext);
    }
    public json_behavior_clause(): Json_behavior_clauseContext | null {
        return this.getRuleContext(0, Json_behavior_clauseContext);
    }
    public JSON_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_EXISTS, 0);
    }
    public json_on_error_clause(): Json_on_error_clauseContext | null {
        return this.getRuleContext(0, Json_on_error_clauseContext);
    }
    public JSON_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_VALUE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_expr_common_subexpr;
    }
}


export class Xml_root_versionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VERSION_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.VERSION_P, 0)!;
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_root_version;
    }
}


export class Xml_root_standalone_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COMMA, 0)!;
    }
    public STANDALONE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.STANDALONE_P, 0)!;
    }
    public YES_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.YES_P, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_root_standalone_;
    }
}


export class Xml_attributesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public XMLATTRIBUTES(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.XMLATTRIBUTES, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public xml_attribute_list(): Xml_attribute_listContext {
        return this.getRuleContext(0, Xml_attribute_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_attributes;
    }
}


export class Xml_attribute_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public xml_attribute_el(): Xml_attribute_elContext[];
    public xml_attribute_el(i: number): Xml_attribute_elContext | null;
    public xml_attribute_el(i?: number): Xml_attribute_elContext[] | Xml_attribute_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_attribute_elContext);
        }

        return this.getRuleContext(i, Xml_attribute_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_attribute_list;
    }
}


export class Xml_attribute_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_attribute_el;
    }
}


export class Document_or_contentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOCUMENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
    }
    public CONTENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONTENT_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_document_or_content;
    }
}


export class Xml_whitespace_optionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRESERVE, 0);
    }
    public WHITESPACE_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHITESPACE_P, 0)!;
    }
    public STRIP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRIP_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_whitespace_option;
    }
}


export class Xmlexists_argumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PASSING, 0)!;
    }
    public c_expr(): C_exprContext {
        return this.getRuleContext(0, C_exprContext)!;
    }
    public xml_passing_mech(): Xml_passing_mechContext[];
    public xml_passing_mech(i: number): Xml_passing_mechContext | null;
    public xml_passing_mech(i?: number): Xml_passing_mechContext[] | Xml_passing_mechContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Xml_passing_mechContext);
        }

        return this.getRuleContext(i, Xml_passing_mechContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xmlexists_argument;
    }
}


export class Xml_passing_mechContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REF, 0);
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xml_passing_mech;
    }
}


export class Within_group_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHIN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WITHIN, 0)!;
    }
    public GROUP_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.GROUP_P, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public sort_clause(): Sort_clauseContext {
        return this.getRuleContext(0, Sort_clauseContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_within_group_clause;
    }
}


export class Filter_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILTER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FILTER, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHERE, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_filter_clause;
    }
}


export class Window_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WINDOW, 0)!;
    }
    public window_definition_list(): Window_definition_listContext {
        return this.getRuleContext(0, Window_definition_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_window_clause;
    }
}


export class Window_definition_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public window_definition(): Window_definitionContext[];
    public window_definition(i: number): Window_definitionContext | null;
    public window_definition(i?: number): Window_definitionContext[] | Window_definitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Window_definitionContext);
        }

        return this.getRuleContext(i, Window_definitionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_window_definition_list;
    }
}


export class Window_definitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public window_specification(): Window_specificationContext {
        return this.getRuleContext(0, Window_specificationContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_window_definition;
    }
}


export class Over_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OVER, 0)!;
    }
    public window_specification(): Window_specificationContext | null {
        return this.getRuleContext(0, Window_specificationContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_over_clause;
    }
}


export class Window_specificationContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public existing_window_name_(): Existing_window_name_Context | null {
        return this.getRuleContext(0, Existing_window_name_Context);
    }
    public partition_clause_(): Partition_clause_Context | null {
        return this.getRuleContext(0, Partition_clause_Context);
    }
    public sort_clause_(): Sort_clause_Context | null {
        return this.getRuleContext(0, Sort_clause_Context);
    }
    public frame_clause_(): Frame_clause_Context | null {
        return this.getRuleContext(0, Frame_clause_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_window_specification;
    }
}


export class Existing_window_name_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_existing_window_name_;
    }
}


export class Partition_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_partition_clause_;
    }
}


export class Frame_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RANGE, 0);
    }
    public frame_extent(): Frame_extentContext {
        return this.getRuleContext(0, Frame_extentContext)!;
    }
    public window_exclusion_clause_(): Window_exclusion_clause_Context | null {
        return this.getRuleContext(0, Window_exclusion_clause_Context);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROWS, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUPS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_frame_clause_;
    }
}


export class Frame_extentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public frame_bound(): Frame_boundContext[];
    public frame_bound(i: number): Frame_boundContext | null;
    public frame_bound(i?: number): Frame_boundContext[] | Frame_boundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Frame_boundContext);
        }

        return this.getRuleContext(i, Frame_boundContext);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BETWEEN, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AND, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_frame_extent;
    }
}


export class Frame_boundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNBOUNDED, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOLLOWING, 0);
    }
    public CURRENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_P, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_frame_bound;
    }
}


export class Window_exclusion_clause_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXCLUDE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.EXCLUDE, 0)!;
    }
    public CURRENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_P, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public GROUP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUP_P, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIES, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OTHERS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_window_exclusion_clause_;
    }
}


export class RowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_row;
    }
}


export class Explicit_rowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ROW, 0)!;
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_explicit_row;
    }
}


export class Implicit_rowContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.COMMA, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_implicit_row;
    }
}


export class Sub_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANY, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SOME, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_sub_type;
    }
}


export class All_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.Operator, 0);
    }
    public mathop(): MathopContext | null {
        return this.getRuleContext(0, MathopContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_all_op;
    }
}


export class MathopContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUS, 0);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PERCENT, 0);
    }
    public CARET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CARET, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUAL, 0);
    }
    public LESS_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LESS_EQUALS, 0);
    }
    public GREATER_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GREATER_EQUALS, 0);
    }
    public NOT_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT_EQUALS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_mathop;
    }
}


export class Qual_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Operator(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.Operator, 0);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_qual_op;
    }
}


export class Qual_all_opContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public all_op(): All_opContext | null {
        return this.getRuleContext(0, All_opContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_qual_all_op;
    }
}


export class Subquery_OpContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public all_op(): All_opContext | null {
        return this.getRuleContext(0, All_opContext);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public any_operator(): Any_operatorContext | null {
        return this.getRuleContext(0, Any_operatorContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIKE, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ILIKE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_subquery_Op;
    }
}


export class Expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext[];
    public a_expr(i: number): A_exprContext | null;
    public a_expr(i?: number): A_exprContext[] | A_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_exprContext);
        }

        return this.getRuleContext(i, A_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_expr_list;
    }
}


export class Func_arg_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public func_arg_expr(): Func_arg_exprContext[];
    public func_arg_expr(i: number): Func_arg_exprContext | null;
    public func_arg_expr(i?: number): Func_arg_exprContext[] | Func_arg_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Func_arg_exprContext);
        }

        return this.getRuleContext(i, Func_arg_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_arg_list;
    }
}


export class Func_arg_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public param_name(): Param_nameContext | null {
        return this.getRuleContext(0, Param_nameContext);
    }
    public COLON_EQUALS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLON_EQUALS, 0);
    }
    public EQUALS_GREATER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EQUALS_GREATER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_arg_expr;
    }
}


export class Type_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public typename(): TypenameContext[];
    public typename(i: number): TypenameContext | null;
    public typename(i?: number): TypenameContext[] | TypenameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TypenameContext);
        }

        return this.getRuleContext(i, TypenameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_type_list;
    }
}


export class Array_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPEN_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_BRACKET, 0)!;
    }
    public CLOSE_BRACKET(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_BRACKET, 0)!;
    }
    public expr_list(): Expr_listContext | null {
        return this.getRuleContext(0, Expr_listContext);
    }
    public array_expr_list(): Array_expr_listContext | null {
        return this.getRuleContext(0, Array_expr_listContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_array_expr;
    }
}


export class Array_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public array_expr(): Array_exprContext[];
    public array_expr(i: number): Array_exprContext | null;
    public array_expr(i?: number): Array_exprContext[] | Array_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Array_exprContext);
        }

        return this.getRuleContext(i, Array_exprContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_array_expr_list;
    }
}


export class Extract_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public extract_arg(): Extract_argContext {
        return this.getRuleContext(0, Extract_argContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_extract_list;
    }
}


export class Extract_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public YEAR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.YEAR_P, 0);
    }
    public MONTH_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MONTH_P, 0);
    }
    public DAY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DAY_P, 0);
    }
    public HOUR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HOUR_P, 0);
    }
    public MINUTE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUTE_P, 0);
    }
    public SECOND_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SECOND_P, 0);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_extract_arg;
    }
}


export class Unicode_normal_formContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFC, 0);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFKC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFKD, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_unicode_normal_form;
    }
}


export class Overlay_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext[];
    public a_expr(i: number): A_exprContext | null;
    public a_expr(i?: number): A_exprContext[] | A_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_exprContext);
        }

        return this.getRuleContext(i, A_exprContext);
    }
    public PLACING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PLACING, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FROM, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_overlay_list;
    }
}


export class Position_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public b_expr(): B_exprContext[];
    public b_expr(i: number): B_exprContext | null;
    public b_expr(i?: number): B_exprContext[] | B_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(B_exprContext);
        }

        return this.getRuleContext(i, B_exprContext);
    }
    public IN_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.IN_P, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_position_list;
    }
}


export class Substr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext[];
    public a_expr(i: number): A_exprContext | null;
    public a_expr(i?: number): A_exprContext[] | A_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_exprContext);
        }

        return this.getRuleContext(i, A_exprContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SIMILAR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ESCAPE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_substr_list;
    }
}


export class Trim_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_trim_list;
    }
}


export class In_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_in_expr;
    }
    public override copyFrom(ctx: In_exprContext): void {
        super.copyFrom(ctx);
    }
}
export class In_expr_listContext extends In_exprContext {
    public constructor(ctx: In_exprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public expr_list(): Expr_listContext {
        return this.getRuleContext(0, Expr_listContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
}
export class In_expr_selectContext extends In_exprContext {
    public constructor(ctx: In_exprContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public select_with_parens(): Select_with_parensContext {
        return this.getRuleContext(0, Select_with_parensContext)!;
    }
}


export class Case_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CASE, 0)!;
    }
    public when_clause_list(): When_clause_listContext {
        return this.getRuleContext(0, When_clause_listContext)!;
    }
    public END_P(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.END_P, 0)!;
    }
    public case_arg(): Case_argContext | null {
        return this.getRuleContext(0, Case_argContext);
    }
    public case_default(): Case_defaultContext | null {
        return this.getRuleContext(0, Case_defaultContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_case_expr;
    }
}


export class When_clause_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public when_clause(): When_clauseContext[];
    public when_clause(i: number): When_clauseContext | null;
    public when_clause(i?: number): When_clauseContext[] | When_clauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(When_clauseContext);
        }

        return this.getRuleContext(i, When_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_when_clause_list;
    }
}


export class When_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.WHEN, 0)!;
    }
    public a_expr(): A_exprContext[];
    public a_expr(i: number): A_exprContext | null;
    public a_expr(i?: number): A_exprContext[] | A_exprContext | null {
        if (i === undefined) {
            return this.getRuleContexts(A_exprContext);
        }

        return this.getRuleContext(i, A_exprContext);
    }
    public THEN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.THEN, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_when_clause;
    }
}


export class Case_defaultContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ELSE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ELSE, 0)!;
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_case_default;
    }
}


export class Case_argContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_case_arg;
    }
}


export class ColumnrefContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_columnref;
    }
}


export class Indirection_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOT, 0);
    }
    public attr_name(): Attr_nameContext | null {
        return this.getRuleContext(0, Attr_nameContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STAR, 0);
    }
    public OPEN_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_BRACKET, 0);
    }
    public CLOSE_BRACKET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_BRACKET, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLON, 0);
    }
    public slice_bound_(): Slice_bound_Context[];
    public slice_bound_(i: number): Slice_bound_Context | null;
    public slice_bound_(i?: number): Slice_bound_Context[] | Slice_bound_Context | null {
        if (i === undefined) {
            return this.getRuleContexts(Slice_bound_Context);
        }

        return this.getRuleContext(i, Slice_bound_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_indirection_el;
    }
}


export class Slice_bound_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_slice_bound_;
    }
}


export class IndirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirection_el(): Indirection_elContext[];
    public indirection_el(i: number): Indirection_elContext | null;
    public indirection_el(i?: number): Indirection_elContext[] | Indirection_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Indirection_elContext);
        }

        return this.getRuleContext(i, Indirection_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_indirection;
    }
}


export class Opt_indirectionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public indirection_el(): Indirection_elContext[];
    public indirection_el(i: number): Indirection_elContext | null;
    public indirection_el(i?: number): Indirection_elContext[] | Indirection_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Indirection_elContext);
        }

        return this.getRuleContext(i, Indirection_elContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_opt_indirection;
    }
}


export class Json_passing_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PASSING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.PASSING, 0)!;
    }
    public json_arguments(): Json_argumentsContext {
        return this.getRuleContext(0, Json_argumentsContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_passing_clause;
    }
}


export class Json_argumentsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_argument(): Json_argumentContext {
        return this.getRuleContext(0, Json_argumentContext)!;
    }
    public json_arguments(): Json_argumentsContext | null {
        return this.getRuleContext(0, Json_argumentsContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_arguments;
    }
}


export class Json_argumentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_value_expr(): Json_value_exprContext {
        return this.getRuleContext(0, Json_value_exprContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.AS, 0)!;
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_argument;
    }
}


export class Json_wrapper_behaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRAPPER, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ARRAY, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONDITIONAL, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNCONDITIONAL, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_wrapper_behavior;
    }
}


export class Json_behaviorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public json_behavior_type(): Json_behavior_typeContext | null {
        return this.getRuleContext(0, Json_behavior_typeContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_behavior;
    }
}


export class Json_behavior_typeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ERROR, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public TRUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUE_P, 0);
    }
    public FALSE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FALSE_P, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNKNOWN, 0);
    }
    public EMPTY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EMPTY_P, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ARRAY, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_behavior_type;
    }
}


export class Json_behavior_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_behavior(): Json_behaviorContext[];
    public json_behavior(i: number): Json_behaviorContext | null;
    public json_behavior(i?: number): Json_behaviorContext[] | Json_behaviorContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Json_behaviorContext);
        }

        return this.getRuleContext(i, Json_behaviorContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.ON);
    	} else {
    		return this.getToken(PostgreSQLParser.ON, i);
    	}
    }
    public EMPTY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EMPTY_P, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ERROR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_behavior_clause;
    }
}


export class Json_on_error_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_behavior(): Json_behaviorContext {
        return this.getRuleContext(0, Json_behaviorContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public ERROR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ERROR, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_on_error_clause;
    }
}


export class Json_value_exprContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public json_format_clause(): Json_format_clauseContext | null {
        return this.getRuleContext(0, Json_format_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_value_expr;
    }
}


export class Json_format_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FORMAT_LA(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.FORMAT_LA, 0)!;
    }
    public JSON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.JSON, 0)!;
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCODING, 0);
    }
    public name(): NameContext | null {
        return this.getRuleContext(0, NameContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_format_clause;
    }
}


export class Json_quotes_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEEP, 0);
    }
    public QUOTES(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.QUOTES, 0)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCALAR, 0);
    }
    public STRING_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRING_P, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OMIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_quotes_clause;
    }
}


export class Json_returning_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RETURNING(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.RETURNING, 0)!;
    }
    public typename(): TypenameContext {
        return this.getRuleContext(0, TypenameContext)!;
    }
    public json_format_clause(): Json_format_clauseContext | null {
        return this.getRuleContext(0, Json_format_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_returning_clause;
    }
}


export class Json_predicate_type_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.JSON, 0)!;
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ARRAY, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCALAR, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_predicate_type_constraint;
    }
}


export class Json_key_uniqueness_constraintContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public UNIQUE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UNIQUE, 0)!;
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEYS, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_key_uniqueness_constraint;
    }
}


export class Json_name_and_value_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_name_and_value(): Json_name_and_valueContext {
        return this.getRuleContext(0, Json_name_and_valueContext)!;
    }
    public json_name_and_value_list(): Json_name_and_value_listContext | null {
        return this.getRuleContext(0, Json_name_and_value_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_name_and_value_list;
    }
}


export class Json_name_and_valueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public c_expr(): C_exprContext | null {
        return this.getRuleContext(0, C_exprContext);
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public json_value_expr(): Json_value_exprContext {
        return this.getRuleContext(0, Json_value_exprContext)!;
    }
    public a_expr(): A_exprContext | null {
        return this.getRuleContext(0, A_exprContext);
    }
    public COLON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLON, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_name_and_value;
    }
}


export class Json_object_constructor_null_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_P(): antlr.TerminalNode[];
    public NULL_P(i: number): antlr.TerminalNode | null;
    public NULL_P(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.NULL_P);
    	} else {
    		return this.getToken(PostgreSQLParser.NULL_P, i);
    	}
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABSENT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_object_constructor_null_clause;
    }
}


export class Json_array_constructor_null_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NULL_P(): antlr.TerminalNode[];
    public NULL_P(i: number): antlr.TerminalNode | null;
    public NULL_P(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.NULL_P);
    	} else {
    		return this.getToken(PostgreSQLParser.NULL_P, i);
    	}
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ON, 0)!;
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABSENT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_array_constructor_null_clause;
    }
}


export class Json_value_expr_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public json_value_expr(): Json_value_exprContext {
        return this.getRuleContext(0, Json_value_exprContext)!;
    }
    public json_value_expr_list(): Json_value_expr_listContext | null {
        return this.getRuleContext(0, Json_value_expr_listContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_value_expr_list;
    }
}


export class Json_aggregate_funcContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON_OBJECTAGG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0);
    }
    public OPEN_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0)!;
    }
    public json_name_and_value(): Json_name_and_valueContext | null {
        return this.getRuleContext(0, Json_name_and_valueContext);
    }
    public json_returning_clause(): Json_returning_clauseContext {
        return this.getRuleContext(0, Json_returning_clauseContext)!;
    }
    public CLOSE_PAREN(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0)!;
    }
    public json_object_constructor_null_clause(): Json_object_constructor_null_clauseContext | null {
        return this.getRuleContext(0, Json_object_constructor_null_clauseContext);
    }
    public json_key_uniqueness_constraint(): Json_key_uniqueness_constraintContext | null {
        return this.getRuleContext(0, Json_key_uniqueness_constraintContext);
    }
    public JSON_ARRAYAGG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0);
    }
    public json_value_expr(): Json_value_exprContext | null {
        return this.getRuleContext(0, Json_value_exprContext);
    }
    public json_array_aggregate_order_by_clause(): Json_array_aggregate_order_by_clauseContext | null {
        return this.getRuleContext(0, Json_array_aggregate_order_by_clauseContext);
    }
    public json_array_constructor_null_clause(): Json_array_constructor_null_clauseContext | null {
        return this.getRuleContext(0, Json_array_constructor_null_clauseContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_aggregate_func;
    }
}


export class Json_array_aggregate_order_by_clauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BY, 0)!;
    }
    public sortby_list(): Sortby_listContext {
        return this.getRuleContext(0, Sortby_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_json_array_aggregate_order_by_clause;
    }
}


export class Target_list_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public target_list(): Target_listContext {
        return this.getRuleContext(0, Target_listContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_target_list_;
    }
}


export class Target_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public target_el(): Target_elContext[];
    public target_el(i: number): Target_elContext | null;
    public target_el(i?: number): Target_elContext[] | Target_elContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Target_elContext);
        }

        return this.getRuleContext(i, Target_elContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_target_list;
    }
}


export class Target_elContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_target_el;
    }
    public override copyFrom(ctx: Target_elContext): void {
        super.copyFrom(ctx);
    }
}
export class Target_labelContext extends Target_elContext {
    public constructor(ctx: Target_elContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public a_expr(): A_exprContext {
        return this.getRuleContext(0, A_exprContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public colLabel(): ColLabelContext | null {
        return this.getRuleContext(0, ColLabelContext);
    }
    public bareColLabel(): BareColLabelContext | null {
        return this.getRuleContext(0, BareColLabelContext);
    }
}
export class Target_starContext extends Target_elContext {
    public constructor(ctx: Target_elContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public STAR(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.STAR, 0)!;
    }
}


export class Qualified_name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualified_name(): Qualified_nameContext[];
    public qualified_name(i: number): Qualified_nameContext | null;
    public qualified_name(i?: number): Qualified_nameContext[] | Qualified_nameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(Qualified_nameContext);
        }

        return this.getRuleContext(i, Qualified_nameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_qualified_name_list;
    }
}


export class Qualified_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_qualified_name;
    }
}


export class Name_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public name(): NameContext[];
    public name(i: number): NameContext | null;
    public name(i?: number): NameContext[] | NameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NameContext);
        }

        return this.getRuleContext(i, NameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_name_list;
    }
}


export class NameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_name;
    }
}


export class Attr_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colLabel(): ColLabelContext {
        return this.getRuleContext(0, ColLabelContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_attr_name;
    }
}


export class File_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sconst(): SconstContext {
        return this.getRuleContext(0, SconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_file_name;
    }
}


export class Func_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public type_function_name(): Type_function_nameContext | null {
        return this.getRuleContext(0, Type_function_nameContext);
    }
    public colid(): ColidContext | null {
        return this.getRuleContext(0, ColidContext);
    }
    public indirection(): IndirectionContext | null {
        return this.getRuleContext(0, IndirectionContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_func_name;
    }
}


export class AexprconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public iconst(): IconstContext | null {
        return this.getRuleContext(0, IconstContext);
    }
    public fconst(): FconstContext | null {
        return this.getRuleContext(0, FconstContext);
    }
    public sconst(): SconstContext | null {
        return this.getRuleContext(0, SconstContext);
    }
    public bconst(): BconstContext | null {
        return this.getRuleContext(0, BconstContext);
    }
    public xconst(): XconstContext | null {
        return this.getRuleContext(0, XconstContext);
    }
    public func_name(): Func_nameContext | null {
        return this.getRuleContext(0, Func_nameContext);
    }
    public OPEN_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPEN_PAREN, 0);
    }
    public func_arg_list(): Func_arg_listContext | null {
        return this.getRuleContext(0, Func_arg_listContext);
    }
    public CLOSE_PAREN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0);
    }
    public sort_clause_(): Sort_clause_Context | null {
        return this.getRuleContext(0, Sort_clause_Context);
    }
    public consttypename(): ConsttypenameContext | null {
        return this.getRuleContext(0, ConsttypenameContext);
    }
    public constinterval(): ConstintervalContext | null {
        return this.getRuleContext(0, ConstintervalContext);
    }
    public interval_(): Interval_Context | null {
        return this.getRuleContext(0, Interval_Context);
    }
    public TRUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUE_P, 0);
    }
    public FALSE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FALSE_P, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_aexprconst;
    }
}


export class XconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HexadecimalStringConstant(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.HexadecimalStringConstant, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_xconst;
    }
}


export class BconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BinaryStringConstant(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.BinaryStringConstant, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_bconst;
    }
}


export class FconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Numeric(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.Numeric, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_fconst;
    }
}


export class IconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Integral(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.Integral, 0)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_iconst;
    }
}


export class SconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public anysconst(): AnysconstContext {
        return this.getRuleContext(0, AnysconstContext)!;
    }
    public uescape_(): Uescape_Context | null {
        return this.getRuleContext(0, Uescape_Context);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_sconst;
    }
}


export class AnysconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public StringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.StringConstant, 0);
    }
    public UnicodeEscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0);
    }
    public BeginDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BeginDollarStringConstant, 0);
    }
    public EndDollarStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EndDollarStringConstant, 0);
    }
    public DollarText(): antlr.TerminalNode[];
    public DollarText(i: number): antlr.TerminalNode | null;
    public DollarText(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.DollarText);
    	} else {
    		return this.getToken(PostgreSQLParser.DollarText, i);
    	}
    }
    public EscapeStringConstant(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EscapeStringConstant, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_anysconst;
    }
}


export class Uescape_Context extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UESCAPE(): antlr.TerminalNode {
        return this.getToken(PostgreSQLParser.UESCAPE, 0)!;
    }
    public anysconst(): AnysconstContext {
        return this.getRuleContext(0, AnysconstContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_uescape_;
    }
}


export class SignediconstContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public iconst(): IconstContext {
        return this.getRuleContext(0, IconstContext)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_signediconst;
    }
}


export class RoleidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext {
        return this.getRuleContext(0, RolespecContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_roleid;
    }
}


export class RolespecContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public nonreservedword(): NonreservedwordContext | null {
        return this.getRuleContext(0, NonreservedwordContext);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_USER, 0);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION_USER, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_rolespec;
    }
}


export class Role_listContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public rolespec(): RolespecContext[];
    public rolespec(i: number): RolespecContext | null;
    public rolespec(i?: number): RolespecContext[] | RolespecContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RolespecContext);
        }

        return this.getRuleContext(i, RolespecContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(PostgreSQLParser.COMMA);
    	} else {
    		return this.getToken(PostgreSQLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_role_list;
    }
}


export class ColidContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_colid;
    }
}


export class Type_function_nameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_type_function_name;
    }
}


export class NonreservedwordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_nonreservedword;
    }
}


export class ColLabelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public unreserved_keyword(): Unreserved_keywordContext | null {
        return this.getRuleContext(0, Unreserved_keywordContext);
    }
    public col_name_keyword(): Col_name_keywordContext | null {
        return this.getRuleContext(0, Col_name_keywordContext);
    }
    public type_func_name_keyword(): Type_func_name_keywordContext | null {
        return this.getRuleContext(0, Type_func_name_keywordContext);
    }
    public reserved_keyword(): Reserved_keywordContext | null {
        return this.getRuleContext(0, Reserved_keywordContext);
    }
    public EXIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXIT, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_colLabel;
    }
}


export class BareColLabelContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public bare_label_keyword(): Bare_label_keywordContext | null {
        return this.getRuleContext(0, Bare_label_keywordContext);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_bareColLabel;
    }
}


export class Unreserved_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABORT_P, 0);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABSENT, 0);
    }
    public ABSOLUTE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABSOLUTE_P, 0);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ACCESS, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ACTION, 0);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADMIN, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AFTER, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALSO, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALTER, 0);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALWAYS, 0);
    }
    public ASENSITIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASENSITIVE, 0);
    }
    public ASSERTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASSERTION, 0);
    }
    public ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASSIGNMENT, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AT, 0);
    }
    public ATOMIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATOMIC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATTACH, 0);
    }
    public ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATTRIBUTE, 0);
    }
    public BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BACKWARD, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BEFORE, 0);
    }
    public BEGIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BEGIN_P, 0);
    }
    public BREADTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BREADTH, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BY, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CACHE, 0);
    }
    public CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CALL, 0);
    }
    public CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CALLED, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADE, 0);
    }
    public CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADED, 0);
    }
    public CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CATALOG, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHAIN, 0);
    }
    public CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHARACTERISTICS, 0);
    }
    public CHECKPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHECKPOINT, 0);
    }
    public CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLASS, 0);
    }
    public CLOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLUSTER, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMNS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMENT, 0);
    }
    public COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMENTS, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMIT, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMITTED, 0);
    }
    public COMPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMPRESSION, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONDITIONAL, 0);
    }
    public CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
    }
    public CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFLICT, 0);
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONNECTION, 0);
    }
    public CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINTS, 0);
    }
    public CONTENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONTENT_P, 0);
    }
    public CONTINUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONTINUE_P, 0);
    }
    public CONVERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
    }
    public COPY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COPY, 0);
    }
    public COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COST, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CSV, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CUBE, 0);
    }
    public CURRENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_P, 0);
    }
    public CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURSOR, 0);
    }
    public CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CYCLE, 0);
    }
    public DATA_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATA_P, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATABASE, 0);
    }
    public DAY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DAY_P, 0);
    }
    public DEALLOCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEALLOCATE, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DECLARE, 0);
    }
    public DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULTS, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRED, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFINER, 0);
    }
    public DELETE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELETE_P, 0);
    }
    public DELIMITER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELIMITER, 0);
    }
    public DELIMITERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELIMITERS, 0);
    }
    public DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEPENDS, 0);
    }
    public DEPTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEPTH, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DETACH, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0);
    }
    public DISABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISABLE_P, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISCARD, 0);
    }
    public DOCUMENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public DOUBLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOUBLE_P, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EACH, 0);
    }
    public EMPTY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EMPTY_P, 0);
    }
    public ENABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENABLE_P, 0);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCODING, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCRYPTED, 0);
    }
    public ENUM_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENUM_P, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ERROR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ESCAPE, 0);
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EVENT, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUDE, 0);
    }
    public EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUDING, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUSIVE, 0);
    }
    public EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXECUTE, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXPLAIN, 0);
    }
    public EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXPRESSION, 0);
    }
    public EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTENSION, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTERNAL, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FAMILY, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FILTER, 0);
    }
    public FINALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FINALIZE, 0);
    }
    public FIRST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FIRST_P, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOLLOWING, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORCE, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORMAT, 0);
    }
    public FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORWARD, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTIONS, 0);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GENERATED, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GLOBAL, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GRANTED, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUPS, 0);
    }
    public HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HANDLER, 0);
    }
    public HEADER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HEADER_P, 0);
    }
    public HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HOLD, 0);
    }
    public HOUR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HOUR_P, 0);
    }
    public IDENTITY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
    }
    public IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMUTABLE, 0);
    }
    public IMPLICIT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMPLICIT_P, 0);
    }
    public IMPORT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMPORT_P, 0);
    }
    public INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INCLUDE, 0);
    }
    public INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INCLUDING, 0);
    }
    public INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INCREMENT, 0);
    }
    public INDENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDENT, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEXES, 0);
    }
    public INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INHERIT, 0);
    }
    public INHERITS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INHERITS, 0);
    }
    public INLINE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INLINE_P, 0);
    }
    public INPUT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INPUT_P, 0);
    }
    public INSENSITIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSENSITIVE, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSERT, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSTEAD, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INVOKER, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ISOLATION, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEEP, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEY, 0);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEYS, 0);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LABEL, 0);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public LARGE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LARGE_P, 0);
    }
    public LAST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LAST_P, 0);
    }
    public LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEAKPROOF, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEVEL, 0);
    }
    public LISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LISTEN, 0);
    }
    public LOAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOAD, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCAL, 0);
    }
    public LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCATION, 0);
    }
    public LOCK_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCK_P, 0);
    }
    public LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCKED, 0);
    }
    public LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOGGED, 0);
    }
    public MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MAPPING, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATCH, 0);
    }
    public MATCHED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATCHED, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
    }
    public MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MAXVALUE, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MERGE, 0);
    }
    public METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.METHOD, 0);
    }
    public MINUTE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINUTE_P, 0);
    }
    public MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINVALUE, 0);
    }
    public MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MODE, 0);
    }
    public MONTH_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MONTH_P, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MOVE, 0);
    }
    public NAME_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NAME_P, 0);
    }
    public NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NAMES, 0);
    }
    public NESTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NESTED, 0);
    }
    public NEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NEW, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NEXT, 0);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFC, 0);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFKC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFKD, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public NORMALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NORMALIZED, 0);
    }
    public NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTHING, 0);
    }
    public NOTIFY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTIFY, 0);
    }
    public NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOWAIT, 0);
    }
    public NULLS_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULLS_P, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public OFF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OFF, 0);
    }
    public OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OIDS, 0);
    }
    public OLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OLD, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OMIT, 0);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTION, 0);
    }
    public OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTIONS, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ORDINALITY, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OTHERS, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVER, 0);
    }
    public OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERRIDING, 0);
    }
    public OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNED, 0);
    }
    public OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNER, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARALLEL, 0);
    }
    public PARAMETER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARAMETER, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARSER, 0);
    }
    public PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARTIAL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARTITION, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PASSING, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PASSWORD, 0);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PATH, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PERIOD, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLAN, 0);
    }
    public PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLANS, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.POLICY, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRECEDING, 0);
    }
    public PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PREPARE, 0);
    }
    public PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PREPARED, 0);
    }
    public PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRESERVE, 0);
    }
    public PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIOR, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIVILEGES, 0);
    }
    public PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURAL, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURES, 0);
    }
    public PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROGRAM, 0);
    }
    public PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0);
    }
    public QUOTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.QUOTE, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.QUOTES, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RANGE, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.READ, 0);
    }
    public REASSIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REASSIGN, 0);
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RECURSIVE, 0);
    }
    public REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REF, 0);
    }
    public REFERENCING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFERENCING, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFRESH, 0);
    }
    public REINDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REINDEX, 0);
    }
    public RELATIVE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RELATIVE_P, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RELEASE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RENAME, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPEATABLE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLACE, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLICA, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESET, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTART, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTRICT, 0);
    }
    public RETURN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RETURN, 0);
    }
    public RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RETURNS, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REVOKE, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLLBACK, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLLUP, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINES, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROWS, 0);
    }
    public RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RULE, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SAVEPOINT, 0);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCALAR, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMAS, 0);
    }
    public SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCROLL, 0);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public SECOND_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SECOND_P, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SECURITY, 0);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCES, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERIALIZABLE, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERVER, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SETS, 0);
    }
    public SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SHARE, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SHOW, 0);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SIMPLE, 0);
    }
    public SKIP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SKIP_P, 0);
    }
    public SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SNAPSHOT, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SOURCE, 0);
    }
    public SQL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SQL_P, 0);
    }
    public STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STABLE, 0);
    }
    public STANDALONE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STANDALONE_P, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.START, 0);
    }
    public STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATEMENT, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STDIN, 0);
    }
    public STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STDOUT, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORAGE, 0);
    }
    public STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORED, 0);
    }
    public STRICT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRICT_P, 0);
    }
    public STRING_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRING_P, 0);
    }
    public STRIP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRIP_P, 0);
    }
    public SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
    }
    public SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUPPORT, 0);
    }
    public SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSID, 0);
    }
    public SYSTEM_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLES, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public TARGET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TARGET, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMP, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPLATE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPORARY, 0);
    }
    public TEXT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEXT_P, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIES, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSFORM, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUNCATE, 0);
    }
    public TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUSTED, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public TYPES_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPES_P, 0);
    }
    public UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UESCAPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNBOUNDED, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNCOMMITTED, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNCONDITIONAL, 0);
    }
    public UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNENCRYPTED, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNKNOWN, 0);
    }
    public UNLISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNLISTEN, 0);
    }
    public UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNLOGGED, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNTIL, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public VACUUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VACUUM, 0);
    }
    public VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALID, 0);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALIDATE, 0);
    }
    public VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALIDATOR, 0);
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public VARYING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARYING, 0);
    }
    public VERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VERSION_P, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public VIEWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEWS, 0);
    }
    public VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VOLATILE, 0);
    }
    public WHITESPACE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WHITESPACE_P, 0);
    }
    public WITHIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHIN, 0);
    }
    public WITHOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITHOUT, 0);
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WORK, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRAPPER, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRITE, 0);
    }
    public XML_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XML_P, 0);
    }
    public YEAR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.YEAR_P, 0);
    }
    public YES_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.YES_P, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_unreserved_keyword;
    }
}


export class Col_name_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BETWEEN, 0);
    }
    public BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BIGINT, 0);
    }
    public BIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BIT, 0);
    }
    public BOOLEAN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BOOLEAN_P, 0);
    }
    public CHAR_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHAR_P, 0);
    }
    public character(): CharacterContext | null {
        return this.getRuleContext(0, CharacterContext);
    }
    public COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COALESCE, 0);
    }
    public DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEC, 0);
    }
    public DECIMAL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DECIMAL_P, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTRACT, 0);
    }
    public FLOAT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FLOAT_P, 0);
    }
    public GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GREATEST, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUPING, 0);
    }
    public INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INOUT, 0);
    }
    public INT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INT_P, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTEGER, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTERVAL, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON, 0);
    }
    public JSON_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_ARRAY, 0);
    }
    public JSON_ARRAYAGG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0);
    }
    public JSON_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_EXISTS, 0);
    }
    public JSON_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_OBJECT, 0);
    }
    public JSON_OBJECTAGG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0);
    }
    public JSON_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_QUERY, 0);
    }
    public JSON_SCALAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_SCALAR, 0);
    }
    public JSON_SERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_SERIALIZE, 0);
    }
    public JSON_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_TABLE, 0);
    }
    public JSON_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_VALUE, 0);
    }
    public LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEAST, 0);
    }
    public MERGE_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MERGE_ACTION, 0);
    }
    public NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NATIONAL, 0);
    }
    public NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NCHAR, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NONE, 0);
    }
    public NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NORMALIZE, 0);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULLIF, 0);
    }
    public NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NUMERIC, 0);
    }
    public OUT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OUT_P, 0);
    }
    public OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERLAY, 0);
    }
    public POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.POSITION, 0);
    }
    public PRECISION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRECISION, 0);
    }
    public REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REAL, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SETOF, 0);
    }
    public SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SMALLINT, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSTRING, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIMESTAMP, 0);
    }
    public TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TREAT, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIM, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUES, 0);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARCHAR, 0);
    }
    public XMLATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLATTRIBUTES, 0);
    }
    public XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLCONCAT, 0);
    }
    public XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLELEMENT, 0);
    }
    public XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLEXISTS, 0);
    }
    public XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLFOREST, 0);
    }
    public XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLNAMESPACES, 0);
    }
    public XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLPARSE, 0);
    }
    public XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLPI, 0);
    }
    public XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLROOT, 0);
    }
    public XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLSERIALIZE, 0);
    }
    public XMLTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLTABLE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_col_name_keyword;
    }
}


export class Type_func_name_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BINARY, 0);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONCURRENTLY, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CROSS, 0);
    }
    public CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FREEZE, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FULL, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ILIKE, 0);
    }
    public INNER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INNER_P, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IS, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ISNULL, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JOIN, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEFT, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIKE, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NATURAL, 0);
    }
    public NOTNULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTNULL, 0);
    }
    public OUTER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OUTER_P, 0);
    }
    public OVERLAPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERLAPS, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RIGHT, 0);
    }
    public SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SIMILAR, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESAMPLE, 0);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VERBOSE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_type_func_name_keyword;
    }
}


export class Reserved_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANALYSE, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANALYZE, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AND, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ARRAY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AS, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASC, 0);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASYMMETRIC, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BOTH, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CAST, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHECK, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMN, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CREATE, 0);
    }
    public CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_CATALOG, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_ROLE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_USER, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DESC, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISTINCT, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DO, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ELSE, 0);
    }
    public END_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.END_P, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCEPT, 0);
    }
    public FALSE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FALSE_P, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FETCH, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOR, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FROM, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GRANT, 0);
    }
    public GROUP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUP_P, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HAVING, 0);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INITIALLY, 0);
    }
    public INTERSECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTERSECT, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTO, 0);
    }
    public LATERAL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LATERAL_P, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEADING, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIMIT, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OFFSET, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ON, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ONLY, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ORDER, 0);
    }
    public PLACING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLACING, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIMARY, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFERENCES, 0);
    }
    public RETURNING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RETURNING, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SELECT, 0);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION_USER, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SOME, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYMMETRIC, 0);
    }
    public SYSTEM_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSTEM_USER, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.THEN, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TO, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRAILING, 0);
    }
    public TRUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUE_P, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNION, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNIQUE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARIADIC, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WHERE, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WINDOW, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WITH, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_reserved_keyword;
    }
}


export class Bare_label_keywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABORT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABORT_P, 0);
    }
    public ABSENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABSENT, 0);
    }
    public ABSOLUTE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ABSOLUTE_P, 0);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ACCESS, 0);
    }
    public ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ACTION, 0);
    }
    public ADD_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADD_P, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ADMIN, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AFTER, 0);
    }
    public AGGREGATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AGGREGATE, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALL, 0);
    }
    public ALSO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALSO, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALTER, 0);
    }
    public ALWAYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ALWAYS, 0);
    }
    public ANALYSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANALYSE, 0);
    }
    public ANALYZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANALYZE, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AND, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ANY, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASC, 0);
    }
    public ASENSITIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASENSITIVE, 0);
    }
    public ASSERTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASSERTION, 0);
    }
    public ASSIGNMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASSIGNMENT, 0);
    }
    public ASYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ASYMMETRIC, 0);
    }
    public AT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AT, 0);
    }
    public ATOMIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATOMIC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATTACH, 0);
    }
    public ATTRIBUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ATTRIBUTE, 0);
    }
    public AUTHORIZATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.AUTHORIZATION, 0);
    }
    public BACKWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BACKWARD, 0);
    }
    public BEFORE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BEFORE, 0);
    }
    public BEGIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BEGIN_P, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BETWEEN, 0);
    }
    public BIGINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BIGINT, 0);
    }
    public BINARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BINARY, 0);
    }
    public BIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BIT, 0);
    }
    public BOOLEAN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BOOLEAN_P, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BOTH, 0);
    }
    public BREADTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BREADTH, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.BY, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CACHE, 0);
    }
    public CALL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CALL, 0);
    }
    public CALLED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CALLED, 0);
    }
    public CASCADE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADE, 0);
    }
    public CASCADED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASCADED, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CAST, 0);
    }
    public CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CATALOG, 0);
    }
    public CHAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHAIN, 0);
    }
    public CHARACTERISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHARACTERISTICS, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHECK, 0);
    }
    public CHECKPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CHECKPOINT, 0);
    }
    public CLASS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLASS, 0);
    }
    public CLOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLOSE, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CLUSTER, 0);
    }
    public COALESCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COALESCE, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATE, 0);
    }
    public COLLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLLATION, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMN, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COLUMNS, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMENT, 0);
    }
    public COMMENTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMENTS, 0);
    }
    public COMMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMIT, 0);
    }
    public COMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMMITTED, 0);
    }
    public COMPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COMPRESSION, 0);
    }
    public CONCURRENTLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONCURRENTLY, 0);
    }
    public CONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONDITIONAL, 0);
    }
    public CONFIGURATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFIGURATION, 0);
    }
    public CONFLICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONFLICT, 0);
    }
    public CONNECTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONNECTION, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINT, 0);
    }
    public CONSTRAINTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONSTRAINTS, 0);
    }
    public CONTENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONTENT_P, 0);
    }
    public CONTINUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONTINUE_P, 0);
    }
    public CONVERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CONVERSION_P, 0);
    }
    public COPY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COPY, 0);
    }
    public COST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.COST, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CROSS, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CSV, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CUBE, 0);
    }
    public CURRENT_CATALOG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_CATALOG, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_DATE, 0);
    }
    public CURRENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_P, 0);
    }
    public CURRENT_ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_ROLE, 0);
    }
    public CURRENT_SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_SCHEMA, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURRENT_USER, 0);
    }
    public CURSOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CURSOR, 0);
    }
    public CYCLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.CYCLE, 0);
    }
    public DATA_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATA_P, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DATABASE, 0);
    }
    public DEALLOCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEALLOCATE, 0);
    }
    public DEC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEC, 0);
    }
    public DECIMAL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DECIMAL_P, 0);
    }
    public DECLARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DECLARE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULT, 0);
    }
    public DEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFAULTS, 0);
    }
    public DEFERRABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRABLE, 0);
    }
    public DEFERRED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFERRED, 0);
    }
    public DEFINER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEFINER, 0);
    }
    public DELETE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELETE_P, 0);
    }
    public DELIMITER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELIMITER, 0);
    }
    public DELIMITERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DELIMITERS, 0);
    }
    public DEPENDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEPENDS, 0);
    }
    public DEPTH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DEPTH, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DESC, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DETACH, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DICTIONARY, 0);
    }
    public DISABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISABLE_P, 0);
    }
    public DISCARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISCARD, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DISTINCT, 0);
    }
    public DO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DO, 0);
    }
    public DOCUMENT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOCUMENT_P, 0);
    }
    public DOMAIN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOMAIN_P, 0);
    }
    public DOUBLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DOUBLE_P, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.DROP, 0);
    }
    public EACH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EACH, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ELSE, 0);
    }
    public EMPTY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EMPTY_P, 0);
    }
    public ENABLE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENABLE_P, 0);
    }
    public ENCODING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCODING, 0);
    }
    public ENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENCRYPTED, 0);
    }
    public END_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.END_P, 0);
    }
    public ENUM_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ENUM_P, 0);
    }
    public ERROR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ERROR, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ESCAPE, 0);
    }
    public EVENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EVENT, 0);
    }
    public EXCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUDE, 0);
    }
    public EXCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUDING, 0);
    }
    public EXCLUSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXCLUSIVE, 0);
    }
    public EXECUTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXECUTE, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXISTS, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXPLAIN, 0);
    }
    public EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXPRESSION, 0);
    }
    public EXTENSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTENSION, 0);
    }
    public EXTERNAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTERNAL, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.EXTRACT, 0);
    }
    public FALSE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FALSE_P, 0);
    }
    public FAMILY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FAMILY, 0);
    }
    public FINALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FINALIZE, 0);
    }
    public FIRST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FIRST_P, 0);
    }
    public FLOAT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FLOAT_P, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOLLOWING, 0);
    }
    public FORCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORCE, 0);
    }
    public FOREIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FOREIGN, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORMAT, 0);
    }
    public FORWARD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FORWARD, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FREEZE, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FULL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTION, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.FUNCTIONS, 0);
    }
    public GENERATED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GENERATED, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GLOBAL, 0);
    }
    public GRANTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GRANTED, 0);
    }
    public GREATEST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GREATEST, 0);
    }
    public GROUPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUPING, 0);
    }
    public GROUPS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.GROUPS, 0);
    }
    public HANDLER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HANDLER, 0);
    }
    public HEADER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HEADER_P, 0);
    }
    public HOLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.HOLD, 0);
    }
    public IDENTITY_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IDENTITY_P, 0);
    }
    public IF_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IF_P, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ILIKE, 0);
    }
    public IMMEDIATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMEDIATE, 0);
    }
    public IMMUTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMMUTABLE, 0);
    }
    public IMPLICIT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMPLICIT_P, 0);
    }
    public IMPORT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IMPORT_P, 0);
    }
    public IN_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IN_P, 0);
    }
    public INCLUDE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INCLUDE, 0);
    }
    public INCLUDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INCLUDING, 0);
    }
    public INCREMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INCREMENT, 0);
    }
    public INDENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDENT, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEX, 0);
    }
    public INDEXES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INDEXES, 0);
    }
    public INHERIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INHERIT, 0);
    }
    public INHERITS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INHERITS, 0);
    }
    public INITIALLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INITIALLY, 0);
    }
    public INLINE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INLINE_P, 0);
    }
    public INNER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INNER_P, 0);
    }
    public INOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INOUT, 0);
    }
    public INPUT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INPUT_P, 0);
    }
    public INSENSITIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSENSITIVE, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSERT, 0);
    }
    public INSTEAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INSTEAD, 0);
    }
    public INT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INT_P, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTEGER, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INTERVAL, 0);
    }
    public INVOKER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.INVOKER, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.IS, 0);
    }
    public ISOLATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ISOLATION, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JOIN, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON, 0);
    }
    public JSON_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_ARRAY, 0);
    }
    public JSON_ARRAYAGG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_ARRAYAGG, 0);
    }
    public JSON_EXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_EXISTS, 0);
    }
    public JSON_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_OBJECT, 0);
    }
    public JSON_OBJECTAGG(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_OBJECTAGG, 0);
    }
    public JSON_QUERY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_QUERY, 0);
    }
    public JSON_SCALAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_SCALAR, 0);
    }
    public JSON_SERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_SERIALIZE, 0);
    }
    public JSON_TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_TABLE, 0);
    }
    public JSON_VALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.JSON_VALUE, 0);
    }
    public KEEP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEEP, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEY, 0);
    }
    public KEYS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.KEYS, 0);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LABEL, 0);
    }
    public LANGUAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LANGUAGE, 0);
    }
    public LARGE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LARGE_P, 0);
    }
    public LAST_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LAST_P, 0);
    }
    public LATERAL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LATERAL_P, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEADING, 0);
    }
    public LEAKPROOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEAKPROOF, 0);
    }
    public LEAST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEAST, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEFT, 0);
    }
    public LEVEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LEVEL, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LIKE, 0);
    }
    public LISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LISTEN, 0);
    }
    public LOAD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOAD, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCAL, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCALTIMESTAMP, 0);
    }
    public LOCATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCATION, 0);
    }
    public LOCK_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCK_P, 0);
    }
    public LOCKED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOCKED, 0);
    }
    public LOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.LOGGED, 0);
    }
    public MAPPING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MAPPING, 0);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATCH, 0);
    }
    public MATCHED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATCHED, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MATERIALIZED, 0);
    }
    public MAXVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MAXVALUE, 0);
    }
    public MERGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MERGE, 0);
    }
    public MERGE_ACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MERGE_ACTION, 0);
    }
    public METHOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.METHOD, 0);
    }
    public MINVALUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MINVALUE, 0);
    }
    public MODE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MODE, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.MOVE, 0);
    }
    public NAME_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NAME_P, 0);
    }
    public NAMES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NAMES, 0);
    }
    public NATIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NATIONAL, 0);
    }
    public NATURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NATURAL, 0);
    }
    public NCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NCHAR, 0);
    }
    public NESTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NESTED, 0);
    }
    public NEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NEW, 0);
    }
    public NEXT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NEXT, 0);
    }
    public NFC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFC, 0);
    }
    public NFD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFD, 0);
    }
    public NFKC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFKC, 0);
    }
    public NFKD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NFKD, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NO, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NONE, 0);
    }
    public NORMALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NORMALIZE, 0);
    }
    public NORMALIZED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NORMALIZED, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOT, 0);
    }
    public NOTHING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTHING, 0);
    }
    public NOTIFY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOTIFY, 0);
    }
    public NOWAIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NOWAIT, 0);
    }
    public NULL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULL_P, 0);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULLIF, 0);
    }
    public NULLS_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NULLS_P, 0);
    }
    public NUMERIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.NUMERIC, 0);
    }
    public OBJECT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OBJECT_P, 0);
    }
    public OF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OF, 0);
    }
    public OFF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OFF, 0);
    }
    public OIDS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OIDS, 0);
    }
    public OLD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OLD, 0);
    }
    public OMIT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OMIT, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ONLY, 0);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPERATOR, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTION, 0);
    }
    public OPTIONS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OPTIONS, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OR, 0);
    }
    public ORDINALITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ORDINALITY, 0);
    }
    public OTHERS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OTHERS, 0);
    }
    public OUT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OUT_P, 0);
    }
    public OUTER_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OUTER_P, 0);
    }
    public OVERLAY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERLAY, 0);
    }
    public OVERRIDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OVERRIDING, 0);
    }
    public OWNED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNED, 0);
    }
    public OWNER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.OWNER, 0);
    }
    public PARALLEL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARALLEL, 0);
    }
    public PARAMETER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARAMETER, 0);
    }
    public PARSER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARSER, 0);
    }
    public PARTIAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARTIAL, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PARTITION, 0);
    }
    public PASSING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PASSING, 0);
    }
    public PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PASSWORD, 0);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PATH, 0);
    }
    public PERIOD(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PERIOD, 0);
    }
    public PLACING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLACING, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLAN, 0);
    }
    public PLANS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLANS, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.POLICY, 0);
    }
    public POSITION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.POSITION, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRECEDING, 0);
    }
    public PREPARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PREPARE, 0);
    }
    public PREPARED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PREPARED, 0);
    }
    public PRESERVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRESERVE, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIMARY, 0);
    }
    public PRIOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIOR, 0);
    }
    public PRIVILEGES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PRIVILEGES, 0);
    }
    public PROCEDURAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURAL, 0);
    }
    public PROCEDURE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURE, 0);
    }
    public PROCEDURES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROCEDURES, 0);
    }
    public PROGRAM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PROGRAM, 0);
    }
    public PUBLICATION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PUBLICATION, 0);
    }
    public QUOTE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.QUOTE, 0);
    }
    public QUOTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.QUOTES, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RANGE, 0);
    }
    public READ(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.READ, 0);
    }
    public REAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REAL, 0);
    }
    public REASSIGN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REASSIGN, 0);
    }
    public RECURSIVE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RECURSIVE, 0);
    }
    public REF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REF, 0);
    }
    public REFERENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFERENCES, 0);
    }
    public REFERENCING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFERENCING, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REFRESH, 0);
    }
    public REINDEX(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REINDEX, 0);
    }
    public RELATIVE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RELATIVE_P, 0);
    }
    public RELEASE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RELEASE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RENAME, 0);
    }
    public REPEATABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPEATABLE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLACE, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REPLICA, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESET, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTART, 0);
    }
    public RESTRICT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RESTRICT, 0);
    }
    public RETURN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RETURN, 0);
    }
    public RETURNS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RETURNS, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.REVOKE, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RIGHT, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLE, 0);
    }
    public ROLLBACK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLLBACK, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROLLUP, 0);
    }
    public ROUTINE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINE, 0);
    }
    public ROUTINES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROUTINES, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ROWS, 0);
    }
    public RULE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.RULE, 0);
    }
    public SAVEPOINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SAVEPOINT, 0);
    }
    public SCALAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCALAR, 0);
    }
    public SCHEMA(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMA, 0);
    }
    public SCHEMAS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCHEMAS, 0);
    }
    public SCROLL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SCROLL, 0);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEARCH, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SECURITY, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SELECT, 0);
    }
    public SEQUENCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCE, 0);
    }
    public SEQUENCES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SEQUENCES, 0);
    }
    public SERIALIZABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERIALIZABLE, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SERVER, 0);
    }
    public SESSION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION, 0);
    }
    public SESSION_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SESSION_USER, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SET, 0);
    }
    public SETOF(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SETOF, 0);
    }
    public SETS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SETS, 0);
    }
    public SHARE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SHARE, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SHOW, 0);
    }
    public SIMILAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SIMILAR, 0);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SIMPLE, 0);
    }
    public SKIP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SKIP_P, 0);
    }
    public SMALLINT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SMALLINT, 0);
    }
    public SNAPSHOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SNAPSHOT, 0);
    }
    public SOME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SOME, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SOURCE, 0);
    }
    public SQL_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SQL_P, 0);
    }
    public STABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STABLE, 0);
    }
    public STANDALONE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STANDALONE_P, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.START, 0);
    }
    public STATEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATEMENT, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STATISTICS, 0);
    }
    public STDIN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STDIN, 0);
    }
    public STDOUT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STDOUT, 0);
    }
    public STORAGE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORAGE, 0);
    }
    public STORED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STORED, 0);
    }
    public STRICT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRICT_P, 0);
    }
    public STRING_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRING_P, 0);
    }
    public STRIP_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.STRIP_P, 0);
    }
    public SUBSCRIPTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSCRIPTION, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUBSTRING, 0);
    }
    public SUPPORT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SUPPORT, 0);
    }
    public SYMMETRIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYMMETRIC, 0);
    }
    public SYSID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSID, 0);
    }
    public SYSTEM_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSTEM_P, 0);
    }
    public SYSTEM_USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.SYSTEM_USER, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLES, 0);
    }
    public TABLESAMPLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESAMPLE, 0);
    }
    public TABLESPACE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TABLESPACE, 0);
    }
    public TARGET(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TARGET, 0);
    }
    public TEMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMP, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPLATE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEMPORARY, 0);
    }
    public TEXT_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TEXT_P, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIES, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TIMESTAMP, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRAILING, 0);
    }
    public TRANSACTION(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSACTION, 0);
    }
    public TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRANSFORM, 0);
    }
    public TREAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TREAT, 0);
    }
    public TRIGGER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIGGER, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRIM, 0);
    }
    public TRUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUE_P, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUNCATE, 0);
    }
    public TRUSTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TRUSTED, 0);
    }
    public TYPE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPE_P, 0);
    }
    public TYPES_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.TYPES_P, 0);
    }
    public UESCAPE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UESCAPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNBOUNDED, 0);
    }
    public UNCOMMITTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNCOMMITTED, 0);
    }
    public UNCONDITIONAL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNCONDITIONAL, 0);
    }
    public UNENCRYPTED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNENCRYPTED, 0);
    }
    public UNIQUE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNIQUE, 0);
    }
    public UNKNOWN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNKNOWN, 0);
    }
    public UNLISTEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNLISTEN, 0);
    }
    public UNLOGGED(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNLOGGED, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UNTIL, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UPDATE, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USER, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.USING, 0);
    }
    public VACUUM(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VACUUM, 0);
    }
    public VALID(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALID, 0);
    }
    public VALIDATE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALIDATE, 0);
    }
    public VALIDATOR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALIDATOR, 0);
    }
    public VALUE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUE_P, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VALUES, 0);
    }
    public VARCHAR(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARCHAR, 0);
    }
    public VARIADIC(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VARIADIC, 0);
    }
    public VERBOSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VERBOSE, 0);
    }
    public VERSION_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VERSION_P, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEW, 0);
    }
    public VIEWS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VIEWS, 0);
    }
    public VOLATILE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.VOLATILE, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WHEN, 0);
    }
    public WHITESPACE_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WHITESPACE_P, 0);
    }
    public WORK(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WORK, 0);
    }
    public WRAPPER(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRAPPER, 0);
    }
    public WRITE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.WRITE, 0);
    }
    public XML_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XML_P, 0);
    }
    public XMLATTRIBUTES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLATTRIBUTES, 0);
    }
    public XMLCONCAT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLCONCAT, 0);
    }
    public XMLELEMENT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLELEMENT, 0);
    }
    public XMLEXISTS(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLEXISTS, 0);
    }
    public XMLFOREST(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLFOREST, 0);
    }
    public XMLNAMESPACES(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLNAMESPACES, 0);
    }
    public XMLPARSE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLPARSE, 0);
    }
    public XMLPI(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLPI, 0);
    }
    public XMLROOT(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLROOT, 0);
    }
    public XMLSERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLSERIALIZE, 0);
    }
    public XMLTABLE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.XMLTABLE, 0);
    }
    public YES_P(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.YES_P, 0);
    }
    public ZONE(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.ZONE, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_bare_label_keyword;
    }
}


export class Any_identifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public colid(): ColidContext {
        return this.getRuleContext(0, ColidContext)!;
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_any_identifier;
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public Identifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.Identifier, 0);
    }
    public uescape_(): Uescape_Context | null {
        return this.getRuleContext(0, Uescape_Context);
    }
    public QuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.QuotedIdentifier, 0);
    }
    public UnicodeQuotedIdentifier(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0);
    }
    public PLSQLVARIABLENAME(): antlr.TerminalNode | null {
        return this.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0);
    }
    public override get ruleIndex(): number {
        return PostgreSQLParser.RULE_identifier;
    }
}
